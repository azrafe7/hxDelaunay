// Generated by Haxe 3.4.6
(function ($hx_exports, $global) { "use strict";
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	addRenderer: null
	,addWindow: null
	,registerModule: null
	,setPreloader: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
	this.__renderers = [];
	this.__windows = [];
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__application: null
	,__preloader: null
	,__renderers: null
	,__windows: null
	,addRenderer: function(renderer) {
		var f = $bind(this,this.render);
		var a1 = renderer;
		var tmp = function() {
			f(a1);
		};
		renderer.onRender.add(tmp);
		var f1 = $bind(this,this.onRenderContextLost);
		var a11 = renderer;
		var tmp1 = function() {
			f1(a11);
		};
		renderer.onContextLost.add(tmp1);
		var f2 = $bind(this,this.onRenderContextRestored);
		var a12 = renderer;
		var tmp2 = function(a2) {
			f2(a12,a2);
		};
		renderer.onContextRestored.add(tmp2);
		this.__renderers.push(renderer);
	}
	,addWindow: function(window) {
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		var tmp = function() {
			f(a1);
		};
		window.onActivate.add(tmp);
		var f1 = $bind(this,this.__onWindowClose);
		var a11 = window;
		var tmp1 = function() {
			f1(a11);
		};
		window.onClose.add(tmp1,false,-10000);
		var f2 = $bind(this,this.onWindowCreate);
		var a12 = window;
		var tmp2 = function() {
			f2(a12);
		};
		window.onCreate.add(tmp2);
		var f3 = $bind(this,this.onWindowDeactivate);
		var a13 = window;
		var tmp3 = function() {
			f3(a13);
		};
		window.onDeactivate.add(tmp3);
		var f4 = $bind(this,this.onWindowDropFile);
		var a14 = window;
		var tmp4 = function(a2) {
			f4(a14,a2);
		};
		window.onDropFile.add(tmp4);
		var f5 = $bind(this,this.onWindowEnter);
		var a15 = window;
		var tmp5 = function() {
			f5(a15);
		};
		window.onEnter.add(tmp5);
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		var tmp6 = function() {
			f6(a16);
		};
		window.onFocusIn.add(tmp6);
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		var tmp7 = function() {
			f7(a17);
		};
		window.onFocusOut.add(tmp7);
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		var tmp8 = function() {
			f8(a18);
		};
		window.onFullscreen.add(tmp8);
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		var tmp9 = function(a21,a3) {
			f9(a19,a21,a3);
		};
		window.onKeyDown.add(tmp9);
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		var tmp10 = function(a22,a31) {
			f10(a110,a22,a31);
		};
		window.onKeyUp.add(tmp10);
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		var tmp11 = function() {
			f11(a111);
		};
		window.onLeave.add(tmp11);
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		var tmp12 = function() {
			f12(a112);
		};
		window.onMinimize.add(tmp12);
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		var tmp13 = function(x,y,a23) {
			f13(a113,x,y,a23);
		};
		window.onMouseDown.add(tmp13);
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		var tmp14 = function(x1,y1) {
			f14(a114,x1,y1);
		};
		window.onMouseMove.add(tmp14);
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		var tmp15 = function(x2,y2) {
			f15(a115,x2,y2);
		};
		window.onMouseMoveRelative.add(tmp15);
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		var tmp16 = function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		};
		window.onMouseUp.add(tmp16);
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		var tmp17 = function(a25,a32) {
			f17(a117,a25,a32);
		};
		window.onMouseWheel.add(tmp17);
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		var tmp18 = function(x4,y4) {
			f18(a118,x4,y4);
		};
		window.onMove.add(tmp18);
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		var tmp19 = function(a26,a33) {
			f19(a119,a26,a33);
		};
		window.onResize.add(tmp19);
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		var tmp20 = function() {
			f20(a120);
		};
		window.onRestore.add(tmp20);
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		var tmp21 = function(a27,a34,a4) {
			f21(a121,a27,a34,a4);
		};
		window.onTextEdit.add(tmp21);
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		var tmp22 = function(a28) {
			f22(a122,a28);
		};
		window.onTextInput.add(tmp22);
		if(window.id > -1) {
			this.onWindowCreate(window);
		}
		this.__windows.push(window);
	}
	,registerModule: function(application) {
		this.__application = application;
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && this.__renderers.indexOf(renderer) > -1) {
			HxOverrides.remove(this.__renderers,renderer);
		}
	}
	,setPreloader: function(preloader) {
		if(this.__preloader != null) {
			this.__preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.__preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.__preloader = preloader;
		if(preloader == null || preloader.complete) {
			this.onPreloadComplete();
		} else {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		var tmp3 = function() {
			f3(a13);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var f = $bind(this,this.onJoystickAxisMove);
		var a1 = joystick;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		joystick.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onJoystickButtonDown);
		var a11 = joystick;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		joystick.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onJoystickButtonUp);
		var a12 = joystick;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		joystick.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onJoystickDisconnect);
		var a13 = joystick;
		var tmp3 = function() {
			f3(a13);
		};
		joystick.onDisconnect.add(tmp3);
		var f4 = $bind(this,this.onJoystickHatMove);
		var a14 = joystick;
		var tmp4 = function(a23,a31) {
			f4(a14,a23,a31);
		};
		joystick.onHatMove.add(tmp4);
		var f5 = $bind(this,this.onJoystickTrackballMove);
		var a15 = joystick;
		var tmp5 = function(a24,x,y) {
			f5(a15,a24,x,y);
		};
		joystick.onTrackballMove.add(tmp5);
	}
	,__onWindowClose: function(window) {
		this.onWindowClose(window);
		HxOverrides.remove(this.__windows,window);
	}
	,__class__: lime_app_Module
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 144:
			return 1073741907;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,create: function(config) {
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}
			
			if ('performance' in window == false) {
				window.performance = {};
			}
			
			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}
			
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		if(this.parent.__windows[0] != null) {
			this.parent.__windows[0].backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.__renderers[0] != null && this.parent.__renderers[0].context != null) {
				this.parent.__renderers[0].render();
				this.parent.__renderers[0].onRender.dispatch();
				if(!this.parent.__renderers[0].onRender.canceled) {
					this.parent.__renderers[0].flip();
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__windows[0].onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyDown.canceled) {
					event.preventDefault();
				}
			} else {
				this.parent.__windows[0].onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyUp.canceled) {
					event.preventDefault();
				}
			}
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "beforeunload":
				if(!event.defaultPrevented) {
					this.parent.__windows[0].onClose.dispatch();
					if(this.parent.__windows[0] != null && this.parent.__windows[0].onClose.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "blur":
				this.parent.__windows[0].onFocusOut.dispatch();
				this.parent.__windows[0].onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.__windows[0].onFocusIn.dispatch();
				this.parent.__windows[0].onActivate.dispatch();
				break;
			case "resize":
				this.parent.__windows[0].backend.handleResizeEvent(event);
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) {
			this.framePeriod = -1;
		} else if(value > 0) {
			this.framePeriod = 1000 / value;
		} else {
			this.framePeriod = 1000;
		}
		return value;
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) {
					var i1 = _g3++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) {
					var i2 = _g31++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i3 = _g32++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i4 = _g33++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.modules = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.registerModule(this);
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	config: null
	,modules: null
	,onUpdate: null
	,window: null
	,backend: null
	,windowByID: null
	,addModule: function(module) {
		module.registerModule(this);
		this.modules.push(module);
		if(this.__renderers.length > 0) {
			var _g = 0;
			var _g1 = this.__renderers;
			while(_g < _g1.length) {
				var renderer = _g1[_g];
				++_g;
				module.addRenderer(renderer);
			}
		}
		if(this.__windows.length > 0) {
			var _g2 = 0;
			var _g11 = this.__windows;
			while(_g2 < _g11.length) {
				var $window = _g11[_g2];
				++_g2;
				module.addWindow($window);
			}
		}
		module.setPreloader(this.__preloader);
	}
	,addRenderer: function(renderer) {
		lime_app_Module.prototype.addRenderer.call(this,renderer);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addRenderer(renderer);
		}
	}
	,createWindow: function(window) {
		lime_app_Module.prototype.addWindow.call(this,window);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addWindow(window);
		}
		if(window.renderer == null) {
			var renderer = new lime_graphics_Renderer(window);
			this.addRenderer(renderer);
		}
		window.create(this);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onModuleExit: function(code) {
		this.backend.exit();
	}
	,onWindowClose: function(window) {
		this.removeWindow(window);
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.__windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(window.renderer != null) {
				this.removeRenderer(window.renderer);
			}
			if(this.__windows[0] == window) {
				this.window = null;
			}
			if(this.__windows.length == 0) {
				lime_system_System.exit(0);
			}
		}
	}
	,setPreloader: function(preloader) {
		lime_app_Module.prototype.setPreloader.call(this,preloader);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.setPreloader(preloader);
		}
	}
	,__class__: lime_app_Application
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.main = function() {
	var projectName = "Demo";
	var config = { build : "44", company : "azrafe7", file : "Demo", fps : 60, name : "Demo", orientation : "", packageName : "lib.azrafe7.hxDelaunay", version : "1.0.0", windows : [{ allowHighDPI : false, alwaysOnTop : false, antialiasing : 0, background : 2236962, borderless : false, colorDepth : 16, depthBuffer : false, display : 0, fullscreen : false, hardware : true, height : 500, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, stencilBuffer : true, title : "Demo", vsync : false, width : 700, x : null, y : null}]};
	lime_system_System.__registerEntryPoint(projectName,ApplicationMain.create,config);
};
ApplicationMain.create = function(config) {
	var app = new openfl_display_Application();
	app.create(config);
	ManifestResources.init(config);
	var preloader = new openfl_display_Preloader(new openfl_display_DefaultPreloader());
	app.setPreloader(preloader);
	preloader.create(config);
	var a1 = app.__windows[0].stage;
	var tmp = function() {
		ApplicationMain.start(a1);
	};
	preloader.onComplete.add(tmp);
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraries;
	while(_g < _g1.length) {
		var library = _g1[_g];
		++_g;
		preloader.addLibrary(library);
	}
	var _g2 = 0;
	var _g11 = ManifestResources.preloadLibraryNames;
	while(_g2 < _g11.length) {
		var name = _g11[_g2];
		++_g2;
		preloader.addLibraryName(name);
	}
	preloader.load();
	var result = app.exec();
};
ApplicationMain.start = function(stage) {
	try {
		var current = stage.getChildAt(0);
		if(current == null || !js_Boot.__instanceof(current,openfl_display_DisplayObjectContainer)) {
			current = new openfl_display_MovieClip();
			stage.addChild(current);
		}
		new DocumentClass(current);
		stage.dispatchEvent(new openfl_events_Event("resize",false,false));
		if(stage.window.__fullscreen) {
			stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		stage.__handleError(e);
	}
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		var _this = this.__eventMap;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			var _this1 = this.__eventMap;
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,list);
			} else {
				_this1.h[type] = list;
			}
			var _this2 = this.__iterators;
			var value = [iterator];
			if(__map_reserved[type] != null) {
				_this2.setReserved(type,value);
			} else {
				_this2.h[type] = value;
			}
		} else {
			var _this3 = this.__eventMap;
			var list1 = __map_reserved[type] != null ? _this3.getReserved(type) : _this3.h[type];
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(list1[i].match(listener,useCapture)) {
					return;
				}
			}
			var _this4 = this.__iterators;
			var iterators = __map_reserved[type] != null ? _this4.getReserved(type) : _this4.h[type];
			var _g2 = 0;
			while(_g2 < iterators.length) {
				var iterator1 = iterators[_g2];
				++_g2;
				if(iterator1.active) {
					iterator1.copy();
				}
			}
			this.__addListenerByPriority(list1,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		var _this = this.__eventMap;
		if(__map_reserved[type] != null) {
			return _this.existsReserved(type);
		} else {
			return _this.h.hasOwnProperty(type);
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(list == null) {
			return;
		}
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			this.__eventMap.remove(type);
			this.__iterators.remove(type);
		}
		var _this2 = this.__eventMap;
		if(!new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys()).hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var index = 0;
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.reset(list);
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1 == null) {
				continue;
			}
			if(listener1.useCapture == capture) {
				listener1.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		}
		return true;
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g1 = 0;
		var _g = numElements;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__isMask: null
	,__renderable: null
	,__transform: null
	,__worldAlpha: null
	,__worldTransform: null
	,__getBounds: null
	,__renderCanvas: null
	,__renderGL: null
	,__updateChildren: null
	,__updateTransforms: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_IntVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_FloatVector(length,fixed),array);
};
openfl__$Vector_Vector_$Impl_$.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_AbstractVector(new openfl__$Vector_ObjectVector(length,fixed),array);
};
var lime_utils_ObjectPool = function(create,clean,size) {
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
};
$hxClasses["lime.utils.ObjectPool"] = lime_utils_ObjectPool;
lime_utils_ObjectPool.__name__ = ["lime","utils","ObjectPool"];
lime_utils_ObjectPool.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,clean: function(object) {
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,__class__: haxe_IMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	if(openfl_display_DisplayObject.__initStage != null) {
		this.stage = openfl_display_DisplayObject.__initStage;
		openfl_display_DisplayObject.__initStage = null;
	}
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldVisible = true;
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheBitmap: null
	,__cacheBitmapBackground: null
	,__cacheBitmapColorTransform: null
	,__cacheBitmapData: null
	,__cacheBitmapRender: null
	,__cairo: null
	,__children: null
	,__filters: null
	,__graphics: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__maskTarget: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldBlendMode: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldTransformInvalid: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
				openfl_display_DisplayObject.__broadcastEvents.set(type,[]);
			}
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.get(type);
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(js_Boot.__instanceof(event,openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this1 = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this1.b + mouseEvent.localY * _this1.d + _this1.ty;
		} else if(js_Boot.__instanceof(event,openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this2 = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this2.a + touchEvent.localY * _this2.c + _this2.tx;
			var _this3 = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this3.b + touchEvent.localY * _this3.d + _this3.ty;
		}
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix;
		var usingTemp = false;
		if(targetCoordinateSpace != null) {
			matrix = this.__getWorldTransform().clone();
			matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
		} else {
			usingTemp = true;
			matrix = openfl_geom_Matrix.__pool.get();
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		if(usingTemp) {
			openfl_geom_Matrix.__pool.release(matrix);
		}
		return bounds;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
					HxOverrides.remove(openfl_display_DisplayObject.__broadcastEvents.get(type),this);
				}
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) {
			event.target = this;
		}
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) {
				this.parent.__dispatch(event);
			} else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.data.set(i,parent);
					parent = parent.parent;
					++i;
				}
				var _g1 = 0;
				var _g = i;
				while(_g1 < _g) {
					var j = _g1++;
					stack.data.get(i - j - 1).__dispatch(event);
				}
				openfl_display_DisplayObject.__tempStack.release(stack);
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getBounds(rect,matrix);
		if(this.__filters != null && this.__filters.length > 0) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		var transformDirty = this.__transformDirty || this.__worldTransformInvalid;
		if(transformDirty) {
			var list = [];
			var current = this;
			if(this.parent == null) {
				this.__update(true,false);
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current == null) {
						break;
					}
				}
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
				current.__worldTransformInvalid = false;
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				global.x = -_this.tx;
				global.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
				global.y = 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
				global.x = px;
			}
		} else {
			var _this1 = this.__renderTransform;
			var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
			local.x = norm1 == 0 ? -_this1.tx : 1.0 / norm1 * (_this1.c * (_this1.ty - global.y) + _this1.d * (global.x - _this1.tx));
			var _this2 = this.__renderTransform;
			var norm2 = _this2.a * _this2.d - _this2.b * _this2.c;
			local.y = norm2 == 0 ? -_this2.ty : 1.0 / norm2 * (_this2.a * (global.y - _this2.ty) + _this2.b * (_this2.tx - global.x));
		}
		return local;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(this.get_mask() == null || this.get_mask().get_width() > 0 && this.get_mask().get_height() > 0) {
			this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
			if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
				var bitmap = this.__cacheBitmap;
				if(!(!bitmap.__renderable || bitmap.__worldAlpha <= 0)) {
					var context = renderSession.context;
					if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
						renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
						renderSession.maskManager.pushObject(bitmap,false);
						lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
						context.globalAlpha = bitmap.__worldAlpha;
						var transform = bitmap.__renderTransform;
						var scrollRect = bitmap.__scrollRect;
						if(renderSession.roundPixels) {
							context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
						} else {
							context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
						}
						if(!renderSession.allowSmoothing || !bitmap.smoothing) {
							context.mozImageSmoothingEnabled = false;
							context.msImageSmoothingEnabled = false;
							context.imageSmoothingEnabled = false;
						}
						if(scrollRect == null) {
							context.drawImage(bitmap.__bitmapData.image.get_src(),0,0);
						} else {
							context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
						}
						if(!renderSession.allowSmoothing || !bitmap.smoothing) {
							context.mozImageSmoothingEnabled = true;
							context.msImageSmoothingEnabled = true;
							context.imageSmoothingEnabled = true;
						}
						renderSession.maskManager.popObject(bitmap,false);
					}
				}
			} else if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(!(!this.__renderable || this.__worldAlpha <= 0)) {
					if(this.opaqueBackground != null && !this.__cacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
						renderSession.blendModeManager.setBlendMode(this.__worldBlendMode);
						renderSession.maskManager.pushObject(this);
						var context1 = renderSession.context;
						var transform1 = this.__renderTransform;
						if(renderSession.roundPixels) {
							context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
						} else {
							context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
						}
						var color = this.opaqueBackground;
						context1.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
						context1.fillRect(0,0,this.get_width(),this.get_height());
						renderSession.maskManager.popObject(this);
					}
					if(this.__graphics != null) {
						if(!(!this.__renderable || this.__worldAlpha <= 0)) {
							var graphics = this.__graphics;
							if(graphics != null) {
								openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
								var bounds = graphics.__bounds;
								var width = graphics.__width;
								var height = graphics.__height;
								if(graphics.__canvas != null) {
									var context2 = renderSession.context;
									var scrollRect1 = this.__scrollRect;
									if(width > 0 && height > 0 && (scrollRect1 == null || scrollRect1.width > 0 && scrollRect1.height > 0)) {
										renderSession.blendModeManager.setBlendMode(this.__worldBlendMode);
										renderSession.maskManager.pushObject(this);
										context2.globalAlpha = this.__worldAlpha;
										var transform2 = graphics.__worldTransform;
										if(renderSession.roundPixels) {
											context2.setTransform(transform2.a,transform2.b,transform2.c,transform2.d,transform2.tx | 0,transform2.ty | 0);
										} else {
											context2.setTransform(transform2.a,transform2.b,transform2.c,transform2.d,transform2.tx,transform2.ty);
										}
										if(renderSession.renderType == lime_graphics_RendererType.DOM) {
											var reverseScale = 1 / openfl__$internal_renderer_canvas_CanvasRenderer.scale;
											context2.scale(reverseScale,reverseScale);
										}
										context2.drawImage(graphics.__canvas,0,0);
										renderSession.maskManager.popObject(this);
									}
								}
							}
						}
					}
				}
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
		this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			this.__renderDOMClear(renderSession);
			this.__cacheBitmap.stage = this.stage;
			var bitmap = this.__cacheBitmap;
			if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				renderSession.maskManager.pushObject(bitmap);
				if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
				}
				renderSession.maskManager.popObject(bitmap);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderSession);
			}
		} else {
			var tmp = this.opaqueBackground != null && !this.__cacheBitmapRender && this.get_width() > 0 && this.get_height() > 0;
			var graphics = this.__graphics;
			if(this.stage != null && this.__worldVisible && this.__renderable && graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
				if(graphics.__dirty || this.__worldAlphaChanged || this.__canvas != graphics.__canvas) {
					if(graphics.__canvas != null) {
						if(this.__canvas != graphics.__canvas) {
							if(this.__canvas != null) {
								renderSession.element.removeChild(this.__canvas);
							}
							this.__canvas = graphics.__canvas;
							this.__context = graphics.__context;
							openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
						}
					} else {
						openfl__$internal_renderer_dom_DOMShape.clear(this,renderSession);
					}
				}
				if(this.__canvas != null) {
					renderSession.maskManager.pushObject(this);
					var cacheTransform = this.__renderTransform;
					this.__renderTransform = graphics.__worldTransform;
					if(graphics.__transformDirty) {
						graphics.__transformDirty = false;
						this.__renderTransformChanged = true;
					}
					openfl__$internal_renderer_dom_DOMRenderer.updateClip(this,renderSession);
					openfl__$internal_renderer_dom_DOMRenderer.applyStyle(this,renderSession,true,true,true);
					this.__renderTransform = cacheTransform;
					renderSession.maskManager.popObject(this);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(this,renderSession);
			}
		}
	}
	,__renderDOMClear: function(renderSession) {
		openfl__$internal_renderer_dom_DOMDisplayObject.clear(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.render(this.__cacheBitmap,renderSession);
		} else if(!(this.opaqueBackground == null && this.__graphics == null)) {
			if(!(!this.__renderable || this.__worldAlpha <= 0)) {
				if(this.opaqueBackground != null && !this.__cacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
					renderSession.blendModeManager.setBlendMode(this.__worldBlendMode);
					renderSession.maskManager.pushObject(this);
					var gl = renderSession.gl;
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,this.get_width(),this.get_height());
					renderSession.maskManager.pushRect(rect,this.__renderTransform);
					var color = this.opaqueBackground;
					gl.__context.clearColor((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1);
					gl.__context.clear(gl.COLOR_BUFFER_BIT);
					renderSession.maskManager.popRect();
					renderSession.maskManager.popObject(this);
					openfl_geom_Rectangle.__pool.release(rect);
				}
				if(this.__graphics != null) {
					if(!(!this.__renderable || this.__worldAlpha <= 0)) {
						var graphics = this.__graphics;
						if(graphics != null) {
							openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
							var bounds = graphics.__bounds;
							if(graphics.__bitmap != null && graphics.__visible) {
								var renderer = renderSession.renderer;
								var gl1 = renderSession.gl;
								renderSession.blendModeManager.setBlendMode(this.__worldBlendMode);
								renderSession.maskManager.pushObject(this);
								var shader = renderSession.filterManager.pushObject(this);
								renderSession.shaderManager.setShader(shader);
								shader.get_data().uImage0.input = graphics.__bitmap;
								shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
								shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
								var useColorTransform = !this.__worldColorTransform.__isDefault();
								if(shader.get_data().uColorTransform.value == null) {
									shader.get_data().uColorTransform.value = [];
								}
								shader.get_data().uColorTransform.value[0] = useColorTransform;
								renderSession.shaderManager.updateShader(shader);
								var target = gl1.ARRAY_BUFFER;
								var buffer = graphics.__bitmap.getBuffer(gl1,this.__worldAlpha,this.__worldColorTransform);
								gl1.__context.bindBuffer(target,buffer);
								var index = shader.get_data().aPosition.index;
								var type = gl1.FLOAT;
								var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
								gl1.__context.vertexAttribPointer(index,3,type,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
								var index1 = shader.get_data().aTexCoord.index;
								var type1 = gl1.FLOAT;
								var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
								gl1.__context.vertexAttribPointer(index1,2,type1,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
								var index2 = shader.get_data().aAlpha.index;
								var type2 = gl1.FLOAT;
								var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
								gl1.__context.vertexAttribPointer(index2,1,type2,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset2));
								var index3 = shader.get_data().aColorMultipliers0.index;
								var type3 = gl1.FLOAT;
								var offset3 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(24);
								gl1.__context.vertexAttribPointer(index3,4,type3,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset3));
								var index4 = shader.get_data().aColorMultipliers1.index;
								var type4 = gl1.FLOAT;
								var offset4 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(40);
								gl1.__context.vertexAttribPointer(index4,4,type4,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset4));
								var index5 = shader.get_data().aColorMultipliers2.index;
								var type5 = gl1.FLOAT;
								var offset5 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(56);
								gl1.__context.vertexAttribPointer(index5,4,type5,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset5));
								var index6 = shader.get_data().aColorMultipliers3.index;
								var type6 = gl1.FLOAT;
								var offset6 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(72);
								gl1.__context.vertexAttribPointer(index6,4,type6,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset6));
								var index7 = shader.get_data().aColorOffsets.index;
								var type7 = gl1.FLOAT;
								var offset7 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(88);
								gl1.__context.vertexAttribPointer(index7,4,type7,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset7));
								gl1.__context.drawArrays(gl1.TRIANGLE_STRIP,0,4);
								renderSession.filterManager.popObject(this);
								renderSession.maskManager.popObject(this);
							}
						}
					}
				}
			}
		}
	}
	,__renderGLMask: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.renderMask(this.__cacheBitmap,renderSession);
		} else if(!(this.opaqueBackground == null && this.__graphics == null)) {
			if(this.opaqueBackground != null && !this.__cacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
				var gl = renderSession.gl;
			}
			if(this.__graphics != null) {
				var graphics = this.__graphics;
				if(graphics != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,this.__renderTransform);
					var bounds = graphics.__bounds;
					if(graphics.__bitmap != null) {
						var renderer = renderSession.renderer;
						var gl1 = renderSession.gl;
						var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
						renderSession.shaderManager.setShader(shader);
						shader.get_data().uImage0.input = graphics.__bitmap;
						shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
						shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
						renderSession.shaderManager.updateShader(shader);
						var target = gl1.ARRAY_BUFFER;
						var buffer = graphics.__bitmap.getBuffer(gl1,this.__worldAlpha,this.__worldColorTransform);
						gl1.__context.bindBuffer(target,buffer);
						var index = shader.get_data().aPosition.index;
						var type = gl1.FLOAT;
						var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
						gl1.__context.vertexAttribPointer(index,3,type,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
						var index1 = shader.get_data().aTexCoord.index;
						var type1 = gl1.FLOAT;
						var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
						gl1.__context.vertexAttribPointer(index1,2,type1,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
						gl1.__context.drawArrays(gl1.TRIANGLE_STRIP,0,4);
					}
				}
			}
		}
	}
	,__setParentRenderDirty: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(this.__isMask && renderParent == null) {
			renderParent = this.__maskTarget;
		}
		this.__renderable = this.get_visible() && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		if(maskGraphics != null) {
			this.__updateMask(maskGraphics);
		}
		if(!transformOnly) {
			if(openfl_display_DisplayObject.__supportDOM) {
				this.__renderTransformChanged = !this.__renderTransform.equals(this.__renderTransformCache);
				if(this.__renderTransformCache == null) {
					this.__renderTransformCache = this.__renderTransform.clone();
				} else {
					this.__renderTransformCache.copyFrom(this.__renderTransform);
				}
			}
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) {
				this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			}
			if(renderParent != null) {
				if(openfl_display_DisplayObject.__supportDOM) {
					var worldVisible = renderParent.__worldVisible && this.get_visible();
					this.__worldVisibleChanged = this.__worldVisible != worldVisible;
					this.__worldVisible = worldVisible;
					var worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
					this.__worldAlphaChanged = this.__worldAlpha != worldAlpha;
					this.__worldAlpha = worldAlpha;
				} else {
					this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				}
				this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				if(this.__blendMode == null || this.__blendMode == 10) {
					this.__worldBlendMode = renderParent.__blendMode;
				} else {
					this.__worldBlendMode = this.__blendMode;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__worldVisibleChanged = this.__worldVisible != this.get_visible();
					this.__worldVisible = this.get_visible();
					this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha();
				}
			}
		}
		if(updateChildren && this.get_mask() != null) {
			this.get_mask().__update(transformOnly,true,maskGraphics);
		}
	}
	,__updateCacheBitmap: function(renderSession,force) {
		if(this.__cacheBitmapRender) {
			return false;
		}
		if(this.get_cacheAsBitmap()) {
			var matrix = null;
			var rect = null;
			this.__update(false,true);
			var needRender = this.__cacheBitmap == null || this.__renderDirty && (force || this.__children != null && this.__children.length > 0 || this.__graphics != null && this.__graphics.__dirty) || this.opaqueBackground != this.__cacheBitmapBackground || !this.__cacheBitmapColorTransform.__equals(this.__worldColorTransform);
			var updateTransform = needRender || !this.__cacheBitmap.__worldTransform.equals(this.__worldTransform);
			var hasFilters = this.__filters != null && this.__filters.length > 0;
			if(hasFilters && !needRender) {
				var _g = 0;
				var _g1 = this.__filters;
				while(_g < _g1.length) {
					var filter = _g1[_g];
					++_g;
					if(filter.__renderDirty) {
						needRender = true;
						break;
					}
				}
			}
			var bitmapWidth = 0;
			var bitmapHeight = 0;
			if(updateTransform || needRender) {
				matrix = openfl_geom_Matrix.__pool.get();
				rect = openfl_geom_Rectangle.__pool.get();
				matrix.identity();
				this.__getFilterBounds(rect,this.__renderTransform);
				bitmapWidth = Math.ceil(rect.width);
				bitmapHeight = Math.ceil(rect.height);
				if(!needRender && this.__cacheBitmap != null && (bitmapWidth != this.__cacheBitmap.get_width() || bitmapHeight != this.__cacheBitmap.get_height())) {
					needRender = true;
				}
			}
			if(needRender) {
				this.__cacheBitmapBackground = this.opaqueBackground;
				var color = this.opaqueBackground != null ? -16777216 | this.opaqueBackground : 0;
				if(rect.width >= 0.5 && rect.height >= 0.5) {
					if(this.__cacheBitmap == null || bitmapWidth != this.__cacheBitmap.get_width() || bitmapHeight != this.__cacheBitmap.get_height()) {
						this.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,color);
						if(this.__cacheBitmap == null) {
							this.__cacheBitmap = new openfl_display_Bitmap();
						}
						this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
					} else {
						this.__cacheBitmapData.fillRect(this.__cacheBitmapData.rect,color);
					}
				} else {
					this.__cacheBitmap = null;
					this.__cacheBitmapData = null;
					return true;
				}
			}
			if(updateTransform || needRender) {
				this.__cacheBitmap.__worldTransform.copyFrom(this.__worldTransform);
				this.__cacheBitmap.__renderTransform.identity();
				this.__cacheBitmap.__renderTransform.tx = rect.x;
				this.__cacheBitmap.__renderTransform.ty = rect.y;
				matrix.concat(this.__renderTransform);
				matrix.tx -= Math.round(rect.x);
				matrix.ty -= Math.round(rect.y);
			}
			this.__cacheBitmap.smoothing = renderSession.allowSmoothing;
			this.__cacheBitmap.__renderable = this.__renderable;
			this.__cacheBitmap.__worldAlpha = this.__worldAlpha;
			this.__cacheBitmap.__worldBlendMode = this.__worldBlendMode;
			this.__cacheBitmap.__scrollRect = this.__scrollRect;
			this.__cacheBitmap.set_mask(this.__mask);
			if(needRender) {
				this.__cacheBitmapRender = true;
				this.__cacheBitmapData.__draw(this,matrix,null,null,null,renderSession.allowSmoothing);
				if(hasFilters) {
					var needSecondBitmapData = false;
					var needCopyOfOriginal = false;
					var _g2 = 0;
					var _g11 = this.__filters;
					while(_g2 < _g11.length) {
						var filter1 = _g11[_g2];
						++_g2;
						if(filter1.__needSecondBitmapData) {
							needSecondBitmapData = true;
						}
						if(filter1.__preserveObject) {
							needCopyOfOriginal = true;
						}
					}
					var bitmapData = this.__cacheBitmapData;
					var bitmapData2 = null;
					var bitmapData3 = null;
					if(needSecondBitmapData) {
						bitmapData2 = new openfl_display_BitmapData(bitmapData.width,bitmapData.height,true,0);
					} else {
						bitmapData2 = bitmapData;
					}
					if(needCopyOfOriginal) {
						bitmapData3 = new openfl_display_BitmapData(bitmapData.width,bitmapData.height,true,0);
					}
					var sourceRect = bitmapData.rect;
					var destPoint = new openfl_geom_Point();
					var cacheBitmap;
					var lastBitmap;
					var _g3 = 0;
					var _g12 = this.__filters;
					while(_g3 < _g12.length) {
						var filter2 = _g12[_g3];
						++_g3;
						if(filter2.__preserveObject) {
							bitmapData3.copyPixels(bitmapData,bitmapData.rect,destPoint);
						}
						lastBitmap = filter2.__applyFilter(bitmapData2,bitmapData,sourceRect,destPoint);
						if(filter2.__preserveObject) {
							lastBitmap.draw(bitmapData3,null,this.get_transform().get_colorTransform());
						}
						filter2.__renderDirty = false;
						if(needSecondBitmapData && lastBitmap == bitmapData2) {
							cacheBitmap = bitmapData;
							bitmapData = bitmapData2;
							bitmapData2 = cacheBitmap;
						}
					}
					this.__cacheBitmap.set_bitmapData(bitmapData);
				}
				this.__cacheBitmapRender = false;
				if(this.__cacheBitmapColorTransform == null) {
					this.__cacheBitmapColorTransform = new openfl_geom_ColorTransform();
				}
				this.__cacheBitmapColorTransform.__copyFrom(this.__worldColorTransform);
				if(!this.__cacheBitmapColorTransform.__isDefault()) {
					this.__cacheBitmapData.colorTransform(this.__cacheBitmapData.rect,this.__cacheBitmapColorTransform);
				}
			}
			if(updateTransform) {
				this.__update(false,true);
				openfl_geom_Matrix.__pool.release(matrix);
				openfl_geom_Rectangle.__pool.release(rect);
				return true;
			} else {
				return false;
			}
		} else if(this.__cacheBitmap != null) {
			if(renderSession.renderType == lime_graphics_RendererType.DOM) {
				this.__cacheBitmap.__renderDOMClear(renderSession);
			}
			this.__cacheBitmap = null;
			this.__cacheBitmapData = null;
			this.__cacheBitmapColorTransform = null;
			return true;
		}
		return false;
	}
	,__updateChildren: function(transformOnly) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		this.__renderable = this.get_visible() && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__worldAlpha = this.get_alpha();
		this.__worldBlendMode = this.get_blendMode();
		if(this.__transformDirty) {
			this.__transformDirty = false;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) {
				maskGraphics.__bounds = new openfl_geom_Rectangle();
			}
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		var parentTransform;
		if(!overrided && this.parent != null) {
			parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
		}
		if(!overrided && renderParent != null) {
			parentTransform = renderParent.__renderTransform;
			this.__renderTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__renderTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__renderTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__renderTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__renderTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__renderTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		if(value != this.__blendMode) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
		} else {
			this.__filters = null;
		}
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl__$internal_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value == this.__mask) {
			return value;
		}
		if(value != this.__mask) {
			this.__setTransformDirty();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			var _this = this.__mask;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) {
			this.__cacheBitmap.set_mask(value);
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) {
					this.__setTransformDirty();
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) {
					this.__setTransformDirty();
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) {
					this.__setTransformDirty();
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) {
					this.__setTransformDirty();
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,__tabEnabled: null
	,__tabIndex: null
	,__allowMouseFocus: function() {
		return this.get_tabEnabled();
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: openfl_display_InteractiveObject
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,__removedChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw new js__$Boot_HaxeError(error);
		} else if(child.stage == child) {
			var error1 = new openfl_errors_ArgumentError("Error #3783: A Stage object cannot be added as the child of another object.");
			error1.errorID = 3783;
			throw new js__$Boot_HaxeError(error1);
		}
		if(index > this.__children.length || index < 0) {
			throw new js__$Boot_HaxeError("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				this.__setStageReference(this.stage);
			}
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchWithCapture(event);
			if(addedToStage) {
				var event1 = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
			}
		}
		return child;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("removed",true);
			child.__dispatchWithCapture(event);
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				var event1 = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.data.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) {
					break;
				}
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) {
				continue;
			}
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			child.__getFilterBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive && stack.length > length) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.get_mask() != null && (this.get_mask().get_width() <= 0 || this.get_mask().get_height() <= 0)) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		if(renderSession.clearRenderDirty) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderCanvas(renderSession);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderCanvas(renderSession);
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.data.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(bounds);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__renderDOM: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		if(renderSession.clearRenderDirty) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderDOM(renderSession);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderDOM(renderSession);
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) {
				orphan.__renderDOM(renderSession);
			}
		}
		this.__removedChildren.data.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderDOMClear: function(renderSession) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOMClear(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.data.get_length()) {
			var orphan = _g11.data.get(_g2);
			++_g2;
			if(orphan.stage == null) {
				orphan.__renderDOMClear(renderSession);
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		if(this.__children.length > 0) {
			renderSession.maskManager.pushObject(this);
			renderSession.filterManager.pushObject(this);
			if(renderSession.clearRenderDirty) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__renderGL(renderSession);
					child.__renderDirty = false;
				}
				this.__renderDirty = false;
			} else {
				var _g2 = 0;
				var _g11 = this.__children;
				while(_g2 < _g11.length) {
					var child1 = _g11[_g2];
					++_g2;
					child1.__renderGL(renderSession);
				}
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.data.set_length(0);
		if(this.__children.length > 0) {
			renderSession.filterManager.popObject(this);
			renderSession.maskManager.popObject(this);
		}
	}
	,__renderGLMask: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderGLMask.call(this,renderSession);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			return;
		}
		if(renderSession.clearRenderDirty) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderGLMask(renderSession);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderGLMask(renderSession);
			}
		}
		var _g3 = 0;
		var _g12 = this.__removedChildren;
		while(_g3 < _g12.data.get_length()) {
			var orphan = _g12.data.get(_g3);
			++_g3;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.data.set_length(0);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	buttonMode: null
	,dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(!hitObject.get_visible() || this.__isMask) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
			return interactiveOnly;
		} else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && (!interactiveOnly || this.mouseEnabled)) {
				stack.push(hitObject);
			}
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.buttonMode;
		} else {
			return this.__tabEnabled;
		}
	}
	,__class__: openfl_display_Sprite
});
var Demo = function() {
	this.TEXT = "         hxDelaunay \n" + "    (ported by azrafe7)\n" + "\n" + "          TOGGLE:\n\n" + " 1  points        : |POINTS|\n" + " 2  regions       : |REGIONS|\n" + " 3  fill regions  : |FILL_REGIONS|\n" + " 4  triangles     : |TRIANGLES|\n" + " 5  fill tris     : |FILL_TRIANGLES|\n" + " 6  convex hull   : |HULL|\n" + " 7  spanning tree : |TREE|\n" + " 8  onion         : |ONION|\n" + " 9  proximity map : |PROXIMITY|\n" + "\n" + " X  relax         : |RELAX|\n" + " A  animate       : |ANIMATE|\n" + " P  picture       : |PICTURE|\n" + "\n" + "       POINTS: (|NPOINTS|)\n\n" + "  [SHIFT] + \n" + "  ▲  add point/s\n" + "  ▼  remove point/s\n" + "\n" + " R  randomize\n" + "\n" + " S  save png\n" + "\n" + "      click & drag to\n" + "     move region point" + "\n";
	this.dt = 0;
	this.startTime = 0;
	this.sampleImage = false;
	this.animate = false;
	this.relax = false;
	this.showProximityMap = false;
	this.showOnion = false;
	this.showTree = false;
	this.showHull = false;
	this.fillTriangles = false;
	this.showTriangles = false;
	this.fillRegions = false;
	this.showRegions = true;
	this.showPoints = true;
	this.mousePos = new com_nodename_geom_Point();
	this.prevMousePos = new com_nodename_geom_Point();
	this.isMouseDown = false;
	this.nPoints = 25;
	this.BOUNDS = new com_nodename_geom_Rectangle(0,0,500,500);
	this.TEXT_OUTLINE = new openfl_filters_GlowFilter(-16777216,1,2,2,6);
	this.TEXT_SIZE = 12;
	this.TEXT_FONT = "_typewriter";
	this.TEXT_COLOR = 16777215;
	this.CENTROID_ALPHA = .5;
	this.SAMPLE_FILL_ALPHA = .8;
	this.FILL_ALPHA = 1.;
	this.ALPHA = 1.;
	this.THICKNESS = 1.5;
	this.CENTROID_COLOR = 1118481;
	this.SELECTED_COLOR = 8397040;
	this.ONION_COLOR = 1089791;
	this.TREE_COLOR = 15777824;
	this.HULL_COLOR = 3207312;
	this.TRIANGLE_COLOR = 15728640;
	this.MAX_FILL_COLOR = 4194464;
	this.MIN_FILL_COLOR = 2097216;
	this.REGION_COLOR = 4194544;
	this.POINT_COLOR = 61440;
	openfl_display_Sprite.call(this);
	this.sprite = new openfl_display_Sprite();
	this.addChild(this.sprite);
	this.g = this.sprite.get_graphics();
	this.g.lineStyle(this.THICKNESS,this.TEXT_COLOR,this.ALPHA);
	this.addChild(this.text = this.getTextField(this.TEXT,this.BOUNDS.width + 10,15));
	this.text.set_height(this.stage.stageHeight - this.text.get_y());
	this.pictureBMD = new Picture(0,0);
	this.pictureMiniBMD = new PictureMini(0,0);
	this.pictureBitmap = new openfl_display_Bitmap(this.pictureBMD);
	this.addChildAt(this.pictureBitmap,0);
	var MAX_COLORS = 10;
	var _g = [];
	var _g2 = 0;
	var _g1 = MAX_COLORS;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(this.colorLerp(this.MIN_FILL_COLOR,this.MAX_FILL_COLOR,i / MAX_COLORS));
	}
	this.fillColors = _g;
	this.centroids = [];
	this.directions = [];
	this.points = [];
	var _g21 = 0;
	var _g11 = this.nPoints;
	while(_g21 < _g11) {
		var i1 = _g21++;
		this.points.push(new com_nodename_geom_Point(Math.random() * this.BOUNDS.width,Math.random() * this.BOUNDS.height));
	}
	this.update();
	this.render();
	this.updateText();
	this.startTime = window.performance.now() / 1000;
	this.stage.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
	this.stage.addEventListener("keyDown",$bind(this,this.onKeyDown));
	this.stage.addEventListener("mouseDown",$bind(this,this.onMouseDown));
	this.stage.addEventListener("mouseUp",$bind(this,this.onMouseUp));
	this.stage.addEventListener("mouseMove",$bind(this,this.onMouseMove));
};
$hxClasses["Demo"] = Demo;
Demo.__name__ = ["Demo"];
Demo.__super__ = openfl_display_Sprite;
Demo.prototype = $extend(openfl_display_Sprite.prototype,{
	g: null
	,POINT_COLOR: null
	,REGION_COLOR: null
	,MIN_FILL_COLOR: null
	,MAX_FILL_COLOR: null
	,TRIANGLE_COLOR: null
	,HULL_COLOR: null
	,TREE_COLOR: null
	,ONION_COLOR: null
	,SELECTED_COLOR: null
	,CENTROID_COLOR: null
	,THICKNESS: null
	,ALPHA: null
	,FILL_ALPHA: null
	,SAMPLE_FILL_ALPHA: null
	,CENTROID_ALPHA: null
	,TEXT_COLOR: null
	,TEXT_FONT: null
	,TEXT_SIZE: null
	,TEXT_OUTLINE: null
	,BOUNDS: null
	,voronoi: null
	,nPoints: null
	,points: null
	,centroids: null
	,directions: null
	,regions: null
	,sortedRegions: null
	,fillColors: null
	,triangles: null
	,hull: null
	,tree: null
	,onion: null
	,proxymitySprite: null
	,proxymityMap: null
	,selectedRegion: null
	,pictureBMD: null
	,pictureBitmap: null
	,pictureMiniBMD: null
	,isMouseDown: null
	,prevMousePos: null
	,mousePos: null
	,showPoints: null
	,showRegions: null
	,fillRegions: null
	,showTriangles: null
	,fillTriangles: null
	,showHull: null
	,showTree: null
	,showOnion: null
	,showProximityMap: null
	,relax: null
	,animate: null
	,sampleImage: null
	,startTime: null
	,dt: null
	,text: null
	,TEXT: null
	,sprite: null
	,update: function() {
		if(this.voronoi != null) {
			this.voronoi.dispose();
			this.voronoi = null;
		}
		this.voronoi = new com_nodename_delaunay_Voronoi(this.points,null,this.BOUNDS);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.points;
		while(_g1 < _g2.length) {
			var p = _g2[_g1];
			++_g1;
			_g.push(this.voronoi.region(p));
		}
		this.regions = _g;
		this.sortedRegions = this.voronoi.regions();
		this.triangles = this.voronoi.delaunayTriangulation();
		this.hull = this.voronoi.hull();
		this.tree = this.voronoi.spanningTree();
		this.onion = this.calcOnion(this.voronoi);
		this.updateProximityMap();
	}
	,updateText: function() {
		this.text.set_text(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(this.TEXT,"|POINTS|",this.showPoints ? "[ON]" : "[OFF]"),"|REGIONS|",this.showRegions ? "[ON]" : "[OFF]"),"|FILL_REGIONS|",this.fillRegions ? "[ON]" : "[OFF]"),"|TRIANGLES|",this.showTriangles ? "[ON]" : "[OFF]"),"|FILL_TRIANGLES|",this.fillTriangles ? "[ON]" : "[OFF]"),"|HULL|",this.showHull ? "[ON]" : "[OFF]"),"|TREE|",this.showTree ? "[ON]" : "[OFF]"),"|ONION|",this.showOnion ? "[ON]" : "[OFF]"),"|PROXIMITY|",this.showProximityMap ? "[ON]" : "[OFF]"),"|NPOINTS|",Std.string(this.nPoints)),"|RELAX|",this.relax ? "[ON]" : "[OFF]"),"|ANIMATE|",this.animate ? "[ON]" : "[OFF]"),"|PICTURE|",this.sampleImage ? "[ON]" : "[OFF]"));
	}
	,render: function() {
		this.g.clear();
		if(this.showRegions || this.fillRegions) {
			this.drawRegions();
		}
		this.pictureBitmap.set_visible(this.sampleImage && (!this.fillRegions || this.SAMPLE_FILL_ALPHA < this.FILL_ALPHA));
		if(this.showProximityMap) {
			this.g.beginBitmapFill(this.proxymityMap);
			this.g.drawRect(0,0,this.BOUNDS.width,this.BOUNDS.height);
			this.g.endFill();
		}
		if(this.showTriangles || this.fillTriangles) {
			if(!this.sampleImage) {
				var fillIdx = -1;
				var _g = 0;
				var _g1 = this.voronoi.triangles();
				while(_g < _g1.length) {
					var tri = _g1[_g];
					++_g;
					fillIdx = (fillIdx + 1) % this.fillColors.length;
					var fillColor = this.fillTriangles ? this.fillColors[fillIdx] & 16711680 : null;
					this.drawPoints(tri.points,this.fillTriangles && !this.showTriangles ? this.fillColors[fillIdx] & 16711680 : this.TRIANGLE_COLOR,fillColor);
				}
			} else {
				var _g2 = 0;
				var _g11 = this.voronoi.triangles();
				while(_g2 < _g11.length) {
					var tri1 = _g11[_g2];
					++_g2;
					var p = this.getCentroid(tri1.points);
					var sampledColor = this.pictureBMD.getPixel(p.x | 0,p.y | 0);
					this.drawPoints(tri1.points,this.fillTriangles && this.showTriangles ? this.TRIANGLE_COLOR : sampledColor,this.fillTriangles ? sampledColor : null);
				}
			}
		}
		if(this.showTree) {
			this.drawSegments(this.tree,this.TREE_COLOR);
		}
		if(this.showOnion) {
			this.drawOnion();
		}
		if(this.showHull) {
			this.drawSegments(this.hull,this.HULL_COLOR);
		}
		if(this.showPoints) {
			this.drawSiteCoords();
		}
		if(this.selectedRegion != null) {
			this.drawPoints(this.selectedRegion,this.SELECTED_COLOR);
		}
		if(this.relax && this.showPoints) {
			this.drawCentroids();
		}
	}
	,updateProximityMap: function() {
		if(this.proxymityMap == null) {
			this.proxymityMap = new openfl_display_BitmapData(this.BOUNDS.width | 0,this.BOUNDS.height | 0,false);
			this.proxymitySprite = new openfl_display_Sprite();
		}
		var graphics = this.proxymitySprite.get_graphics();
		this.proxymityMap.fillRect(this.proxymityMap.rect,-1);
		graphics.clear();
		var _g1 = 0;
		var _g = this.sortedRegions.length;
		while(_g1 < _g) {
			var i = _g1++;
			graphics.lineStyle(1,i,1);
			graphics.beginFill(i);
			var points = this.sortedRegions[i];
			var _g2 = 0;
			while(_g2 < points.length) {
				var p = points[_g2];
				++_g2;
				if(p == points[0]) {
					graphics.moveTo(p.x,p.y);
				} else {
					graphics.lineTo(p.x,p.y);
				}
			}
			graphics.endFill();
		}
		this.proxymityMap.draw(this.proxymitySprite);
	}
	,calcOnion: function(voronoi) {
		var res = [];
		var points = voronoi.siteCoords();
		while(points.length > 2) {
			var v = new com_nodename_delaunay_Voronoi(points,null,this.BOUNDS);
			var peel = v.hullPointsInOrder();
			var _g = 0;
			while(_g < peel.length) {
				var p = peel[_g];
				++_g;
				HxOverrides.remove(points,p);
			}
			res.push(peel);
			v.dispose();
			v = null;
		}
		if(points.length > 0) {
			res.push(points);
		}
		return res;
	}
	,drawSiteCoords: function() {
		this.g.lineStyle(this.THICKNESS,this.POINT_COLOR,this.ALPHA);
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			this.g.drawCircle(p.x,p.y,2);
		}
	}
	,drawCentroids: function() {
		if(this.centroids.length < this.points.length) {
			return;
		}
		var _g1 = 0;
		var _g = this.points.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.centroids[i];
			c.x = Math.round(c.x);
			c.y = Math.round(c.y);
			this.g.lineStyle(this.THICKNESS,this.CENTROID_COLOR,this.CENTROID_ALPHA);
			this.g.moveTo(c.x - 2,c.y);
			this.g.lineTo(c.x + 2,c.y);
			this.g.moveTo(c.x,c.y - 2);
			this.g.lineTo(c.x,c.y + 2);
		}
	}
	,drawRegions: function() {
		if(!this.sampleImage) {
			var fillIdx = -1;
			var _g = 0;
			var _g1 = this.regions;
			while(_g < _g1.length) {
				var region = _g1[_g];
				++_g;
				fillIdx = (fillIdx + 1) % this.fillColors.length;
				var fillColor = this.fillRegions ? this.fillColors[fillIdx] : null;
				this.drawPoints(region,this.fillRegions && !this.showRegions ? this.fillColors[fillIdx] : this.REGION_COLOR,fillColor);
			}
		} else {
			var _g2 = 0;
			var _g11 = this.points;
			while(_g2 < _g11.length) {
				var p = _g11[_g2];
				++_g2;
				var sampledColor = this.pictureMiniBMD.getPixel(p.x / 4 | 0,p.y / 4 | 0);
				this.drawPoints(this.voronoi.region(p),this.fillRegions && this.showRegions ? this.REGION_COLOR : sampledColor,this.fillRegions ? sampledColor : null);
			}
		}
	}
	,drawOnion: function() {
		var _g = 0;
		var _g1 = this.onion;
		while(_g < _g1.length) {
			var peel = _g1[_g];
			++_g;
			this.drawPoints(peel,this.ONION_COLOR);
		}
	}
	,drawSegments: function(segments,color,fillColor) {
		this.g.lineStyle(this.THICKNESS,color,this.ALPHA);
		if(fillColor != null) {
			this.g.beginFill(fillColor,this.FILL_ALPHA);
		} else {
			this.g.beginFill(0,0);
		}
		var _g = 0;
		while(_g < segments.length) {
			var segment = segments[_g];
			++_g;
			this.g.moveTo(segment.p0.x,segment.p0.y);
			this.g.lineTo(segment.p1.x,segment.p1.y);
		}
		this.g.endFill();
	}
	,drawPoints: function(points,color,fillColor) {
		if(points == null || points.length == 0) {
			return;
		}
		this.g.lineStyle(this.THICKNESS,color,this.sampleImage ? this.SAMPLE_FILL_ALPHA : this.ALPHA);
		if(fillColor != null) {
			this.g.beginFill(fillColor,this.sampleImage ? this.SAMPLE_FILL_ALPHA : this.FILL_ALPHA);
		} else {
			this.g.beginFill(0,0);
		}
		var q = points[0];
		this.g.moveTo(q.x,q.y);
		var _g1 = 1;
		var _g = points.length;
		while(_g1 < _g) {
			var i = _g1++;
			var p = points[i];
			this.g.lineTo(p.x,p.y);
		}
		this.g.lineTo(q.x,q.y);
		this.g.endFill();
	}
	,getCentroid: function(region) {
		var c = new com_nodename_geom_Point();
		var len = region.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var p0 = region[i];
			var p1 = region[(i + 1) % len];
			var m = p0.x * p1.y - p1.x * p0.y;
			c.x += (p0.x + p1.x) * m;
			c.y += (p0.y + p1.y) * m;
		}
		var area = this.getArea(region);
		c.x /= 6 * area;
		c.y /= 6 * area;
		return c;
	}
	,getArea: function(region) {
		var area = 0.0;
		var len = region.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var p0 = region[i];
			var p1 = region[(i + 1) % len];
			area += p0.x * p1.y - p1.x * p0.y;
		}
		area = .5 * area;
		return area;
	}
	,getTextField: function(text,x,y) {
		if(text == null) {
			text = "";
		}
		var tf = new openfl_text_TextField();
		var fmt = new openfl_text_TextFormat(this.TEXT_FONT,null,this.TEXT_COLOR);
		fmt.align = 3;
		fmt.size = this.TEXT_SIZE;
		tf.set_defaultTextFormat(fmt);
		tf.set_autoSize(1);
		tf.set_selectable(false);
		tf.set_x(x);
		tf.set_y(y);
		tf.set_filters([this.TEXT_OUTLINE]);
		tf.set_text(text);
		return tf;
	}
	,onKeyDown: function(e) {
		var deltaPoints = e.shiftKey ? 20 : 1;
		var _g = e.keyCode;
		switch(_g) {
		case 38:
			var _g1 = 0;
			var _g2 = deltaPoints;
			while(_g1 < _g2) {
				var i = _g1++;
				this.points.push(new com_nodename_geom_Point(Math.random() * this.BOUNDS.width,Math.random() * this.BOUNDS.height));
			}
			this.nPoints = this.points.length;
			this.update();
			break;
		case 40:
			while(deltaPoints-- > 0 && this.nPoints > 3) {
				this.points.pop();
				this.nPoints = this.points.length;
			}
			this.update();
			break;
		case 49:
			this.showPoints = !this.showPoints;
			break;
		case 50:
			this.showRegions = !this.showRegions;
			break;
		case 51:
			this.fillRegions = !this.fillRegions;
			break;
		case 52:
			this.showTriangles = !this.showTriangles;
			break;
		case 53:
			this.fillTriangles = !this.fillTriangles;
			break;
		case 54:
			this.showHull = !this.showHull;
			break;
		case 55:
			this.showTree = !this.showTree;
			break;
		case 56:
			this.showOnion = !this.showOnion;
			break;
		case 57:
			this.showProximityMap = !this.showProximityMap;
			break;
		case 65:
			this.animate = !this.animate;
			this.relax = false;
			break;
		case 80:
			this.sampleImage = !this.sampleImage;
			break;
		case 82:
			var _g3 = 0;
			var _g11 = this.points;
			while(_g3 < _g11.length) {
				var p = _g11[_g3];
				++_g3;
				p.setTo(Math.random() * this.BOUNDS.width,Math.random() * this.BOUNDS.height);
			}
			this.update();
			break;
		case 83:
			this.update();
			var oldSampleFillAlpha = this.SAMPLE_FILL_ALPHA;
			this.SAMPLE_FILL_ALPHA = this.sampleImage ? .97 : oldSampleFillAlpha;
			this.render();
			this.SAMPLE_FILL_ALPHA = oldSampleFillAlpha;
			var tempBMD = new openfl_display_BitmapData(this.pictureBMD.width,this.pictureBMD.height,false,0);
			tempBMD.draw(this.sprite);
			this.savePNG(tempBMD,"voronoi.png");
			break;
		case 88:
			this.relax = !this.relax;
			this.animate = false;
			break;
		}
		this.updateText();
		this.render();
		if(e.keyCode == 27) {
			openfl_system_System.exit(1);
		}
	}
	,savePNG: function(bmd,filename) {
		var ba = bmd.encode(bmd.rect,new openfl_display_PNGEncoderOptions());
		var fileRef = new openfl_net_FileReference();
		fileRef.save(ba,filename);
	}
	,onMouseDown: function(e) {
		this.isMouseDown = true;
	}
	,onMouseUp: function(e) {
		this.isMouseDown = false;
		this.selectedRegion = null;
		this.render();
	}
	,onMouseMove: function(e) {
		this.mousePos.setTo(e.stageX,e.stageY);
	}
	,onEnterFrame: function(e) {
		this.dt = window.performance.now() / 1000 - this.startTime;
		this.startTime = window.performance.now() / 1000;
		var mousePosChanged = !(this.mousePos.x == this.prevMousePos.x && this.mousePos.y == this.prevMousePos.y);
		if(this.relax) {
			var _g1 = 0;
			var _g = this.points.length;
			while(_g1 < _g) {
				var i = _g1++;
				var p = this.points[i];
				var r = this.voronoi.region(p);
				var c = this.getCentroid(r);
				if(i == this.centroids.length) {
					this.centroids.push(c);
				} else {
					this.centroids[i] = c;
				}
				var changed = false;
				if(this.nPoints < 100) {
					var distSquared = com_nodename_geom_Point.distanceSquared(c,p);
					if(distSquared > 4.5) {
						c.x -= p.x;
						c.y -= p.y;
						c.normalize(.75);
						p.x += c.x;
						p.y += c.y;
						changed = true;
					}
				}
				if(!changed) {
					p.x = c.x;
					p.y = c.y;
				}
			}
		}
		if(this.animate) {
			var _g11 = 0;
			var _g2 = this.points.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				if(i1 == this.directions.length) {
					this.directions.push(new com_nodename_geom_Point(30 * (Math.random() < .5 ? -1 : 1) * (Math.random() * .8 + .4),30 * (Math.random() < .5 ? -1 : 1) * (Math.random() * .8 + .4)));
				}
				var p1 = this.points[i1];
				var d = this.directions[i1];
				var dx = d.x * this.dt;
				var dy = d.y * this.dt;
				if(p1.x + dx < 0 || p1.x + dx > this.BOUNDS.width) {
					d.x *= -1;
					dx *= -1;
				}
				if(p1.y + dy < 0 || p1.y + dy > this.BOUNDS.height) {
					d.y *= -1;
					dy *= -1;
				}
				p1.x += dx;
				p1.y += dy;
			}
		}
		if(this.relax || this.animate) {
			this.update();
			this.render();
		}
		if(this.isMouseDown && this.mousePos.x > 0 && this.mousePos.x < this.BOUNDS.width && this.mousePos.y > 0 && this.mousePos.y < this.BOUNDS.height) {
			var p2 = this.voronoi.nearestSitePoint(this.mousePos.x | 0,this.mousePos.y | 0);
			if(p2 != null) {
				this.points[this.points.indexOf(p2)].setTo(this.mousePos.x,this.mousePos.y);
				if(mousePosChanged) {
					this.update();
				}
				this.selectedRegion = this.voronoi.region(p2);
				this.render();
			}
			this.prevMousePos.setTo(this.mousePos.x,this.mousePos.y);
		}
	}
	,colorLerp: function(fromColor,toColor,t) {
		if(t == null) {
			t = 1;
		}
		if(t <= 0) {
			return fromColor;
		}
		if(t >= 1) {
			return toColor;
		}
		var r = fromColor >> 16 & 255;
		var g = fromColor >> 8 & 255;
		var b = fromColor & 255;
		var dR = (toColor >> 16 & 255) - r;
		var dG = (toColor >> 8 & 255) - g;
		var dB = (toColor & 255) - b;
		r += dR * t | 0;
		g += dG * t | 0;
		b += dB * t | 0;
		return r << 16 | g << 8 | b;
	}
	,__class__: Demo
});
var DocumentClass = function(current) {
	current.addChild(this);
	Demo.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Demo;
DocumentClass.prototype = $extend(Demo.prototype,{
	__class__: DocumentClass
});
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.prototype = {
	x: null
	,y: null
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,__class__: lime_math_Vector2
};
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	} else {
		width = width;
	}
	if(height == null) {
		height = 0;
	} else {
		height = height;
	}
	if(width < 0) {
		width = 0;
	} else {
		width = width;
	}
	if(height < 0) {
		height = 0;
	} else {
		height = height;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	var image = lime_graphics_Image.fromBase64(base64,type);
	bitmapData.__fromImage(image);
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	var image = lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	bitmapData.__fromImage(image);
	if(rawAlpha != null) {
		bitmapData.__applyAlpha(rawAlpha);
	}
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromFile(path);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture.__textureID;
	bitmapData.__textureContext = texture.__textureContext;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.loadFromBase64 = function(base64,type) {
	return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.loadFromBytes = function(bytes,rawAlpha) {
	return lime_graphics_Image.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)).then(function(image) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(rawAlpha != null) {
			bitmapData.__applyAlpha(rawAlpha);
		}
		return lime_app_Future.withValue(bitmapData);
	});
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return lime_graphics_Image.loadFromFile(path).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__buffer: null
	,__bufferColorTransform: null
	,__bufferContext: null
	,__bufferAlpha: null
	,__bufferData: null
	,__framebuffer: null
	,__framebufferContext: null
	,__isMask: null
	,__isValid: null
	,__renderable: null
	,__surface: null
	,__texture: null
	,__textureContext: null
	,__textureVersion: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.readable || sourceBitmapData == null) {
			return;
		}
		if(alphaPoint != null) {
			openfl_display_BitmapData.__tempVector.x = alphaPoint.x;
			openfl_display_BitmapData.__tempVector.y = alphaPoint.y;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint != null ? openfl_display_BitmapData.__tempVector : null,mergeAlpha);
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
			if(source.__transform != null) {
				matrix.copyFrom(source.__transform);
				matrix.tx = 0;
				matrix.ty = 0;
			}
		}
		if(!this.readable) {
			if(lime_graphics_opengl_GL.context != null) {
				var gl = lime_graphics_opengl_GL.context;
				var target = gl.FRAMEBUFFER;
				var framebuffer = this.__getFramebuffer(gl);
				gl.__context.bindFramebuffer(target,framebuffer);
				gl.__context.viewport(0,0,this.width,this.height);
				var renderer = new openfl__$internal_renderer_opengl_GLRenderer(null,gl,this);
				var renderSession = renderer.renderSession;
				renderSession.clearRenderDirty = false;
				renderSession.shaderManager = (js_Boot.__cast(null , openfl__$internal_renderer_opengl_GLRenderer)).renderSession.shaderManager;
				var matrixCache = source.__worldTransform;
				source.__updateTransforms(matrix);
				source.__updateChildren(false);
				source.__renderGL(renderer.renderSession);
				source.__updateTransforms(matrixCache);
				source.__updateChildren(true);
				gl.__context.bindFramebuffer(gl.FRAMEBUFFER,null);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source);
				copy.colorTransform(copy.rect,colorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
			var buffer = this.image.buffer;
			var renderSession1 = new openfl__$internal_renderer_RenderSession();
			renderSession1.renderType = lime_graphics_RendererType.CANVAS;
			renderSession1.clearRenderDirty = false;
			renderSession1.context = buffer.__srcContext;
			renderSession1.allowSmoothing = smoothing;
			renderSession1.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession1);
			renderSession1.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(renderSession1);
			renderSession1.blendModeManager.setBlendMode(blendMode);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.msImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			if(clipRect != null) {
				renderSession1.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
			}
			var matrixCache1 = source.__worldTransform;
			source.__updateTransforms(matrix);
			source.__updateChildren(false);
			source.__renderCanvas(renderSession1);
			source.__updateTransforms(matrixCache1);
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.msImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			if(clipRect != null) {
				renderSession1.maskManager.popRect();
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			buffer.__srcImageData = null;
			buffer.data = null;
			this.image.dirty = true;
			this.image.version++;
		}
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.readable || rect == null) {
			byteArray = null;
			return byteArray;
		}
		if(byteArray == null) {
			var this1 = new openfl_utils_ByteArrayData(0);
			byteArray = this1;
		}
		var image = this.image;
		if(!rect.equals(this.rect)) {
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.tx = Math.round(-rect.x);
			matrix.ty = Math.round(-rect.y);
			var bitmapData = new openfl_display_BitmapData(Math.ceil(rect.width),Math.ceil(rect.height),true,0);
			bitmapData.draw(this,matrix);
			image = bitmapData.image;
			openfl_geom_Matrix.__pool.release(matrix);
		}
		if(js_Boot.__instanceof(compressor,openfl_display_PNGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(image.encode("png")));
			return byteArray;
		} else if(js_Boot.__instanceof(compressor,openfl_display_JPEGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(image.encode("jpg",(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality)));
			return byteArray;
		}
		byteArray = null;
		return byteArray;
	}
	,fillRect: function(rect,color) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(this.readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		} else if(this.__framebuffer != null) {
			var gl = lime_graphics_opengl_GL.context;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			gl.__context.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			if(useScissor) {
				gl.__context.enable(gl.SCISSOR_TEST);
				gl.__context.scissor(Math.round(rect.x),Math.round(rect.y),Math.round(rect.width),Math.round(rect.height));
			}
			gl.__context.clearColor((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,(color1 >>> 24 & 255) / 255);
			gl.__context.clear(gl.COLOR_BUFFER_BIT);
			if(useScissor) {
				gl.__context.disable(gl.SCISSOR_TEST);
			}
			gl.__context.bindFramebuffer(gl.FRAMEBUFFER,null);
		}
	}
	,getBuffer: function(gl,alpha,colorTransform) {
		if(this.__buffer == null || this.__bufferContext != gl) {
			var uvWidth = 1;
			var uvHeight = 1;
			var this1 = new Float32Array(104);
			this.__bufferData = this1;
			this.__bufferData[0] = this.width;
			this.__bufferData[1] = this.height;
			this.__bufferData[3] = uvWidth;
			this.__bufferData[4] = uvHeight;
			this.__bufferData[27] = this.height;
			this.__bufferData[30] = uvHeight;
			this.__bufferData[52] = this.width;
			this.__bufferData[55] = uvWidth;
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				this.__bufferData[26 * i + 5] = alpha;
				if(colorTransform != null) {
					this.__bufferData[26 * i + 6] = colorTransform.redMultiplier;
					this.__bufferData[26 * i + 11] = colorTransform.greenMultiplier;
					this.__bufferData[26 * i + 16] = colorTransform.blueMultiplier;
					this.__bufferData[26 * i + 21] = colorTransform.alphaMultiplier;
					this.__bufferData[26 * i + 22] = colorTransform.redOffset / 255;
					this.__bufferData[26 * i + 23] = colorTransform.greenOffset / 255;
					this.__bufferData[26 * i + 24] = colorTransform.blueOffset / 255;
					this.__bufferData[26 * i + 25] = colorTransform.alphaOffset / 255;
				} else {
					this.__bufferData[26 * i + 6] = 1;
					this.__bufferData[26 * i + 11] = 1;
					this.__bufferData[26 * i + 16] = 1;
					this.__bufferData[26 * i + 21] = 1;
				}
			}
			this.__bufferAlpha = alpha;
			this.__bufferColorTransform = colorTransform != null ? colorTransform.__clone() : null;
			this.__bufferContext = gl;
			this.__buffer = gl.__context.createBuffer();
			gl.__context.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferData(gl,gl.ARRAY_BUFFER,this.__bufferData,gl.STATIC_DRAW);
		} else {
			var dirty = false;
			if(this.__bufferAlpha != alpha) {
				dirty = true;
				var _g1 = 0;
				while(_g1 < 4) {
					var i1 = _g1++;
					this.__bufferData[26 * i1 + 5] = alpha;
				}
				this.__bufferAlpha = alpha;
			}
			if(this.__bufferColorTransform == null && colorTransform != null || this.__bufferColorTransform != null && !this.__bufferColorTransform.__equals(colorTransform)) {
				dirty = true;
				if(colorTransform != null) {
					if(this.__bufferColorTransform == null) {
						this.__bufferColorTransform = colorTransform.__clone();
					} else {
						this.__bufferColorTransform.__copyFrom(colorTransform);
					}
					var _g2 = 0;
					while(_g2 < 4) {
						var i2 = _g2++;
						this.__bufferData[26 * i2 + 6] = colorTransform.redMultiplier;
						this.__bufferData[26 * i2 + 11] = colorTransform.greenMultiplier;
						this.__bufferData[26 * i2 + 16] = colorTransform.blueMultiplier;
						this.__bufferData[26 * i2 + 21] = colorTransform.alphaMultiplier;
						this.__bufferData[26 * i2 + 22] = colorTransform.redOffset / 255;
						this.__bufferData[26 * i2 + 23] = colorTransform.greenOffset / 255;
						this.__bufferData[26 * i2 + 24] = colorTransform.blueOffset / 255;
						this.__bufferData[26 * i2 + 25] = colorTransform.alphaOffset / 255;
					}
				} else {
					var _g3 = 0;
					while(_g3 < 4) {
						var i3 = _g3++;
						this.__bufferData[26 * i3 + 6] = 1;
						this.__bufferData[26 * i3 + 11] = 1;
						this.__bufferData[26 * i3 + 16] = 1;
						this.__bufferData[26 * i3 + 21] = 1;
						this.__bufferData[26 * i3 + 22] = 0;
						this.__bufferData[26 * i3 + 23] = 0;
						this.__bufferData[26 * i3 + 24] = 0;
						this.__bufferData[26 * i3 + 25] = 0;
					}
				}
			}
			gl.__context.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			if(dirty) {
				var target = gl.ARRAY_BUFFER;
				var size = this.__bufferData.byteLength;
				var data = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__bufferData);
				var usage = gl.STATIC_DRAW;
				gl.__context.bufferData(target,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data,size),usage);
			}
		}
		return this.__buffer;
	}
	,getPixel: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getTexture: function(gl) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null || this.__textureContext != gl) {
			this.__textureContext = gl;
			this.__texture = gl.__context.createTexture();
			gl.__context.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.__context.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.__textureVersion = -1;
		}
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version != this.__textureVersion) {
			var internalFormat;
			var format;
			if(this.__surface != null) {
				lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
			}
			if(this.image.buffer.bitsPerPixel == 1) {
				internalFormat = gl.ALPHA;
				format = gl.ALPHA;
			} else {
				if(openfl_display_BitmapData.__supportsBGRA == null) {
					openfl_display_BitmapData.__textureInternalFormat = gl.RGBA;
					var bgraExtension = null;
					if(bgraExtension != null) {
						openfl_display_BitmapData.__supportsBGRA = true;
						openfl_display_BitmapData.__textureFormat = bgraExtension.BGRA_EXT;
						if(gl.type == lime_graphics_opengl_GLContextType.GLES) {
							openfl_display_BitmapData.__textureInternalFormat = bgraExtension.BGRA_EXT;
						}
					} else {
						openfl_display_BitmapData.__supportsBGRA = false;
						openfl_display_BitmapData.__textureFormat = gl.RGBA;
					}
				}
				internalFormat = openfl_display_BitmapData.__textureInternalFormat;
				format = openfl_display_BitmapData.__textureFormat;
			}
			gl.__context.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.image;
			if(textureImage.type != lime_graphics_ImageType.DATA && !textureImage.get_premultiplied()) {
				gl.__context.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
			} else if(!textureImage.get_premultiplied() && textureImage.get_transparent()) {
				gl.__context.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
			}
			if(!openfl_display_BitmapData.__supportsBGRA && textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			if(textureImage.type == lime_graphics_ImageType.DATA) {
				var target = gl.TEXTURE_2D;
				var width = textureImage.buffer.width;
				var height = textureImage.buffer.height;
				var type = gl.UNSIGNED_BYTE;
				var data = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(textureImage.get_data());
				gl.__context.texImage2D(target,0,internalFormat,width,height,0,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
			} else {
				lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,textureImage.get_src());
			}
			gl.__context.bindTexture(gl.TEXTURE_2D,null);
			this.__textureVersion = this.image.version;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,__applyAlpha: function(alpha) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(this.image);
		var data = this.image.buffer.data;
		var _g1 = 0;
		var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(alpha);
		while(_g1 < _g) {
			var i = _g1++;
			data[i * 4 + 3] = alpha.readUnsignedByte();
		}
		this.image.version++;
	}
	,__draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
			if(source.__transform != null) {
				matrix.copyFrom(source.__transform);
				matrix.tx = 0;
				matrix.ty = 0;
			}
		}
		if(!this.readable) {
			if(lime_graphics_opengl_GL.context != null) {
				var gl = lime_graphics_opengl_GL.context;
				var target = gl.FRAMEBUFFER;
				var framebuffer = this.__getFramebuffer(gl);
				gl.__context.bindFramebuffer(target,framebuffer);
				gl.__context.viewport(0,0,this.width,this.height);
				var renderer = new openfl__$internal_renderer_opengl_GLRenderer(null,gl,this);
				var renderSession = renderer.renderSession;
				renderSession.clearRenderDirty = true;
				renderSession.shaderManager = (js_Boot.__cast(null , openfl__$internal_renderer_opengl_GLRenderer)).renderSession.shaderManager;
				var matrixCache = source.__worldTransform;
				source.__updateTransforms(matrix);
				source.__updateChildren(false);
				source.__renderGL(renderer.renderSession);
				source.__updateTransforms(matrixCache);
				source.__updateChildren(true);
				gl.__context.bindFramebuffer(gl.FRAMEBUFFER,null);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source);
				copy.colorTransform(copy.rect,colorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
			var buffer = this.image.buffer;
			var renderSession1 = new openfl__$internal_renderer_RenderSession();
			renderSession1.renderType = lime_graphics_RendererType.CANVAS;
			renderSession1.clearRenderDirty = true;
			renderSession1.context = buffer.__srcContext;
			renderSession1.allowSmoothing = smoothing;
			renderSession1.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession1);
			renderSession1.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(renderSession1);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.msImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			if(clipRect != null) {
				renderSession1.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
			}
			var matrixCache1 = source.__worldTransform;
			source.__updateTransforms(matrix);
			source.__updateChildren(false);
			var cacheRenderable = source.__renderable;
			if(source.__isMask) {
				source.__renderable = true;
			}
			var cacheAlpha = source.__worldAlpha;
			source.__worldAlpha = 1;
			source.__renderCanvas(renderSession1);
			source.__renderable = cacheRenderable;
			source.__worldAlpha = cacheAlpha;
			source.__updateTransforms(matrixCache1);
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.msImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			if(clipRect != null) {
				renderSession1.maskManager.popRect();
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			buffer.__srcImageData = null;
			buffer.data = null;
			this.image.dirty = true;
			this.image.version++;
		}
	}
	,__fromFile: function(path) {
		var image = lime_graphics_Image.fromFile(path);
		this.__fromImage(image);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.rect.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getFramebuffer: function(gl) {
		if(this.__framebuffer == null || this.__framebufferContext != gl) {
			this.getTexture(gl);
			this.__framebufferContext = gl;
			this.__framebuffer = gl.__context.createFramebuffer();
			gl.__context.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			gl.__context.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__texture,0);
		}
		return this.__framebuffer;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.readable) {
			return;
		}
		if(this.image.type == lime_graphics_ImageType.DATA) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		}
		var context = renderSession.context;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		context.drawImage(this.image.get_src(),0,0);
	}
	,__renderGL: function(renderSession) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(10);
		var shader = renderSession.shaderManager.defaultShader;
		shader.get_data().uImage0.input = this;
		var tmp = renderSession.allowSmoothing && renderSession.upscaled;
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = renderer.getMatrix(this.__worldTransform);
		renderSession.shaderManager.setShader(shader);
		var target = gl.ARRAY_BUFFER;
		var buffer = this.getBuffer(gl,1,this.__worldColorTransform);
		gl.__context.bindBuffer(target,buffer);
		var index = shader.get_data().aPosition.index;
		var type = gl.FLOAT;
		var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
		gl.__context.vertexAttribPointer(index,3,type,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
		var index1 = shader.get_data().aTexCoord.index;
		var type1 = gl.FLOAT;
		var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
		gl.__context.vertexAttribPointer(index1,2,type1,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
		var index2 = shader.get_data().aAlpha.index;
		var type2 = gl.FLOAT;
		var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
		gl.__context.vertexAttribPointer(index2,1,type2,false,24,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset2));
		gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform = overrideTransform;
		}
	}
	,__class__: openfl_display_BitmapData
};
var Picture = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(Picture.preload != null) {
		this.__fromImage(Picture.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(Picture.resourceName),Picture.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(Picture.preload == null) {
				Picture.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		});
	}
};
$hxClasses["Picture"] = Picture;
Picture.__name__ = ["Picture"];
Picture.__super__ = openfl_display_BitmapData;
Picture.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: Picture
});
var PictureMini = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(PictureMini.preload != null) {
		this.__fromImage(PictureMini.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(PictureMini.resourceName),PictureMini.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(PictureMini.preload == null) {
				PictureMini.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		});
	}
};
$hxClasses["PictureMini"] = PictureMini;
PictureMini.__name__ = ["PictureMini"];
PictureMini.__super__ = openfl_display_BitmapData;
PictureMini.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: PictureMini
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			var tmp = this.r;
			var tmp1 = len < 0 ? s : HxOverrides.substr(s,0,pos + len);
			this.r.m = tmp.exec(tmp1);
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = ["ManifestResources"];
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	var rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		rootPath = Reflect.field(config,"rootPath");
	}
	if(rootPath == null) {
		rootPath = "";
	}
	lime_utils_Assets.defaultRootPath = rootPath;
	var data;
	var manifest;
	var library;
	data = "{\"name\":null,\"assets\":\"ah\",\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	manifest = lime_utils_AssetManifest.parse(data,rootPath);
	library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) {
		return 4294967296.0 + $int;
	} else {
		return $int + 0.0;
	}
};
var com_nodename_delaunay_Edge = function() {
	this._edgeIndex = 0;
	this.rightVertex = null;
	this.leftVertex = null;
	this.c = 0;
	this.b = 0;
	this.a = 0;
	this._edgeIndex = com_nodename_delaunay_Edge._nedges++;
	this.init();
};
$hxClasses["com.nodename.delaunay.Edge"] = com_nodename_delaunay_Edge;
com_nodename_delaunay_Edge.__name__ = ["com","nodename","delaunay","Edge"];
com_nodename_delaunay_Edge.createBisectingEdge = function(site0,site1) {
	var dx = site1.coord.x - site0.coord.x;
	var dy = site1.coord.y - site0.coord.y;
	var absdx = dx > 0 ? dx : -dx;
	var absdy = dy > 0 ? dy : -dy;
	var c = site0.coord.x * dx + site0.coord.y * dy + (dx * dx + dy * dy) * 0.5;
	var a;
	var b;
	if(absdx > absdy) {
		a = 1.0;
		b = dy / dx;
		c /= dx;
	} else {
		b = 1.0;
		a = dx / dy;
		c /= dy;
	}
	var edge = com_nodename_delaunay_Edge.create();
	edge.leftSite = site0;
	edge.rightSite = site1;
	site0.edges.push(edge);
	site1.edges.push(edge);
	edge.leftVertex = null;
	edge.rightVertex = null;
	edge.a = a;
	edge.b = b;
	edge.c = c;
	return edge;
};
com_nodename_delaunay_Edge.create = function() {
	var edge;
	if(com_nodename_delaunay_Edge._pool.length > 0) {
		edge = com_nodename_delaunay_Edge._pool.pop();
		edge.init();
	} else {
		edge = new com_nodename_delaunay_Edge();
	}
	return edge;
};
com_nodename_delaunay_Edge.prototype = {
	delaunayLine: function() {
		return new com_nodename_geom_LineSegment(this.leftSite.coord,this.rightSite.coord);
	}
	,a: null
	,b: null
	,c: null
	,leftVertex: null
	,rightVertex: null
	,setVertex: function(leftRight,v) {
		if(leftRight == com_nodename_delaunay_LR.LEFT) {
			this.leftVertex = v;
		} else {
			this.rightVertex = v;
		}
	}
	,__leftPoint: null
	,__rightPoint: null
	,clippedEnds: function(or) {
		if(or == com_nodename_delaunay_LR.LEFT) {
			return this.__leftPoint;
		} else {
			return this.__rightPoint;
		}
	}
	,setClippedEnds: function(or,p) {
		if(or == com_nodename_delaunay_LR.LEFT) {
			this.__leftPoint = p;
		} else {
			this.__rightPoint = p;
		}
	}
	,leftSite: null
	,rightSite: null
	,_edgeIndex: null
	,dispose: function() {
		this.leftVertex = null;
		this.rightVertex = null;
		this.setClippedEnds(com_nodename_delaunay_LR.LEFT,null);
		this.setClippedEnds(com_nodename_delaunay_LR.RIGHT,null);
		this.rightSite = null;
		this.leftSite = null;
		this.leftSite = null;
		this.rightSite = null;
		com_nodename_delaunay_Edge._pool.push(this);
	}
	,init: function() {
		this.__leftPoint = null;
		this.__rightPoint = null;
		this.leftSite = null;
		this.rightSite = null;
	}
	,clipVertices: function(bounds) {
		var xmin = bounds.x;
		var ymin = bounds.y;
		var xmax = bounds.x + bounds.width;
		var ymax = bounds.y + bounds.height;
		var vertex0;
		var vertex1;
		var x0;
		var x1;
		var y0;
		var y1;
		if(this.a == 1.0 && this.b >= 0.0) {
			vertex0 = this.rightVertex;
			vertex1 = this.leftVertex;
		} else {
			vertex0 = this.leftVertex;
			vertex1 = this.rightVertex;
		}
		if(this.a == 1.0) {
			y0 = ymin;
			if(vertex0 != null && vertex0.coord.y > ymin) {
				y0 = vertex0.coord.y;
			}
			if(y0 > ymax) {
				return;
			}
			x0 = this.c - this.b * y0;
			y1 = ymax;
			if(vertex1 != null && vertex1.coord.y < ymax) {
				y1 = vertex1.coord.y;
			}
			if(y1 < ymin) {
				return;
			}
			x1 = this.c - this.b * y1;
			if(x0 > xmax && x1 > xmax || x0 < xmin && x1 < xmin) {
				return;
			}
			if(x0 > xmax) {
				x0 = xmax;
				y0 = (this.c - x0) / this.b;
			} else if(x0 < xmin) {
				x0 = xmin;
				y0 = (this.c - x0) / this.b;
			}
			if(x1 > xmax) {
				x1 = xmax;
				y1 = (this.c - x1) / this.b;
			} else if(x1 < xmin) {
				x1 = xmin;
				y1 = (this.c - x1) / this.b;
			}
		} else {
			x0 = xmin;
			if(vertex0 != null && vertex0.coord.x > xmin) {
				x0 = vertex0.coord.x;
			}
			if(x0 > xmax) {
				return;
			}
			y0 = this.c - this.a * x0;
			x1 = xmax;
			if(vertex1 != null && vertex1.coord.x < xmax) {
				x1 = vertex1.coord.x;
			}
			if(x1 < xmin) {
				return;
			}
			y1 = this.c - this.a * x1;
			if(y0 > ymax && y1 > ymax || y0 < ymin && y1 < ymin) {
				return;
			}
			if(y0 > ymax) {
				y0 = ymax;
				x0 = (this.c - y0) / this.a;
			} else if(y0 < ymin) {
				y0 = ymin;
				x0 = (this.c - y0) / this.a;
			}
			if(y1 > ymax) {
				y1 = ymax;
				x1 = (this.c - y1) / this.a;
			} else if(y1 < ymin) {
				y1 = ymin;
				x1 = (this.c - y1) / this.a;
			}
		}
		if(vertex0 == this.leftVertex) {
			this.setClippedEnds(com_nodename_delaunay_LR.LEFT,new com_nodename_geom_Point(x0,y0));
			this.setClippedEnds(com_nodename_delaunay_LR.RIGHT,new com_nodename_geom_Point(x1,y1));
		} else {
			this.setClippedEnds(com_nodename_delaunay_LR.RIGHT,new com_nodename_geom_Point(x0,y0));
			this.setClippedEnds(com_nodename_delaunay_LR.LEFT,new com_nodename_geom_Point(x1,y1));
		}
	}
	,__class__: com_nodename_delaunay_Edge
};
var com_nodename_delaunay_IDisposable = function() { };
$hxClasses["com.nodename.delaunay.IDisposable"] = com_nodename_delaunay_IDisposable;
com_nodename_delaunay_IDisposable.__name__ = ["com","nodename","delaunay","IDisposable"];
var com_nodename_delaunay_EdgeList = function(xmin,deltax,sqrt_nsites) {
	this._xmin = 0;
	this._deltax = 0;
	this._xmin = xmin;
	this._deltax = deltax;
	this._hashsize = 2 * sqrt_nsites;
	this._hash = [];
	this._hash[this._hashsize - 1] = null;
	this.leftEnd = com_nodename_delaunay_Halfedge.createDummy();
	this.rightEnd = com_nodename_delaunay_Halfedge.createDummy();
	this.leftEnd.edgeListLeftNeighbor = null;
	this.leftEnd.edgeListRightNeighbor = this.rightEnd;
	this.rightEnd.edgeListLeftNeighbor = this.leftEnd;
	this.rightEnd.edgeListRightNeighbor = null;
	this._hash[0] = this.leftEnd;
	this._hash[this._hashsize - 1] = this.rightEnd;
};
$hxClasses["com.nodename.delaunay.EdgeList"] = com_nodename_delaunay_EdgeList;
com_nodename_delaunay_EdgeList.__name__ = ["com","nodename","delaunay","EdgeList"];
com_nodename_delaunay_EdgeList.__interfaces__ = [com_nodename_delaunay_IDisposable];
com_nodename_delaunay_EdgeList.prototype = {
	_deltax: null
	,_xmin: null
	,_hashsize: null
	,_hash: null
	,leftEnd: null
	,rightEnd: null
	,dispose: function() {
		var halfEdge = this.leftEnd;
		var prevHe;
		while(halfEdge != this.rightEnd) {
			prevHe = halfEdge;
			halfEdge = halfEdge.edgeListRightNeighbor;
			prevHe.dispose();
		}
		this.leftEnd = null;
		this.rightEnd.dispose();
		this.rightEnd = null;
		var i;
		var _g1 = 0;
		var _g = this._hashsize;
		while(_g1 < _g) {
			var i1 = _g1++;
			this._hash[i1] = null;
		}
		this._hash = null;
	}
	,insert: function(lb,newHalfedge) {
		newHalfedge.edgeListLeftNeighbor = lb;
		newHalfedge.edgeListRightNeighbor = lb.edgeListRightNeighbor;
		lb.edgeListRightNeighbor.edgeListLeftNeighbor = newHalfedge;
		lb.edgeListRightNeighbor = newHalfedge;
	}
	,remove: function(halfEdge) {
		halfEdge.edgeListLeftNeighbor.edgeListRightNeighbor = halfEdge.edgeListRightNeighbor;
		halfEdge.edgeListRightNeighbor.edgeListLeftNeighbor = halfEdge.edgeListLeftNeighbor;
		halfEdge.edge = com_nodename_delaunay_Edge.DELETED;
		halfEdge.edgeListLeftNeighbor = halfEdge.edgeListRightNeighbor = null;
	}
	,edgeListLeftNeighbor: function(p) {
		var bucket = (p.x - this._xmin) / this._deltax * this._hashsize | 0;
		if(bucket < 0) {
			bucket = 0;
		}
		if(bucket >= this._hashsize) {
			bucket = this._hashsize - 1;
		}
		var halfEdge = this.getHash(bucket);
		if(halfEdge == null) {
			var i = 1;
			while(true) {
				halfEdge = this.getHash(bucket - i);
				if(halfEdge != null) {
					break;
				}
				halfEdge = this.getHash(bucket + i);
				if(halfEdge != null) {
					break;
				}
				++i;
			}
		}
		if(halfEdge == this.leftEnd || halfEdge != this.rightEnd && halfEdge.isLeftOf(p)) {
			while(true) {
				halfEdge = halfEdge.edgeListRightNeighbor;
				if(!(halfEdge != this.rightEnd && halfEdge.isLeftOf(p))) {
					break;
				}
			}
			halfEdge = halfEdge.edgeListLeftNeighbor;
		} else {
			while(true) {
				halfEdge = halfEdge.edgeListLeftNeighbor;
				if(!(halfEdge != this.leftEnd && !halfEdge.isLeftOf(p))) {
					break;
				}
			}
		}
		if(bucket > 0 && bucket < this._hashsize - 1) {
			this._hash[bucket] = halfEdge;
		}
		return halfEdge;
	}
	,getHash: function(b) {
		var halfEdge = null;
		if(b >= 0 && b < this._hashsize) {
			halfEdge = this._hash[b];
			if(halfEdge != null && halfEdge.edge == com_nodename_delaunay_Edge.DELETED) {
				this._hash[b] = null;
				halfEdge = null;
			}
		}
		return halfEdge;
	}
	,__class__: com_nodename_delaunay_EdgeList
};
var com_nodename_delaunay_EdgeReorderer = function(origEdges,leftCoord,rightCoord) {
	this.edges = [];
	this.edgeOrientations = [];
	if(origEdges.length > 0) {
		this.edges = this.reorderEdges(origEdges,leftCoord,rightCoord);
	}
};
$hxClasses["com.nodename.delaunay.EdgeReorderer"] = com_nodename_delaunay_EdgeReorderer;
com_nodename_delaunay_EdgeReorderer.__name__ = ["com","nodename","delaunay","EdgeReorderer"];
com_nodename_delaunay_EdgeReorderer.edgeToLeftVertex = function(ed) {
	return ed.leftVertex;
};
com_nodename_delaunay_EdgeReorderer.edgeToLeftSite = function(ed) {
	return ed.leftSite;
};
com_nodename_delaunay_EdgeReorderer.edgeToRightVertex = function(ed) {
	return ed.rightVertex;
};
com_nodename_delaunay_EdgeReorderer.edgeToRightSite = function(ed) {
	return ed.rightSite;
};
com_nodename_delaunay_EdgeReorderer.prototype = {
	edges: null
	,edgeOrientations: null
	,dispose: function() {
		this.edges = null;
		this.edgeOrientations = null;
	}
	,reorderEdges: function(origEdges,leftCoord,rightCoord) {
		var i;
		var j;
		var n = origEdges.length;
		var edge;
		var done = [];
		done[n - 1] = false;
		var nDone = 0;
		var _g = 0;
		while(_g < done.length) {
			var b = done[_g];
			++_g;
			b = false;
		}
		var newEdges = [];
		i = 0;
		edge = origEdges[i];
		newEdges.push(edge);
		this.edgeOrientations.push(com_nodename_delaunay_LR.LEFT);
		var firstPoint = leftCoord(edge);
		var lastPoint = rightCoord(edge);
		if(firstPoint == com_nodename_delaunay_Vertex.VERTEX_AT_INFINITY || lastPoint == com_nodename_delaunay_Vertex.VERTEX_AT_INFINITY) {
			return [];
		}
		done[i] = true;
		++nDone;
		while(nDone < n) {
			var _g1 = 1;
			var _g2 = n;
			while(_g1 < _g2) {
				var i1 = _g1++;
				if(done[i1]) {
					continue;
				}
				edge = origEdges[i1];
				var leftPoint = leftCoord(edge);
				var rightPoint = rightCoord(edge);
				if(leftPoint == com_nodename_delaunay_Vertex.VERTEX_AT_INFINITY || rightPoint == com_nodename_delaunay_Vertex.VERTEX_AT_INFINITY) {
					return [];
				}
				if(leftPoint == lastPoint) {
					lastPoint = rightPoint;
					this.edgeOrientations.push(com_nodename_delaunay_LR.LEFT);
					newEdges.push(edge);
					done[i1] = true;
				} else if(rightPoint == firstPoint) {
					firstPoint = leftPoint;
					this.edgeOrientations.unshift(com_nodename_delaunay_LR.LEFT);
					newEdges.unshift(edge);
					done[i1] = true;
				} else if(leftPoint == firstPoint) {
					firstPoint = rightPoint;
					this.edgeOrientations.unshift(com_nodename_delaunay_LR.RIGHT);
					newEdges.unshift(edge);
					done[i1] = true;
				} else if(rightPoint == lastPoint) {
					lastPoint = leftPoint;
					this.edgeOrientations.push(com_nodename_delaunay_LR.RIGHT);
					newEdges.push(edge);
					done[i1] = true;
				}
				if(done[i1]) {
					++nDone;
				}
			}
		}
		return newEdges;
	}
	,__class__: com_nodename_delaunay_EdgeReorderer
};
var com_nodename_delaunay_Halfedge = function(edge,lr) {
	this.ystar = 0;
	this.init(edge,lr);
};
$hxClasses["com.nodename.delaunay.Halfedge"] = com_nodename_delaunay_Halfedge;
com_nodename_delaunay_Halfedge.__name__ = ["com","nodename","delaunay","Halfedge"];
com_nodename_delaunay_Halfedge.create = function(edge,lr) {
	if(com_nodename_delaunay_Halfedge._pool.length > 0) {
		return com_nodename_delaunay_Halfedge._pool.pop().init(edge,lr);
	} else {
		return new com_nodename_delaunay_Halfedge(edge,lr);
	}
};
com_nodename_delaunay_Halfedge.createDummy = function() {
	return com_nodename_delaunay_Halfedge.create(null,null);
};
com_nodename_delaunay_Halfedge.prototype = {
	edgeListLeftNeighbor: null
	,edgeListRightNeighbor: null
	,nextInPriorityQueue: null
	,edge: null
	,leftRight: null
	,vertex: null
	,ystar: null
	,init: function(edge,lr) {
		this.edge = edge;
		this.leftRight = lr;
		this.nextInPriorityQueue = null;
		this.vertex = null;
		return this;
	}
	,dispose: function() {
		if(this.edgeListLeftNeighbor != null || this.edgeListRightNeighbor != null) {
			return;
		}
		if(this.nextInPriorityQueue != null) {
			return;
		}
		this.edge = null;
		this.leftRight = null;
		this.vertex = null;
		com_nodename_delaunay_Halfedge._pool.push(this);
	}
	,reallyDispose: function() {
		this.edgeListLeftNeighbor = null;
		this.edgeListRightNeighbor = null;
		this.nextInPriorityQueue = null;
		this.edge = null;
		this.leftRight = null;
		this.vertex = null;
		com_nodename_delaunay_Halfedge._pool.push(this);
	}
	,isLeftOf: function(p) {
		var above;
		var topSite = this.edge.rightSite;
		var rightOfSite = p.x > topSite.coord.x;
		if(rightOfSite && this.leftRight == com_nodename_delaunay_LR.LEFT) {
			return true;
		}
		if(!rightOfSite && this.leftRight == com_nodename_delaunay_LR.RIGHT) {
			return false;
		}
		if(this.edge.a == 1.0) {
			var dyp = p.y - topSite.coord.y;
			var dxp = p.x - topSite.coord.x;
			var fast = false;
			if(!rightOfSite && this.edge.b < 0.0 || rightOfSite && this.edge.b >= 0.0) {
				above = dyp >= this.edge.b * dxp;
				fast = above;
			} else {
				above = p.x + p.y * this.edge.b > this.edge.c;
				if(this.edge.b < 0.0) {
					above = !above;
				}
				fast = !above;
			}
			if(!fast) {
				var dxs = topSite.coord.x - this.edge.leftSite.coord.x;
				above = this.edge.b * (dxp * dxp - dyp * dyp) < dxs * dyp * (1.0 + 2.0 * dxp / dxs + this.edge.b * this.edge.b);
				if(this.edge.b < 0.0) {
					above = !above;
				}
			}
		} else {
			var yl = this.edge.c - this.edge.a * p.x;
			var t1 = p.y - yl;
			var t2 = p.x - topSite.coord.x;
			var t3 = yl - topSite.coord.y;
			above = t1 * t1 > t2 * t2 + t3 * t3;
		}
		var xx = this.leftRight == com_nodename_delaunay_LR.LEFT;
		if(this.leftRight == com_nodename_delaunay_LR.LEFT) {
			return above;
		} else {
			return !above;
		}
	}
	,__class__: com_nodename_delaunay_Halfedge
};
var com_nodename_delaunay_HalfedgePriorityQueue = function(ymin,deltay,sqrt_nsites) {
	this._deltay = 0;
	this._ymin = 0;
	this._ymin = ymin;
	this._deltay = deltay;
	this._hashsize = 4 * sqrt_nsites;
	this.initialize();
};
$hxClasses["com.nodename.delaunay.HalfedgePriorityQueue"] = com_nodename_delaunay_HalfedgePriorityQueue;
com_nodename_delaunay_HalfedgePriorityQueue.__name__ = ["com","nodename","delaunay","HalfedgePriorityQueue"];
com_nodename_delaunay_HalfedgePriorityQueue.prototype = {
	_hash: null
	,_count: null
	,_minBucket: null
	,_hashsize: null
	,_ymin: null
	,_deltay: null
	,dispose: function() {
		var _g1 = 0;
		var _g = this._hashsize;
		while(_g1 < _g) {
			var i = _g1++;
			this._hash[i].dispose();
			this._hash[i] = null;
		}
		this._hash = null;
	}
	,initialize: function() {
		var i;
		this._count = 0;
		this._minBucket = 0;
		this._hash = [];
		this._hash[this._hashsize - 1] = null;
		var _g1 = 0;
		var _g = this._hashsize;
		while(_g1 < _g) {
			var i1 = _g1++;
			this._hash[i1] = com_nodename_delaunay_Halfedge.createDummy();
			this._hash[i1].nextInPriorityQueue = null;
		}
	}
	,insert: function(halfEdge) {
		var previous;
		var next;
		var insertionBucket = this.bucket(halfEdge);
		if(insertionBucket < this._minBucket) {
			this._minBucket = insertionBucket;
		}
		previous = this._hash[insertionBucket];
		while(true) {
			var tmp;
			next = previous.nextInPriorityQueue;
			if(next != null) {
				if(!(halfEdge.ystar > next.ystar)) {
					if(halfEdge.ystar == next.ystar) {
						tmp = halfEdge.vertex.coord.x > next.vertex.coord.x;
					} else {
						tmp = false;
					}
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			previous = next;
		}
		halfEdge.nextInPriorityQueue = previous.nextInPriorityQueue;
		previous.nextInPriorityQueue = halfEdge;
		++this._count;
	}
	,remove: function(halfEdge) {
		var removalBucket = this.bucket(halfEdge);
		if(halfEdge.vertex != null) {
			var previous = this._hash[removalBucket];
			while(previous.nextInPriorityQueue != halfEdge) previous = previous.nextInPriorityQueue;
			previous.nextInPriorityQueue = halfEdge.nextInPriorityQueue;
			this._count--;
			halfEdge.vertex = null;
			halfEdge.nextInPriorityQueue = null;
			halfEdge.dispose();
		}
	}
	,bucket: function(halfEdge) {
		var theBucket = (halfEdge.ystar - this._ymin) / this._deltay * this._hashsize | 0;
		if(theBucket < 0) {
			theBucket = 0;
		}
		if(theBucket >= this._hashsize) {
			theBucket = this._hashsize - 1;
		}
		return theBucket;
	}
	,isEmpty: function(bucket) {
		return this._hash[bucket].nextInPriorityQueue == null;
	}
	,adjustMinBucket: function() {
		while(this._minBucket < this._hashsize - 1 && this.isEmpty(this._minBucket)) ++this._minBucket;
	}
	,empty: function() {
		return this._count == 0;
	}
	,min: function() {
		this.adjustMinBucket();
		var answer = this._hash[this._minBucket].nextInPriorityQueue;
		return new com_nodename_geom_Point(answer.vertex.coord.x,answer.ystar);
	}
	,extractMin: function() {
		var answer = this._hash[this._minBucket].nextInPriorityQueue;
		this._hash[this._minBucket].nextInPriorityQueue = answer.nextInPriorityQueue;
		this._count--;
		answer.nextInPriorityQueue = null;
		return answer;
	}
	,__class__: com_nodename_delaunay_HalfedgePriorityQueue
};
var com_nodename_delaunay_ICoord = function() { };
$hxClasses["com.nodename.delaunay.ICoord"] = com_nodename_delaunay_ICoord;
com_nodename_delaunay_ICoord.__name__ = ["com","nodename","delaunay","ICoord"];
com_nodename_delaunay_ICoord.prototype = {
	get_coord: null
	,__class__: com_nodename_delaunay_ICoord
};
var com_nodename_delaunay_Kruskal = function() { };
$hxClasses["com.nodename.delaunay.Kruskal"] = com_nodename_delaunay_Kruskal;
com_nodename_delaunay_Kruskal.__name__ = ["com","nodename","delaunay","Kruskal"];
com_nodename_delaunay_Kruskal.kruskal = function(lineSegments,type) {
	if(type == null) {
		type = com_nodename_delaunay_SortType.MINIMUM;
	}
	var nodes = new haxe_ds_ObjectMap();
	var mst = [];
	var nodePool = com_nodename_delaunay_Node.pool;
	switch(type[1]) {
	case 0:
		lineSegments.sort(com_nodename_geom_LineSegment.compareLengths_MAX);
		break;
	case 1:
		lineSegments.sort(com_nodename_geom_LineSegment.compareLengths);
		break;
	}
	var index = lineSegments.length - 1;
	while(index >= 0) {
		var lineSegment = lineSegments[index];
		--index;
		var node0 = nodes.h[lineSegment.p0.__id__];
		var rootOfSet0;
		if(node0 == null) {
			if(nodePool.length > 0) {
				node0 = nodePool.pop();
			} else {
				node0 = new com_nodename_delaunay_Node();
			}
			rootOfSet0 = node0.parent = node0;
			node0.treeSize = 1;
			nodes.set(lineSegment.p0,node0);
		} else {
			rootOfSet0 = com_nodename_delaunay_Kruskal.find(node0);
		}
		var node1 = nodes.h[lineSegment.p1.__id__];
		var rootOfSet1;
		if(node1 == null) {
			if(nodePool.length > 0) {
				node1 = nodePool.pop();
			} else {
				node1 = new com_nodename_delaunay_Node();
			}
			rootOfSet1 = node1.parent = node1;
			node1.treeSize = 1;
			nodes.set(lineSegment.p1,node1);
		} else {
			rootOfSet1 = com_nodename_delaunay_Kruskal.find(node1);
		}
		if(rootOfSet0 != rootOfSet1) {
			mst.push(lineSegment);
			var treeSize0 = rootOfSet0.treeSize;
			var treeSize1 = rootOfSet1.treeSize;
			if(treeSize0 >= treeSize1) {
				rootOfSet1.parent = rootOfSet0;
				rootOfSet0.treeSize += treeSize1;
			} else {
				rootOfSet0.parent = rootOfSet1;
				rootOfSet1.treeSize += treeSize0;
			}
		}
	}
	var node = nodes.iterator();
	while(node.hasNext()) {
		var node2 = node.next();
		nodePool.push(node2);
	}
	return mst;
};
com_nodename_delaunay_Kruskal.find = function(node) {
	if(node.parent == node) {
		return node;
	} else {
		var root = com_nodename_delaunay_Kruskal.find(node.parent);
		node.parent = root;
		return root;
	}
};
var com_nodename_delaunay_Node = function() {
};
$hxClasses["com.nodename.delaunay.Node"] = com_nodename_delaunay_Node;
com_nodename_delaunay_Node.__name__ = ["com","nodename","delaunay","Node"];
com_nodename_delaunay_Node.prototype = {
	parent: null
	,treeSize: null
	,__class__: com_nodename_delaunay_Node
};
var com_nodename_delaunay_SortType = $hxClasses["com.nodename.delaunay.SortType"] = { __ename__ : ["com","nodename","delaunay","SortType"], __constructs__ : ["MINIMUM","MAXIMUM"] };
com_nodename_delaunay_SortType.MINIMUM = ["MINIMUM",0];
com_nodename_delaunay_SortType.MINIMUM.toString = $estr;
com_nodename_delaunay_SortType.MINIMUM.__enum__ = com_nodename_delaunay_SortType;
com_nodename_delaunay_SortType.MAXIMUM = ["MAXIMUM",1];
com_nodename_delaunay_SortType.MAXIMUM.toString = $estr;
com_nodename_delaunay_SortType.MAXIMUM.__enum__ = com_nodename_delaunay_SortType;
var com_nodename_delaunay_LR = function(name) {
	this._name = name;
};
$hxClasses["com.nodename.delaunay.LR"] = com_nodename_delaunay_LR;
com_nodename_delaunay_LR.__name__ = ["com","nodename","delaunay","LR"];
com_nodename_delaunay_LR.other = function(leftRight) {
	if(leftRight == com_nodename_delaunay_LR.LEFT) {
		return com_nodename_delaunay_LR.RIGHT;
	} else {
		return com_nodename_delaunay_LR.LEFT;
	}
};
com_nodename_delaunay_LR.prototype = {
	_name: null
	,__class__: com_nodename_delaunay_LR
};
var com_nodename_delaunay_SelectHelper = function() { };
$hxClasses["com.nodename.delaunay.SelectHelper"] = com_nodename_delaunay_SelectHelper;
com_nodename_delaunay_SelectHelper.__name__ = ["com","nodename","delaunay","SelectHelper"];
com_nodename_delaunay_SelectHelper.delaunayLinesForEdges = function(edges) {
	var segments = [];
	var _g = 0;
	while(_g < edges.length) {
		var edge = edges[_g];
		++_g;
		segments.push(edge.delaunayLine());
	}
	return segments;
};
var com_nodename_delaunay_Site = function(p,index,weight,color) {
	this.weight = 0;
	this.init(p,index,weight,color);
};
$hxClasses["com.nodename.delaunay.Site"] = com_nodename_delaunay_Site;
com_nodename_delaunay_Site.__name__ = ["com","nodename","delaunay","Site"];
com_nodename_delaunay_Site.__interfaces__ = [com_nodename_delaunay_ICoord];
com_nodename_delaunay_Site.create = function(p,index,weight,color) {
	if(com_nodename_delaunay_Site._pool.length > 0) {
		return com_nodename_delaunay_Site._pool.pop().init(p,index,weight,color);
	} else {
		return new com_nodename_delaunay_Site(p,index,weight,color);
	}
};
com_nodename_delaunay_Site.compare = function(s1,s2) {
	var returnValue = com_nodename_delaunay_Voronoi.compareByYThenX(s1,s2);
	var tempIndex;
	if(returnValue == -1) {
		if(s1._siteIndex > s2._siteIndex) {
			tempIndex = s1._siteIndex;
			s1._siteIndex = s2._siteIndex;
			s2._siteIndex = tempIndex;
		}
	} else if(returnValue == 1) {
		if(s2._siteIndex > s1._siteIndex) {
			tempIndex = s2._siteIndex;
			s2._siteIndex = s1._siteIndex;
			s1._siteIndex = tempIndex;
		}
	}
	return returnValue;
};
com_nodename_delaunay_Site.closeEnough = function(p0,p1) {
	var dx2 = (p0.x - p1.x) * (p0.x - p1.x);
	var dy2 = (p0.y - p1.y) * (p0.y - p1.y);
	return Math.sqrt(dx2 + dy2) < com_nodename_delaunay_Site.EPSILON;
};
com_nodename_delaunay_Site.prototype = {
	coord: null
	,get_coord: function() {
		return this.coord;
	}
	,color: null
	,weight: null
	,_siteIndex: null
	,edges: null
	,_edgeOrientations: null
	,_region: null
	,init: function(p,index,weight,color) {
		this.coord = p;
		this._siteIndex = index;
		this.weight = weight;
		this.color = color;
		this.edges = [];
		this._region = null;
		return this;
	}
	,dispose: function() {
		this.coord = null;
		this.clear();
		com_nodename_delaunay_Site._pool.push(this);
	}
	,clear: function() {
		if(this.edges != null) {
			this.edges.length = 0;
			this.edges = null;
		}
		if(this._edgeOrientations != null) {
			this._edgeOrientations.length = 0;
			this._edgeOrientations = null;
		}
		if(this._region != null) {
			this._region.length = 0;
			this._region = null;
		}
	}
	,region: function(clippingBounds) {
		if(this.edges == null || this.edges.length == 0) {
			return [];
		}
		if(this._edgeOrientations == null) {
			this.reorderEdges();
			this._region = this.clipToBounds(clippingBounds);
			if(new com_nodename_geom_Polygon(this._region).winding() == com_nodename_geom_Winding.CLOCKWISE) {
				this._region.reverse();
			}
		}
		return this._region;
	}
	,reorderEdges: function() {
		var reorderer = new com_nodename_delaunay_EdgeReorderer(this.edges,com_nodename_delaunay_EdgeReorderer.edgeToLeftVertex,com_nodename_delaunay_EdgeReorderer.edgeToRightVertex);
		this.edges = reorderer.edges;
		this._edgeOrientations = reorderer.edgeOrientations;
		reorderer.dispose();
	}
	,clipToBounds: function(bounds) {
		var points = [];
		var n = this.edges.length;
		var i = 0;
		var edge;
		while(true) {
			var tmp;
			if(i < n) {
				var _this = this.edges[i];
				tmp = (_this.__leftPoint != null && _this.__rightPoint != null) == false;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			++i;
		}
		if(i == n) {
			return [];
		}
		edge = this.edges[i];
		var orientation = this._edgeOrientations[i];
		points.push(edge.clippedEnds(orientation));
		points.push(edge.clippedEnds(com_nodename_delaunay_LR.other(orientation)));
		var _g1 = i + 1;
		var _g = n;
		while(_g1 < _g) {
			var j = _g1++;
			edge = this.edges[j];
			if((edge.__leftPoint != null && edge.__rightPoint != null) == false) {
				continue;
			}
			this.connect(points,j,bounds);
		}
		this.connect(points,i,bounds,true);
		return points;
	}
	,connect: function(points,j,bounds,closingUp) {
		if(closingUp == null) {
			closingUp = false;
		}
		var rightPoint = points[points.length - 1];
		var newEdge = this.edges[j];
		var newOrientation = this._edgeOrientations[j];
		var newPoint = newEdge.clippedEnds(newOrientation);
		if(!com_nodename_delaunay_Site.closeEnough(rightPoint,newPoint)) {
			if(rightPoint.x != newPoint.x && rightPoint.y != newPoint.y) {
				var rightCheck = com_nodename_delaunay_BoundsCheck.check(rightPoint,bounds);
				var newCheck = com_nodename_delaunay_BoundsCheck.check(newPoint,bounds);
				var px;
				var py;
				if((rightCheck & com_nodename_delaunay_BoundsCheck.RIGHT) != 0) {
					px = bounds.x + bounds.width;
					if((newCheck & com_nodename_delaunay_BoundsCheck.BOTTOM) != 0) {
						py = bounds.y + bounds.height;
						points.push(new com_nodename_geom_Point(px,py));
					} else if((newCheck & com_nodename_delaunay_BoundsCheck.TOP) != 0) {
						py = bounds.y;
						points.push(new com_nodename_geom_Point(px,py));
					} else if((newCheck & com_nodename_delaunay_BoundsCheck.LEFT) != 0) {
						if(rightPoint.y - bounds.y + newPoint.y - bounds.y < bounds.height) {
							py = bounds.y;
						} else {
							py = bounds.y + bounds.height;
						}
						points.push(new com_nodename_geom_Point(px,py));
						points.push(new com_nodename_geom_Point(bounds.x,py));
					}
				} else if((rightCheck & com_nodename_delaunay_BoundsCheck.LEFT) != 0) {
					px = bounds.x;
					if((newCheck & com_nodename_delaunay_BoundsCheck.BOTTOM) != 0) {
						py = bounds.y + bounds.height;
						points.push(new com_nodename_geom_Point(px,py));
					} else if((newCheck & com_nodename_delaunay_BoundsCheck.TOP) != 0) {
						py = bounds.y;
						points.push(new com_nodename_geom_Point(px,py));
					} else if((newCheck & com_nodename_delaunay_BoundsCheck.RIGHT) != 0) {
						if(rightPoint.y - bounds.y + newPoint.y - bounds.y < bounds.height) {
							py = bounds.y;
						} else {
							py = bounds.y + bounds.height;
						}
						points.push(new com_nodename_geom_Point(px,py));
						points.push(new com_nodename_geom_Point(bounds.x + bounds.width,py));
					}
				} else if((rightCheck & com_nodename_delaunay_BoundsCheck.TOP) != 0) {
					py = bounds.y;
					if((newCheck & com_nodename_delaunay_BoundsCheck.RIGHT) != 0) {
						px = bounds.x + bounds.width;
						points.push(new com_nodename_geom_Point(px,py));
					} else if((newCheck & com_nodename_delaunay_BoundsCheck.LEFT) != 0) {
						px = bounds.x;
						points.push(new com_nodename_geom_Point(px,py));
					} else if((newCheck & com_nodename_delaunay_BoundsCheck.BOTTOM) != 0) {
						if(rightPoint.x - bounds.x + newPoint.x - bounds.x < bounds.width) {
							px = bounds.x;
						} else {
							px = bounds.x + bounds.width;
						}
						points.push(new com_nodename_geom_Point(px,py));
						points.push(new com_nodename_geom_Point(px,bounds.y + bounds.height));
					}
				} else if((rightCheck & com_nodename_delaunay_BoundsCheck.BOTTOM) != 0) {
					py = bounds.y + bounds.height;
					if((newCheck & com_nodename_delaunay_BoundsCheck.RIGHT) != 0) {
						px = bounds.x + bounds.width;
						points.push(new com_nodename_geom_Point(px,py));
					} else if((newCheck & com_nodename_delaunay_BoundsCheck.LEFT) != 0) {
						px = bounds.x;
						points.push(new com_nodename_geom_Point(px,py));
					} else if((newCheck & com_nodename_delaunay_BoundsCheck.TOP) != 0) {
						if(rightPoint.x - bounds.x + newPoint.x - bounds.x < bounds.width) {
							px = bounds.x;
						} else {
							px = bounds.x + bounds.width;
						}
						points.push(new com_nodename_geom_Point(px,py));
						points.push(new com_nodename_geom_Point(px,bounds.y));
					}
				}
			}
			if(closingUp) {
				return;
			}
			points.push(newPoint);
		}
		var newRightPoint = newEdge.clippedEnds(com_nodename_delaunay_LR.other(newOrientation));
		if(!com_nodename_delaunay_Site.closeEnough(points[0],newRightPoint)) {
			points.push(newRightPoint);
		}
	}
	,dist: function(p) {
		var dx2 = (p.get_coord().x - this.coord.x) * (p.get_coord().x - this.coord.x);
		var dy2 = (p.get_coord().y - this.coord.y) * (p.get_coord().y - this.coord.y);
		return Math.sqrt(dx2 + dy2);
	}
	,__class__: com_nodename_delaunay_Site
};
var com_nodename_delaunay_BoundsCheck = function() { };
$hxClasses["com.nodename.delaunay.BoundsCheck"] = com_nodename_delaunay_BoundsCheck;
com_nodename_delaunay_BoundsCheck.__name__ = ["com","nodename","delaunay","BoundsCheck"];
com_nodename_delaunay_BoundsCheck.check = function(point,bounds) {
	var value = 0;
	if(point.x == bounds.x) {
		value |= com_nodename_delaunay_BoundsCheck.LEFT;
	} else if(point.x == bounds.x + bounds.width) {
		value |= com_nodename_delaunay_BoundsCheck.RIGHT;
	}
	if(point.y == bounds.y) {
		value |= com_nodename_delaunay_BoundsCheck.TOP;
	} else if(point.y == bounds.y + bounds.height) {
		value |= com_nodename_delaunay_BoundsCheck.BOTTOM;
	}
	return value;
};
var com_nodename_delaunay_SiteList = function() {
	this._sites = [];
	this._sorted = false;
};
$hxClasses["com.nodename.delaunay.SiteList"] = com_nodename_delaunay_SiteList;
com_nodename_delaunay_SiteList.__name__ = ["com","nodename","delaunay","SiteList"];
com_nodename_delaunay_SiteList.__interfaces__ = [com_nodename_delaunay_IDisposable];
com_nodename_delaunay_SiteList.prototype = {
	_sites: null
	,_currentIndex: null
	,_sorted: null
	,dispose: function() {
		if(this._sites != null) {
			var _g = 0;
			var _g1 = this._sites;
			while(_g < _g1.length) {
				var site = _g1[_g];
				++_g;
				site.dispose();
			}
			this._sites.length = 0;
			this._sites = null;
		}
	}
	,push: function(site) {
		this._sorted = false;
		return this._sites.push(site);
	}
	,next: function() {
		if(this._sorted == false) {
			throw new js__$Boot_HaxeError("SiteList::next():  sites have not been sorted");
		}
		if(this._currentIndex < this._sites.length) {
			return this._sites[this._currentIndex++];
		} else {
			return null;
		}
	}
	,getSitesBounds: function() {
		if(this._sorted == false) {
			this._sites.sort(com_nodename_delaunay_Site.compare);
			this._currentIndex = 0;
			this._sorted = true;
		}
		var xmin;
		var xmax;
		var ymin;
		var ymax;
		if(this._sites.length == 0) {
			return new com_nodename_geom_Rectangle(0,0,0,0);
		}
		xmin = Infinity;
		xmax = -Infinity;
		var _g = 0;
		var _g1 = this._sites;
		while(_g < _g1.length) {
			var site = _g1[_g];
			++_g;
			if(site.coord.x < xmin) {
				xmin = site.coord.x;
			}
			if(site.coord.x > xmax) {
				xmax = site.coord.x;
			}
		}
		ymin = this._sites[0].coord.y;
		ymax = this._sites[this._sites.length - 1].coord.y;
		return new com_nodename_geom_Rectangle(xmin,ymin,xmax - xmin,ymax - ymin);
	}
	,siteCoords: function() {
		var coords = [];
		var _g = 0;
		var _g1 = this._sites;
		while(_g < _g1.length) {
			var site = _g1[_g];
			++_g;
			coords.push(site.coord);
		}
		return coords;
	}
	,regions: function(plotBounds) {
		var regions = [];
		var _g = 0;
		var _g1 = this._sites;
		while(_g < _g1.length) {
			var site = _g1[_g];
			++_g;
			regions.push(site.region(plotBounds));
		}
		return regions;
	}
	,nearestSitePoint: function(x,y) {
		var res = null;
		var p = new com_nodename_geom_Point(x,y);
		var minDistSqr = Infinity;
		var _g = 0;
		var _g1 = this._sites;
		while(_g < _g1.length) {
			var site = _g1[_g];
			++_g;
			var q = site.coord;
			var distSqr = com_nodename_geom_Point.distanceSquared(p,q);
			if(distSqr < minDistSqr) {
				minDistSqr = distSqr;
				res = site;
			}
		}
		if(res != null) {
			return res.coord;
		} else {
			return null;
		}
	}
	,__class__: com_nodename_delaunay_SiteList
};
var com_nodename_delaunay_Triangle = function(a,b,c) {
	this.sites = [a,b,c];
	this.points = [a.coord,b.coord,c.coord];
};
$hxClasses["com.nodename.delaunay.Triangle"] = com_nodename_delaunay_Triangle;
com_nodename_delaunay_Triangle.__name__ = ["com","nodename","delaunay","Triangle"];
com_nodename_delaunay_Triangle.prototype = {
	sites: null
	,points: null
	,dispose: function() {
		this.sites.length = 0;
		this.sites = null;
		this.points.length = 0;
		this.points = null;
	}
	,__class__: com_nodename_delaunay_Triangle
};
var com_nodename_delaunay_Vertex = function(x,y) {
	this.init(x,y);
};
$hxClasses["com.nodename.delaunay.Vertex"] = com_nodename_delaunay_Vertex;
com_nodename_delaunay_Vertex.__name__ = ["com","nodename","delaunay","Vertex"];
com_nodename_delaunay_Vertex.__interfaces__ = [com_nodename_delaunay_ICoord];
com_nodename_delaunay_Vertex.create = function(x,y) {
	if(isNaN(x) || isNaN(y)) {
		return com_nodename_delaunay_Vertex.VERTEX_AT_INFINITY;
	}
	if(com_nodename_delaunay_Vertex._pool.length > 0) {
		return com_nodename_delaunay_Vertex._pool.pop().init(x,y);
	} else {
		return new com_nodename_delaunay_Vertex(x,y);
	}
};
com_nodename_delaunay_Vertex.intersect = function(halfedge0,halfedge1) {
	var halfedge;
	var determinant;
	var intersectionX;
	var intersectionY;
	var rightOfSite;
	var edge0 = halfedge0.edge;
	var edge1 = halfedge1.edge;
	if(edge0 == null || edge1 == null) {
		return null;
	}
	if(edge0.rightSite == edge1.rightSite) {
		return null;
	}
	determinant = edge0.a * edge1.b - edge0.b * edge1.a;
	if(-1.0e-10 < determinant && determinant < 1.0e-10) {
		return null;
	}
	var oneOverDet = 1 / determinant;
	intersectionX = (edge0.c * edge1.b - edge1.c * edge0.b) * oneOverDet;
	intersectionY = (edge1.c * edge0.a - edge0.c * edge1.a) * oneOverDet;
	var edge;
	var s1 = edge0.rightSite;
	var s2 = edge1.rightSite;
	if(s1.coord.y < s2.coord.y || s1.coord.y == s2.coord.y && s1.coord.x < s2.coord.x) {
		halfedge = halfedge0;
		edge = edge0;
	} else {
		halfedge = halfedge1;
		edge = edge1;
	}
	rightOfSite = intersectionX >= edge.rightSite.coord.x;
	if(rightOfSite && halfedge.leftRight == com_nodename_delaunay_LR.LEFT || !rightOfSite && halfedge.leftRight == com_nodename_delaunay_LR.RIGHT) {
		return null;
	}
	return com_nodename_delaunay_Vertex.create(intersectionX,intersectionY);
};
com_nodename_delaunay_Vertex.prototype = {
	coord: null
	,get_coord: function() {
		return this.coord;
	}
	,vertexIndex: null
	,init: function(x,y) {
		this.coord = new com_nodename_geom_Point(x,y);
		return this;
	}
	,dispose: function() {
		this.coord = null;
		com_nodename_delaunay_Vertex._pool.push(this);
	}
	,__class__: com_nodename_delaunay_Vertex
};
var com_nodename_delaunay_Voronoi = function(points,colors,plotBounds) {
	this._sites = new com_nodename_delaunay_SiteList();
	this._sitesIndexedByLocation = new haxe_ds_ObjectMap();
	this.addSites(points,colors);
	this._plotBounds = plotBounds;
	this._triangles = [];
	this._edges = [];
	this.fortunesAlgorithm();
};
$hxClasses["com.nodename.delaunay.Voronoi"] = com_nodename_delaunay_Voronoi;
com_nodename_delaunay_Voronoi.__name__ = ["com","nodename","delaunay","Voronoi"];
com_nodename_delaunay_Voronoi.myTest = function(edge) {
	if(edge.leftVertex != null) {
		return edge.rightVertex == null;
	} else {
		return true;
	}
};
com_nodename_delaunay_Voronoi.compareByYThenX = function(s1,s2) {
	if(s1.coord.y < s2.coord.y) {
		return -1;
	}
	if(s1.coord.y > s2.coord.y) {
		return 1;
	}
	if(s1.coord.x < s2.coord.x) {
		return -1;
	}
	if(s1.coord.x > s2.coord.x) {
		return 1;
	}
	return 0;
};
com_nodename_delaunay_Voronoi.prototype = {
	_sites: null
	,_sitesIndexedByLocation: null
	,_triangles: null
	,_edges: null
	,_plotBounds: null
	,dispose: function() {
		var i;
		var n;
		if(this._sites != null) {
			this._sites.dispose();
			this._sites = null;
		}
		if(this._triangles != null) {
			n = this._triangles.length;
			var _g1 = 0;
			var _g = n;
			while(_g1 < _g) {
				var i1 = _g1++;
				this._triangles[i1].dispose();
			}
			this._triangles.length = 0;
			this._triangles = null;
		}
		if(this._edges != null) {
			n = this._edges.length;
			var _g11 = 0;
			var _g2 = n;
			while(_g11 < _g2) {
				var i2 = _g11++;
				this._edges[i2].dispose();
			}
			this._edges.length = 0;
			this._edges = null;
		}
		this._plotBounds = null;
		this._sitesIndexedByLocation = null;
	}
	,addSites: function(points,colors) {
		var length = points.length;
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			this.addSite(points[i],colors != null ? colors[i] : 0,i);
		}
	}
	,addSite: function(p,color,index) {
		var weight = Math.random() * 100;
		var site = com_nodename_delaunay_Site.create(p,index,weight,color);
		this._sites.push(site);
		this._sitesIndexedByLocation.set(p,site);
	}
	,region: function(p) {
		var site = this._sitesIndexedByLocation.h[p.__id__];
		if(site == null) {
			return [];
		}
		return site.region(this._plotBounds);
	}
	,delaunayTriangulation: function() {
		return com_nodename_delaunay_SelectHelper.delaunayLinesForEdges(this._edges);
	}
	,hull: function() {
		return com_nodename_delaunay_SelectHelper.delaunayLinesForEdges(this.hullEdges());
	}
	,hullEdges: function() {
		return this._edges.filter(com_nodename_delaunay_Voronoi.myTest);
	}
	,hullPointsInOrder: function() {
		var hullEdges = this.hullEdges();
		var points = [];
		if(hullEdges.length == 0) {
			return points;
		}
		var reorderer = new com_nodename_delaunay_EdgeReorderer(hullEdges,com_nodename_delaunay_EdgeReorderer.edgeToLeftSite,com_nodename_delaunay_EdgeReorderer.edgeToRightSite);
		hullEdges = reorderer.edges;
		var orientations = reorderer.edgeOrientations;
		reorderer.dispose();
		var orientation;
		var n = hullEdges.length;
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var edge = hullEdges[i];
			orientation = orientations[i];
			points.push((orientation == com_nodename_delaunay_LR.LEFT ? edge.leftSite : edge.rightSite).coord);
		}
		return points;
	}
	,spanningTree: function(type) {
		var segments = com_nodename_delaunay_SelectHelper.delaunayLinesForEdges(this._edges);
		return com_nodename_delaunay_Kruskal.kruskal(segments,type);
	}
	,regions: function() {
		return this._sites.regions(this._plotBounds);
	}
	,triangles: function() {
		return this._triangles;
	}
	,nearestSitePoint: function(x,y) {
		return this._sites.nearestSitePoint(x,y);
	}
	,siteCoords: function() {
		return this._sites.siteCoords();
	}
	,fortunesAlgorithm: function() {
		var newSite;
		var newintstar = null;
		var dataBounds = this._sites.getSitesBounds();
		var sqrt_nsites = Math.sqrt(this._sites._sites.length + 4) | 0;
		var heap = new com_nodename_delaunay_HalfedgePriorityQueue(dataBounds.y,dataBounds.height,sqrt_nsites);
		var edgeList = new com_nodename_delaunay_EdgeList(dataBounds.x,dataBounds.width,sqrt_nsites);
		var halfEdges = [];
		var vertices = [];
		var bottomMostSite = this._sites.next();
		var leftRegion = function(he) {
			var edge = he.edge;
			if(edge == null) {
				return bottomMostSite;
			}
			if(he.leftRight == com_nodename_delaunay_LR.LEFT) {
				return edge.leftSite;
			} else {
				return edge.rightSite;
			}
		};
		var rightRegion = function(he1) {
			var edge1 = he1.edge;
			if(edge1 == null) {
				return bottomMostSite;
			}
			if(com_nodename_delaunay_LR.other(he1.leftRight) == com_nodename_delaunay_LR.LEFT) {
				return edge1.leftSite;
			} else {
				return edge1.rightSite;
			}
		};
		newSite = this._sites.next();
		while(true) {
			if(heap.empty() == false) {
				newintstar = heap.min();
			}
			if(newSite != null && (heap.empty() || (newSite.coord.y < newintstar.y || newSite.coord.y == newintstar.y && newSite.coord.x < newintstar.x))) {
				var lbnd = edgeList.edgeListLeftNeighbor(newSite.coord);
				var rbnd = lbnd.edgeListRightNeighbor;
				var bottomSite = rightRegion(lbnd);
				var edge2 = com_nodename_delaunay_Edge.createBisectingEdge(bottomSite,newSite);
				this._edges.push(edge2);
				var bisector = com_nodename_delaunay_Halfedge.create(edge2,com_nodename_delaunay_LR.LEFT);
				halfEdges.push(bisector);
				edgeList.insert(lbnd,bisector);
				var vertex = com_nodename_delaunay_Vertex.intersect(lbnd,bisector);
				if(vertex != null) {
					heap.remove(lbnd);
					vertices.push(vertex);
					lbnd.vertex = vertex;
					lbnd.ystar = vertex.coord.y + newSite.dist(vertex);
					heap.insert(lbnd);
				}
				lbnd = bisector;
				bisector = com_nodename_delaunay_Halfedge.create(edge2,com_nodename_delaunay_LR.RIGHT);
				halfEdges.push(bisector);
				edgeList.insert(lbnd,bisector);
				var vertex1 = com_nodename_delaunay_Vertex.intersect(bisector,rbnd);
				if(vertex1 != null) {
					vertices.push(vertex1);
					bisector.vertex = vertex1;
					bisector.ystar = vertex1.coord.y + newSite.dist(vertex1);
					heap.insert(bisector);
				}
				newSite = this._sites.next();
			} else if(heap.empty() == false) {
				var lbnd1 = heap.extractMin();
				var llbnd = lbnd1.edgeListLeftNeighbor;
				var rbnd1 = lbnd1.edgeListRightNeighbor;
				var rrbnd = rbnd1.edgeListRightNeighbor;
				var bottomSite1 = leftRegion(lbnd1);
				var topSite = rightRegion(rbnd1);
				this._triangles.push(new com_nodename_delaunay_Triangle(bottomSite1,topSite,rightRegion(lbnd1)));
				var v = lbnd1.vertex;
				v.vertexIndex = com_nodename_delaunay_Vertex._nvertices++;
				lbnd1.edge.setVertex(lbnd1.leftRight,v);
				rbnd1.edge.setVertex(rbnd1.leftRight,v);
				edgeList.remove(lbnd1);
				heap.remove(rbnd1);
				edgeList.remove(rbnd1);
				var leftRight = com_nodename_delaunay_LR.LEFT;
				if(bottomSite1.coord.y > topSite.coord.y) {
					var tempSite = bottomSite1;
					bottomSite1 = topSite;
					topSite = tempSite;
					leftRight = com_nodename_delaunay_LR.RIGHT;
				}
				var edge3 = com_nodename_delaunay_Edge.createBisectingEdge(bottomSite1,topSite);
				this._edges.push(edge3);
				var bisector1 = com_nodename_delaunay_Halfedge.create(edge3,leftRight);
				halfEdges.push(bisector1);
				edgeList.insert(llbnd,bisector1);
				edge3.setVertex(com_nodename_delaunay_LR.other(leftRight),v);
				var vertex2 = com_nodename_delaunay_Vertex.intersect(llbnd,bisector1);
				if(vertex2 != null) {
					heap.remove(llbnd);
					vertices.push(vertex2);
					llbnd.vertex = vertex2;
					llbnd.ystar = vertex2.coord.y + bottomSite1.dist(vertex2);
					heap.insert(llbnd);
				}
				vertex2 = com_nodename_delaunay_Vertex.intersect(bisector1,rrbnd);
				if(vertex2 != null) {
					vertices.push(vertex2);
					bisector1.vertex = vertex2;
					bisector1.ystar = vertex2.coord.y + bottomSite1.dist(vertex2);
					heap.insert(bisector1);
				}
			} else {
				break;
			}
		}
		heap.dispose();
		edgeList.dispose();
		var _g = 0;
		while(_g < halfEdges.length) {
			var halfEdge = halfEdges[_g];
			++_g;
			halfEdge.reallyDispose();
		}
		halfEdges.length = 0;
		var _g1 = 0;
		var _g11 = this._edges;
		while(_g1 < _g11.length) {
			var edge4 = _g11[_g1];
			++_g1;
			edge4.clipVertices(this._plotBounds);
		}
		var _g2 = 0;
		while(_g2 < vertices.length) {
			var vertex3 = vertices[_g2];
			++_g2;
			vertex3.dispose();
		}
		vertices.length = 0;
	}
	,__class__: com_nodename_delaunay_Voronoi
};
var com_nodename_geom_LineSegment = function(p0,p1) {
	this.p0 = p0;
	this.p1 = p1;
};
$hxClasses["com.nodename.geom.LineSegment"] = com_nodename_geom_LineSegment;
com_nodename_geom_LineSegment.__name__ = ["com","nodename","geom","LineSegment"];
com_nodename_geom_LineSegment.compareLengths_MAX = function(segment0,segment1) {
	var length0 = com_nodename_geom_Point.distanceSquared(segment0.p0,segment0.p1);
	var length1 = com_nodename_geom_Point.distanceSquared(segment1.p0,segment1.p1);
	if(length0 < length1) {
		return 1;
	} else if(length0 > length1) {
		return -1;
	} else {
		return 0;
	}
};
com_nodename_geom_LineSegment.compareLengths = function(edge0,edge1) {
	return -com_nodename_geom_LineSegment.compareLengths_MAX(edge0,edge1);
};
com_nodename_geom_LineSegment.prototype = {
	p0: null
	,p1: null
	,__class__: com_nodename_geom_LineSegment
};
var com_nodename_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["com.nodename.geom.Point"] = com_nodename_geom_Point;
com_nodename_geom_Point.__name__ = ["com","nodename","geom","Point"];
com_nodename_geom_Point.distanceSquared = function(p,q) {
	var dx = p.x - q.x;
	var dy = p.y - q.y;
	return dx * dx + dy * dy;
};
com_nodename_geom_Point.prototype = {
	x: null
	,y: null
	,setTo: function(x,y) {
		this.x = x;
		this.y = y;
		return this;
	}
	,normalize: function(length) {
		var denom = Math.sqrt(this.x * this.x + this.y * this.y);
		if(denom != 0) {
			var f = length / denom;
			this.x *= f;
			this.y *= f;
		}
		return this;
	}
	,__class__: com_nodename_geom_Point
};
var com_nodename_geom_Polygon = function(vertices) {
	this._vertices = vertices;
};
$hxClasses["com.nodename.geom.Polygon"] = com_nodename_geom_Polygon;
com_nodename_geom_Polygon.__name__ = ["com","nodename","geom","Polygon"];
com_nodename_geom_Polygon.prototype = {
	_vertices: null
	,winding: function() {
		var signedDoubleArea = this.signedDoubleArea();
		if(signedDoubleArea < 0) {
			return com_nodename_geom_Winding.CLOCKWISE;
		} else if(signedDoubleArea > 0) {
			return com_nodename_geom_Winding.COUNTERCLOCKWISE;
		} else {
			return com_nodename_geom_Winding.NONE;
		}
	}
	,signedDoubleArea: function() {
		var index;
		var nextIndex;
		var n = this._vertices.length;
		var point;
		var next;
		var signedDoubleArea = 0.0;
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var index1 = _g1++;
			nextIndex = (index1 + 1) % n;
			point = this._vertices[index1];
			next = this._vertices[nextIndex];
			signedDoubleArea += point.x * next.y - next.x * point.y;
		}
		return signedDoubleArea;
	}
	,__class__: com_nodename_geom_Polygon
};
var com_nodename_geom_Rectangle = function(x,y,w,h) {
	if(h == null) {
		h = 0;
	}
	if(w == null) {
		w = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = w;
	this.height = h;
};
$hxClasses["com.nodename.geom.Rectangle"] = com_nodename_geom_Rectangle;
com_nodename_geom_Rectangle.__name__ = ["com","nodename","geom","Rectangle"];
com_nodename_geom_Rectangle.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,__class__: com_nodename_geom_Rectangle
};
var com_nodename_geom_Winding = $hxClasses["com.nodename.geom.Winding"] = { __ename__ : ["com","nodename","geom","Winding"], __constructs__ : ["CLOCKWISE","COUNTERCLOCKWISE","NONE"] };
com_nodename_geom_Winding.CLOCKWISE = ["CLOCKWISE",0];
com_nodename_geom_Winding.CLOCKWISE.toString = $estr;
com_nodename_geom_Winding.CLOCKWISE.__enum__ = com_nodename_geom_Winding;
com_nodename_geom_Winding.COUNTERCLOCKWISE = ["COUNTERCLOCKWISE",1];
com_nodename_geom_Winding.COUNTERCLOCKWISE.toString = $estr;
com_nodename_geom_Winding.COUNTERCLOCKWISE.__enum__ = com_nodename_geom_Winding;
com_nodename_geom_Winding.NONE = ["NONE",2];
com_nodename_geom_Winding.NONE.toString = $estr;
com_nodename_geom_Winding.NONE.__enum__ = com_nodename_geom_Winding;
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = ["haxe","Resource"];
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = Type.getClassName(v);
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
			break;
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case List:
				this.buf.b += "l";
				var v3 = v;
				var _g_head = v3.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i1 = val;
					this.serialize(i1);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v4 = v;
				var k = v4.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v4.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v5.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v6.getReserved(k5) : v6.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i2 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var length = haxe_Serializer.BASE64.length;
					var this1 = new Array(length);
					b64 = this1;
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i3 = _g11++;
						b64[i3] = HxOverrides.cca(haxe_Serializer.BASE64,i3);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i2 < max) {
					var b1 = v7.b[i2++];
					var b2 = v7.b[i2++];
					var b3 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b1 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCharCode(b64[b3 & 63]);
				}
				if(i2 == max) {
					var b11 = v7.b[i2++];
					var b21 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b11 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[b21 << 2 & 63]);
				} else if(i2 == max + 1) {
					var b12 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b12 >> 2]);
					this.buf.b += String.fromCharCode(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g[2];
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(Type.getEnumName(e));
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.b += ":";
			var l1 = v["length"];
			this.buf.b += Std.string(l1 - 2);
			var _g12 = 2;
			var _g4 = l1;
			while(_g12 < _g4) {
				var i4 = _g12++;
				this.serialize(v[i4]);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = ["haxe","_Unserializer","NullResolver"];
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,byteLength: null
	,byteOffset: null
	,buffer: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime__$backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
lime__$backend_html5_GameDeviceData.__name__ = ["lime","_backend","html5","GameDeviceData"];
lime__$backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$backend_html5_GameDeviceData
};
var lime__$backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.id = -1;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._backend.html5.HTML5AudioSource"] = lime__$backend_html5_HTML5AudioSource;
lime__$backend_html5_HTML5AudioSource.__name__ = ["lime","_backend","html5","HTML5AudioSource"];
lime__$backend_html5_HTML5AudioSource.prototype = {
	completed: null
	,gain: null
	,id: null
	,length: null
	,loops: null
	,parent: null
	,playing: null
	,position: null
	,dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		if(this.playing || this.parent.buffer == null) {
			return;
		}
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		var cacheVolume = this.parent.buffer.__srcHowl._volume;
		this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
		this.id = this.parent.buffer.__srcHowl.play();
		this.parent.buffer.__srcHowl._volume = cacheVolume;
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,stop: function() {
		this.playing = false;
		if(this.parent.buffer != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
		}
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else {
			this.parent.buffer.__srcHowl.stop(this.id);
		}
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.id == -1) {
			return 0;
		}
		if(this.completed) {
			return this.getLength();
		} else if(this.parent.buffer != null) {
			var time = (this.parent.buffer.__srcHowl.seek(this.id) * 1000 | 0) - this.parent.offset;
			if(time < 0) {
				return 0;
			}
			return time;
		}
		return 0;
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) {
				pos = 0;
			}
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null && this.id != -1) {
			this.parent.buffer.__srcHowl.volume(value,this.id);
		}
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) {
			return this.length;
		}
		if(this.parent.buffer != null) {
			return this.parent.buffer.__srcHowl.duration() * 1000 | 0;
		}
		return 0;
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		return this.position;
	}
	,__class__: lime__$backend_html5_HTML5AudioSource
};
var lime__$backend_html5_HTML5GLRenderContext = function(context) {
	this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
	this.COLOR_ATTACHMENT0 = 36064;
	this.DEPTH_STENCIL = 34041;
	this.FRAMEBUFFER = 36160;
	this.CLAMP_TO_EDGE = 33071;
	this.TEXTURE0 = 33984;
	this.TEXTURE_CUBE_MAP = 34067;
	this.TEXTURE_2D = 3553;
	this.TEXTURE_WRAP_T = 10243;
	this.TEXTURE_WRAP_S = 10242;
	this.TEXTURE_MIN_FILTER = 10241;
	this.TEXTURE_MAG_FILTER = 10240;
	this.LINEAR = 9729;
	this.NEAREST = 9728;
	this.VERSION = 7938;
	this.RENDERER = 7937;
	this.VENDOR = 7936;
	this.DECR = 7683;
	this.INCR = 7682;
	this.KEEP = 7680;
	this.EQUAL = 514;
	this.SHADING_LANGUAGE_VERSION = 35724;
	this.RGBA = 6408;
	this.ALPHA = 6406;
	this.FLOAT = 5126;
	this.UNSIGNED_BYTE = 5121;
	this.MAX_VIEWPORT_DIMS = 3386;
	this.MAX_TEXTURE_SIZE = 3379;
	this.SCISSOR_TEST = 3089;
	this.STENCIL_TEST = 2960;
	this.BLEND = 3042;
	this.STATIC_DRAW = 35044;
	this.ARRAY_BUFFER = 34962;
	this.FUNC_REVERSE_SUBTRACT = 32779;
	this.FUNC_ADD = 32774;
	this.ONE_MINUS_DST_COLOR = 775;
	this.DST_COLOR = 774;
	this.ONE_MINUS_DST_ALPHA = 773;
	this.DST_ALPHA = 772;
	this.ONE_MINUS_SRC_ALPHA = 771;
	this.SRC_ALPHA = 770;
	this.ONE_MINUS_SRC_COLOR = 769;
	this.SRC_COLOR = 768;
	this.ONE = 1;
	this.ZERO = 0;
	this.TRIANGLE_STRIP = 5;
	this.COLOR_BUFFER_BIT = 16384;
	this.STENCIL_BUFFER_BIT = 1024;
	this.__context = context;
	this.version = 1;
	this.type = lime_graphics_opengl_GLContextType.WEBGL;
	if(context != null) {
		var gl = context;
		if(Object.prototype.hasOwnProperty.call(gl,"rawgl")) {
			gl = Reflect.field(context,"rawgl");
		}
		if(Object.prototype.hasOwnProperty.call(window,"WebGL2RenderingContext") && js_Boot.__instanceof(gl,WebGL2RenderingContext)) {
			this.version = 2;
		}
	}
};
$hxClasses["lime._backend.html5.HTML5GLRenderContext"] = lime__$backend_html5_HTML5GLRenderContext;
lime__$backend_html5_HTML5GLRenderContext.__name__ = ["lime","_backend","html5","HTML5GLRenderContext"];
lime__$backend_html5_HTML5GLRenderContext.prototype = {
	STENCIL_BUFFER_BIT: null
	,COLOR_BUFFER_BIT: null
	,TRIANGLE_STRIP: null
	,ZERO: null
	,ONE: null
	,SRC_COLOR: null
	,ONE_MINUS_SRC_COLOR: null
	,SRC_ALPHA: null
	,ONE_MINUS_SRC_ALPHA: null
	,DST_ALPHA: null
	,ONE_MINUS_DST_ALPHA: null
	,DST_COLOR: null
	,ONE_MINUS_DST_COLOR: null
	,FUNC_ADD: null
	,FUNC_REVERSE_SUBTRACT: null
	,ARRAY_BUFFER: null
	,STATIC_DRAW: null
	,BLEND: null
	,STENCIL_TEST: null
	,SCISSOR_TEST: null
	,MAX_TEXTURE_SIZE: null
	,MAX_VIEWPORT_DIMS: null
	,UNSIGNED_BYTE: null
	,FLOAT: null
	,ALPHA: null
	,RGBA: null
	,SHADING_LANGUAGE_VERSION: null
	,EQUAL: null
	,KEEP: null
	,INCR: null
	,DECR: null
	,VENDOR: null
	,RENDERER: null
	,VERSION: null
	,NEAREST: null
	,LINEAR: null
	,TEXTURE_MAG_FILTER: null
	,TEXTURE_MIN_FILTER: null
	,TEXTURE_WRAP_S: null
	,TEXTURE_WRAP_T: null
	,TEXTURE_2D: null
	,TEXTURE_CUBE_MAP: null
	,TEXTURE0: null
	,CLAMP_TO_EDGE: null
	,FRAMEBUFFER: null
	,DEPTH_STENCIL: null
	,COLOR_ATTACHMENT0: null
	,UNPACK_PREMULTIPLY_ALPHA_WEBGL: null
	,type: null
	,version: null
	,__context: null
	,__contextLost: null
	,bufferDataWEBGL: function(target,srcData,usage,srcOffset,length) {
		if(srcOffset != null) {
			this.__context.bufferData(target,srcData,usage,srcOffset,length);
		} else {
			this.__context.bufferData(target,srcData,usage);
		}
	}
	,texImage2DWEBGL: function(target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
		if(srcOffset != null) {
			this.__context.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
		} else if(format != null) {
			this.__context.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
		} else {
			this.__context.texImage2D(target,level,internalformat,width,height,border);
		}
	}
	,__class__: lime__$backend_html5_HTML5GLRenderContext
};
var lime__$backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
};
$hxClasses["lime._backend.html5.HTML5HTTPRequest"] = lime__$backend_html5_HTML5HTTPRequest;
lime__$backend_html5_HTML5HTTPRequest.__name__ = ["lime","_backend","html5","HTML5HTTPRequest"];
lime__$backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$backend_html5_HTML5HTTPRequest.__loadImage(uri,promise);
	} else {
		lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE"});
	}
	return promise.future;
};
lime__$backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit && lime__$backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$backend_html5_HTML5HTTPRequest.requestQueue.pop();
		var _g = queueItem.type;
		switch(_g) {
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case "IMAGE":
			lime__$backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
lime__$backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
lime__$backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
lime__$backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(lime__$backend_html5_HTML5HTTPRequest.originElement == null) {
		lime__$backend_html5_HTML5HTTPRequest.originElement = window.document.createElement("a");
		lime__$backend_html5_HTML5HTTPRequest.originHostname = lime__$backend_html5_HTML5HTTPRequest.__fixHostname(window.location.hostname);
		lime__$backend_html5_HTML5HTTPRequest.originProtocol = lime__$backend_html5_HTML5HTTPRequest.__fixProtocol(window.location.protocol);
		lime__$backend_html5_HTML5HTTPRequest.originPort = lime__$backend_html5_HTML5HTTPRequest.__fixPort(window.location.port,lime__$backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = lime__$backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == lime__$backend_html5_HTML5HTTPRequest.originHostname;
	var samePort = port == "" || port == lime__$backend_html5_HTML5HTTPRequest.originPort;
	if(protocol != "file:" && sameHost) {
		return samePort;
	} else {
		return false;
	}
};
lime__$backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise) {
	var image = new Image();
	if(!lime__$backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(lime__$backend_html5_HTML5HTTPRequest.supportsImageProgress == null) {
		lime__$backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(lime__$backend_html5_HTML5HTTPRequest.supportsImageProgress || StringTools.startsWith(uri,"data:")) {
		image.addEventListener("load",function(event) {
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event1) {
			promise.progress(event1.loaded,event1.total);
		},false);
		image.addEventListener("error",function(event2) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(event2.detail);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img1) {
				promise.complete(img1);
			});
		};
		request.onerror = function(event3) {
			promise.error(event3.message);
		};
		request.onprogress = function(event4) {
			if(event4.lengthComputable) {
				promise.progress(event4.loaded,event4.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$backend_html5_HTML5HTTPRequest.prototype = {
	binary: null
	,parent: null
	,request: null
	,validStatus0: null
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST") {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var key = this.parent.formData.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				if(query.length > 0) {
					query += "&";
				}
				var query1 = encodeURIComponent(key1) + "=";
				var _this = this.parent.formData;
				var s = Std.string(__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]);
				query += query1 + encodeURIComponent(s);
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.parent.contentType != null) {
			contentType = this.parent.contentType;
		}
		if(contentType == null) {
			if(this.parent.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.parent.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else {
			lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY"});
		}
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$backend_html5_HTML5HTTPRequest.activeRequests < lime__$backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else {
			lime__$backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT"});
		}
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				var bytes = null;
				if(_gthis.request.responseType == "") {
					if(_gthis.request.responseText != null) {
						bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
					}
				} else if(_gthis.request.response != null) {
					bytes = haxe_io_Bytes.ofData(_gthis.request.response);
				}
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status <= 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$backend_html5_HTML5HTTPRequest
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				var tmp;
				switch(value[1]) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				$window.backend.element.style.cursor = tmp;
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	parent: null
	,create: function() {
		this.createContext();
		var _g = this.parent.context;
		if(_g[1] == 0) {
			this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
			this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			var renderType = this.parent.window.backend.renderType;
			var forceCanvas = renderType == "canvas";
			var forceWebGL = renderType == "opengl" || renderType == "webgl" || renderType == "webgl1" || renderType == "webgl2";
			var allowWebGL2 = renderType != "webgl1";
			if(forceWebGL || !forceCanvas && (!Object.prototype.hasOwnProperty.call(this.parent.window.config,"hardware") || this.parent.window.config.hardware)) {
				var transparentBackground = Object.prototype.hasOwnProperty.call(this.parent.window.config,"background") && this.parent.window.config.background == null;
				var colorDepth = Object.prototype.hasOwnProperty.call(this.parent.window.config,"colorDepth") ? this.parent.window.config.colorDepth : 16;
				var options = Object.prototype.hasOwnProperty.call(this.parent.window.config,"antialiasing") && this.parent.window.config.antialiasing > 0;
				var options1 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : Object.prototype.hasOwnProperty.call(this.parent.window.config,"depthBuffer") ? this.parent.window.config.depthBuffer : true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call(this.parent.window.config,"stencilBuffer") && this.parent.window.config.stencilBuffer, preserveDrawingBuffer : false};
				var glContextType = ["webgl","experimental-webgl"];
				if(allowWebGL2) {
					glContextType.unshift("webgl2");
				}
				var _g = 0;
				while(_g < glContextType.length) {
					var name = glContextType[_g];
					++_g;
					webgl = this.parent.window.backend.canvas.getContext(name,options1);
					if(webgl != null) {
						break;
					}
				}
			}
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				lime_graphics_opengl_GL.context = new lime__$backend_html5_HTML5GLRenderContext(webgl);
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			if(lime_graphics_opengl_GL.context != null) {
				lime_graphics_opengl_GL.context.__contextLost = true;
			}
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) {
		this.element = parent.config.element;
	}
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"renderer")) {
		this.renderType = parent.config.renderer;
	}
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"allowHighDPI") && parent.config.allowHighDPI && this.renderType != "dom") {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,element: null
	,cacheElementHeight: null
	,cacheElementWidth: null
	,cacheMouseX: null
	,cacheMouseY: null
	,currentTouches: null
	,enableTextEvents: null
	,parent: null
	,primaryTouch: null
	,renderType: null
	,resizeElement: null
	,scale: null
	,setHeight: null
	,setWidth: null
	,unusedTouchesPool: null
	,close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) {
			this.canvas = this.element;
		} else if(this.renderType == "dom") {
			this.div = window.document.createElement("div");
		} else {
			this.canvas = window.document.createElement("canvas");
		}
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.cacheElementWidth = this.parent.__width;
			this.cacheElementHeight = this.parent.__height;
			this.resizeElement = true;
		}
		if(this.canvas != null) {
			this.canvas.width = Math.round(this.parent.__width * this.scale);
			this.canvas.height = Math.round(this.parent.__height * this.scale);
			this.canvas.style.width = this.parent.__width + "px";
			this.canvas.style.height = this.parent.__height + "px";
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.updateSize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) {
					this.element.appendChild(this.canvas);
				}
			} else {
				this.element.appendChild(this.div);
			}
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
			this.element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
		}
	}
	,handleContextMenuEvent: function(event) {
		if(this.parent.onMouseUp.canceled) {
			event.preventDefault();
		}
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		event.preventDefault();
	}
	,handleFocusEvent: function(event) {
		var _gthis = this;
		if(this.enableTextEvents) {
			if(event.relatedTarget == null || this.isDescendent(event.relatedTarget)) {
				haxe_Timer.delay(function() {
					if(_gthis.enableTextEvents) {
						lime__$backend_html5_HTML5Window.textInput.focus();
					}
				},20);
			}
		}
	}
	,handleGamepadEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != lime__$backend_html5_HTML5Window.dummyCharacter) {
			var value = StringTools.replace(lime__$backend_html5_HTML5Window.textInput.value,lime__$backend_html5_HTML5Window.dummyCharacter,"");
			if(value.length > 0) {
				this.parent.onTextInput.dispatch(value);
			}
			lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if(this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
			if(this.parent.onMouseWheel.canceled) {
				event.preventDefault();
			}
		}
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = event.clipboardData.getData("text/plain");
			lime_system_Clipboard.set_text(text);
			if(this.enableTextEvents) {
				this.parent.onTextInput.dispatch(text);
			}
			event.preventDefault();
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) {
					touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch;
				}
				if(touch == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
			} else {
				touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					var _g2 = event.type;
					switch(_g2) {
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.primaryTouch = null;
						}
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseMove.dispatch(x,y);
						}
						break;
					default:
					}
				}
			}
		}
	}
	,isDescendent: function(node) {
		if(node == this.element) {
			return true;
		}
		while(node != null) {
			if(node.parentNode == this.element) {
				return true;
			}
			node = node.parentNode;
		}
		return false;
	}
	,resize: function(width,height) {
	}
	,setClipboard: function(value) {
		var inputEnabled = this.enableTextEvents;
		this.setEnableTextEvents(true);
		var cacheText = lime__$backend_html5_HTML5Window.textInput.value;
		lime__$backend_html5_HTML5Window.textInput.value = value;
		lime__$backend_html5_HTML5Window.textInput.select();
		if(window.document.queryCommandEnabled("copy")) {
			window.document.execCommand("copy");
		}
		lime__$backend_html5_HTML5Window.textInput.value = cacheText;
		this.setEnableTextEvents(inputEnabled);
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter;
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
			lime__$backend_html5_HTML5Window.textInput.select();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,updateSize: function() {
		if(!this.parent.__resizable) {
			return;
		}
		var elementWidth;
		var elementHeight;
		if(this.element != null) {
			elementWidth = this.element.clientWidth;
			elementHeight = this.element.clientHeight;
		} else {
			elementWidth = window.innerWidth;
			elementHeight = window.innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.set_width(elementWidth);
						this.parent.set_height(elementHeight);
						if(this.canvas != null) {
							if(this.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
					var scaleY = this.setHeight != 0 ? elementHeight / this.setHeight : 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.error = e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	error: null
	,isComplete: null
	,isError: null
	,value: null
	,__completeListeners: null
	,__errorListeners: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.onError(this.error);
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = ["lime","app","_Future","FutureWork"];
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Preloader = function() {
	this.bytesTotalCache = new haxe_ds_StringMap();
	this.bytesLoadedCache2 = new haxe_ds_StringMap();
	this.bytesLoadedCache = new haxe_ds_ObjectMap();
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.libraries = [];
	this.libraryNames = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesLoadedCache2: null
	,bytesTotal: null
	,bytesTotalCache: null
	,initLibraryNames: null
	,libraries: null
	,libraryNames: null
	,loadedLibraries: null
	,preloadComplete: null
	,preloadStarted: null
	,simulateProgress: null
	,addLibrary: function(library) {
		this.libraries.push(library);
	}
	,addLibraryName: function(name) {
		if(this.libraryNames.indexOf(name) == -1) {
			this.libraryNames.push(name);
		}
	}
	,create: function(config) {
	}
	,load: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			this.bytesTotal += library.bytesTotal;
		}
		this.loadedLibraries = -1;
		this.preloadStarted = false;
		var _g2 = 0;
		var _g11 = this.libraries;
		while(_g2 < _g11.length) {
			var library1 = [_g11[_g2]];
			++_g2;
			lime_utils_Log.verbose("Preloading asset library",{ fileName : "Preloader.hx", lineNumber : 153, className : "lime.app.Preloader", methodName : "load"});
			library1[0].load().onProgress((function(library2) {
				return function(loaded,total) {
					if(_gthis.bytesLoadedCache.h.__keys__[library2[0].__id__] == null) {
						_gthis.bytesLoaded += loaded;
					} else {
						_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache.h[library2[0].__id__];
					}
					_gthis.bytesLoadedCache.set(library2[0],loaded);
					if(!_gthis.simulateProgress) {
						_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
					}
				};
			})(library1)).onComplete((function(library3) {
				return function(_) {
					if(_gthis.bytesLoadedCache.h.__keys__[library3[0].__id__] == null) {
						_gthis.bytesLoaded += library3[0].bytesTotal;
					} else {
						_gthis.bytesLoaded += library3[0].bytesTotal - _gthis.bytesLoadedCache.h[library3[0].__id__];
					}
					_gthis.loadedAssetLibrary();
				};
			})(library1)).onError((function() {
				return function(e) {
					lime_utils_Log.error(e,{ fileName : "Preloader.hx", lineNumber : 191, className : "lime.app.Preloader", methodName : "load"});
				};
			})());
		}
		var _g3 = 0;
		var _g12 = this.libraryNames;
		while(_g3 < _g12.length) {
			var name = _g12[_g3];
			++_g3;
			this.bytesTotal += 200;
		}
		this.loadedLibraries++;
		this.preloadStarted = true;
		this.updateProgress();
	}
	,loadedAssetLibrary: function(name) {
		this.loadedLibraries++;
		var current = this.loadedLibraries;
		if(!this.preloadStarted) {
			++current;
		}
		var totalLibraries = this.libraries.length + this.libraryNames.length;
		if(name != null) {
			lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]",{ fileName : "Preloader.hx", lineNumber : 223, className : "lime.app.Preloader", methodName : "loadedAssetLibrary"});
		} else {
			lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]",{ fileName : "Preloader.hx", lineNumber : 227, className : "lime.app.Preloader", methodName : "loadedAssetLibrary"});
		}
		this.updateProgress();
	}
	,start: function() {
		if(this.complete) {
			return;
		}
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		var _gthis = this;
		if(!this.simulateProgress) {
			this.onProgress.dispatch(this.bytesLoaded,this.bytesTotal);
		}
		if(this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
			this.initLibraryNames = true;
			var _g = 0;
			var _g1 = this.libraryNames;
			while(_g < _g1.length) {
				var name = [_g1[_g]];
				++_g;
				lime_utils_Log.verbose("Preloading asset library: " + name[0],{ fileName : "Preloader.hx", lineNumber : 276, className : "lime.app.Preloader", methodName : "updateProgress"});
				lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name1) {
					return function(loaded,total) {
						if(total > 0) {
							var _this = _gthis.bytesTotalCache;
							if(!(__map_reserved[name1[0]] != null ? _this.existsReserved(name1[0]) : _this.h.hasOwnProperty(name1[0]))) {
								var _this1 = _gthis.bytesTotalCache;
								if(__map_reserved[name1[0]] != null) {
									_this1.setReserved(name1[0],total);
								} else {
									_this1.h[name1[0]] = total;
								}
								_gthis.bytesTotal += total - 200;
							}
							if(loaded > total) {
								loaded = total;
							}
							var _this2 = _gthis.bytesLoadedCache2;
							if(!(__map_reserved[name1[0]] != null ? _this2.existsReserved(name1[0]) : _this2.h.hasOwnProperty(name1[0]))) {
								_gthis.bytesLoaded += loaded;
							} else {
								var _this3 = _gthis.bytesLoadedCache2;
								_gthis.bytesLoaded += loaded - (__map_reserved[name1[0]] != null ? _this3.getReserved(name1[0]) : _this3.h[name1[0]]);
							}
							var _this4 = _gthis.bytesLoadedCache2;
							if(__map_reserved[name1[0]] != null) {
								_this4.setReserved(name1[0],loaded);
							} else {
								_this4.h[name1[0]] = loaded;
							}
							if(!_gthis.simulateProgress) {
								_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
							}
						}
					};
				})(name)).onComplete((function(name2) {
					return function(library) {
						var total1 = 200;
						var _this5 = _gthis.bytesTotalCache;
						if(__map_reserved[name2[0]] != null ? _this5.existsReserved(name2[0]) : _this5.h.hasOwnProperty(name2[0])) {
							var _this6 = _gthis.bytesTotalCache;
							if(__map_reserved[name2[0]] != null) {
								total1 = _this6.getReserved(name2[0]);
							} else {
								total1 = _this6.h[name2[0]];
							}
						}
						var _this7 = _gthis.bytesLoadedCache2;
						if(!(__map_reserved[name2[0]] != null ? _this7.existsReserved(name2[0]) : _this7.h.hasOwnProperty(name2[0]))) {
							_gthis.bytesLoaded += total1;
						} else {
							var _this8 = _gthis.bytesLoadedCache2;
							_gthis.bytesLoaded += total1 - (__map_reserved[name2[0]] != null ? _this8.getReserved(name2[0]) : _this8.h[name2[0]]);
						}
						_gthis.loadedAssetLibrary(name2[0]);
					};
				})(name)).onError((function() {
					return function(e) {
						lime_utils_Log.error(e,{ fileName : "Preloader.hx", lineNumber : 335, className : "lime.app.Preloader", methodName : "updateProgress"});
					};
				})());
			}
		}
		if(!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
			if(!this.preloadComplete) {
				this.preloadComplete = true;
				lime_utils_Log.verbose("Preload complete",{ fileName : "Preloader.hx", lineNumber : 349, className : "lime.app.Preloader", methodName : "updateProgress"});
			}
			this.start();
		}
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	future: null
	,complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,__class__: lime_app_Promise
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","_Event_Float_Float_Int_Void"];
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Float_Float_Void"];
lime_app__$Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Float_Void"];
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__listeners: null
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Void"];
lime_app__$Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = ["lime","app","_Event_Int_Int_Void"];
lime_app__$Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = ["lime","app","_Event_Int_Void"];
lime_app__$Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","_Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__listeners: null
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","_Event_String_Int_Int_Void"];
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__listeners: null
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = ["lime","app","_Event_String_Void"];
lime_app__$Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = ["lime","app","_Event_Void_Void"];
lime_app__$Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$haxe_$Function_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_haxe_Function_Void"] = lime_app__$Event_$haxe_$Function_$Void;
lime_app__$Event_$haxe_$Function_$Void.__name__ = ["lime","app","_Event_haxe_Function_Void"];
lime_app__$Event_$haxe_$Function_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$haxe_$Function_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","_Event_lime_graphics_RenderContext_Void"];
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadAxis_Float_Void"];
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadButton_Void"];
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","_Event_lime_ui_Gamepad_Void"];
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","_Event_lime_ui_Joystick_Void"];
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","_Event_lime_ui_Touch_Void"];
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		type = lime_graphics_ImageType.CANVAS;
	}
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.fromBase64 = function(base64,type) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromFile(path);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	if(base64 == null || type == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + base64);
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return lime_app_Future.withValue(null);
	}
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(lime_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(lime_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(lime_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return lime_app_Future.withValue(null);
	}
	return lime_graphics_Image.loadFromBase64(lime_graphics_Image.__base64Encode(bytes),type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) {
		lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	}
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) {
		return false;
	}
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255) {
		return bytes.b[bytes.length - 1] == 217;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) {
		return false;
	}
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,type: null
	,version: null
	,width: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this && destPoint.x < sourceRect.get_right() && destPoint.y < sourceRect.get_bottom()) {
			sourceImage = this.clone();
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			if(alphaImage != null || sourceImage.type != lime_graphics_ImageType.CANVAS) {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
				if(alphaImage != null) {
					lime_graphics_utils_ImageCanvasUtil.convertToData(alphaImage);
				}
				lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			} else {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
				lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			}
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToData(alphaImage);
			}
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null ? alphaImage.buffer.get_src() : null,alphaPoint != null ? alphaPoint.__toFlashPoint() : null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) {
			quality = 90;
		}
		if(format == null) {
			format = "png";
		}
		switch(format) {
		case "bmp":
			return lime_graphics_format_BMP.encode(this);
		case "jpeg":case "jpg":
			return lime_graphics_format_JPEG.encode(this,quality);
		case "png":
			return lime_graphics_format_PNG.encode(this);
		default:
		}
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this2 = 0;
					var bgra = this2;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this3 = 0;
					var rgba2 = this3;
					rgba2 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba3 = rgba2;
					return rgba3;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) {
			return null;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			return;
		}
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		if(!lime__$backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) {
			image.crossOrigin = "Anonymous";
		}
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_1) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
		var image1 = image.complete;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			if(_g[1] == 1) {
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 0:case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			if(_g1[1] == 1) {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else {
				this1 = null;
			}
			buffer.data = this1;
			var view = this.data;
			var this2;
			if(view != null) {
				this2 = new Uint8Array(view);
			} else {
				this2 = null;
			}
			var copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) {
			this.__srcImage = value;
		} else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app__$Event_$Void_$Void();
	this.onContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app__$Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	context: null
	,onContextLost: null
	,onContextRestored: null
	,onRender: null
	,type: null
	,window: null
	,backend: null
	,create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : ["lime","graphics","RendererType"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
var lime_graphics_cairo_Cairo = function() { };
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.prototype = {
	__class__: lime_graphics_cairo_Cairo
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = ["lime","graphics","format","BMP"];
lime_graphics_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) {
		type = lime_graphics_format_BMPType.RGB;
	}
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) {
		switch(type[1]) {
		case 0:
			pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
			break;
		case 1:
			infoHeaderLength = 108;
			break;
		case 2:
			fileHeaderLength = 0;
			pixelValuesLength += image.width * image.height;
			break;
		}
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		data.b[position++] = 66;
		data.b[position++] = 77;
		data.setInt32(position,data.length);
		position += 4;
		data.setUInt16(position,0);
		position += 2;
		data.setUInt16(position,0);
		position += 2;
		data.setInt32(position,fileHeaderLength + infoHeaderLength);
		position += 4;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime_graphics_format_BMPType.ICO ? image.height * 2 : image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime_graphics_format_BMPType.RGB ? 24 : 32);
	position += 2;
	data.setInt32(position,type == lime_graphics_format_BMPType.BITFIELD ? 3 : 0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.b[position++] = 32;
		data.b[position++] = 110;
		data.b[position++] = 105;
		data.b[position++] = 87;
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.b[position++] = 0;
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) {
		switch(type[1]) {
		case 0:
			var _g1 = 0;
			var _g2 = image.height;
			while(_g1 < _g2) {
				var y = _g1++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g3 = 0;
				var _g21 = image.width;
				while(_g3 < _g21) {
					var x = _g3++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
				}
				var _g31 = 0;
				var _g22 = image.width * 3 % 4;
				while(_g31 < _g22) {
					var i1 = _g31++;
					data.b[position++] = 0;
				}
			}
			break;
		case 1:
			var _g11 = 0;
			var _g4 = image.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				readPosition = (image.height - 1 - y1) * 4 * image.width;
				var _g32 = 0;
				var _g23 = image.width;
				while(_g32 < _g23) {
					var x1 = _g32++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
				}
			}
			break;
		case 2:
			var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
			var maskPosition = 0;
			var _g12 = 0;
			var _g5 = image.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				readPosition = (image.height - 1 - y2) * 4 * image.width;
				var _g33 = 0;
				var _g24 = image.width;
				while(_g33 < _g24) {
					var x2 = _g33++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
					andMask.b[maskPosition++] = 0;
				}
			}
			data.blit(position,andMask,0,image.width * image.height);
			break;
		}
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : ["lime","graphics","format","BMPType"], __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime_graphics_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	image.type = lime_graphics_ImageType.CANVAS;
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			var v = HxOverrides.cca(buffer,i);
			bytes.b[i] = v & 255;
		}
		return bytes;
	}
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = ["lime","graphics","format","PNG"];
lime_graphics_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	image.type = lime_graphics_ImageType.CANVAS;
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/png");
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			var v = HxOverrides.cca(buffer,i);
			bytes.b[i] = v & 255;
		}
		return bytes;
	}
	return null;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
var lime_graphics_opengl_GLContextType = $hxClasses["lime.graphics.opengl.GLContextType"] = { __ename__ : ["lime","graphics","opengl","GLContextType"], __constructs__ : ["OPENGL","GLES","WEBGL"] };
lime_graphics_opengl_GLContextType.OPENGL = ["OPENGL",0];
lime_graphics_opengl_GLContextType.OPENGL.toString = $estr;
lime_graphics_opengl_GLContextType.OPENGL.__enum__ = lime_graphics_opengl_GLContextType;
lime_graphics_opengl_GLContextType.GLES = ["GLES",1];
lime_graphics_opengl_GLContextType.GLES.toString = $estr;
lime_graphics_opengl_GLContextType.GLES.__enum__ = lime_graphics_opengl_GLContextType;
lime_graphics_opengl_GLContextType.WEBGL = ["WEBGL",2];
lime_graphics_opengl_GLContextType.WEBGL.toString = $estr;
lime_graphics_opengl_GLContextType.WEBGL.__enum__ = lime_graphics_opengl_GLContextType;
var lime_utils_BytePointerData = function(bytes,offset) {
	this.bytes = bytes;
	this.offset = offset;
};
$hxClasses["lime.utils.BytePointerData"] = lime_utils_BytePointerData;
lime_utils_BytePointerData.__name__ = ["lime","utils","BytePointerData"];
lime_utils_BytePointerData.prototype = {
	bytes: null
	,offset: null
	,__class__: lime_utils_BytePointerData
};
var lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._WebGLContext.WebGLContext_Impl_"] = lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$;
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.__name__ = ["lime","graphics","opengl","_WebGLContext","WebGLContext_Impl_"];
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.bufferData = function(this1,target,srcData,usage) {
	this1.bufferDataWEBGL(target,srcData,usage,null,null);
};
lime_graphics_opengl__$WebGLContext_WebGLContext_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	this1.texImage2DWEBGL(target,level,internalformat,width,height,border,format,type,srcData,null);
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.globalCompositeOperation = "source-over";
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) {
			a = color >> 24 & 255;
		} else {
			a = 255;
		}
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) {
			a = color & 255;
		} else {
			a = 255;
		}
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) {
		image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) {
		return;
	}
	if(image.type == lime_graphics_ImageType.CANVAS) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,clear);
	} else {
		lime_graphics_utils_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			offset = row + x * 4;
			switch(format) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false && image.get_format() == sourceImage.get_format()) {
		image.buffer.data.set(sourceImage.buffer.data);
	} else {
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if(sourceData == null || destData == null) {
			return;
		}
		var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
		var destRect = new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height);
		var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,destRect);
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePosition;
		var destPosition;
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var sourcePixel;
		var destPixel;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourceBytesPerPixel = sourceImage.buffer.bitsPerPixel / 8 | 0;
		var destBytesPerPixel = image.buffer.bitsPerPixel / 8 | 0;
		var useAlphaImage = alphaImage != null && alphaImage.get_transparent();
		var blend = mergeAlpha || useAlphaImage && !image.get_transparent();
		if(!useAlphaImage) {
			if(blend) {
				var _g1 = 0;
				var _g = destView.height;
				while(_g1 < _g) {
					var y = _g1++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g3 = 0;
					var _g2 = destView.width;
					while(_g3 < _g2) {
						var x = _g3++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(destPremultiplied) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if(blendAlpha == 0) {
							destPixel = 0;
						} else {
							var value = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
						}
						if(destPremultiplied) {
							if((destPixel & 255) == 0) {
								if(destPixel != 0) {
									destPixel = 0;
								}
							} else if((destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
								destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destData[destPosition] = destPixel >>> 24 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 8 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						case 1:
							destData[destPosition] = destPixel & 255;
							destData[destPosition + 1] = destPixel >>> 24 & 255;
							destData[destPosition + 2] = destPixel >>> 16 & 255;
							destData[destPosition + 3] = destPixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = destPixel >>> 8 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 24 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else if(sourceFormat == destFormat && sourcePremultiplied == destPremultiplied && sourceBytesPerPixel == destBytesPerPixel) {
				var _g11 = 0;
				var _g4 = destView.height;
				while(_g11 < _g4) {
					var y1 = _g11++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y1;
					destPosition = destView.byteOffset + destView.stride * y1;
					destData.set(sourceData.subarray(sourcePosition,sourcePosition + destView.width * destBytesPerPixel),destPosition);
				}
			} else {
				var _g12 = 0;
				var _g5 = destView.height;
				while(_g12 < _g5) {
					var y2 = _g12++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y2;
					destPosition = destView.byteOffset + destView.stride * y2;
					var _g31 = 0;
					var _g21 = destView.width;
					while(_g31 < _g21) {
						var x1 = _g31++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						if(destPremultiplied) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			}
		} else {
			if(alphaPoint == null) {
				alphaPoint = new lime_math_Vector2();
			}
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPosition;
			var alphaPixel;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,alphaImage.width,alphaImage.height));
			alphaView.offset(sourceView.x,sourceView.y);
			destView.clip(destPoint.x | 0,destPoint.y | 0,alphaView.width,alphaView.height);
			if(blend) {
				var _g13 = 0;
				var _g6 = destView.height;
				while(_g13 < _g6) {
					var y3 = _g13++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y3;
					destPosition = destView.byteOffset + destView.stride * y3;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y3;
					var _g32 = 0;
					var _g22 = destView.width;
					while(_g32 < _g22) {
						var x2 = _g32++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(destPremultiplied) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(alphaFormat) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						sourceAlpha = (alphaPixel & 255) / 255.0 * ((sourcePixel & 255) / 255.0);
						if(sourceAlpha > 0) {
							destAlpha = (destPixel & 255) / 255.0;
							oneMinusSourceAlpha = 1 - sourceAlpha;
							blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
							var value4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value4 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value6 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
							var value7 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value7 & 255;
							if(destPremultiplied) {
								if((destPixel & 255) == 0) {
									if(destPixel != 0) {
										destPixel = 0;
									}
								} else if((destPixel & 255) != 255) {
									lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
									destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
								}
							}
							switch(destFormat) {
							case 0:
								destData[destPosition] = destPixel >>> 24 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >>> 24 & 255;
								destData[destPosition + 2] = destPixel >>> 16 & 255;
								destData[destPosition + 3] = destPixel >>> 8 & 255;
								break;
							case 2:
								destData[destPosition] = destPixel >>> 8 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							}
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			} else {
				var _g14 = 0;
				var _g7 = destView.height;
				while(_g14 < _g7) {
					var y4 = _g14++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y4;
					destPosition = destView.byteOffset + destView.stride * y4;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y4;
					var _g33 = 0;
					var _g23 = destView.width;
					while(_g33 < _g23) {
						var x3 = _g33++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(alphaFormat) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						var value8 = Math.round((sourcePixel & 255) * ((alphaPixel & 255) / 255));
						sourcePixel = (sourcePixel >>> 24 & 255 & 255) << 24 | (sourcePixel >>> 16 & 255 & 255) << 16 | (sourcePixel >>> 8 & 255 & 255) << 8 | value8 & 255;
						if(destPremultiplied) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba1;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.gaussianBlur = function(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality,strength) {
	if(strength == null) {
		strength = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	var fromPreMult;
	if(image.buffer.premultiplied || sourceImage.buffer.premultiplied) {
		fromPreMult = function(col,alpha) {
			var col1 = col | 0;
			if(col1 < 0) {
				return 0;
			} else if(col1 > 255) {
				return 255;
			} else {
				return col1;
			}
		};
	} else {
		fromPreMult = function(col2,alpha1) {
			var col3 = col2 / alpha1 * 255 | 0;
			if(col3 < 0) {
				return 0;
			} else if(col3 > 255) {
				return 255;
			} else {
				return col3;
			}
		};
	}
	var boxesForGauss = function(sigma,n) {
		var wIdeal = Math.sqrt(12 * sigma * sigma / n + 1);
		var wl = Math.floor(wIdeal);
		if(wl % 2 == 0) {
			--wl;
		}
		var wu = wl + 2;
		var mIdeal = (12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4);
		var m = Math.round(mIdeal);
		var sizes = [];
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			sizes.push(i < m ? wl : wu);
		}
		return sizes;
	};
	var boxBlurH = function(imgA,imgB,w,h,r,off) {
		var iarr = 1 / (r + r + 1);
		var _g11 = 0;
		var _g2 = h;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var ti = i1 * w;
			var li = ti;
			var ri = ti + r;
			var fv = imgA[ti * 4 + off];
			var lv = imgA[(ti + w - 1) * 4 + off];
			var val = (r + 1) * fv;
			var _g3 = 0;
			var _g21 = r;
			while(_g3 < _g21) {
				var j = _g3++;
				val = val + imgA[(ti + j) * 4 + off];
			}
			var _g31 = 0;
			var _g22 = r + 1;
			while(_g31 < _g22) {
				var j1 = _g31++;
				val = val + (imgA[ri * 4 + off] - fv);
				imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
				++ri;
				++ti;
			}
			var _g32 = r + 1;
			var _g23 = w - r;
			while(_g32 < _g23) {
				var j2 = _g32++;
				val = val + (imgA[ri * 4 + off] - imgA[li * 4 + off]);
				imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
				++ri;
				++li;
				++ti;
			}
			var _g33 = w - r;
			var _g24 = w;
			while(_g33 < _g24) {
				var j3 = _g33++;
				val = val + (lv - imgA[li * 4 + off]);
				imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
				++li;
				++ti;
			}
		}
	};
	var boxBlurT = function(imgA1,imgB1,w1,h1,r1,off1) {
		var iarr1 = 1 / (r1 + r1 + 1);
		var ws = w1 * 4;
		var _g12 = 0;
		var _g4 = w1;
		while(_g12 < _g4) {
			var i2 = _g12++;
			var ti1 = i2 * 4 + off1;
			var li1 = ti1;
			var ri1 = ti1 + r1 * ws;
			var fv1 = imgA1[ti1];
			var lv1 = imgA1[ti1 + ws * (h1 - 1)];
			var val1 = (r1 + 1) * fv1;
			var _g34 = 0;
			var _g25 = r1;
			while(_g34 < _g25) {
				var j4 = _g34++;
				val1 = val1 + imgA1[ti1 + j4 * ws];
			}
			var _g35 = 0;
			var _g26 = r1 + 1;
			while(_g35 < _g26) {
				var j5 = _g35++;
				val1 = val1 + (imgA1[ri1] - fv1);
				imgB1[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
				ri1 += ws;
				ti1 += ws;
			}
			var _g36 = r1 + 1;
			var _g27 = h1 - r1;
			while(_g36 < _g27) {
				var j6 = _g36++;
				val1 = val1 + (imgA1[ri1] - imgA1[li1]);
				imgB1[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
				li1 += ws;
				ri1 += ws;
				ti1 += ws;
			}
			var _g37 = h1 - r1;
			var _g28 = h1;
			while(_g37 < _g28) {
				var j7 = _g37++;
				val1 = val1 + (lv1 - imgA1[li1]);
				imgB1[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
				li1 += ws;
				ti1 += ws;
			}
		}
	};
	var boxBlur = function(imgA2,imgB2,w2,h2,bx,by) {
		var _g13 = 0;
		var _g5 = imgA2.length;
		while(_g13 < _g5) {
			var i3 = _g13++;
			imgB2[i3] = imgA2[i3];
		}
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,0);
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,1);
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,2);
		boxBlurH(imgB2,imgA2,w2,h2,bx | 0,3);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,0);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,1);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,2);
		boxBlurT(imgA2,imgB2,w2,h2,by | 0,3);
	};
	var imgB3 = image.get_data();
	var imgA3 = sourceImage.get_data();
	var w3 = sourceRect.width | 0;
	var h3 = sourceRect.height | 0;
	var bx1 = blurX | 0;
	var by1 = blurY | 0;
	var oX = destPoint.x | 0;
	var oY = destPoint.y | 0;
	var n1 = quality * 2 - 1;
	var rng = Math.pow(2,quality) * 0.125;
	var bxs = boxesForGauss(bx1 * rng,n1);
	var bys = boxesForGauss(by1 * rng,n1);
	var offset = (w3 * oY + oX) * 4 | 0;
	boxBlur(imgA3,imgB3,w3,h3,(bxs[0] - 1) / 2,(bys[0] - 1) / 2);
	var bIndex = 1;
	var _g14 = 0;
	var _g6 = n1 / 2 | 0;
	while(_g14 < _g6) {
		var i4 = _g14++;
		boxBlur(imgB3,imgA3,w3,h3,(bxs[bIndex] - 1) / 2,(bys[bIndex] - 1) / 2);
		boxBlur(imgA3,imgB3,w3,h3,(bxs[bIndex + 1] - 1) / 2,(bys[bIndex + 1] - 1) / 2);
		bIndex += 2;
	}
	var x;
	var y;
	if(offset <= 0) {
		y = 0;
		while(y < h3) {
			x = 0;
			while(x < w3) {
				var sourceRect1 = sourceImage.get_rect();
				var d = 4 * (y * (image.get_rect().width | 0) + x);
				var sourceX = x - (destPoint.x | 0);
				var sourceY = y - (destPoint.y | 0);
				var s = sourceX < 0 || sourceY < 0 || sourceX >= sourceRect1.width || sourceY >= sourceRect1.height ? -1 : 4 * (sourceY * (sourceRect1.width | 0) + sourceX);
				var a = s >= 0 ? _$UInt_UInt_$Impl_$.toFloat(imgB3[s + 3]) * strength | 0 : 0;
				if(a < 0) {
					a = 0;
				} else if(a > 255) {
					a = 255;
				} else {
					a = a;
				}
				imgB3[d] = s >= 0 ? fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[s]),a) : 0;
				imgB3[d + 1] = s >= 0 ? fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[s + 1]),a) : 0;
				imgB3[d + 2] = s >= 0 ? fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[s + 2]),a) : 0;
				imgB3[d + 3] = a;
				++x;
			}
			++y;
		}
	} else {
		y = h3 - 1;
		while(y >= 0) {
			x = w3 - 1;
			while(x >= 0) {
				var sourceRect2 = sourceImage.get_rect();
				var d1 = 4 * (y * (image.get_rect().width | 0) + x);
				var sourceX1 = x - (destPoint.x | 0);
				var sourceY1 = y - (destPoint.y | 0);
				var s1 = sourceX1 < 0 || sourceY1 < 0 || sourceX1 >= sourceRect2.width || sourceY1 >= sourceRect2.height ? -1 : 4 * (sourceY1 * (sourceRect2.width | 0) + sourceX1);
				var a1 = s1 >= 0 ? _$UInt_UInt_$Impl_$.toFloat(imgB3[s1 + 3]) * strength | 0 : 0;
				if(a1 < 0) {
					a1 = 0;
				} else if(a1 > 255) {
					a1 = 255;
				} else {
					a1 = a1;
				}
				imgB3[d1] = s1 >= 0 ? fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[s1]),a1) : 0;
				imgB3[d1 + 1] = s1 >= 0 ? fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[s1 + 1]),a1) : 0;
				imgB3[d1 + 2] = s1 >= 0 ? fromPreMult(_$UInt_UInt_$Impl_$.toFloat(imgB3[s1 + 2]),a1) : 0;
				imgB3[d1 + 3] = a1;
				--x;
			}
			--y;
		}
	}
	image.dirty = true;
	image.version++;
	sourceImage.dirty = true;
	sourceImage.version++;
	if(imgB3 == image.get_data()) {
		return image;
	}
	return sourceImage;
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var premultiplied = image.buffer.premultiplied;
	switch(image.buffer.format) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this2 = 0;
		var bgra = this2;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) {
		return null;
	}
	var length = rect.width * rect.height | 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		position = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				var this1 = 0;
				var argb1 = this1;
				argb1 = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
				argb = argb1;
				pixel = argb;
				break;
			case 2:
				var this2 = 0;
				var bgra1 = this2;
				bgra1 = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
				bgra = bgra1;
				pixel = bgra;
				break;
			default:
			}
			bytes.b[destPosition++] = pixel >>> 24 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 16 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 8 & 255 & 255;
			bytes.b[destPosition++] = pixel & 255 & 255;
			position += 4;
		}
	}
	return bytes;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g2 = 0;
	var _g1 = length;
	while(_g2 < _g1) {
		var i = _g2++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,byteOffset: null
	,image: null
	,rect: null
	,stride: null
	,clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.__update();
	}
	,offset: function(x,y) {
		if(x < 0) {
			this.rect.x += x;
			if(this.rect.x < 0) {
				this.rect.x = 0;
			}
		} else {
			this.rect.x += x;
			this.rect.width -= x;
		}
		if(y < 0) {
			this.rect.y += y;
			if(this.rect.y < 0) {
				this.rect.y = 0;
			}
		} else {
			this.rect.y += y;
			this.rect.height -= y;
		}
		this.__update();
	}
	,__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable = this2;
	}
	var value;
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
var lime_math_Matrix3 = function() { };
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var this2;
		if(array != null) {
			this2 = new Float32Array(array);
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2.0 * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	var this1;
	if(array != null) {
		this1 = new Float32Array(array);
	} else {
		this1 = null;
	}
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		if(this.x < x) {
			this.x = x;
		}
		if(this.y < y) {
			this.y = y;
		}
		if(this.get_right() > x + width) {
			this.width = x + width - this.x;
		}
		if(this.get_bottom() > y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,__class__: lime_math_Rectangle
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,__class__: lime_math_Vector4
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
var lime_media_ALAudioContext = function() { };
$hxClasses["lime.media.ALAudioContext"] = lime_media_ALAudioContext;
lime_media_ALAudioContext.__name__ = ["lime","media","ALAudioContext"];
var lime_media_ALCAudioContext = function() { };
$hxClasses["lime.media.ALCAudioContext"] = lime_media_ALCAudioContext;
lime_media_ALCAudioContext.__name__ = ["lime","media","ALCAudioContext"];
var lime_media_AudioBuffer = function() {
};
$hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
lime_media_AudioBuffer.__name__ = ["lime","media","AudioBuffer"];
lime_media_AudioBuffer.fromBase64 = function(base64String) {
	if(base64String == null) {
		return null;
	}
	if(base64String.indexOf(",") == -1) {
		base64String = "data:" + lime_media_AudioBuffer.__getCodec(haxe_crypto_Base64.decode(base64String)) + ";base64," + base64String;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : [base64String], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : ["data:" + lime_media_AudioBuffer.__getCodec(bytes) + ";base64," + haxe_crypto_Base64.encode(bytes)], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromVorbisFile = function(vorbisFile) {
	return null;
};
lime_media_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function(id,msg) {
				promise.error(msg);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.__getCodec = function(bytes) {
	var signature = bytes.getString(0,4);
	switch(signature) {
	case "OggS":
		return "audio/ogg";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") {
			return "audio/wav";
		} else {
			var _g = bytes.b[2];
			var _g1 = bytes.b[1];
			var _g2 = bytes.b[0];
			switch(_g2) {
			case 73:
				if(_g1 == 68) {
					if(_g == 51) {
						return "audio/mp3";
					}
				}
				break;
			case 255:
				switch(_g1) {
				case 250:case 251:
					return "audio/mp3";
				default:
				}
				break;
			default:
			}
		}
		break;
	case "fLaC":
		return "audio/flac";
	default:
		var _g3 = bytes.b[2];
		var _g11 = bytes.b[1];
		var _g21 = bytes.b[0];
		switch(_g21) {
		case 73:
			if(_g11 == 68) {
				if(_g3 == 51) {
					return "audio/mp3";
				}
			}
			break;
		case 255:
			switch(_g11) {
			case 250:case 251:
				return "audio/mp3";
			default:
			}
			break;
		default:
		}
	}
	lime_utils_Log.error("Unsupported sound format",{ fileName : "AudioBuffer.hx", lineNumber : 493, className : "lime.media.AudioBuffer", methodName : "__getCodec"});
	return null;
};
lime_media_AudioBuffer.prototype = {
	__srcHowl: null
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_media_AudioBuffer
};
var lime_media_AudioContext = $hxClasses["lime.media.AudioContext"] = { __ename__ : ["lime","media","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_media_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
lime_media_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_media_AudioContext; $x.toString = $estr; return $x; };
var lime_media_AudioManager = function() { };
$hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
lime_media_AudioManager.__name__ = ["lime","media","AudioManager"];
lime_media_AudioManager.init = function(context) {
	if(lime_media_AudioManager.context == null) {
		if(context == null) {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				lime_media_AudioManager.context = lime_media_AudioContext.WEB(new AudioContext ());
			} catch( e ) {
				haxe_CallStack.lastException = e;
				lime_media_AudioManager.context = lime_media_AudioContext.HTML5(new lime_media_HTML5AudioContext());
			}
		} else {
			lime_media_AudioManager.context = context;
		}
	}
};
var lime_media_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) {
		loops = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	this.backend = new lime__$backend_html5_HTML5AudioSource(this);
	if(length != null && length != 0) {
		this.set_length(length);
	}
	this.set_loops(loops);
	if(buffer != null) {
		this.init();
	}
};
$hxClasses["lime.media.AudioSource"] = lime_media_AudioSource;
lime_media_AudioSource.__name__ = ["lime","media","AudioSource"];
lime_media_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,backend: null
	,dispose: function() {
		this.backend.dispose();
	}
	,init: function() {
		this.backend.init();
	}
	,play: function() {
		this.backend.play();
	}
	,stop: function() {
		this.backend.stop();
	}
	,get_currentTime: function() {
		return this.backend.getCurrentTime();
	}
	,set_currentTime: function(value) {
		return this.backend.setCurrentTime(value);
	}
	,get_gain: function() {
		return this.backend.getGain();
	}
	,set_gain: function(value) {
		return this.backend.setGain(value);
	}
	,set_length: function(value) {
		return this.backend.setLength(value);
	}
	,set_loops: function(value) {
		return this.backend.setLoops(value);
	}
	,get_position: function() {
		return this.backend.getPosition();
	}
	,set_position: function(value) {
		return this.backend.setPosition(value);
	}
	,__class__: lime_media_AudioSource
};
var lime_media_FlashAudioContext = function() { };
$hxClasses["lime.media.FlashAudioContext"] = lime_media_FlashAudioContext;
lime_media_FlashAudioContext.__name__ = ["lime","media","FlashAudioContext"];
var lime_media_HTML5AudioContext = function() {
};
$hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
lime_media_HTML5AudioContext.__name__ = ["lime","media","HTML5AudioContext"];
lime_media_HTML5AudioContext.prototype = {
	__class__: lime_media_HTML5AudioContext
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = ["lime","net","_IHTTPRequest"];
lime_net__$IHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.backend = new lime__$backend_html5_HTML5HTTPRequest();
	this.backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = ["lime","net","_HTTPRequest","AbstractHTTPRequest"];
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseData: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,backend: null
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = ["lime","net","_HTTPRequest_Bytes"];
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = ["lime","net","_HTTPRequest_String"];
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = ["lime","net","HTTPRequestHeader"];
lime_net_HTTPRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = ["lime","net","_HTTPRequest_lime_utils_Bytes"];
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = ["lime","net","_HTTPRequest_openfl_utils_ByteArray"];
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
});
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.get_text = function() {
	return lime_system_Clipboard._text;
};
lime_system_Clipboard.set_text = function(value) {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = value;
	var $window = lime_app_Application.current.__windows[0];
	if($window != null) {
		$window.backend.setClipboard(value);
	}
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
	return value;
};
var lime_system_DisplayMode = function() { };
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = ["lime","system","DisplayMode"];
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : ["lime","system","Endian"], __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(projectName,element,width,height,windowConfig) {
	if(lime_system_System.__applicationEntryPoint == null || lime_system_System.__applicationConfig == null) {
		return;
	}
	var _this = lime_system_System.__applicationEntryPoint;
	if(__map_reserved[projectName] != null ? _this.existsReserved(projectName) : _this.h.hasOwnProperty(projectName)) {
		var htmlElement = null;
		if(typeof(element) == "string") {
			htmlElement = window.document.getElementById(element);
		} else if(element == null) {
			htmlElement = window.document.createElement("div");
		} else {
			htmlElement = element;
		}
		if(htmlElement == null) {
			window.console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
			return;
		}
		if(width == null) {
			width = 0;
		}
		if(height == null) {
			height = 0;
		}
		var _this1 = lime_system_System.__applicationConfig;
		var defaultConfig = __map_reserved[projectName] != null ? _this1.getReserved(projectName) : _this1.h[projectName];
		var config = { };
		lime_system_System.__copyMissingFields(config,defaultConfig);
		if(windowConfig != null) {
			config.windows = [];
			if((windowConfig instanceof Array) && windowConfig.__enum__ == null) {
				config.windows = windowConfig;
			} else {
				config.windows[0] = windowConfig;
			}
			var _g1 = 0;
			var _g = config.windows.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(i < defaultConfig.windows.length) {
					lime_system_System.__copyMissingFields(config.windows[i],defaultConfig.windows[i]);
				}
				lime_system_System.__copyMissingFields(config.windows[i].parameters,defaultConfig.windows[i].parameters);
				if(typeof(windowConfig.background) == "string") {
					var background = StringTools.replace(Std.string(windowConfig.background),"#","");
					if(background.indexOf("0x") > -1) {
						windowConfig.background = Std.parseInt(background);
					} else {
						windowConfig.background = Std.parseInt("0x" + background);
					}
				}
			}
		}
		if(Reflect.field(config.windows[0],"rootPath")) {
			config.rootPath = Reflect.field(config.windows[0],"rootPath");
			Reflect.deleteField(config.windows[0],"rootPath");
		}
		config.windows[0].element = htmlElement;
		config.windows[0].width = width;
		config.windows[0].height = height;
		var _this2 = lime_system_System.__applicationEntryPoint;
		(__map_reserved[projectName] != null ? _this2.getReserved(projectName) : _this2.h[projectName])(config);
	}
};
lime_system_System.exit = function(code) {
};
lime_system_System.getTimer = function() {
	return window.performance.now() | 0;
};
lime_system_System.openURL = function(url,target) {
	if(target == null) {
		target = "_blank";
	}
	if(url != null) {
		window.open(url,target);
	}
};
lime_system_System.__copyMissingFields = function(target,source) {
	if(source == null || target == null) {
		return;
	}
	var _g = 0;
	var _g1 = Reflect.fields(source);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(target,field)) {
			target[field] = Reflect.field(source,field);
		}
	}
};
lime_system_System.__registerEntryPoint = function(projectName,entryPoint,config) {
	if(lime_system_System.__applicationConfig == null) {
		lime_system_System.__applicationConfig = new haxe_ds_StringMap();
	}
	if(lime_system_System.__applicationEntryPoint == null) {
		lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
	}
	var _this = lime_system_System.__applicationEntryPoint;
	if(__map_reserved[projectName] != null) {
		_this.setReserved(projectName,entryPoint);
	} else {
		_this.h[projectName] = entryPoint;
	}
	var _this1 = lime_system_System.__applicationConfig;
	if(__map_reserved[projectName] != null) {
		_this1.setReserved(projectName,config);
	} else {
		_this1.h[projectName] = config;
	}
};
lime_system_System.get_endianness = function() {
	if(lime_system_System.__endianness == null) {
		var arrayBuffer = new ArrayBuffer(2);
		var this1;
		if(arrayBuffer != null) {
			this1 = new Uint8Array(arrayBuffer,0);
		} else {
			this1 = null;
		}
		var uint8Array = this1;
		var this2;
		if(arrayBuffer != null) {
			this2 = new Uint16Array(arrayBuffer,0);
		} else {
			this2 = null;
		}
		var uint16array = this2;
		uint8Array[0] = 170;
		uint8Array[1] = 187;
		if(uint16array[0] == 43707) {
			lime_system_System.__endianness = lime_system_Endian.BIG_ENDIAN;
		} else {
			lime_system_System.__endianness = lime_system_Endian.LITTLE_ENDIAN;
		}
	}
	return lime_system_System.__endianness;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onRun = new lime_app__$Event_$haxe_$Function_$Void();
	this.onError = new lime_app__$Event_$haxe_$Function_$Void();
	this.onComplete = new lime_app__$Event_$haxe_$Function_$Void();
	this.doWork = new lime_app__$Event_$haxe_$Function_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onRun: null
	,queue: function(state) {
		this.runWork(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,runWork: function(state) {
		this.onRun.dispatch(state);
		this.doWork.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(this.__fontID != null) {
		if(lime_utils_Assets.isLocal(this.__fontID)) {
			this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
		}
	} else if(this.__fontPath != null) {
		this.__fromFile(this.__fontPath);
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontID: null
	,__fontPath: null
	,__copyFrom: function(other) {
		if(other != null) {
			this.ascender = other.ascender;
			this.descender = other.descender;
			this.height = other.height;
			this.name = other.name;
			this.numGlyphs = other.numGlyphs;
			this.src = other.src;
			this.underlinePosition = other.underlinePosition;
			this.underlineThickness = other.underlineThickness;
			this.unitsPerEM = other.unitsPerEM;
			this.__fontID = other.__fontID;
			this.__fontPath = other.__fontPath;
		}
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var ua = window.navigator.userAgent.toLowerCase();
		var isSafari = ua.indexOf(" safari/") >= 0 && ua.indexOf(" chrome/") < 0;
		if(!isSafari && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_1) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "Font.hx", lineNumber : 516, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				if(node1.offsetWidth == width1) {
					loaded = node2.offsetWidth != width2;
				} else {
					loaded = true;
				}
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "Font.hx", lineNumber : 552, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__class__: lime_text_Font
};
var lime_text__$UTF8String_UTF8String_$Impl_$ = {};
$hxClasses["lime.text._UTF8String.UTF8String_Impl_"] = lime_text__$UTF8String_UTF8String_$Impl_$;
lime_text__$UTF8String_UTF8String_$Impl_$.__name__ = ["lime","text","_UTF8String","UTF8String_Impl_"];
lime_text__$UTF8String_UTF8String_$Impl_$.charAt = function(this1,index) {
	var this2 = this1;
	var this3 = this2;
	var this4 = this3;
	var i;
	if(index >= 0) {
		var index1 = 0;
		var len = this4.length;
		var i1 = 0;
		while(i1 < index && index1 < len) {
			var c = this4.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i1;
		}
		i = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -index && 0 < index2) {
			var c1 = this4.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		i = index2;
	}
	var this5 = this1;
	var this6 = this5;
	var this7 = this6;
	var c2 = this7.charCodeAt(i);
	var this8 = HxOverrides.substr(this7,i,!(55296 <= c2 && c2 <= 56319) ? 1 : 2);
	var this9 = this8;
	return this9;
};
lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt = function(this1,index) {
	var tmp;
	if(index >= 0) {
		var this2 = this1;
		var this3 = this2;
		tmp = index >= lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this3,0,this1.length);
	} else {
		tmp = true;
	}
	if(tmp) {
		return null;
	}
	var this4 = this1;
	var this5 = this4;
	var this6 = this5;
	var i;
	if(index >= 0) {
		var index1 = 0;
		var len = this6.length;
		var i1 = 0;
		while(i1 < index && index1 < len) {
			var c = this6.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i1;
		}
		i = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -index && 0 < index2) {
			var c1 = this6.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		i = index2;
	}
	var this7 = this1;
	var this8 = this7;
	return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this8,i);
};
lime_text__$UTF8String_UTF8String_$Impl_$.indexOf = function(this1,str,startIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	var this2 = this1;
	var this3 = this2;
	var this4 = this3;
	var index;
	if(startIndex >= 0) {
		var index1 = 0;
		var len = this4.length;
		var i = 0;
		while(i < startIndex && index1 < len) {
			var c = this4.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		index = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -startIndex && 0 < index2) {
			var c1 = this4.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		index = index2;
	}
	var index3 = this1.indexOf(str,index);
	if(index3 >= 0) {
		var this5 = this1;
		var this6 = this5;
		return lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this6,0,index3);
	} else {
		return -1;
	}
};
lime_text__$UTF8String_UTF8String_$Impl_$.substr = function(this1,pos,len) {
	return HxOverrides.substr(this1,pos,len);
};
lime_text__$UTF8String_UTF8String_$Impl_$.substring = function(this1,startIndex,endIndex) {
	var si;
	if(startIndex < 0) {
		si = 0;
	} else {
		var this2 = this1;
		var this3 = this2;
		var this4 = this3;
		if(startIndex >= 0) {
			var index = 0;
			var len = this4.length;
			var i = 0;
			while(i < startIndex && index < len) {
				var c = this4.charCodeAt(index);
				index += !(55296 <= c && c <= 56319) ? 1 : 2;
				++i;
			}
			si = index;
		} else {
			var index1 = 0;
			var count = 0;
			while(count < -startIndex && 0 < index1) {
				var c1 = this4.charCodeAt(index1 - 1);
				index1 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
				++count;
			}
			si = index1;
		}
	}
	var ei;
	if(endIndex == null) {
		ei = this1.length;
	} else if(endIndex < 0) {
		ei = 0;
	} else {
		var this5 = this1;
		var this6 = this5;
		var this7 = this6;
		if(endIndex >= 0) {
			var index2 = 0;
			var len1 = this7.length;
			var i1 = 0;
			while(i1 < endIndex && index2 < len1) {
				var c2 = this7.charCodeAt(index2);
				index2 += !(55296 <= c2 && c2 <= 56319) ? 1 : 2;
				++i1;
			}
			ei = index2;
		} else {
			var index3 = 0;
			var count1 = 0;
			while(count1 < -endIndex && 0 < index3) {
				var c3 = this7.charCodeAt(index3 - 1);
				index3 -= !(56320 <= c3 && c3 <= 57343) ? 1 : 2;
				++count1;
			}
			ei = index3;
		}
	}
	return this1.substring(si,ei);
};
lime_text__$UTF8String_UTF8String_$Impl_$.equals = function(a,b) {
	if(a == null || b == null) {
		return a == b;
	}
	return lime_text_unifill_Unifill.uCompare(a,b) == 0;
};
lime_text__$UTF8String_UTF8String_$Impl_$.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
var lime_text_unifill_Exception = function() {
};
$hxClasses["lime.text.unifill.Exception"] = lime_text_unifill_Exception;
lime_text_unifill_Exception.__name__ = ["lime","text","unifill","Exception"];
lime_text_unifill_Exception.prototype = {
	__class__: lime_text_unifill_Exception
};
var lime_text_unifill_InvalidCodeUnitSequence = function(index) {
	lime_text_unifill_Exception.call(this);
	this.index = index;
};
$hxClasses["lime.text.unifill.InvalidCodeUnitSequence"] = lime_text_unifill_InvalidCodeUnitSequence;
lime_text_unifill_InvalidCodeUnitSequence.__name__ = ["lime","text","unifill","InvalidCodeUnitSequence"];
lime_text_unifill_InvalidCodeUnitSequence.__super__ = lime_text_unifill_Exception;
lime_text_unifill_InvalidCodeUnitSequence.prototype = $extend(lime_text_unifill_Exception.prototype,{
	index: null
	,toString: function() {
		return "InvalidCodeUnitSequence(index: " + this.index + ")";
	}
	,__class__: lime_text_unifill_InvalidCodeUnitSequence
});
var lime_text_unifill_Unifill = function() { };
$hxClasses["lime.text.unifill.Unifill"] = lime_text_unifill_Unifill;
lime_text_unifill_Unifill.__name__ = ["lime","text","unifill","Unifill"];
lime_text_unifill_Unifill.uCompare = function(a,b) {
	var aiter_string;
	var aiter_index;
	var aiter_i;
	var aiter_endIndex;
	aiter_i = 0;
	aiter_string = a;
	aiter_index = 0;
	aiter_endIndex = a.length;
	var biter_string;
	var biter_index;
	var biter_i;
	var biter_endIndex;
	biter_i = 0;
	biter_string = b;
	biter_index = 0;
	biter_endIndex = b.length;
	while(aiter_index < aiter_endIndex && biter_index < biter_endIndex) {
		aiter_i = aiter_index;
		var this1 = aiter_string;
		var this2 = this1;
		var c = this2.charCodeAt(aiter_index);
		aiter_index += !(55296 <= c && c <= 56319) ? 1 : 2;
		var this3 = a;
		var this4 = this3;
		var acode = lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this4,aiter_i);
		biter_i = biter_index;
		var this5 = biter_string;
		var this6 = this5;
		var c1 = this6.charCodeAt(biter_index);
		biter_index += !(55296 <= c1 && c1 <= 56319) ? 1 : 2;
		var this7 = b;
		var this8 = this7;
		var bcode = lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this8,biter_i);
		if(acode < bcode) {
			return -1;
		}
		if(acode > bcode) {
			return 1;
		}
	}
	if(biter_index < biter_endIndex) {
		return -1;
	}
	if(aiter_index < aiter_endIndex) {
		return 1;
	}
	return 0;
};
var lime_text_unifill__$Utf16_Utf16_$Impl_$ = {};
$hxClasses["lime.text.unifill._Utf16.Utf16_Impl_"] = lime_text_unifill__$Utf16_Utf16_$Impl_$;
lime_text_unifill__$Utf16_Utf16_$Impl_$.__name__ = ["lime","text","unifill","_Utf16","Utf16_Impl_"];
lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointAt = function(this1,index) {
	return lime_text_unifill__$Utf16_Utf16Impl.decode_code_point(this1.length,function(i) {
		return this1.charCodeAt(i);
	},index);
};
lime_text_unifill__$Utf16_Utf16_$Impl_$.codePointCount = function(this1,beginIndex,endIndex) {
	var index = beginIndex;
	var i = 0;
	while(index < endIndex) {
		var c = this1.charCodeAt(index);
		index += !(55296 <= c && c <= 56319) ? 1 : 2;
		++i;
	}
	return i;
};
var lime_text_unifill__$Utf16_Utf16Impl = function() { };
$hxClasses["lime.text.unifill._Utf16.Utf16Impl"] = lime_text_unifill__$Utf16_Utf16Impl;
lime_text_unifill__$Utf16_Utf16Impl.__name__ = ["lime","text","unifill","_Utf16","Utf16Impl"];
lime_text_unifill__$Utf16_Utf16Impl.decode_code_point = function(len,accessor,index) {
	if(index < 0 || len <= index) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
	}
	var hi = accessor(index);
	if(55296 <= hi && hi <= 56319) {
		if(index + 1 < 0 || len <= index + 1) {
			throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
		}
		var lo = accessor(index + 1);
		if(56320 <= lo && lo <= 57343) {
			return hi - 55232 << 10 | lo & 1023;
		} else {
			throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
		}
	} else if(56320 <= hi && hi <= 57343) {
		throw new js__$Boot_HaxeError(new lime_text_unifill_InvalidCodeUnitSequence(index));
	} else {
		return hi;
	}
};
var lime_ui_FileDialog = function() {
	this.onSave = new lime_app__$Event_$String_$Void();
	this.onCancel = new lime_app__$Event_$Void_$Void();
};
$hxClasses["lime.ui.FileDialog"] = lime_ui_FileDialog;
lime_ui_FileDialog.__name__ = ["lime","ui","FileDialog"];
lime_ui_FileDialog.prototype = {
	onCancel: null
	,onSave: null
	,save: function(data,filter,defaultPath,title) {
		if(data == null) {
			this.onCancel.dispatch();
			return false;
		}
		var type = "application/octet-stream";
		var defaultExtension = "";
		if(lime_graphics_Image.__isPNG(data)) {
			type = "image/png";
			defaultExtension = ".png";
		} else if(lime_graphics_Image.__isJPG(data)) {
			type = "image/jpeg";
			defaultExtension = ".jpg";
		} else if(lime_graphics_Image.__isGIF(data)) {
			type = "image/gif";
			defaultExtension = ".gif";
		} else if(lime_graphics_Image.__isWebP(data)) {
			type = "image/webp";
			defaultExtension = ".webp";
		}
		var path = defaultPath != null ? haxe_io_Path.withoutDirectory(defaultPath) : "download" + defaultExtension;
		var buffer = data.b.bufferValue;
		window.saveAs(new Blob([buffer],{ type : type}),path,true);
		this.onSave.dispatch(path);
		return true;
	}
	,__class__: lime_ui_FileDialog
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,__class__: lime_ui_Gamepad
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,__class__: lime_ui_Joystick
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onCreate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) {
			this.__width = config.width;
		}
		if(Object.prototype.hasOwnProperty.call(config,"height")) {
			this.__height = config.height;
		}
		if(Object.prototype.hasOwnProperty.call(config,"x")) {
			this.__x = config.x;
		}
		if(Object.prototype.hasOwnProperty.call(config,"y")) {
			this.__y = config.y;
		}
		if(Object.prototype.hasOwnProperty.call(config,"borderless")) {
			this.__borderless = config.borderless;
		}
		if(Object.prototype.hasOwnProperty.call(config,"resizable")) {
			this.__resizable = config.resizable;
		}
		if(Object.prototype.hasOwnProperty.call(config,"title")) {
			this.__title = config.title;
		}
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	application: null
	,config: null
	,id: null
	,onActivate: null
	,onClose: null
	,onCreate: null
	,onDeactivate: null
	,onDropFile: null
	,onEnter: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,renderer: null
	,stage: null
	,backend: null
	,__borderless: null
	,__fullscreen: null
	,__height: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		if(this.config == null) {
			this.config = { };
		}
		this.backend.create(application);
		if(this.renderer != null) {
			this.renderer.create();
		}
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,__class__: lime_ui_Window
};
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 468087;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = ["lime","utils","AssetCache"];
lime_utils_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			var _this = this.image;
			if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			var _this1 = this.font;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			var _this2 = this.audio;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			this.font.set(id,asset);
			break;
		case "IMAGE":
			if(!js_Boot.__instanceof(asset,lime_graphics_Image)) {
				throw new js__$Boot_HaxeError("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			this.image.set(id,asset);
			break;
		case "MUSIC":case "SOUND":
			if(!js_Boot.__instanceof(asset,lime_media_AudioBuffer)) {
				throw new js__$Boot_HaxeError("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			this.audio.set(id,asset);
			break;
		default:
			throw new js__$Boot_HaxeError(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.audio.remove(key1);
				}
			}
			var keys1 = this.font.keys();
			var key2 = keys1;
			while(key2.hasNext()) {
				var key3 = key2.next();
				if(StringTools.startsWith(key3,prefix)) {
					this.font.remove(key3);
				}
			}
			var keys2 = this.image.keys();
			var key4 = keys2;
			while(key4.hasNext()) {
				var key5 = key4.next();
				if(StringTools.startsWith(key5,prefix)) {
					this.image.remove(key5);
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.sizes = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.pathGroups = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = ["lime","utils","AssetLibrary"];
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	if(manifest == null) {
		return null;
	}
	var library = null;
	if(manifest.libraryType == null) {
		library = new lime_utils_AssetLibrary();
	} else {
		var libraryClass = Type.resolveClass(manifest.libraryType);
		if(libraryClass != null) {
			library = Type.createInstance(libraryClass,manifest.libraryArgs);
		} else {
			lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "AssetLibrary.hx", lineNumber : 140, className : "lime.utils.AssetLibrary", methodName : "fromManifest"});
			return null;
		}
	}
	library.__fromManifest(manifest);
	return library;
};
lime_utils_AssetLibrary.prototype = {
	onChange: null
	,assetsLoaded: null
	,assetsTotal: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesTotal: null
	,cachedAudioBuffers: null
	,cachedBytes: null
	,cachedFonts: null
	,cachedImages: null
	,cachedText: null
	,classTypes: null
	,loaded: null
	,pathGroups: null
	,paths: null
	,preload: null
	,promise: null
	,sizes: null
	,types: null
	,exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var _this = this.types;
		var assetType = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		case "TEXT":
			return this.getText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , haxe_io_Bytes));
			} else {
				var _this4 = this.paths;
				return lime_media_AudioBuffer.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.cachedText;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.cachedText;
				var bytes = lime_utils__$Bytes_Bytes_$Impl_$.ofString(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id]);
				var _this4 = this.cachedBytes;
				if(__map_reserved[id] != null) {
					_this4.setReserved(id,bytes);
				} else {
					_this4.h[id] = bytes;
				}
				return bytes;
			} else {
				var _this5 = this.classTypes;
				if(__map_reserved[id] != null ? _this5.existsReserved(id) : _this5.h.hasOwnProperty(id)) {
					var _this6 = this.classTypes;
					return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this6.getReserved(id) : _this6.h[id],[]) , haxe_io_Bytes);
				} else {
					var _this7 = this.paths;
					return lime_utils__$Bytes_Bytes_$Impl_$.fromFile(__map_reserved[id] != null ? _this7.getReserved(id) : _this7.h[id]);
				}
			}
		}
	}
	,getFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , lime_text_Font);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , lime_graphics_Image);
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		var _this = this.classTypes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			return true;
		}
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		switch(requestedType) {
		case "FONT":
			return this.cachedFonts.exists(id);
		case "IMAGE":
			return this.cachedImages.exists(id);
		case "MUSIC":case "SOUND":
			return this.cachedAudioBuffers.exists(id);
		default:
			if(!this.cachedBytes.exists(id)) {
				return this.cachedText.exists(id);
			} else {
				return true;
			}
		}
	}
	,load: function() {
		if(this.loaded) {
			return lime_app_Future.withValue(this);
		}
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.bytesLoadedCache = new haxe_ds_StringMap();
			this.assetsLoaded = 0;
			this.assetsTotal = 1;
			var id = this.preload.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				var _this = this.preload;
				if(!(__map_reserved[id1] != null ? _this.getReserved(id1) : _this.h[id1])) {
					continue;
				}
				var _this1 = this.types;
				lime_utils_Log.verbose("Preloading asset: " + id1 + " [" + (__map_reserved[id1] != null ? _this1.getReserved(id1) : _this1.h[id1]) + "]",{ fileName : "AssetLibrary.hx", lineNumber : 440, className : "lime.utils.AssetLibrary", methodName : "load"});
				var _g = this.types.get(id1);
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.assetsTotal++;
						var future = this.loadBytes(id1);
						future.onProgress((function(id2,f) {
							return function(a1,a2) {
								f[0](id2[0],a1,a2);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future.onError((function(id3,f1) {
							return function(a11) {
								f1[0](id3[0],a11);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future.onComplete((function(id4,f2) {
							return function(a12) {
								f2[0](id4[0],a12);
							};
						})([id1],[$bind(this,this.loadBytes_onComplete)]));
						break;
					case "FONT":
						this.assetsTotal++;
						var future1 = this.loadFont(id1);
						future1.onProgress((function(id5,f3) {
							return function(a13,a21) {
								f3[0](id5[0],a13,a21);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future1.onError((function(id6,f4) {
							return function(a14) {
								f4[0](id6[0],a14);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future1.onComplete((function(id7,f5) {
							return function(a15) {
								f5[0](id7[0],a15);
							};
						})([id1],[$bind(this,this.loadFont_onComplete)]));
						break;
					case "IMAGE":
						this.assetsTotal++;
						var future2 = this.loadImage(id1);
						future2.onProgress((function(id8,f6) {
							return function(a16,a22) {
								f6[0](id8[0],a16,a22);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future2.onError((function(id9,f7) {
							return function(a17) {
								f7[0](id9[0],a17);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future2.onComplete((function(id10,f8) {
							return function(a18) {
								f8[0](id10[0],a18);
							};
						})([id1],[$bind(this,this.loadImage_onComplete)]));
						break;
					case "MUSIC":case "SOUND":
						this.assetsTotal++;
						var future3 = this.loadAudioBuffer(id1);
						future3.onProgress((function(id11,f9) {
							return function(a19,a23) {
								f9[0](id11[0],a19,a23);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future3.onError((function(id12,f10) {
							return function(a110) {
								f10[0](id12[0],a110);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future3.onComplete((function(id13,f11) {
							return function(a111) {
								f11[0](id13[0],a111);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onComplete)]));
						break;
					case "TEXT":
						this.assetsTotal++;
						var future4 = this.loadText(id1);
						future4.onProgress((function(id14,f12) {
							return function(a112,a24) {
								f12[0](id14[0],a112,a24);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future4.onError((function(id15,f13) {
							return function(a113) {
								f13[0](id15[0],a113);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future4.onComplete((function(id16,f14) {
							return function(a114) {
								f14[0](id16[0],a114);
							};
						})([id1],[$bind(this,this.loadText_onComplete)]));
						break;
					default:
					}
				}
			}
			this.__assetLoaded(null);
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.pathGroups;
				if(__map_reserved[id] != null ? _this4.existsReserved(id) : _this4.h.hasOwnProperty(id)) {
					var _this5 = this.pathGroups;
					return lime_media_AudioBuffer.loadFromFiles(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]);
				} else {
					var _this6 = this.paths;
					return lime_media_AudioBuffer.loadFromFile(__map_reserved[id] != null ? _this6.getReserved(id) : _this6.h[id]);
				}
			}
		}
	}
	,loadBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				var font = Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]);
				return font.__loadFromName(font.name);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.loadFromName(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.loadFromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var tmp;
			var _this2 = this.cachedBytes;
			if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
				var _this3 = this.classTypes;
				if(__map_reserved[id] != null) {
					tmp = _this3.existsReserved(id);
				} else {
					tmp = _this3.h.hasOwnProperty(id);
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				var bytes = this.getBytes(id);
				if(bytes == null) {
					return lime_app_Future.withValue(null);
				} else {
					var text = bytes.getString(0,bytes.length);
					var _this4 = this.cachedText;
					if(__map_reserved[id] != null) {
						_this4.setReserved(id,text);
					} else {
						_this4.h[id] = text;
					}
					return lime_app_Future.withValue(text);
				}
			} else {
				var request = new lime_net__$HTTPRequest_$String();
				var _this5 = this.paths;
				return request.load(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]);
			}
		}
	}
	,unload: function() {
	}
	,__assetLoaded: function(id) {
		this.assetsLoaded++;
		if(id != null) {
			var _this = this.types;
			lime_utils_Log.verbose("Loaded asset: " + id + " [" + (__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]) + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")",{ fileName : "AssetLibrary.hx", lineNumber : 686, className : "lime.utils.AssetLibrary", methodName : "__assetLoaded"});
		}
		if(id != null) {
			var _this1 = this.sizes;
			var size = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
			var _this2 = this.bytesLoadedCache;
			if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
				this.bytesLoaded += size;
			} else {
				var _this3 = this.bytesLoadedCache;
				var cache = __map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id];
				if(cache < size) {
					this.bytesLoaded += size - cache;
				}
			}
			var _this4 = this.bytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this4.setReserved(id,size);
			} else {
				_this4.h[id] = size;
			}
		}
		if(this.assetsLoaded < this.assetsTotal) {
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		} else {
			this.loaded = true;
			this.promise.progress(this.bytesTotal,this.bytesTotal);
			this.promise.complete(this);
		}
	}
	,__cacheBreak: function(path) {
		if(path.indexOf("?") > -1) {
			path += "&" + lime_utils_Assets.cache.version;
		} else {
			path += "?" + lime_utils_Assets.cache.version;
		}
		return path;
	}
	,__fromManifest: function(manifest) {
		var hasSize = manifest.version >= 2;
		var size;
		var id;
		var pathGroup;
		var classRef;
		var basePath = manifest.rootPath;
		if(basePath == null) {
			basePath = "";
		}
		if(basePath != "") {
			basePath += "/";
		}
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			if(hasSize) {
				size = asset.size;
			} else {
				size = 100;
			}
			id = asset.id;
			if(Object.prototype.hasOwnProperty.call(asset,"path")) {
				var this1 = this.paths;
				var value = this.__cacheBreak(basePath + Std.string(Reflect.field(asset,"path")));
				var _this = this1;
				if(__map_reserved[id] != null) {
					_this.setReserved(id,value);
				} else {
					_this.h[id] = value;
				}
			}
			if(Object.prototype.hasOwnProperty.call(asset,"pathGroup")) {
				pathGroup = Reflect.field(asset,"pathGroup");
				var _g3 = 0;
				var _g2 = pathGroup.length;
				while(_g3 < _g2) {
					var i = _g3++;
					pathGroup[i] = this.__cacheBreak(basePath + pathGroup[i]);
				}
				var _this1 = this.pathGroups;
				if(__map_reserved[id] != null) {
					_this1.setReserved(id,pathGroup);
				} else {
					_this1.h[id] = pathGroup;
				}
			}
			var _this2 = this.sizes;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,size);
			} else {
				_this2.h[id] = size;
			}
			var value1 = asset.type;
			var _this3 = this.types;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,value1);
			} else {
				_this3.h[id] = value1;
			}
			if(Object.prototype.hasOwnProperty.call(asset,"preload")) {
				var this2 = this.preload;
				var value2 = Reflect.field(asset,"preload");
				var _this4 = this2;
				if(__map_reserved[id] != null) {
					_this4.setReserved(id,value2);
				} else {
					_this4.h[id] = value2;
				}
			}
			if(Object.prototype.hasOwnProperty.call(asset,"className")) {
				classRef = Type.resolveClass(Reflect.field(asset,"className"));
				var _this5 = this.classTypes;
				if(__map_reserved[id] != null) {
					_this5.setReserved(id,classRef);
				} else {
					_this5.h[id] = classRef;
				}
			}
		}
		this.bytesTotal = 0;
		var _g4 = 0;
		var _g11 = manifest.assets;
		while(_g4 < _g11.length) {
			var asset1 = _g11[_g4];
			++_g4;
			id = asset1.id;
			var tmp;
			var _this6 = this.preload;
			if(__map_reserved[id] != null ? _this6.existsReserved(id) : _this6.h.hasOwnProperty(id)) {
				var _this7 = this.preload;
				if(__map_reserved[id] != null) {
					tmp = _this7.getReserved(id);
				} else {
					tmp = _this7.h[id];
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this8 = this.sizes;
				this.bytesTotal += __map_reserved[id] != null ? _this8.getReserved(id) : _this8.h[id];
			}
		}
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,audioBuffer);
		} else {
			_this.h[id] = audioBuffer;
		}
		var _this1 = this.pathGroups;
		if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
			var _this2 = this.pathGroups;
			var pathGroup = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
			var otherID = this.pathGroups.keys();
			while(otherID.hasNext()) {
				var otherID1 = otherID.next();
				if(otherID1 == id) {
					continue;
				}
				var _g = 0;
				while(_g < pathGroup.length) {
					var path = pathGroup[_g];
					++_g;
					var _this3 = this.pathGroups;
					if((__map_reserved[otherID1] != null ? _this3.getReserved(otherID1) : _this3.h[otherID1]).indexOf(path) > -1) {
						var _this4 = this.cachedAudioBuffers;
						if(__map_reserved[otherID1] != null) {
							_this4.setReserved(otherID1,audioBuffer);
						} else {
							_this4.h[otherID1] = audioBuffer;
						}
						break;
					}
				}
			}
		}
		this.__assetLoaded(id);
	}
	,loadBytes_onComplete: function(id,bytes) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bytes);
		} else {
			_this.h[id] = bytes;
		}
		this.__assetLoaded(id);
	}
	,loadFont_onComplete: function(id,font) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
		this.__assetLoaded(id);
	}
	,loadImage_onComplete: function(id,image) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,image);
		} else {
			_this.h[id] = image;
		}
		this.__assetLoaded(id);
	}
	,loadText_onComplete: function(id,text) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,text);
		} else {
			_this.h[id] = text;
		}
		this.__assetLoaded(id);
	}
	,load_onError: function(id,message) {
		if(message != null && message != "") {
			this.promise.error("Error loading asset \"" + id + "\": " + Std.string(message));
		} else {
			this.promise.error("Error loading asset \"" + id + "\"");
		}
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(bytesLoaded > 0) {
			var _this = this.sizes;
			var size = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			var percent;
			if(bytesTotal > 0) {
				percent = bytesLoaded / bytesTotal;
				if(percent > 1) {
					percent = 1;
				}
				bytesLoaded = Math.floor(percent * size);
			} else if(bytesLoaded > size) {
				bytesLoaded = size;
			}
			var _this1 = this.bytesLoadedCache;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				var _this2 = this.bytesLoadedCache;
				var cache = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
				if(bytesLoaded != cache) {
					this.bytesLoaded += bytesLoaded - cache;
				}
			} else {
				this.bytesLoaded += bytesLoaded;
			}
			var _this3 = this.bytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,bytesLoaded);
			} else {
				_this3.h[id] = bytesLoaded;
			}
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 2;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = ["lime","utils","AssetManifest"];
lime_utils_AssetManifest.fromBytes = function(bytes,rootPath) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length),rootPath);
	} else {
		return null;
	}
};
lime_utils_AssetManifest.fromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_AssetManifest.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path),rootPath);
};
lime_utils_AssetManifest.loadFromBytes = function(bytes,rootPath) {
	return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetManifest.loadFromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
	});
};
lime_utils_AssetManifest.parse = function(data,rootPath) {
	if(data == null || data == "") {
		return null;
	}
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	manifest.name = manifestData.name;
	manifest.libraryType = manifestData.libraryType;
	manifest.libraryArgs = manifestData.libraryArgs;
	manifest.assets = haxe_Unserializer.run(manifestData.assets);
	if(rootPath != null) {
		manifest.rootPath = rootPath;
	}
	return manifest;
};
lime_utils_AssetManifest.__resolvePath = function(path) {
	if(path == null) {
		return null;
	}
	var queryIndex = path.indexOf("?");
	var basePath;
	if(queryIndex > -1) {
		basePath = HxOverrides.substr(path,0,queryIndex);
	} else {
		basePath = path;
	}
	StringTools.replace(basePath,"\\","/");
	while(StringTools.endsWith(basePath,"/")) basePath = HxOverrides.substr(basePath,0,basePath.length - 1);
	if(StringTools.endsWith(basePath,".bundle")) {
		if(queryIndex > -1) {
			return basePath + "/library.json" + HxOverrides.substr(path,queryIndex,null);
		} else {
			return basePath + "/library.json";
		}
	} else {
		return path;
	}
};
lime_utils_AssetManifest.__resolveRootPath = function(rootPath,path) {
	if(rootPath != null) {
		return rootPath;
	}
	var queryIndex = path.indexOf("?");
	if(queryIndex > -1) {
		rootPath = HxOverrides.substr(path,0,queryIndex);
	} else {
		rootPath = path;
	}
	StringTools.replace(rootPath,"\\","/");
	while(StringTools.endsWith(rootPath,"/")) {
		if(rootPath == "/") {
			return rootPath;
		}
		rootPath = HxOverrides.substr(rootPath,0,rootPath.length - 1);
	}
	if(StringTools.endsWith(rootPath,".bundle")) {
		return rootPath;
	} else {
		return haxe_io_Path.directory(rootPath);
	}
};
lime_utils_AssetManifest.prototype = {
	assets: null
	,libraryArgs: null
	,libraryType: null
	,name: null
	,rootPath: null
	,version: null
	,__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = ["lime","utils","Assets"];
lime_utils_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.exists(symbol_symbolName,type);
	}
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.get(id);
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.get(id);
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.get(id);
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		default:
			return null;
		}
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			if(symbol_library.isLocal(symbol_symbolName,type)) {
				var asset = symbol_library.getAsset(symbol_symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.error(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 160, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.error("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 166, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "Assets.hx", lineNumber : 172, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.isLocal(symbol_symbolName,type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(image) {
	if(image != null) {
		return image.buffer != null;
	} else {
		return false;
	}
};
lime_utils_Assets.loadLibrary = function(id) {
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return library.load();
	}
	var path = id;
	var rootPath = null;
	var _this = lime_utils_Assets.libraryPaths;
	if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
		var _this1 = lime_utils_Assets.libraryPaths;
		if(__map_reserved[id] != null) {
			path = _this1.getReserved(id);
		} else {
			path = _this1.h[id];
		}
		rootPath = lime_utils_Assets.defaultRootPath;
	} else if(StringTools.endsWith(path,".bundle")) {
		path += "/library.json";
	}
	lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
		if(manifest == null) {
			promise.error("Cannot parse asset manifest for library \"" + id + "\"");
			return;
		}
		var library1 = lime_utils_AssetLibrary.fromManifest(manifest);
		if(library1 == null) {
			promise.error("Cannot open library \"" + id + "\"");
		} else {
			var _this2 = lime_utils_Assets.libraries;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,library1);
			} else {
				_this2.h[id] = library1;
			}
			library1.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
			var tmp = library1.load();
			promise.completeWith(tmp);
		}
	}).onError(function(_) {
		promise.error("There is no asset library with an ID of \"" + id + "\"");
	});
	return promise.future;
};
lime_utils_Assets.registerLibrary = function(name,library) {
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		var _this1 = lime_utils_Assets.libraries;
		if((__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]) == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	var _this2 = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		_this2.setReserved(name,library);
	} else {
		_this2.h[name] = library;
	}
};
lime_utils_Assets.unloadLibrary = function(name) {
	var _this = lime_utils_Assets.libraries;
	var library = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	lime_utils_Assets.libraries.remove(name);
};
lime_utils_Assets.__libraryNotFound = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	if(lime_app_Application.current != null && lime_app_Application.current.__preloader != null && !lime_app_Application.current.__preloader.complete) {
		return "There is no asset library named \"" + name + "\", or it is not yet preloaded";
	} else {
		return "There is no asset library named \"" + name + "\"";
	}
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Bytes_Bytes_$Impl_$ = {};
$hxClasses["lime.utils._Bytes.Bytes_Impl_"] = lime_utils__$Bytes_Bytes_$Impl_$;
lime_utils__$Bytes_Bytes_$Impl_$.__name__ = ["lime","utils","_Bytes","Bytes_Impl_"];
lime_utils__$Bytes_Bytes_$Impl_$._new = function(length,bytesData) {
	var this1 = new haxe_io_Bytes(bytesData);
	return this1;
};
lime_utils__$Bytes_Bytes_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fromFile = function(path) {
	return null;
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
var lime_utils__$DataPointer_DataPointer_$Impl_$ = {};
$hxClasses["lime.utils._DataPointer.DataPointer_Impl_"] = lime_utils__$DataPointer_DataPointer_$Impl_$;
lime_utils__$DataPointer_DataPointer_$Impl_$.__name__ = ["lime","utils","_DataPointer","DataPointer_Impl_"];
lime_utils__$DataPointer_DataPointer_$Impl_$._new = function(data) {
	var this1 = data;
	return this1;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt = function(value) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(null,null,value));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView = function(arrayBufferView) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(arrayBufferView));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var this2;
		if(buffer != null) {
			if(length == null) {
				this2 = new Uint8Array(buffer,byteoffset);
			} else {
				this2 = new Uint8Array(buffer,byteoffset,length);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var this3;
			if(buffer1 != null) {
				if(length == null) {
					this3 = new Uint8Array(buffer1,byteoffset1);
				} else {
					this3 = new Uint8Array(buffer1,byteoffset1,length);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var len = length / 4 | 0;
		var this2;
		if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,byteoffset);
			} else {
				this2 = new Float32Array(buffer,byteoffset,len);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Float32Array) {
			return data.bufferView;
		} else {
			if(length > data.bufferView.byteLength) {
				length = data.bufferView.byteLength;
			}
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var len1 = length / 4 | 0;
			var this3;
			if(buffer1 != null) {
				if(len1 == null) {
					this3 = new Float32Array(buffer1,byteoffset1);
				} else {
					this3 = new Float32Array(buffer1,byteoffset1,len1);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toValue = function(this1) {
	var data = this1;
	if (!data) return 0;
	if (typeof data === 'number') return data;
	var _g = data.type;
	if(_g[1] == 2) {
		return data.offset;
	} else {
		return 0;
	}
};
var lime_utils_DataPointerObject = function(bufferView,buffer,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(bufferView != null) {
		this.bufferView = bufferView;
		this.type = lime_utils_DataPointerObjectType.BUFFER_VIEW;
	} else if(buffer != null) {
		this.buffer = buffer;
		this.type = lime_utils_DataPointerObjectType.BUFFER;
	} else {
		this.type = lime_utils_DataPointerObjectType.VALUE;
	}
	this.offset = offset;
};
$hxClasses["lime.utils.DataPointerObject"] = lime_utils_DataPointerObject;
lime_utils_DataPointerObject.__name__ = ["lime","utils","DataPointerObject"];
lime_utils_DataPointerObject.prototype = {
	buffer: null
	,bufferView: null
	,offset: null
	,type: null
	,__class__: lime_utils_DataPointerObject
};
var lime_utils_DataPointerObjectType = $hxClasses["lime.utils.DataPointerObjectType"] = { __ename__ : ["lime","utils","DataPointerObjectType"], __constructs__ : ["BUFFER","BUFFER_VIEW","VALUE"] };
lime_utils_DataPointerObjectType.BUFFER = ["BUFFER",0];
lime_utils_DataPointerObjectType.BUFFER.toString = $estr;
lime_utils_DataPointerObjectType.BUFFER.__enum__ = lime_utils_DataPointerObjectType;
lime_utils_DataPointerObjectType.BUFFER_VIEW = ["BUFFER_VIEW",1];
lime_utils_DataPointerObjectType.BUFFER_VIEW.toString = $estr;
lime_utils_DataPointerObjectType.BUFFER_VIEW.__enum__ = lime_utils_DataPointerObjectType;
lime_utils_DataPointerObjectType.VALUE = ["VALUE",2];
lime_utils_DataPointerObjectType.VALUE.toString = $estr;
lime_utils_DataPointerObjectType.VALUE.__enum__ = lime_utils_DataPointerObjectType;
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = ["lime","utils","GLUtils"];
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.__context.createShader(type);
	lime_graphics_opengl_GL.context.__context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.__context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.__context.getShaderParameter(shader,35713) == 0) {
		var message;
		switch(type) {
		case 35632:
			message = "Error compiling fragment shader";
			break;
		case 35633:
			message = "Error compiling vertex shader";
			break;
		default:
			message = "Error compiling unknown shader type";
		}
		message += "\n" + lime_graphics_opengl_GL.context.__context.getShaderInfoLog(shader);
		lime_utils_Log.error(message,{ fileName : "GLUtils.hx", lineNumber : 35, className : "lime.utils.GLUtils", methodName : "compileShader"});
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.__context.createProgram();
	lime_graphics_opengl_GL.context.__context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.__context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.__context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.__context.getProgramParameter(program,35714) == 0) {
		var message = "Unable to initialize the shader program";
		message += "\n" + lime_graphics_opengl_GL.context.__context.getProgramInfoLog(program);
		lime_utils_Log.error(message,{ fileName : "GLUtils.hx", lineNumber : 58, className : "lime.utils.GLUtils", methodName : "createProgram"});
	}
	return program;
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = ["lime","utils","Log"];
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + message;
		if(lime_utils_Log.throwErrors) {
			throw new js__$Boot_HaxeError(message1);
		} else {
			console.error(message1);
		}
	}
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		console.log("[" + info.className + "] " + message);
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.warn("[" + info.className + "] WARNING: " + message);
	}
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	openfl_Lib.navigateToURL(request,target);
};
openfl_Lib.navigateToURL = function(request,window) {
	if(window == null) {
		window = "_blank";
	}
	var uri = request.url;
	if(js_Boot.__instanceof(request.data,openfl_net_URLVariables)) {
		var query = "";
		var fields = Reflect.fields(request.data);
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(query.length > 0) {
				query += "&";
			}
			var query1 = encodeURIComponent(field) + "=";
			var s = Std.string(Reflect.field(request.data,field));
			query += query1 + encodeURIComponent(s);
		}
		if(uri.indexOf("?") > -1) {
			uri += "&" + query;
		} else {
			uri += "?" + query;
		}
	}
	lime_system_System.openURL(uri,window);
};
openfl_Lib.get_current = function() {
	if(openfl__$internal_Lib.current == null) {
		openfl__$internal_Lib.current = new openfl_display_MovieClip();
	}
	return openfl__$internal_Lib.current;
};
var openfl__$Vector_AbstractVector = function(data,array) {
	this.data = data;
	if(array != null) {
		var cacheFixed = data.fixed;
		data.fixed = false;
		var _g1 = 0;
		var _g = array.length;
		while(_g1 < _g) {
			var i = _g1++;
			data.set(i,array[i]);
		}
		data.fixed = cacheFixed;
	}
};
$hxClasses["openfl._Vector.AbstractVector"] = openfl__$Vector_AbstractVector;
openfl__$Vector_AbstractVector.__name__ = ["openfl","_Vector","AbstractVector"];
openfl__$Vector_AbstractVector.prototype = {
	data: null
	,toJSON: function() {
		return this.data.toJSON();
	}
	,__class__: openfl__$Vector_AbstractVector
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = ["openfl","_Vector","IVector"];
openfl__$Vector_IVector.prototype = {
	set_length: null
	,get_length: null
	,fixed: null
	,get: null
	,indexOf: null
	,push: null
	,set: null
	,splice: null
	,toJSON: null
	,__class__: openfl__$Vector_IVector
};
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = ["openfl","_Vector","BoolVector"];
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	fixed: null
	,__array: null
	,get: function(index) {
		if(index >= this.__array.length) {
			return false;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_BoolVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = false;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
};
var openfl__$Vector_FloatVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = ["openfl","_Vector","FloatVector"];
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	fixed: null
	,__array: null
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FloatVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = ["openfl","_Vector","FunctionVector"];
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	fixed: null
	,__array: null
	,get: function(index) {
		if(index >= this.__array.length) {
			return null;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
		}
		return -1;
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FunctionVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = null;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = ["openfl","_Vector","IntVector"];
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	fixed: null
	,__array: null
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_IntVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
};
var openfl__$Vector_ObjectVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = ["openfl","_Vector","ObjectVector"];
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	fixed: null
	,__array: null
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array.push(null);
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
};
var openfl__$internal_Lib = function() { };
$hxClasses["openfl._internal.Lib"] = openfl__$internal_Lib;
openfl__$internal_Lib.__name__ = ["openfl","_internal","Lib"];
var openfl__$internal_TouchData = function() {
	this.rollOutStack = [];
};
$hxClasses["openfl._internal.TouchData"] = openfl__$internal_TouchData;
openfl__$internal_TouchData.__name__ = ["openfl","_internal","TouchData"];
openfl__$internal_TouchData.prototype = {
	rollOutStack: null
	,touch: null
	,touchDownTarget: null
	,touchOverTarget: null
	,reset: function() {
		this.touch = null;
		this.touchDownTarget = null;
		this.touchOverTarget = null;
		this.rollOutStack.splice(0,this.rollOutStack.length);
	}
	,__class__: openfl__$internal_TouchData
};
var openfl__$internal_renderer_AbstractBlendModeManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractBlendModeManager"] = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_AbstractBlendModeManager.__name__ = ["openfl","_internal","renderer","AbstractBlendModeManager"];
openfl__$internal_renderer_AbstractBlendModeManager.prototype = {
	setBlendMode: function(blendMode) {
	}
	,__class__: openfl__$internal_renderer_AbstractBlendModeManager
};
var openfl__$internal_renderer_AbstractFilterManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractFilterManager"] = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_AbstractFilterManager.__name__ = ["openfl","_internal","renderer","AbstractFilterManager"];
openfl__$internal_renderer_AbstractFilterManager.prototype = {
	renderSession: null
	,pushObject: function(object) {
		return null;
	}
	,popObject: function(object) {
	}
	,__class__: openfl__$internal_renderer_AbstractFilterManager
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(stage) {
	this.stage = stage;
	this.width = stage.stageWidth;
	this.height = stage.stageHeight;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	height: null
	,width: null
	,renderSession: null
	,stage: null
	,clear: function() {
	}
	,render: function() {
	}
	,renderStage3D: function() {
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_AbstractShaderManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractShaderManager"] = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_AbstractShaderManager.__name__ = ["openfl","_internal","renderer","AbstractShaderManager"];
openfl__$internal_renderer_AbstractShaderManager.prototype = {
	currentShader: null
	,defaultShader: null
	,initShader: function(shader) {
		return shader;
	}
	,setShader: function(shader) {
	}
	,updateShader: function(shader) {
	}
	,__class__: openfl__$internal_renderer_AbstractShaderManager
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	if(openfl__$internal_renderer_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else {
		this.clear();
	}
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,copyOnWrite: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var _g2 = data.prev;
				switch(_g2[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				this.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				break;
			case 1:
				var _g3 = data.prev;
				switch(_g3[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				this.beginFill(c1.buffer.i[c1.iPos],c1.buffer.f[c1.fPos]);
				break;
			case 2:
				var _g4 = data.prev;
				switch(_g4[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				this.beginGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				break;
			case 3:
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this4 = data;
				var c3 = this4;
				this.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 4:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this5 = data;
				var c4 = this5;
				this.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this6 = data;
				var c5 = this6;
				this.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this7 = data;
				var c6 = this7;
				this.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this8 = data;
				var c7 = this8;
				this.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this9 = data;
				var c8 = this9;
				this.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				break;
			case 10:
				var _g11 = data.prev;
				switch(_g11[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				var this10 = data;
				var c9 = this10;
				this.drawTriangles(c9.buffer.o[c9.oPos],c9.buffer.o[c9.oPos + 1],c9.buffer.o[c9.oPos + 2],c9.buffer.o[c9.oPos + 3]);
				break;
			case 11:
				var _g12 = data.prev;
				switch(_g12[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this11 = data;
				var c10 = this11;
				this.endFill();
				break;
			case 12:
				var _g13 = data.prev;
				switch(_g13[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this12 = data;
				var c11 = this12;
				this.lineBitmapStyle(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.b[c11.bPos],c11.buffer.b[c11.bPos + 1]);
				break;
			case 13:
				var _g14 = data.prev;
				switch(_g14[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this13 = data;
				var c12 = this13;
				this.lineGradientStyle(c12.buffer.o[c12.oPos],c12.buffer.ii[c12.iiPos],c12.buffer.ff[c12.ffPos],c12.buffer.ii[c12.iiPos + 1],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos]);
				break;
			case 14:
				var _g15 = data.prev;
				switch(_g15[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this14 = data;
				var c13 = this14;
				this.lineStyle(c13.buffer.o[c13.oPos],c13.buffer.i[c13.iPos],c13.buffer.f[c13.fPos],c13.buffer.b[c13.bPos],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos + 1]);
				break;
			case 15:
				var _g16 = data.prev;
				switch(_g16[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this15 = data;
				var c14 = this15;
				this.lineTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				break;
			case 16:
				var _g17 = data.prev;
				switch(_g17[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this16 = data;
				var c15 = this16;
				this.moveTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
				break;
			case 17:
				var _g18 = data.prev;
				switch(_g18[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				var this17 = data;
				var c16 = this17;
				this.overrideMatrix(c16.buffer.o[c16.oPos]);
				break;
			case 18:
				var _g19 = data.prev;
				switch(_g19[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
				var this18 = data;
				var c17 = this18;
				this.windingEvenOdd();
				break;
			case 19:
				var _g20 = data.prev;
				switch(_g20[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
				var this19 = data;
				var c18 = this19;
				this.windingNonZero();
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,clear: function() {
		this.types = openfl__$internal_renderer_DrawCommandBuffer.empty.types;
		this.b = openfl__$internal_renderer_DrawCommandBuffer.empty.b;
		this.i = openfl__$internal_renderer_DrawCommandBuffer.empty.i;
		this.f = openfl__$internal_renderer_DrawCommandBuffer.empty.f;
		this.o = openfl__$internal_renderer_DrawCommandBuffer.empty.o;
		this.ff = openfl__$internal_renderer_DrawCommandBuffer.empty.ff;
		this.ii = openfl__$internal_renderer_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,windingEvenOdd: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD);
	}
	,windingNonZero: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","WINDING_EVEN_ODD","WINDING_NON_ZERO","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",7];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",9];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",11];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",12];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",15];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",16];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",17];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD = ["WINDING_EVEN_ODD",18];
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD.toString = $estr;
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO = ["WINDING_NON_ZERO",19];
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",20];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
var openfl__$internal_renderer_RenderSession = function() {
	this.allowSmoothing = true;
	this.clearRenderDirty = false;
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	allowSmoothing: null
	,clearRenderDirty: null
	,context: null
	,element: null
	,gl: null
	,renderer: null
	,renderType: null
	,roundPixels: null
	,transformProperty: null
	,transformOriginProperty: null
	,upscaled: null
	,vendorPrefix: null
	,z: null
	,blendModeManager: null
	,filterManager: null
	,maskManager: null
	,shaderManager: null
	,__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_canvas_CanvasBlendModeManager = function(renderSession) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.canvas.CanvasBlendModeManager"] = openfl__$internal_renderer_canvas_CanvasBlendModeManager;
openfl__$internal_renderer_canvas_CanvasBlendModeManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasBlendModeManager"];
openfl__$internal_renderer_canvas_CanvasBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_canvas_CanvasBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,renderSession: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.renderSession.context.globalCompositeOperation = "lighter";
			break;
		case 1:
			this.renderSession.context.globalCompositeOperation = "destination-in";
			break;
		case 2:
			this.renderSession.context.globalCompositeOperation = "darken";
			break;
		case 3:
			this.renderSession.context.globalCompositeOperation = "difference";
			break;
		case 4:
			this.renderSession.context.globalCompositeOperation = "destination-out";
			break;
		case 5:
			this.renderSession.context.globalCompositeOperation = "hard-light";
			break;
		case 7:
			this.renderSession.context.globalCompositeOperation = "source-over";
			break;
		case 8:
			this.renderSession.context.globalCompositeOperation = "lighten";
			break;
		case 9:
			this.renderSession.context.globalCompositeOperation = "multiply";
			break;
		case 11:
			this.renderSession.context.globalCompositeOperation = "overlay";
			break;
		case 12:
			this.renderSession.context.globalCompositeOperation = "screen";
			break;
		default:
			this.renderSession.context.globalCompositeOperation = "source-over";
		}
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasBlendModeManager
});
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	if(strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(smooth);
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat ? "repeat" : "no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		releaseMatrix = true;
	}
	switch(type) {
	case 0:
		point = openfl_geom_Point.__pool.get();
		point.setTo(-819.2,0);
		var px = point.x;
		var py = point.y;
		point.x = px * matrix.a + py * matrix.c + matrix.tx;
		point.y = px * matrix.b + py * matrix.d + matrix.ty;
		point2 = openfl_geom_Point.__pool.get();
		point2.setTo(819.2,0);
		var px1 = point2.x;
		var py1 = point2.y;
		point2.x = px1 * matrix.a + py1 * matrix.c + matrix.tx;
		point2.y = px1 * matrix.b + py1 * matrix.d + matrix.ty;
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point.x,point.y,point2.x,point2.y);
		break;
	case 1:
		point = openfl_geom_Point.__pool.get();
		point.setTo(1638.4,0);
		var px2 = point.x;
		var py2 = point.y;
		point.x = px2 * matrix.a + py2 * matrix.c + matrix.tx;
		point.y = px2 * matrix.b + py2 * matrix.d + matrix.ty;
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,Math.abs((point.x - matrix.tx) / 2));
		break;
	}
	var rgb;
	var alpha;
	var r;
	var g;
	var b;
	var ratio;
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		rgb = colors[i];
		alpha = alphas[i];
		r = (rgb & 16711680) >>> 16;
		g = (rgb & 65280) >>> 8;
		b = rgb & 255;
		ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	if(point != null) {
		openfl_geom_Point.__pool.release(point);
	}
	if(point2 != null) {
		openfl_geom_Point.__pool.release(point2);
	}
	if(releaseMatrix) {
		openfl_geom_Matrix.__pool.release(matrix);
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	var tmp = bitmap.image.get_src();
	context.fillStyle = context.createPattern(tmp,repeat ? "repeat" : "no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
		context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
	}
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
	openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = x * transform.a + y * transform.c + transform.tx;
		var py = x * transform.b + y * transform.d + transform.ty;
		x = px;
		y = py;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.a + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.c + transform.tx;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.b + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.d + transform.ty;
		var cacheCanvas = graphics.__canvas;
		var cacheContext = graphics.__context;
		graphics.__canvas = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas;
		graphics.__context = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext;
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var _g2 = data.prev;
					switch(_g2[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					var this1 = data;
					var c = this1;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var _g3 = data.prev;
					switch(_g3[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
					var this2 = data;
					var c1 = this2;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
				} else {
					var _g4 = data.prev;
					switch(_g4[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					var this3 = data;
					var c2 = this3;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c2.buffer.i[c2.iPos],1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c2.buffer.i[c2.iPos],1);
				}
				break;
			case 3:
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this4 = data;
				var c3 = this4;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 4:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this5 = data;
				var c4 = this5;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this6 = data;
				var c5 = this6;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this7 = data;
				var c6 = this7;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this8 = data;
				var c7 = this8;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this9 = data;
				var c8 = this9;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				break;
			case 11:
				var _g11 = data.prev;
				switch(_g11[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this10 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 12:
				var _g12 = data.prev;
				switch(_g12[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this11 = data;
				var c9 = this11;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c9.buffer.o[c9.oPos],c9.buffer.o[c9.oPos + 1],c9.buffer.b[c9.bPos],c9.buffer.b[c9.bPos + 1]);
				break;
			case 13:
				var _g13 = data.prev;
				switch(_g13[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this12 = data;
				var c10 = this12;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c10.buffer.o[c10.oPos],c10.buffer.ii[c10.iiPos],c10.buffer.ff[c10.ffPos],c10.buffer.ii[c10.iiPos + 1],c10.buffer.o[c10.oPos + 1],c10.buffer.o[c10.oPos + 2],c10.buffer.o[c10.oPos + 3],c10.buffer.f[c10.fPos]);
				break;
			case 14:
				var _g14 = data.prev;
				switch(_g14[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this13 = data;
				var c11 = this13;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c11.buffer.o[c11.oPos],c11.buffer.i[c11.iPos],1,c11.buffer.b[c11.bPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos + 1]);
				break;
			case 15:
				var _g15 = data.prev;
				switch(_g15[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this14 = data;
				var c12 = this14;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1]);
				break;
			case 16:
				var _g16 = data.prev;
				switch(_g16[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this15 = data;
				var c13 = this15;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			case 18:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 19:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				var _g17 = data.prev;
				switch(_g17[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = type;
			}
		}
		var hitTest = false;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
			hitTest = true;
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
			hitTest = true;
		}
		data.destroy();
		graphics.__canvas = cacheCanvas;
		graphics.__context = cacheContext;
		return hitTest;
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.data.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.data.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		var x = uvt.data.get(t1 - 1);
		result.data.push(x);
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var kappa = .5522848;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var optimizationUsed;
	var canOptimizeMatrix;
	var st;
	var sr;
	var sb;
	var sl;
	var stl = null;
	var sbr = null;
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var _g2 = data.prev;
				switch(_g2[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = c.buffer.o[c.oPos];
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c.buffer.o[c.oPos],true,c.buffer.b[c.bPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				if(c.buffer.o[c.oPos + 1] != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c.buffer.o[c.oPos + 1];
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c.buffer.o[c.oPos + 1].clone();
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
				}
				break;
			case 1:
				var _g3 = data.prev;
				switch(_g3[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				if(c1.buffer.f[c1.fPos] < 0.005) {
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				} else {
					if(c1.buffer.f[c1.fPos] == 1) {
						var tmp = StringTools.hex(c1.buffer.i[c1.iPos] & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + tmp;
					} else {
						r = (c1.buffer.i[c1.iPos] & 16711680) >>> 16;
						g = (c1.buffer.i[c1.iPos] & 65280) >>> 8;
						b = c1.buffer.i[c1.iPos] & 255;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c1.buffer.f[c1.fPos] + ")";
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				}
				break;
			case 2:
				var _g4 = data.prev;
				switch(_g4[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				break;
			case 3:
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this4 = data;
				var c3 = this4;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c3.buffer.f[c3.fPos] - offsetX,c3.buffer.f[c3.fPos + 1] - offsetY,c3.buffer.f[c3.fPos + 2] - offsetX,c3.buffer.f[c3.fPos + 3] - offsetY,c3.buffer.f[c3.fPos + 4] - offsetX,c3.buffer.f[c3.fPos + 5] - offsetY);
				break;
			case 4:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this5 = data;
				var c4 = this5;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2] - offsetX,c4.buffer.f[c4.fPos + 3] - offsetY);
				break;
			case 5:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this6 = data;
				var c5 = this6;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c5.buffer.f[c5.fPos] - offsetX + c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 1] - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],0,Math.PI * 2,true);
				break;
			case 6:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this7 = data;
				var c6 = this7;
				x = c6.buffer.f[c6.fPos];
				y = c6.buffer.f[c6.fPos + 1];
				width = c6.buffer.f[c6.fPos + 2];
				height = c6.buffer.f[c6.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this8 = data;
				var c7 = this8;
				optimizationUsed = false;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null && !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					st = 0;
					sr = 0;
					sb = 0;
					sl = 0;
					canOptimizeMatrix = true;
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
						if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) {
							canOptimizeMatrix = false;
						} else {
							if(stl == null) {
								stl = openfl_geom_Point.__pool.get();
							}
							if(sbr == null) {
								sbr = openfl_geom_Point.__pool.get();
							}
							stl.setTo(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1]);
							var _this = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix;
							var px = stl.x;
							var py = stl.y;
							stl.x = px * _this.a + py * _this.c + _this.tx;
							stl.y = px * _this.b + py * _this.d + _this.ty;
							sbr.setTo(c7.buffer.f[c7.fPos] + c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 1] + c7.buffer.f[c7.fPos + 3]);
							var _this1 = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix;
							var px1 = sbr.x;
							var py1 = sbr.y;
							sbr.x = px1 * _this1.a + py1 * _this1.c + _this1.tx;
							sbr.y = px1 * _this1.b + py1 * _this1.d + _this1.ty;
							st = stl.y;
							sl = stl.x;
							sb = sbr.y;
							sr = sbr.x;
						}
					} else {
						st = c7.buffer.f[c7.fPos + 1];
						sl = c7.buffer.f[c7.fPos];
						sb = c7.buffer.f[c7.fPos + 1] + c7.buffer.f[c7.fPos + 3];
						sr = c7.buffer.f[c7.fPos] + c7.buffer.f[c7.fPos + 2];
					}
					if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
						optimizationUsed = true;
						if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY,c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
						}
					}
				}
				if(!optimizationUsed) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY,c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				}
				break;
			case 8:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this9 = data;
				var c8 = this9;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c8.buffer.f[c8.fPos] - offsetX,c8.buffer.f[c8.fPos + 1] - offsetY,c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
				break;
			case 10:
				var _g11 = data.prev;
				switch(_g11[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				var this10 = data;
				var c9 = this10;
				var v = c9.buffer.o[c9.oPos];
				var ind = c9.buffer.o[c9.oPos + 1];
				var uvt = c9.buffer.o[c9.oPos + 2];
				var pattern = null;
				var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
				if(colorFill && uvt != null) {
					throw "__break__";
				}
				if(!colorFill) {
					if(uvt == null) {
						uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
						var _g31 = 0;
						var _g21 = v.data.get_length() / 2 | 0;
						while(_g31 < _g21) {
							var i = _g31++;
							var x1 = v.data.get(i * 2);
							uvt.data.push(x1 - offsetX / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width);
							var x2 = v.data.get(i * 2 + 1);
							uvt.data.push(x2 - offsetY / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
						}
					}
					var skipT = uvt.data.get_length() != v.data.get_length();
					var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0);
					} else {
						pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
					}
				}
				var i1 = 0;
				var l = ind.data.get_length();
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x11;
				var y1;
				var x21;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				while(i1 < l) {
					a_ = i1;
					b_ = i1 + 1;
					c_ = i1 + 2;
					iax = ind.data.get(a_) * 2;
					iay = ind.data.get(a_) * 2 + 1;
					ibx = ind.data.get(b_) * 2;
					iby = ind.data.get(b_) * 2 + 1;
					icx = ind.data.get(c_) * 2;
					icy = ind.data.get(c_) * 2 + 1;
					x11 = v.data.get(iax) - offsetX;
					y1 = v.data.get(iay) - offsetY;
					x21 = v.data.get(ibx) - offsetX;
					y2 = v.data.get(iby) - offsetY;
					x3 = v.data.get(icx) - offsetX;
					y3 = v.data.get(icy) - offsetY;
					var _g22 = c9.buffer.o[c9.oPos + 3];
					switch(_g22) {
					case 0:
						if((x21 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0) {
							i1 += 3;
							continue;
						}
						break;
					case 2:
						if(!((x21 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0)) {
							i1 += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x11,y1);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x21,y2);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
						if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
							openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
						}
						i1 += 3;
						continue;
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x11,y1);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x21,y2);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
					uvx1 = uvt.data.get(iax) * pattern.width;
					uvx2 = uvt.data.get(ibx) * pattern.width;
					uvx3 = uvt.data.get(icx) * pattern.width;
					uvy1 = uvt.data.get(iay) * pattern.height;
					uvy2 = uvt.data.get(iby) * pattern.height;
					uvy3 = uvt.data.get(icy) * pattern.height;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i1 += 3;
						continue;
					}
					t1 = -(uvy1 * (x3 - x21) - uvy2 * x3 + uvy3 * x21 + (uvy2 - uvy3) * x11) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x21) - uvx2 * x3 + uvx3 * x21 + (uvx2 - uvx3) * x11) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x21 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x21) + (uvx3 * uvy2 - uvx2 * uvy3) * x11) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
					i1 += 3;
				}
				break;
			case 12:
				var _g12 = data.prev;
				switch(_g12[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this11 = data;
				var c10 = this11;
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
					openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c10.buffer.o[c10.oPos],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				break;
			case 13:
				var _g13 = data.prev;
				switch(_g13[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this12 = data;
				var c11 = this12;
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
					openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				break;
			case 14:
				var _g14 = data.prev;
				switch(_g14[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this13 = data;
				var c12 = this13;
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
					openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				if(c12.buffer.o[c12.oPos] == null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = c12.buffer.o[c12.oPos] > 0 ? c12.buffer.o[c12.oPos] : 1;
					var tmp1 = c12.buffer.o[c12.oPos + 3] == null ? "round" : openfl_display__$JointStyle_JointStyle_$Impl_$.toString(c12.buffer.o[c12.oPos + 3]).toLowerCase();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = tmp1;
					var tmp2;
					if(c12.buffer.o[c12.oPos + 2] == null) {
						tmp2 = "round";
					} else {
						var _g23 = c12.buffer.o[c12.oPos + 2];
						if(_g23 == 0) {
							tmp2 = "butt";
						} else {
							tmp2 = openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(c12.buffer.o[c12.oPos + 2]).toLowerCase();
						}
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = tmp2;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c12.buffer.f[c12.fPos + 1];
					if(c12.buffer.f[c12.fPos] == 1) {
						var tmp3 = StringTools.hex(c12.buffer.i[c12.iPos] & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + tmp3;
					} else {
						r = (c12.buffer.i[c12.iPos] & 16711680) >>> 16;
						g = (c12.buffer.i[c12.iPos] & 65280) >>> 8;
						b = c12.buffer.i[c12.iPos] & 255;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c12.buffer.f[c12.fPos] + ")";
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				}
				break;
			case 15:
				var _g15 = data.prev;
				switch(_g15[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this14 = data;
				var c13 = this14;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c13.buffer.f[c13.fPos] - offsetX,c13.buffer.f[c13.fPos + 1] - offsetY);
				positionX = c13.buffer.f[c13.fPos];
				positionY = c13.buffer.f[c13.fPos + 1];
				if(positionX == startX && positionY == startY) {
					closeGap = true;
				}
				break;
			case 16:
				var _g16 = data.prev;
				switch(_g16[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this15 = data;
				var c14 = this15;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c14.buffer.f[c14.fPos] - offsetX,c14.buffer.f[c14.fPos + 1] - offsetY);
				positionX = c14.buffer.f[c14.fPos];
				positionY = c14.buffer.f[c14.fPos + 1];
				if(setStart) {
					closeGap = true;
				}
				startX = c14.buffer.f[c14.fPos];
				startY = c14.buffer.f[c14.fPos + 1];
				setStart = true;
				break;
			case 18:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 19:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				var _g17 = data.prev;
				switch(_g17[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = type;
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	if(stl != null) {
		openfl_geom_Point.__pool.release(stl);
	}
	if(sbr != null) {
		openfl_geom_Point.__pool.release(sbr);
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
		} else if(closeGap && positionX == startX && positionY == startY) {
			openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
		}
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
		}
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession,parentTransform) {
	graphics.__update();
	if(graphics.__dirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing = renderSession.allowSmoothing;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			var transform = graphics.__renderTransform;
			var canvas = graphics.__canvas;
			var scale = openfl__$internal_renderer_canvas_CanvasRenderer.scale;
			var scaledWidth = width * scale | 0;
			var scaledHeight = height * scale | 0;
			if(renderSession.renderType == lime_graphics_RendererType.DOM) {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = scaledWidth;
					canvas.height = scaledHeight;
					canvas.style.width = width + "px";
					canvas.style.height = height + "px";
				}
				var transform1 = graphics.__renderTransform;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform1.a * scale,transform1.b * scale,transform1.c * scale,transform1.d * scale,transform1.tx * scale,transform1.ty * scale);
			} else {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.resetTransform();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = width;
					canvas.height = height;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var hasLineStyle = false;
			var initStrokeX = 0.0;
			var initStrokeY = 0.0;
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type[1]) {
				case 0:case 1:case 2:
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
						var _g2 = data.prev;
						switch(_g2[1]) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.fPos += 6;
							break;
						case 4:
							data.fPos += 4;
							break;
						case 5:
							data.fPos += 3;
							break;
						case 6:
							data.fPos += 4;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 10:
							data.oPos += 4;
							break;
						case 11:
							break;
						case 12:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 13:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 14:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 15:
							data.fPos += 2;
							break;
						case 16:
							data.fPos += 2;
							break;
						case 17:
							data.oPos += 1;
							break;
						case 18:case 19:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
						var this1 = data;
						var c = this1;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
						var _g3 = data.prev;
						switch(_g3[1]) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.fPos += 6;
							break;
						case 4:
							data.fPos += 4;
							break;
						case 5:
							data.fPos += 3;
							break;
						case 6:
							data.fPos += 4;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 10:
							data.oPos += 4;
							break;
						case 11:
							break;
						case 12:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 13:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 14:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 15:
							data.fPos += 2;
							break;
						case 16:
							data.fPos += 2;
							break;
						case 17:
							data.oPos += 1;
							break;
						case 18:case 19:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
						var this2 = data;
						var c1 = this2;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					} else {
						var _g4 = data.prev;
						switch(_g4[1]) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.fPos += 6;
							break;
						case 4:
							data.fPos += 4;
							break;
						case 5:
							data.fPos += 3;
							break;
						case 6:
							data.fPos += 4;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 10:
							data.oPos += 4;
							break;
						case 11:
							break;
						case 12:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 13:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 14:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 15:
							data.fPos += 2;
							break;
						case 16:
							data.fPos += 2;
							break;
						case 17:
							data.oPos += 1;
							break;
						case 18:case 19:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
						var this3 = data;
						var c2 = this3;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c2.buffer.i[c2.iPos],c2.buffer.f[c2.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c2.buffer.i[c2.iPos],c2.buffer.f[c2.fPos]);
					}
					break;
				case 3:
					var _g5 = data.prev;
					switch(_g5[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
					var this4 = data;
					var c3 = this4;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
					} else {
						initStrokeX = c3.buffer.f[c3.fPos + 4];
						initStrokeY = c3.buffer.f[c3.fPos + 5];
					}
					break;
				case 4:
					var _g6 = data.prev;
					switch(_g6[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
					var this5 = data;
					var c4 = this5;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
					} else {
						initStrokeX = c4.buffer.f[c4.fPos + 2];
						initStrokeY = c4.buffer.f[c4.fPos + 3];
					}
					break;
				case 5:
					var _g7 = data.prev;
					switch(_g7[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
					var this6 = data;
					var c5 = this6;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
					}
					break;
				case 6:
					var _g8 = data.prev;
					switch(_g8[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
					var this7 = data;
					var c6 = this7;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
					}
					break;
				case 7:
					var _g9 = data.prev;
					switch(_g9[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
					var this8 = data;
					var c7 = this8;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					}
					break;
				case 8:
					var _g10 = data.prev;
					switch(_g10[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
					var this9 = data;
					var c8 = this9;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos]);
					}
					break;
				case 10:
					var _g11 = data.prev;
					switch(_g11[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
					var this10 = data;
					var c9 = this10;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawTriangles(c9.buffer.o[c9.oPos],c9.buffer.o[c9.oPos + 1],c9.buffer.o[c9.oPos + 2],c9.buffer.o[c9.oPos + 3]);
					break;
				case 11:
					var _g12 = data.prev;
					switch(_g12[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
					var this11 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
					hasLineStyle = false;
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					initStrokeX = 0;
					initStrokeY = 0;
					break;
				case 12:
					var _g13 = data.prev;
					switch(_g13[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
					var this12 = data;
					var c10 = this12;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
					break;
				case 13:
					var _g14 = data.prev;
					switch(_g14[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
					var this13 = data;
					var c11 = this13;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
					break;
				case 14:
					var _g15 = data.prev;
					switch(_g15[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
					var this14 = data;
					var c12 = this14;
					if(!hasLineStyle && c12.buffer.o[c12.oPos] != null) {
						if(initStrokeX != 0 || initStrokeY != 0) {
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
							initStrokeX = 0;
							initStrokeY = 0;
						}
					}
					hasLineStyle = c12.buffer.o[c12.oPos] != null;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c12.buffer.o[c12.oPos],c12.buffer.i[c12.iPos],c12.buffer.f[c12.fPos],c12.buffer.b[c12.bPos],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos + 1]);
					break;
				case 15:
					var _g16 = data.prev;
					switch(_g16[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
					var this15 = data;
					var c13 = this15;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
					} else {
						initStrokeX = c13.buffer.f[c13.fPos];
						initStrokeY = c13.buffer.f[c13.fPos + 1];
					}
					break;
				case 16:
					var _g17 = data.prev;
					switch(_g17[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
					var this16 = data;
					var c14 = this16;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
					} else {
						initStrokeX = c14.buffer.f[c14.fPos];
						initStrokeY = c14.buffer.f[c14.fPos + 1];
					}
					break;
				case 18:
					var _g18 = data.prev;
					switch(_g18[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
					var this17 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingEvenOdd();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
					break;
				case 19:
					var _g19 = data.prev;
					switch(_g19[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
					var this18 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingNonZero();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
					break;
				default:
					var _g20 = data.prev;
					switch(_g20[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.fPos += 6;
						break;
					case 4:
						data.fPos += 4;
						break;
					case 5:
						data.fPos += 3;
						break;
					case 6:
						data.fPos += 4;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 10:
						data.oPos += 4;
						break;
					case 11:
						break;
					case 12:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 13:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 14:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 15:
						data.fPos += 2;
						break;
					case 16:
						data.fPos += 2;
						break;
					case 17:
						data.oPos += 1;
						break;
					case 18:case 19:
						break;
					default:
					}
					data.prev = type;
				}
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var kappa = .5522848;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var _g2 = data.prev;
				switch(_g2[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this1 = data;
				var c = this1;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 5];
				break;
			case 4:
				var _g3 = data.prev;
				switch(_g3[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this2 = data;
				var c1 = this2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				var _g4 = data.prev;
				switch(_g4[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this3 = data;
				var c2 = this3;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 6:
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this4 = data;
				var c3 = this4;
				x = c3.buffer.f[c3.fPos];
				y = c3.buffer.f[c3.fPos + 1];
				width = c3.buffer.f[c3.fPos + 2];
				height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this5 = data;
				var c4 = this5;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 8:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this6 = data;
				var c5 = this6;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 15:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this7 = data;
				var c6 = this7;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 16:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this8 = data;
				var c7 = this8;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.fPos += 6;
					break;
				case 4:
					data.fPos += 4;
					break;
				case 5:
					data.fPos += 3;
					break;
				case 6:
					data.fPos += 4;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 10:
					data.oPos += 4;
					break;
				case 11:
					break;
				case 12:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 13:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 14:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 15:
					data.fPos += 2;
					break;
				case 16:
					data.fPos += 2;
					break;
				case 17:
					data.oPos += 1;
					break;
				case 18:case 19:
					break;
				default:
				}
				data.prev = type;
			}
		}
		data.destroy();
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing) {
		smooth = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.mozImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.msImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getRenderTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__cacheBitmapRender && object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__cacheBitmapRender && object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(stage,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.clearRenderDirty = true;
	this.renderSession.context = context;
	this.renderSession.renderer = this;
	this.renderSession.renderType = lime_graphics_RendererType.CANVAS;
	this.renderSession.blendModeManager = new openfl__$internal_renderer_canvas_CanvasBlendModeManager(this.renderSession);
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
	var config = stage.window.config;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"allowHighDPI") && config.allowHighDPI) {
		openfl__$internal_renderer_canvas_CanvasRenderer.scale = window.devicePixelRatio || 1;
	}
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	context: null
	,clear: function() {
		this.renderSession.blendModeManager.setBlendMode(10);
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.fillStyle = this.stage.__colorString;
			this.context.fillRect(0,0,this.stage.stageWidth * this.stage.window.__scale,this.stage.stageHeight * this.stage.window.__scale);
		} else if(this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.clearRect(0,0,this.stage.stageWidth * this.stage.window.__scale,this.stage.stageHeight * this.stage.window.__scale);
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.stage.__renderCanvas(this.renderSession);
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderCanvas(this.stage,this.renderSession);
		}
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.clear = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
		bitmap.__style = null;
	}
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
		bitmap.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		bitmap.__imageVersion = -1;
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.msImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	if(bitmap.__imageVersion != bitmap.__bitmapData.image.version) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		bitmap.__canvas.width = bitmap.__bitmapData.width + 1;
		bitmap.__canvas.width = bitmap.__bitmapData.width;
		bitmap.__canvas.height = bitmap.__bitmapData.height;
		bitmap.__context.drawImage(bitmap.__bitmapData.image.buffer.__srcCanvas,0,0);
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.crossOrigin = "Anonymous";
		bitmap.__image.src = bitmap.__bitmapData.image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMBlendModeManager = function(renderSession) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.dom.DOMBlendModeManager"] = openfl__$internal_renderer_dom_DOMBlendModeManager;
openfl__$internal_renderer_dom_DOMBlendModeManager.__name__ = ["openfl","_internal","renderer","dom","DOMBlendModeManager"];
openfl__$internal_renderer_dom_DOMBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_dom_DOMBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,renderSession: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		if(this.renderSession.context != null) {
			switch(blendMode) {
			case 0:
				this.renderSession.context.globalCompositeOperation = "lighter";
				break;
			case 1:
				this.renderSession.context.globalCompositeOperation = "destination-in";
				break;
			case 2:
				this.renderSession.context.globalCompositeOperation = "darken";
				break;
			case 3:
				this.renderSession.context.globalCompositeOperation = "difference";
				break;
			case 4:
				this.renderSession.context.globalCompositeOperation = "destination-out";
				break;
			case 5:
				this.renderSession.context.globalCompositeOperation = "hard-light";
				break;
			case 7:
				this.renderSession.context.globalCompositeOperation = "source-over";
				break;
			case 8:
				this.renderSession.context.globalCompositeOperation = "lighten";
				break;
			case 9:
				this.renderSession.context.globalCompositeOperation = "multiply";
				break;
			case 11:
				this.renderSession.context.globalCompositeOperation = "overlay";
				break;
			case 12:
				this.renderSession.context.globalCompositeOperation = "screen";
				break;
			default:
				this.renderSession.context.globalCompositeOperation = "source-over";
			}
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMBlendModeManager
});
var openfl__$internal_renderer_dom_DOMDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMDisplayObject"] = openfl__$internal_renderer_dom_DOMDisplayObject;
openfl__$internal_renderer_dom_DOMDisplayObject.__name__ = ["openfl","_internal","renderer","dom","DOMDisplayObject"];
openfl__$internal_renderer_dom_DOMDisplayObject.clear = function(displayObject,renderSession) {
	openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderSession);
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.clipRects = [];
	this.numClipRects = 0;
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	currentClipRect: null
	,clipRects: null
	,numClipRects: null
	,pushMask: function(mask) {
		this.pushRect(mask.getBounds(mask),mask.__getRenderTransform());
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) {
			this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.currentClipRect = clipRect;
		this.numClipRects++;
	}
	,popMask: function() {
		this.popRect();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) {
				this.currentClipRect = this.clipRects[this.numClipRects - 1];
			} else {
				this.currentClipRect = null;
			}
		}
	}
	,updateClip: function(displayObject) {
		if(this.currentClipRect == null) {
			displayObject.__worldClipChanged = displayObject.__worldClip != null;
			displayObject.__worldClip = null;
		} else {
			if(displayObject.__worldClip == null) {
				displayObject.__worldClip = new openfl_geom_Rectangle();
			}
			var clip = openfl_geom_Rectangle.__pool.get();
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			this.currentClipRect.__transform(clip,matrix);
			if(clip.equals(displayObject.__worldClip)) {
				displayObject.__worldClipChanged = false;
			} else {
				displayObject.__worldClip.copyFrom(clip);
				displayObject.__worldClipChanged = true;
			}
			openfl_geom_Rectangle.__pool.release(clip);
			openfl_geom_Matrix.__pool.release(matrix);
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(stage,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.element = element;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.clearRenderDirty = true;
	this.renderSession.element = element;
	openfl_display_DisplayObject.__supportDOM = true;
	var config = stage.window.config;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"allowHighDPI") && config.allowHighDPI) {
		openfl__$internal_renderer_canvas_CanvasRenderer.scale = window.devicePixelRatio || 1;
	}
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	this.renderSession.transformProperty = prefix.lowercase == "webkit" ? "-webkit-transform" : "transform";
	this.renderSession.transformOriginProperty = prefix.lowercase == "webkit" ? "-webkit-transform-origin" : "transform-origin";
	this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
	this.renderSession.blendModeManager = new openfl__$internal_renderer_dom_DOMBlendModeManager(this.renderSession);
	this.renderSession.renderer = this;
	this.renderSession.renderType = lime_graphics_RendererType.DOM;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__renderTransformChanged) {
		var _this = displayObject.__renderTransform;
		style.setProperty(renderSession.transformProperty,renderSession.roundPixels ? "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + (_this.tx | 0) + ", " + (_this.ty | 0) + ", 0, 1)" : "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + _this.tx + ", " + _this.ty + ", 0, 1)",null);
	}
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null ? "null" : "" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) {
			style.setProperty("opacity",displayObject.__worldAlpha == null ? "null" : "" + displayObject.__worldAlpha,null);
		} else {
			style.removeProperty("opacity");
		}
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) {
			style.removeProperty("clip");
		} else {
			var clip = displayObject.__worldClip;
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__renderTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldClip = null;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.updateClip = function(displayObject,renderSession) {
	var maskManager = renderSession.maskManager;
	maskManager.updateClip(displayObject);
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	element: null
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		if(!this.stage.__transparent) {
			this.element.style.background = this.stage.__colorString;
		} else {
			this.element.style.background = "none";
		}
		this.renderSession.z = 1;
		this.stage.__renderDOM(this.renderSession);
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderDOM(this.stage,this.renderSession);
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.clear = function(shape,renderSession) {
	if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.clear = function(textField,renderSession) {
	if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
		renderSession.maskManager.pushObject(bitmap);
		renderSession.filterManager.pushObject(bitmap);
		var shader = renderSession.shaderManager.initShader(bitmap.shader);
		renderSession.shaderManager.setShader(shader);
		shader.get_data().uImage0.input = bitmap.__bitmapData;
		var tmp = renderSession.allowSmoothing && (bitmap.smoothing || renderSession.upscaled);
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = renderer.getMatrix(bitmap.__renderTransform);
		var useColorTransform = !bitmap.__worldColorTransform.__isDefault();
		if(shader.get_data().uColorTransform.value == null) {
			shader.get_data().uColorTransform.value = [];
		}
		shader.get_data().uColorTransform.value[0] = useColorTransform;
		renderSession.shaderManager.updateShader(shader);
		var target = gl.ARRAY_BUFFER;
		var buffer = bitmap.__bitmapData.getBuffer(gl,bitmap.__worldAlpha,bitmap.__worldColorTransform);
		gl.__context.bindBuffer(target,buffer);
		var index = shader.get_data().aPosition.index;
		var type = gl.FLOAT;
		var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
		gl.__context.vertexAttribPointer(index,3,type,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
		var index1 = shader.get_data().aTexCoord.index;
		var type1 = gl.FLOAT;
		var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
		gl.__context.vertexAttribPointer(index1,2,type1,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
		var index2 = shader.get_data().aAlpha.index;
		var type2 = gl.FLOAT;
		var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
		gl.__context.vertexAttribPointer(index2,1,type2,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset2));
		var index3 = shader.get_data().aColorMultipliers0.index;
		var type3 = gl.FLOAT;
		var offset3 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(24);
		gl.__context.vertexAttribPointer(index3,4,type3,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset3));
		var index4 = shader.get_data().aColorMultipliers1.index;
		var type4 = gl.FLOAT;
		var offset4 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(40);
		gl.__context.vertexAttribPointer(index4,4,type4,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset4));
		var index5 = shader.get_data().aColorMultipliers2.index;
		var type5 = gl.FLOAT;
		var offset5 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(56);
		gl.__context.vertexAttribPointer(index5,4,type5,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset5));
		var index6 = shader.get_data().aColorMultipliers3.index;
		var type6 = gl.FLOAT;
		var offset6 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(72);
		gl.__context.vertexAttribPointer(index6,4,type6,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset6));
		var index7 = shader.get_data().aColorOffsets.index;
		var type7 = gl.FLOAT;
		var offset7 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(88);
		gl.__context.vertexAttribPointer(index7,4,type7,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset7));
		gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
		renderSession.filterManager.popObject(bitmap);
		renderSession.maskManager.popObject(bitmap);
	}
};
openfl__$internal_renderer_opengl_GLBitmap.renderMask = function(bitmap,renderSession) {
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		var shader = openfl__$internal_renderer_opengl_GLMaskManager.maskShader;
		renderSession.shaderManager.setShader(shader);
		shader.get_data().uImage0.input = bitmap.__bitmapData;
		var tmp = renderSession.allowSmoothing && (bitmap.smoothing || renderSession.upscaled);
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = renderer.getMatrix(bitmap.__renderTransform);
		renderSession.shaderManager.updateShader(shader);
		var target = gl.ARRAY_BUFFER;
		var buffer = bitmap.__bitmapData.getBuffer(gl,bitmap.__worldAlpha,bitmap.__worldColorTransform);
		gl.__context.bindBuffer(target,buffer);
		var index = shader.get_data().aPosition.index;
		var type = gl.FLOAT;
		var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
		gl.__context.vertexAttribPointer(index,3,type,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
		var index1 = shader.get_data().aTexCoord.index;
		var type1 = gl.FLOAT;
		var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
		gl.__context.vertexAttribPointer(index1,2,type1,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
		gl.__context.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
};
var openfl__$internal_renderer_opengl_GLBlendModeManager = function(gl) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.gl = gl;
	this.setBlendMode(10);
	gl.__context.enable(gl.BLEND);
};
$hxClasses["openfl._internal.renderer.opengl.GLBlendModeManager"] = openfl__$internal_renderer_opengl_GLBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","GLBlendModeManager"];
openfl__$internal_renderer_opengl_GLBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,gl: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) {
			return;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		case 9:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.DST_COLOR,this.gl.ONE_MINUS_SRC_ALPHA);
			break;
		case 12:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_COLOR);
			break;
		case 14:
			this.gl.__context.blendEquation(this.gl.FUNC_REVERSE_SUBTRACT);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		default:
			this.gl.__context.blendEquation(this.gl.FUNC_ADD);
			this.gl.__context.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLBlendModeManager
});
var openfl__$internal_renderer_opengl_GLFilterManager = function(renderer,renderSession) {
	openfl__$internal_renderer_AbstractFilterManager.call(this,renderSession);
	this.renderer = renderer;
	this.gl = renderSession.gl;
	this.filterDepth = 0;
	this.matrix = new openfl_geom_Matrix();
};
$hxClasses["openfl._internal.renderer.opengl.GLFilterManager"] = openfl__$internal_renderer_opengl_GLFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.__name__ = ["openfl","_internal","renderer","opengl","GLFilterManager"];
openfl__$internal_renderer_opengl_GLFilterManager.__super__ = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.prototype = $extend(openfl__$internal_renderer_AbstractFilterManager.prototype,{
	filterDepth: null
	,gl: null
	,matrix: null
	,renderer: null
	,pushObject: function(object) {
		return this.renderSession.shaderManager.defaultShader;
	}
	,popObject: function(object) {
		return;
	}
	,renderPass: function(target,shader) {
		if(target == null || shader == null) {
			return;
		}
		shader.get_data().uImage0.input = target;
		var tmp = this.renderSession.allowSmoothing && this.renderSession.upscaled;
		shader.get_data().uImage0.smoothing = tmp;
		shader.get_data().uMatrix.value = this.renderer.getMatrix(this.matrix);
		if(shader.get_data().uColorTransform != null) {
			if(shader.get_data().uColorTransform.value == null) {
				shader.get_data().uColorTransform.value = [];
			}
			shader.get_data().uColorTransform.value[0] = false;
		}
		this.renderSession.shaderManager.setShader(shader);
		var _this = this.gl;
		var target1 = this.gl.ARRAY_BUFFER;
		var buffer = target.getBuffer(this.gl,1,null);
		_this.__context.bindBuffer(target1,buffer);
		var _this1 = this.gl;
		var index = shader.get_data().aPosition.index;
		var type = this.gl.FLOAT;
		var offset = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
		_this1.__context.vertexAttribPointer(index,3,type,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset));
		var _this2 = this.gl;
		var index1 = shader.get_data().aTexCoord.index;
		var type1 = this.gl.FLOAT;
		var offset1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(12);
		_this2.__context.vertexAttribPointer(index1,2,type1,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset1));
		var _this3 = this.gl;
		var index2 = shader.get_data().aAlpha.index;
		var type2 = this.gl.FLOAT;
		var offset2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(20);
		_this3.__context.vertexAttribPointer(index2,1,type2,false,104,lime_utils__$DataPointer_DataPointer_$Impl_$.toValue(offset2));
		this.gl.__context.drawArrays(this.gl.TRIANGLE_STRIP,0,4);
	}
	,__class__: openfl__$internal_renderer_opengl_GLFilterManager
});
var openfl_display_Shader = function(code) {
	this.__data = new openfl_display_ShaderData(null);
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec4 vColorMultipliers0;\n\t\tvarying vec4 vColorMultipliers1;\n\t\tvarying vec4 vColorMultipliers2;\n\t\tvarying vec4 vColorMultipliers3;\n\t\tvarying vec4 vColorOffsets;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform bool uColorTransform;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else if (uColorTransform) {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\t\n\t\t\t\tmat4 colorMultiplier;\n\t\t\t\tcolorMultiplier[0] = vColorMultipliers0;\n\t\t\t\tcolorMultiplier[1] = vColorMultipliers1;\n\t\t\t\tcolorMultiplier[2] = vColorMultipliers2;\n\t\t\t\tcolorMultiplier[3] = vColorMultipliers3;\n\t\t\t\t\n\t\t\t\tcolor = vColorOffsets + (color * colorMultiplier);\n\t\t\t\t\n\t\t\t\tif (color.a > 0.0) {\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color * vAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aColorMultipliers0;\n\t\tattribute vec4 aColorMultipliers1;\n\t\tattribute vec4 aColorMultipliers2;\n\t\tattribute vec4 aColorMultipliers3;\n\t\tattribute vec4 aColorOffsets;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec4 vColorMultipliers0;\n\t\tvarying vec4 vColorMultipliers1;\n\t\tvarying vec4 vColorMultipliers2;\n\t\tvarying vec4 vColorMultipliers3;\n\t\tvarying vec4 vColorOffsets;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\tuniform bool uColorTransform;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\t\n\t\t\tif (uColorTransform) {\n\t\t\t\t\n\t\t\t\tvColorMultipliers0 = aColorMultipliers0;\n\t\t\t\tvColorMultipliers1 = aColorMultipliers1;\n\t\t\t\tvColorMultipliers2 = aColorMultipliers2;\n\t\t\t\tvColorMultipliers3 = aColorMultipliers3;\n\t\t\t\tvColorOffsets = aColorOffsets;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	}
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,gl: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__isUniform: null
	,__inputBitmapData: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__uniformMatrix2: null
	,__uniformMatrix3: null
	,__uniformMatrix4: null
	,__disable: function() {
		if(this.glProgram != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		if(this.get_data().uImage0 != null) {
			this.get_data().uImage0.input = null;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			this.gl.__context.disableVertexAttribArray(parameter.index);
		}
		var _g2 = 0;
		var _g11 = this.__paramFloat;
		while(_g2 < _g11.length) {
			var parameter1 = _g11[_g2];
			++_g2;
			this.gl.__context.disableVertexAttribArray(parameter1.index);
		}
		var _g3 = 0;
		var _g12 = this.__paramInt;
		while(_g3 < _g12.length) {
			var parameter2 = _g12[_g3];
			++_g3;
			this.gl.__context.disableVertexAttribArray(parameter2.index);
		}
		this.gl.__context.bindBuffer(this.gl.ARRAY_BUFFER,null);
		this.gl.__context.bindTexture(this.gl.TEXTURE_2D,null);
		if(this.gl.type == lime_graphics_opengl_GLContextType.OPENGL) {
			this.gl.__context.disable(this.gl.TEXTURE_2D);
		}
	}
	,__enable: function() {
		this.__init();
		if(this.glProgram != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			this.gl.__context.uniform1i(input.index,textureCount);
			++textureCount;
		}
		if(this.gl.type == lime_graphics_opengl_GLContextType.OPENGL && textureCount > 0) {
			this.gl.__context.enable(this.gl.TEXTURE_2D);
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = new openfl_display_ShaderData(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.glProgram == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__isUniform == null) {
			this.__glSourceDirty = false;
			this.glProgram = null;
			this.__isUniform = new haxe_ds_StringMap();
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			var this1 = new Float32Array(4);
			this.__uniformMatrix2 = this1;
			var this2 = new Float32Array(9);
			this.__uniformMatrix3 = this2;
			var this3 = new Float32Array(16);
			this.__uniformMatrix4 = this3;
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.gl != null && this.glProgram == null) {
			var fragment = "#ifdef GL_ES\n\t\t\t\tprecision " + (this.precisionHint == 1 ? "mediump" : "lowp") + " float;\n\t\t\t\t#endif\n\t\t\t\t" + this.get_glFragmentSource();
			this.glProgram = lime_utils_GLUtils.createProgram(this.get_glVertexSource(),fragment);
			if(this.glProgram != null) {
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					var key = input.name;
					var _this = this.__isUniform;
					if(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]) {
						input.index = this.gl.__context.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = this.gl.__context.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g2 = 0;
				var _g11 = this.__paramBool;
				while(_g2 < _g11.length) {
					var parameter = _g11[_g2];
					++_g2;
					var key1 = parameter.name;
					var _this1 = this.__isUniform;
					if(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]) {
						parameter.index = this.gl.__context.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = this.gl.__context.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g3 = 0;
				var _g12 = this.__paramFloat;
				while(_g3 < _g12.length) {
					var parameter1 = _g12[_g3];
					++_g3;
					var key2 = parameter1.name;
					var _this2 = this.__isUniform;
					if(__map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2]) {
						parameter1.index = this.gl.__context.getUniformLocation(this.glProgram,parameter1.name);
					} else {
						parameter1.index = this.gl.__context.getAttribLocation(this.glProgram,parameter1.name);
					}
				}
				var _g4 = 0;
				var _g13 = this.__paramInt;
				while(_g4 < _g13.length) {
					var parameter2 = _g13[_g4];
					++_g4;
					var key3 = parameter2.name;
					var _this3 = this.__isUniform;
					if(__map_reserved[key3] != null ? _this3.getReserved(key3) : _this3.h[key3]) {
						parameter2.index = this.gl.__context.getUniformLocation(this.glProgram,parameter2.name);
					} else {
						parameter2.index = this.gl.__context.getAttribLocation(this.glProgram,parameter2.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				this.__inputBitmapData.push(input);
				this.get_data()[name] = input;
			} else {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.name = name;
					parameter.type = parameterType;
					this.__paramBool.push(parameter);
					this.get_data()[name] = parameter;
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.name = name;
					parameter1.type = parameterType;
					this.__paramInt.push(parameter1);
					this.get_data()[name] = parameter1;
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.name = name;
					parameter2.type = parameterType;
					this.__paramFloat.push(parameter2);
					this.get_data()[name] = parameter2;
				}
			}
			var _this = this.__isUniform;
			var value = storageType == "uniform";
			if(__map_reserved[name] != null) {
				_this.setReserved(name,value);
			} else {
				_this.h[name] = value;
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.glProgram != null) {
			this.__updateGL();
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input.input != null) {
				this.gl.__context.activeTexture(this.gl.TEXTURE0 + textureCount);
				var _this = this.gl;
				var target = this.gl.TEXTURE_2D;
				var texture = input.input.getTexture(this.gl);
				_this.__context.bindTexture(target,texture);
				if(input.smoothing) {
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
				} else {
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
					this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
				}
			}
			++textureCount;
		}
		var value;
		var index;
		var _g2 = 0;
		var _g11 = this.__paramBool;
		while(_g2 < _g11.length) {
			var parameter = _g11[_g2];
			++_g2;
			value = parameter.value;
			index = parameter.index;
			if(value != null) {
				var _g21 = parameter.type;
				switch(_g21) {
				case 0:
					this.gl.__context.uniform1i(index,value[0] ? 1 : 0);
					break;
				case 1:
					this.gl.__context.uniform2i(index,value[0] ? 1 : 0,value[1] ? 1 : 0);
					break;
				case 2:
					this.gl.__context.uniform3i(index,value[0] ? 1 : 0,value[1] ? 1 : 0,value[2] ? 1 : 0);
					break;
				case 3:
					this.gl.__context.uniform4i(index,value[0] ? 1 : 0,value[1] ? 1 : 0,value[2] ? 1 : 0,value[3] ? 1 : 0);
					break;
				default:
				}
			} else {
				var key = parameter.name;
				var _this1 = this.__isUniform;
				if(!(__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key])) {
					this.gl.__context.enableVertexAttribArray(parameter.index);
				}
			}
		}
		var value1;
		var index1;
		var _g3 = 0;
		var _g12 = this.__paramFloat;
		while(_g3 < _g12.length) {
			var parameter1 = _g12[_g3];
			++_g3;
			value1 = parameter1.value;
			index1 = parameter1.index;
			if(value1 != null) {
				var _g22 = parameter1.type;
				switch(_g22) {
				case 4:
					this.gl.__context.uniform1f(index1,value1[0]);
					break;
				case 5:
					this.gl.__context.uniform2f(index1,value1[0],value1[1]);
					break;
				case 6:
					this.gl.__context.uniform3f(index1,value1[0],value1[1],value1[2]);
					break;
				case 7:
					this.gl.__context.uniform4f(index1,value1[0],value1[1],value1[2],value1[3]);
					break;
				case 12:
					var _g23 = 0;
					while(_g23 < 4) {
						var i = _g23++;
						this.__uniformMatrix2[i] = value1[i];
					}
					var _this2 = this.gl;
					var v = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__uniformMatrix2);
					_this2.__context.uniformMatrix2fv(index1,false,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v,16));
					break;
				case 16:
					var _g24 = 0;
					while(_g24 < 9) {
						var i1 = _g24++;
						this.__uniformMatrix3[i1] = value1[i1];
					}
					var _this3 = this.gl;
					var v1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__uniformMatrix3);
					_this3.__context.uniformMatrix3fv(index1,false,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v1,36));
					break;
				case 20:
					var _g25 = 0;
					while(_g25 < 16) {
						var i2 = _g25++;
						this.__uniformMatrix4[i2] = value1[i2];
					}
					var _this4 = this.gl;
					var v2 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(this.__uniformMatrix4);
					_this4.__context.uniformMatrix4fv(index1,false,lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array(v2,64));
					break;
				default:
				}
			} else {
				var key1 = parameter1.name;
				var _this5 = this.__isUniform;
				if(!(__map_reserved[key1] != null ? _this5.getReserved(key1) : _this5.h[key1])) {
					this.gl.__context.enableVertexAttribArray(parameter1.index);
					var _g26 = parameter1.type;
					switch(_g26) {
					case 12:
						this.gl.__context.enableVertexAttribArray(parameter1.index + 1);
						break;
					case 16:
						this.gl.__context.enableVertexAttribArray(parameter1.index + 1);
						this.gl.__context.enableVertexAttribArray(parameter1.index + 2);
						break;
					case 20:
						this.gl.__context.enableVertexAttribArray(parameter1.index + 1);
						this.gl.__context.enableVertexAttribArray(parameter1.index + 2);
						this.gl.__context.enableVertexAttribArray(parameter1.index + 3);
						break;
					default:
					}
				}
			}
		}
		var value2;
		var index2;
		var _g4 = 0;
		var _g13 = this.__paramInt;
		while(_g4 < _g13.length) {
			var parameter2 = _g13[_g4];
			++_g4;
			value2 = parameter2.value;
			index2 = parameter2.index;
			if(value2 != null) {
				var _g27 = parameter2.type;
				switch(_g27) {
				case 8:
					this.gl.__context.uniform1i(index2,value2[0]);
					break;
				case 9:
					this.gl.__context.uniform2i(index2,value2[0],value2[1]);
					break;
				case 10:
					this.gl.__context.uniform3i(index2,value2[0],value2[1],value2[2]);
					break;
				case 11:
					this.gl.__context.uniform4i(index2,value2[0],value2[1],value2[2],value2[3]);
					break;
				default:
				}
			} else {
				var key2 = parameter2.name;
				var _this6 = this.__isUniform;
				if(!(__map_reserved[key2] != null ? _this6.getReserved(key2) : _this6.h[key2])) {
					this.gl.__context.enableVertexAttribArray(parameter2.index);
				}
			}
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,__class__: openfl_display_Shader
};
var openfl__$internal_renderer_opengl_GLMaskShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 vTexCoord;\n\t\t\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tdiscard;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvTexCoord = aTexCoord;\n\t\t\t\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
};
$hxClasses["openfl._internal.renderer.opengl.GLMaskShader"] = openfl__$internal_renderer_opengl_GLMaskShader;
openfl__$internal_renderer_opengl_GLMaskShader.__name__ = ["openfl","_internal","renderer","opengl","GLMaskShader"];
openfl__$internal_renderer_opengl_GLMaskShader.__super__ = openfl_display_Shader;
openfl__$internal_renderer_opengl_GLMaskShader.prototype = $extend(openfl_display_Shader.prototype,{
	__class__: openfl__$internal_renderer_opengl_GLMaskShader
});
var openfl__$internal_renderer_opengl_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.gl = renderSession.gl;
	this.clipRects = [];
	this.maskObjects = [];
	this.numClipRects = 0;
	this.stencilReference = 0;
	this.tempRect = new openfl_geom_Rectangle();
};
$hxClasses["openfl._internal.renderer.opengl.GLMaskManager"] = openfl__$internal_renderer_opengl_GLMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","GLMaskManager"];
openfl__$internal_renderer_opengl_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	clipRects: null
	,gl: null
	,maskObjects: null
	,numClipRects: null
	,stencilReference: null
	,tempRect: null
	,pushMask: function(mask) {
		if(this.stencilReference == 0) {
			this.gl.__context.enable(this.gl.STENCIL_TEST);
			this.gl.__context.stencilMask(255);
			this.gl.__context.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
		this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
		this.gl.__context.colorMask(false,false,false,false);
		mask.__renderGLMask(this.renderSession);
		this.maskObjects.push(mask);
		this.stencilReference++;
		this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
		this.gl.__context.colorMask(true,true,true,true);
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.pushRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.pushMask(object.__mask);
		}
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) {
			this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.scissorRect(clipRect);
		this.numClipRects++;
	}
	,popMask: function() {
		if(this.stencilReference == 0) {
			return;
		}
		if(this.stencilReference > 1) {
			this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
			this.gl.__context.colorMask(false,false,false,false);
			var mask = this.maskObjects.pop();
			mask.__renderGLMask(this.renderSession);
			this.stencilReference--;
			this.gl.__context.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.__context.stencilFunc(this.gl.EQUAL,this.stencilReference,255);
			this.gl.__context.colorMask(true,true,true,true);
		} else {
			this.stencilReference = 0;
			this.gl.__context.disable(this.gl.STENCIL_TEST);
		}
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.popRect();
		}
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) {
				this.scissorRect(this.clipRects[this.numClipRects - 1]);
			} else {
				this.scissorRect();
			}
		}
	}
	,scissorRect: function(rect) {
		if(rect != null) {
			var renderer = this.renderSession.renderer;
			this.gl.__context.enable(this.gl.SCISSOR_TEST);
			var clipRect = this.tempRect;
			rect.__transform(clipRect,renderer.displayMatrix);
			var x = Math.floor(clipRect.x);
			var y = Math.floor(renderer.height - clipRect.y - clipRect.height);
			var width = Math.ceil(clipRect.width);
			var height = Math.ceil(clipRect.height);
			if(width < 0) {
				width = 0;
			}
			if(height < 0) {
				height = 0;
			}
			this.gl.__context.scissor(x,y,width,height);
		} else {
			this.gl.__context.disable(this.gl.SCISSOR_TEST);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLMaskManager
});
var openfl__$internal_renderer_opengl_GLRenderer = function(stage,gl,defaultRenderTarget) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.gl = gl;
	this.defaultRenderTarget = defaultRenderTarget;
	this.flipped = defaultRenderTarget == null;
	if(openfl_display_Graphics.maxTextureWidth == null) {
		openfl_display_Graphics.maxTextureWidth = openfl_display_Graphics.maxTextureHeight = gl.__context.getParameter(gl.MAX_TEXTURE_SIZE);
	}
	this.matrix = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	this.values = [];
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.clearRenderDirty = true;
	this.renderSession.gl = gl;
	this.renderSession.renderer = this;
	this.renderSession.renderType = lime_graphics_RendererType.OPENGL;
	this.renderSession.blendModeManager = new openfl__$internal_renderer_opengl_GLBlendModeManager(gl);
	this.renderSession.filterManager = new openfl__$internal_renderer_opengl_GLFilterManager(this,this.renderSession);
	this.renderSession.shaderManager = new openfl__$internal_renderer_opengl_GLShaderManager(gl);
	this.renderSession.maskManager = new openfl__$internal_renderer_opengl_GLMaskManager(this.renderSession);
	if(stage.window != null) {
		if(stage.stage3Ds.data.get(0).context3D == null) {
			stage.stage3Ds.data.get(0).__createContext(stage,this.renderSession);
		}
		var width = defaultRenderTarget != null ? defaultRenderTarget.width : Math.ceil(stage.window.__width * stage.window.__scale);
		var height = defaultRenderTarget != null ? defaultRenderTarget.height : Math.ceil(stage.window.__height * stage.window.__scale);
		this.resize(width,height);
	}
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	projection: null
	,projectionFlipped: null
	,defaultRenderTarget: null
	,displayHeight: null
	,displayMatrix: null
	,displayWidth: null
	,flipped: null
	,gl: null
	,matrix: null
	,renderTargetA: null
	,renderTargetB: null
	,offsetX: null
	,offsetY: null
	,values: null
	,clear: function() {
		if(this.stage.__transparent) {
			this.gl.__context.clearColor(0,0,0,0);
		} else {
			this.gl.__context.clearColor(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2],1);
		}
		this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
	}
	,getMatrix: function(transform) {
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.displayMatrix);
		if(this.renderSession.roundPixels) {
			_matrix.tx = Math.round(_matrix.tx);
			_matrix.ty = Math.round(_matrix.ty);
		}
		lime_math__$Matrix4_Matrix4_$Impl_$.identity(this.matrix);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,0,_matrix.a);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,1,_matrix.b);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,4,_matrix.c);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,5,_matrix.d);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,12,_matrix.tx);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,13,_matrix.ty);
		lime_math__$Matrix4_Matrix4_$Impl_$.append(this.matrix,this.flipped ? this.projectionFlipped : this.projection);
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.values[i] = lime_math__$Matrix4_Matrix4_$Impl_$.get(this.matrix,i);
		}
		openfl_geom_Matrix.__pool.release(_matrix);
		return this.values;
	}
	,render: function() {
		this.gl.__context.viewport(this.offsetX,this.offsetY,this.displayWidth,this.displayHeight);
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.renderSession.upscaled = this.displayMatrix.a != 1 || this.displayMatrix.d != 1;
		this.stage.__renderGL(this.renderSession);
		if(this.offsetX > 0 || this.offsetY > 0) {
			this.gl.__context.clearColor(0,0,0,1);
			this.gl.__context.enable(this.gl.SCISSOR_TEST);
			if(this.offsetX > 0) {
				this.gl.__context.scissor(0,0,this.offsetX,this.height);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.__context.scissor(this.offsetX + this.displayWidth,0,this.width,this.height);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
			}
			if(this.offsetY > 0) {
				this.gl.__context.scissor(0,0,this.width,this.offsetY);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.__context.scissor(0,this.offsetY + this.displayHeight,this.width,this.height);
				this.gl.__context.clear(this.gl.COLOR_BUFFER_BIT);
			}
			this.gl.__context.disable(this.gl.SCISSOR_TEST);
		}
	}
	,renderStage3D: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__renderGL(this.stage,this.renderSession);
		}
	}
	,resize: function(width,height) {
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		if(width > 0 && height > 0) {
			if(this.renderTargetA != null && (this.renderTargetA.width != width || this.renderTargetA.height != height)) {
				this.renderTargetA = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(width,height,1,true));
				var _this = this.gl;
				var target = this.gl.TEXTURE_2D;
				var texture = this.renderTargetA.getTexture(this.gl);
				_this.__context.bindTexture(target,texture);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.renderTargetB != null && (this.renderTargetB.width != width || this.renderTargetB.height != height)) {
				this.renderTargetB = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.data.get(0).context3D.createRectangleTexture(width,height,1,true));
				var _this1 = this.gl;
				var target1 = this.gl.TEXTURE_2D;
				var texture1 = this.renderTargetB.getTexture(this.gl);
				_this1.__context.bindTexture(target1,texture1);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.__context.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
		}
		this.displayMatrix = this.defaultRenderTarget == null ? this.stage.__displayMatrix : new openfl_geom_Matrix();
		var w = this.defaultRenderTarget == null ? this.stage.stageWidth : this.defaultRenderTarget.width;
		var h = this.defaultRenderTarget == null ? this.stage.stageHeight : this.defaultRenderTarget.height;
		var _this2 = this.displayMatrix;
		this.offsetX = Math.round(0 * _this2.a + 0 * _this2.c + _this2.tx);
		var _this3 = this.displayMatrix;
		this.offsetY = Math.round(0 * _this3.b + 0 * _this3.d + _this3.ty);
		var _this4 = this.displayMatrix;
		this.displayWidth = Math.round(w * _this4.a + 0 * _this4.c + _this4.tx - this.offsetX);
		var _this5 = this.displayMatrix;
		this.displayHeight = Math.round(0 * _this5.b + h * _this5.d + _this5.ty - this.offsetY);
		this.projection = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.offsetY,this.displayHeight + this.offsetY,-1000,1000);
		this.projectionFlipped = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.displayHeight + this.offsetY,this.offsetY,-1000,1000);
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_GLShaderManager = function(gl) {
	openfl__$internal_renderer_AbstractShaderManager.call(this);
	this.gl = gl;
	this.defaultShader = new openfl_display_Shader();
	this.initShader(this.defaultShader);
};
$hxClasses["openfl._internal.renderer.opengl.GLShaderManager"] = openfl__$internal_renderer_opengl_GLShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.__name__ = ["openfl","_internal","renderer","opengl","GLShaderManager"];
openfl__$internal_renderer_opengl_GLShaderManager.__super__ = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.prototype = $extend(openfl__$internal_renderer_AbstractShaderManager.prototype,{
	gl: null
	,initShader: function(shader) {
		if(shader != null) {
			if(shader.gl == null) {
				shader.gl = this.gl;
				shader.__init();
			}
			return shader;
		}
		return this.defaultShader;
	}
	,setShader: function(shader) {
		if(this.currentShader == shader) {
			return;
		}
		if(this.currentShader != null) {
			this.currentShader.__disable();
		}
		if(shader == null) {
			this.currentShader = null;
			this.gl.__context.useProgram(null);
			return;
		} else {
			this.currentShader = shader;
			this.initShader(shader);
			this.gl.__context.useProgram(shader.glProgram);
			this.currentShader.__enable();
		}
	}
	,updateShader: function(shader) {
		if(this.currentShader != null) {
			this.currentShader.__update();
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLShaderManager
});
var openfl__$internal_stage3D_Context3DStateCache = function() {
	this._registers = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,4096);
	this.clearSettings();
};
$hxClasses["openfl._internal.stage3D.Context3DStateCache"] = openfl__$internal_stage3D_Context3DStateCache;
openfl__$internal_stage3D_Context3DStateCache.__name__ = ["openfl","_internal","stage3D","Context3DStateCache"];
openfl__$internal_stage3D_Context3DStateCache.prototype = {
	_activeTexture: null
	,_activeVertexArray: null
	,_cullingMode: null
	,_depthTestCompareMode: null
	,_depthTestEnabled: null
	,_depthTestMask: null
	,_destBlendFactor: null
	,_program: null
	,_registers: null
	,_srcBlendFactor: null
	,_viewportHeight: null
	,_viewportOriginX: null
	,_viewportOriginY: null
	,_viewportWidth: null
	,clearRegisters: function() {
		var numFloats = 4096;
		var _g1 = 0;
		var _g = numFloats;
		while(_g1 < _g) {
			var c = _g1++;
			this._registers.data.set(c,-999999999.0);
		}
	}
	,clearSettings: function() {
		this._srcBlendFactor = null;
		this._destBlendFactor = null;
		this._depthTestEnabled = false;
		this._depthTestMask = false;
		this._depthTestCompareMode = null;
		this._program = null;
		this._cullingMode = null;
		this._activeTexture = -1;
		this._activeVertexArray = -1;
		this._viewportOriginX = -1;
		this._viewportOriginY = -1;
		this._viewportWidth = -1;
		this._viewportHeight = -1;
		this.clearRegisters();
	}
	,updateViewport: function(originX,originY,width,height) {
		this._viewportOriginX = originX;
		this._viewportOriginY = originY;
		this._viewportWidth = width;
		this._viewportHeight = height;
		return true;
	}
	,__class__: openfl__$internal_stage3D_Context3DStateCache
};
var openfl__$internal_stage3D_GLCompressedTextureFormats = function(gl) {
	this.__formatMapAlpha = new haxe_ds_IntMap();
	this.__formatMap = new haxe_ds_IntMap();
	this.checkDXT(gl);
	this.checkETC1(gl);
	this.checkPVRTC(gl);
};
$hxClasses["openfl._internal.stage3D.GLCompressedTextureFormats"] = openfl__$internal_stage3D_GLCompressedTextureFormats;
openfl__$internal_stage3D_GLCompressedTextureFormats.__name__ = ["openfl","_internal","stage3D","GLCompressedTextureFormats"];
openfl__$internal_stage3D_GLCompressedTextureFormats.prototype = {
	__formatMap: null
	,__formatMapAlpha: null
	,checkDXT: function(gl) {
		var compressedExtension = gl.__context.getExtension("WEBGL_compressed_texture_s3tc");
		if(compressedExtension != null) {
			var v = compressedExtension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
			this.__formatMap.h[0] = v;
			var v1 = compressedExtension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
			this.__formatMapAlpha.h[0] = v1;
		}
	}
	,checkETC1: function(gl) {
		var compressedExtension = gl.__context.getExtension("WEBGL_compressed_texture_etc1");
		if(compressedExtension != null) {
			var v = compressedExtension.COMPRESSED_RGB_ETC1_WEBGL;
			this.__formatMap.h[2] = v;
			var v1 = compressedExtension.COMPRESSED_RGB_ETC1_WEBGL;
			this.__formatMapAlpha.h[2] = v1;
		}
	}
	,checkPVRTC: function(gl) {
		var compressedExtension = gl.__context.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
		if(compressedExtension != null) {
			var v = compressedExtension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
			this.__formatMap.h[1] = v;
			var v1 = compressedExtension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
			this.__formatMapAlpha.h[1] = v1;
		}
	}
	,__class__: openfl__$internal_stage3D_GLCompressedTextureFormats
};
var openfl__$internal_stage3D_GLUtils = function() { };
$hxClasses["openfl._internal.stage3D.GLUtils"] = openfl__$internal_stage3D_GLUtils;
openfl__$internal_stage3D_GLUtils.__name__ = ["openfl","_internal","stage3D","GLUtils"];
openfl__$internal_stage3D_GLUtils.CheckGLError = function() {
	if(!openfl__$internal_stage3D_GLUtils.debug) {
		return;
	}
	var error = lime_graphics_opengl_GL.context.__context.getError();
	if(error != 0) {
		var errorText;
		switch(error) {
		case 0:
			errorText = "GL_NO_ERROR";
			break;
		case 1280:
			errorText = "GL_INVALID_ENUM";
			break;
		case 1281:
			errorText = "GL_INVALID_VALUE";
			break;
		case 1282:
			errorText = "GL_INVALID_OPERATION";
			break;
		case 1285:
			errorText = "GL_OUT_OF_MEMORY";
			break;
		case 1286:
			errorText = "GL_INVALID_FRAMEBUFFER_OPERATION";
			break;
		default:
			if(error == null) {
				errorText = "null";
			} else {
				errorText = "" + error;
			}
		}
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Error calling openGL api. Error: " + errorText + "\n"));
	}
};
var openfl__$internal_stage3D_SamplerState = function(minFilter,magFilter,wrapModeS,wrapModeT,lodBias,maxAniso,ignoreSampler,centroid,mipmapGenerated,textureAlpha) {
	if(textureAlpha == null) {
		textureAlpha = false;
	}
	if(mipmapGenerated == null) {
		mipmapGenerated = false;
	}
	if(centroid == null) {
		centroid = false;
	}
	if(ignoreSampler == null) {
		ignoreSampler = false;
	}
	if(maxAniso == null) {
		maxAniso = 0.0;
	}
	if(lodBias == null) {
		lodBias = 0.0;
	}
	this.set_minFilter(minFilter);
	this.set_magFilter(magFilter);
	this.set_wrapModeS(wrapModeS);
	this.set_wrapModeT(wrapModeT);
	this.set_lodBias(lodBias);
	this.set_maxAniso(maxAniso);
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
	this.mipmapGenerated = mipmapGenerated;
	this.textureAlpha = textureAlpha;
	this.__samplerDirty = true;
};
$hxClasses["openfl._internal.stage3D.SamplerState"] = openfl__$internal_stage3D_SamplerState;
openfl__$internal_stage3D_SamplerState.__name__ = ["openfl","_internal","stage3D","SamplerState"];
openfl__$internal_stage3D_SamplerState.prototype = {
	lodBias: null
	,magFilter: null
	,maxAniso: null
	,minFilter: null
	,wrapModeS: null
	,wrapModeT: null
	,centroid: null
	,ignoreSampler: null
	,mipmapGenerated: null
	,textureAlpha: null
	,__samplerDirty: null
	,set_lodBias: function(value) {
		if(this.lodBias != value) {
			this.__samplerDirty = true;
		}
		return this.lodBias = value;
	}
	,set_magFilter: function(value) {
		if(this.magFilter != value) {
			this.__samplerDirty = true;
		}
		return this.magFilter = value;
	}
	,set_maxAniso: function(value) {
		if(this.maxAniso != value) {
			this.__samplerDirty = true;
		}
		return this.maxAniso = value;
	}
	,set_minFilter: function(value) {
		if(this.minFilter != value) {
			this.__samplerDirty = true;
		}
		return this.minFilter = value;
	}
	,set_wrapModeS: function(value) {
		if(this.wrapModeS != value) {
			this.__samplerDirty = true;
		}
		return this.wrapModeS = value;
	}
	,set_wrapModeT: function(value) {
		if(this.wrapModeT != value) {
			this.__samplerDirty = true;
		}
		return this.wrapModeT = value;
	}
	,__class__: openfl__$internal_stage3D_SamplerState
};
var openfl__$internal_stage3D_opengl_GLContext3D = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLContext3D"] = openfl__$internal_stage3D_opengl_GLContext3D;
openfl__$internal_stage3D_opengl_GLContext3D.__name__ = ["openfl","_internal","stage3D","opengl","GLContext3D"];
openfl__$internal_stage3D_opengl_GLContext3D.create = function(context) {
	var gl = context.__renderSession.gl;
	var this1 = new Float32Array(512);
	context.__vertexConstants = this1;
	var this2 = new Float32Array(512);
	context.__fragmentConstants = this2;
	var array = [1.0,1.0,1.0,1.0];
	var this3;
	if(array != null) {
		this3 = new Float32Array(array);
	} else {
		this3 = null;
	}
	context.__positionScale = this3;
	context.__samplerDirty = 0;
	context.__samplerTextures = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	context.__samplerStates = [];
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		context.__samplerStates[i] = new openfl__$internal_stage3D_SamplerState(gl.LINEAR,gl.LINEAR,gl.CLAMP_TO_EDGE,gl.CLAMP_TO_EDGE);
	}
	context.maxBackBufferHeight = context.maxBackBufferWidth = gl.__context.getParameter(gl.MAX_VIEWPORT_DIMS);
	context.__backBufferAntiAlias = 0;
	context.__backBufferEnableDepthAndStencil = true;
	context.__backBufferWantsBestResolution = false;
	context.__frameCount = 0;
	context.__rttDepthAndStencil = false;
	context.__samplerDirty = 0;
	context.__stencilCompareMode = 0;
	context.__stencilRef = 0;
	context.__stencilReadMask = 255;
	var anisoExtension = gl.__context.getExtension("EXT_texture_filter_anisotropic");
	if(anisoExtension == null || !Object.prototype.hasOwnProperty.call(anisoExtension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
		anisoExtension = gl.__context.getExtension("MOZ_EXT_texture_filter_anisotropic");
	}
	if(anisoExtension == null || !Object.prototype.hasOwnProperty.call(anisoExtension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
		anisoExtension = gl.__context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
	}
	context.__supportsPackedDepthStencil = true;
	openfl_display3D_Context3D.DEPTH_STENCIL = gl.DEPTH_STENCIL;
	context.__supportsAnisotropicFiltering = anisoExtension != null;
	if(context.__supportsAnisotropicFiltering) {
		openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = anisoExtension.TEXTURE_MAX_ANISOTROPY_EXT;
		var maxAnisotropy = gl.__context.getParameter(anisoExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
		context.__maxAnisotropyTexture2D = maxAnisotropy;
		context.__maxAnisotropyTexture2D = maxAnisotropy;
	}
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var vendor = gl.__context.getParameter(gl.VENDOR);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var version = gl.__context.getParameter(gl.VERSION);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var renderer = gl.__context.getParameter(gl.RENDERER);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var glslVersion = gl.__context.getParameter(gl.SHADING_LANGUAGE_VERSION);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	context.driverInfo = "OpenGL" + " Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
};
openfl__$internal_stage3D_opengl_GLContext3D.__setViewport = function(originX,originY,width,height) {
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture != null) {
		originY *= -1;
	}
	if(openfl_display3D_Context3D.__stateCache.updateViewport(originX,originY,width,height)) {
		openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.viewport(originX,originY,width,height);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactorsTEMP = function(context) {
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactors();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactors = function() {
	if(openfl_display3D_Context3D.__stateCache._srcBlendFactor == null || openfl_display3D_Context3D.__stateCache._destBlendFactor == null) {
		return;
	}
	var src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE;
	var dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
	var _g = openfl_display3D_Context3D.__stateCache._srcBlendFactor;
	switch(_g) {
	case 0:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.DST_ALPHA;
		break;
	case 1:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.DST_COLOR;
		break;
	case 2:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE;
		break;
	case 3:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_DST_ALPHA;
		break;
	case 4:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_DST_COLOR;
		break;
	case 5:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_SRC_ALPHA;
		break;
	case 7:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.SRC_ALPHA;
		break;
	case 9:
		src = openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
	var _g1 = openfl_display3D_Context3D.__stateCache._destBlendFactor;
	switch(_g1) {
	case 0:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.DST_ALPHA;
		break;
	case 2:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE;
		break;
	case 3:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_DST_ALPHA;
		break;
	case 5:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_SRC_ALPHA;
		break;
	case 6:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ONE_MINUS_SRC_COLOR;
		break;
	case 7:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.SRC_ALPHA;
		break;
	case 8:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.SRC_COLOR;
		break;
	case 9:
		dest = openfl__$internal_stage3D_opengl_GLContext3D.gl.ZERO;
		break;
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
	}
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.enable(openfl__$internal_stage3D_opengl_GLContext3D.gl.BLEND);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	openfl__$internal_stage3D_opengl_GLContext3D.gl.__context.blendFunc(src,dest);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewportTEMP = function(context) {
	openfl__$internal_stage3D_opengl_GLContext3D.context = context;
	openfl__$internal_stage3D_opengl_GLContext3D.gl = context.__renderSession.gl;
	openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport();
};
openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewport = function() {
	if(!openfl_display_Stage3D.__active) {
		openfl_display_Stage3D.__active = true;
		openfl__$internal_stage3D_opengl_GLContext3D.context.__renderSession.renderer.clear();
	}
	if(openfl__$internal_stage3D_opengl_GLContext3D.context.__renderToTexture == null && openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferWidth > 0 && openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferHeight > 0) {
		openfl__$internal_stage3D_opengl_GLContext3D.__setViewport(openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.get_x() | 0,openfl__$internal_stage3D_opengl_GLContext3D.context.__stage3D.get_y() | 0,openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferWidth,openfl__$internal_stage3D_opengl_GLContext3D.context.backBufferHeight);
	}
};
var openfl__$internal_stage3D_opengl_GLCubeTexture = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLCubeTexture"] = openfl__$internal_stage3D_opengl_GLCubeTexture;
openfl__$internal_stage3D_opengl_GLCubeTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLCubeTexture"];
openfl__$internal_stage3D_opengl_GLCubeTexture.create = function(cubeTexture,renderSession) {
	var gl = renderSession.gl;
	cubeTexture.__textureTarget = gl.TEXTURE_CUBE_MAP;
	cubeTexture.__uploadedSides = 0;
};
var openfl__$internal_stage3D_opengl_GLProgram3D = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLProgram3D"] = openfl__$internal_stage3D_opengl_GLProgram3D;
openfl__$internal_stage3D_opengl_GLProgram3D.__name__ = ["openfl","_internal","stage3D","opengl","GLProgram3D"];
openfl__$internal_stage3D_opengl_GLProgram3D["use"] = function(program,renderSession) {
	var gl = renderSession.gl;
	gl.__context.useProgram(program.__programID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	program.__vertexUniformMap.markAllDirty();
	program.__fragmentUniformMap.markAllDirty();
	var _g_head = program.__samplerUniforms.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var sampler = val;
		if(sampler.regCount == 1) {
			gl.__context.uniform1i(sampler.location,sampler.regIndex);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
		}
	}
	var _g_head1 = program.__alphaSamplerUniforms.h;
	while(_g_head1 != null) {
		var val1 = _g_head1.item;
		_g_head1 = _g_head1.next;
		var sampler1 = val1;
		if(sampler1.regCount == 1) {
			gl.__context.uniform1i(sampler1.location,sampler1.regIndex);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
		}
	}
};
var openfl__$internal_stage3D_opengl_GLRectangleTexture = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLRectangleTexture"] = openfl__$internal_stage3D_opengl_GLRectangleTexture;
openfl__$internal_stage3D_opengl_GLRectangleTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLRectangleTexture"];
openfl__$internal_stage3D_opengl_GLRectangleTexture.create = function(rectangleTexture,renderSession) {
	var gl = renderSession.gl;
	rectangleTexture.__textureTarget = gl.TEXTURE_2D;
	openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray(rectangleTexture,renderSession,null);
};
openfl__$internal_stage3D_opengl_GLRectangleTexture.uploadFromTypedArray = function(rectangleTexture,renderSession,data) {
	var gl = renderSession.gl;
	gl.__context.bindTexture(rectangleTexture.__textureTarget,rectangleTexture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var target = rectangleTexture.__textureTarget;
	var internalformat = rectangleTexture.__internalFormat;
	var width = rectangleTexture.__width;
	var height = rectangleTexture.__height;
	var format = rectangleTexture.__format;
	var type = gl.UNSIGNED_BYTE;
	var data1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(data);
	gl.__context.texImage2D(target,0,internalformat,width,height,0,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data1));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.bindTexture(rectangleTexture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
var openfl__$internal_stage3D_opengl_GLTexture = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLTexture"] = openfl__$internal_stage3D_opengl_GLTexture;
openfl__$internal_stage3D_opengl_GLTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLTexture"];
openfl__$internal_stage3D_opengl_GLTexture.create = function(texture,renderSession) {
	var gl = renderSession.gl;
	texture.__textureTarget = gl.TEXTURE_2D;
	gl.__context.bindTexture(texture.__textureTarget,texture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var target = texture.__textureTarget;
	var internalformat = texture.__internalFormat;
	var width = texture.__width;
	var height = texture.__height;
	var format = texture.__format;
	var type = gl.UNSIGNED_BYTE;
	var data = lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
	gl.__context.texImage2D(target,0,internalformat,width,height,0,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.bindTexture(texture.__textureTarget,null);
	openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray(texture,renderSession,null);
};
openfl__$internal_stage3D_opengl_GLTexture.uploadFromTypedArray = function(texture,renderSession,data,miplevel) {
	if(miplevel == null) {
		miplevel = 0;
	}
	if(data == null) {
		return;
	}
	var gl = renderSession.gl;
	var width = texture.__width >> miplevel;
	var height = texture.__height >> miplevel;
	if(width == 0 && height == 0) {
		return;
	}
	if(width == 0) {
		width = 1;
	}
	if(height == 0) {
		height = 1;
	}
	gl.__context.bindTexture(texture.__textureTarget,texture.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var target = texture.__textureTarget;
	var internalformat = texture.__internalFormat;
	var format = texture.__format;
	var type = gl.UNSIGNED_BYTE;
	var data1 = lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView(data);
	gl.__context.texImage2D(target,miplevel,internalformat,width,height,0,format,type,lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView(data1));
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	gl.__context.bindTexture(texture.__textureTarget,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
};
var openfl__$internal_stage3D_opengl_GLTextureBase = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLTextureBase"] = openfl__$internal_stage3D_opengl_GLTextureBase;
openfl__$internal_stage3D_opengl_GLTextureBase.__name__ = ["openfl","_internal","stage3D","opengl","GLTextureBase"];
openfl__$internal_stage3D_opengl_GLTextureBase.create = function(textureBase,renderSession) {
	var gl = renderSession.gl;
	textureBase.__textureID = gl.__context.createTexture();
	textureBase.__textureContext = gl;
	if(openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA == null) {
		openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat = gl.RGBA;
		var bgraExtension = null;
		if(bgraExtension != null) {
			openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA = true;
			openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat = bgraExtension.BGRA_EXT;
			if(gl.type == lime_graphics_opengl_GLContextType.GLES) {
				openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat = bgraExtension.BGRA_EXT;
			}
		} else {
			openfl__$internal_stage3D_opengl_GLTextureBase.__supportsBGRA = false;
			openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat = gl.RGBA;
		}
	}
	if(openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats == null) {
		openfl__$internal_stage3D_opengl_GLTextureBase.__compressedTextureFormats = new openfl__$internal_stage3D_GLCompressedTextureFormats(gl);
	}
	textureBase.__internalFormat = openfl__$internal_stage3D_opengl_GLTextureBase.__textureInternalFormat;
	textureBase.__format = openfl__$internal_stage3D_opengl_GLTextureBase.__textureFormat;
};
var openfl__$internal_stage3D_opengl_GLVideoTexture = function() { };
$hxClasses["openfl._internal.stage3D.opengl.GLVideoTexture"] = openfl__$internal_stage3D_opengl_GLVideoTexture;
openfl__$internal_stage3D_opengl_GLVideoTexture.__name__ = ["openfl","_internal","stage3D","opengl","GLVideoTexture"];
openfl__$internal_stage3D_opengl_GLVideoTexture.create = function(videoTexture,renderSession) {
	var gl = renderSession.gl;
	videoTexture.__textureTarget = gl.TEXTURE_2D;
};
var openfl__$internal_swf_FilterType = $hxClasses["openfl._internal.swf.FilterType"] = { __ename__ : ["openfl","_internal","swf","FilterType"], __constructs__ : ["BlurFilter","ColorMatrixFilter","DropShadowFilter","GlowFilter"] };
openfl__$internal_swf_FilterType.BlurFilter = function(blurX,blurY,quality) { var $x = ["BlurFilter",0,blurX,blurY,quality]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.ColorMatrixFilter = function(matrix) { var $x = ["ColorMatrixFilter",1,matrix]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) { var $x = ["DropShadowFilter",2,distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) { var $x = ["GlowFilter",3,color,alpha,blurX,blurY,strength,quality,inner,knockout]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
var openfl__$internal_swf_SWFLite = function() {
	this.symbols = new haxe_ds_IntMap();
};
$hxClasses["openfl._internal.swf.SWFLite"] = openfl__$internal_swf_SWFLite;
openfl__$internal_swf_SWFLite.__name__ = ["openfl","_internal","swf","SWFLite"];
openfl__$internal_swf_SWFLite.resolveClass = function(name) {
	var value = Type.resolveClass(name);
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_swf_SWFLite.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_swf_SWFLite.unserialize = function(data) {
	if(data == null) {
		return null;
	}
	var unserializer = new haxe_Unserializer(data);
	unserializer.setResolver({ resolveClass : openfl__$internal_swf_SWFLite.resolveClass, resolveEnum : openfl__$internal_swf_SWFLite.resolveEnum});
	return unserializer.unserialize();
};
openfl__$internal_swf_SWFLite.prototype = {
	frameRate: null
	,library: null
	,root: null
	,symbols: null
	,createButton: function(className) {
		return null;
	}
	,createMovieClip: function(className) {
		if(className == null) {
			className = "";
		}
		if(className == "") {
			return this.root.__createObject(this);
		} else {
			var symbol = this.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(symbol1.className == className) {
					if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_SpriteSymbol)) {
						return (js_Boot.__cast(symbol1 , openfl__$internal_symbols_SpriteSymbol)).__createObject(this);
					}
				}
			}
		}
		return null;
	}
	,getBitmapData: function(className) {
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1.className == className) {
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol)) {
					var bitmap = symbol1;
					return openfl_utils_Assets.getBitmapData(bitmap.path);
				}
			}
		}
		return null;
	}
	,hasSymbol: function(className) {
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1.className == className) {
				return true;
			}
		}
		return false;
	}
	,serialize: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this);
		return serializer.toString();
	}
	,__class__: openfl__$internal_swf_SWFLite
};
var openfl_utils_AssetLibrary = function() {
	lime_utils_AssetLibrary.call(this);
};
$hxClasses["openfl.utils.AssetLibrary"] = openfl_utils_AssetLibrary;
openfl_utils_AssetLibrary.__name__ = ["openfl","utils","AssetLibrary"];
openfl_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath));
};
openfl_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
openfl_utils_AssetLibrary.fromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		if(js_Boot.__instanceof(library,openfl_utils_AssetLibrary)) {
			return library;
		} else {
			var _library = new openfl_utils_AssetLibrary();
			_library.__proxy = library;
			return _library;
		}
	} else {
		return null;
	}
};
openfl_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = openfl_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load().then(function(library1) {
			return lime_app_Future.withValue(library1);
		});
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
openfl_utils_AssetLibrary.__super__ = lime_utils_AssetLibrary;
openfl_utils_AssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	__proxy: null
	,exists: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.exists(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.exists.call(this,id,type);
		}
	}
	,getAsset: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.getAsset(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.getAsset.call(this,id,type);
		}
	}
	,getAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getAudioBuffer.call(this,id);
		}
	}
	,getBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getBytes.call(this,id);
		}
	}
	,getFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getFont.call(this,id);
		}
	}
	,getImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getImage.call(this,id);
		}
	}
	,getText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getText.call(this,id);
		}
	}
	,isLocal: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.isLocal(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.isLocal.call(this,id,type);
		}
	}
	,load: function() {
		if(this.__proxy != null) {
			return this.__proxy.load();
		} else {
			return lime_utils_AssetLibrary.prototype.load.call(this);
		}
	}
	,loadAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadAudioBuffer.call(this,id);
		}
	}
	,loadBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadBytes.call(this,id);
		}
	}
	,loadFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadFont.call(this,id);
		}
	}
	,loadImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadImage.call(this,id);
		}
	}
	,loadText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadText.call(this,id);
		}
	}
	,unload: function() {
		if(this.__proxy != null) {
			this.__proxy.unload();
			return;
		} else {
			lime_utils_AssetLibrary.prototype.unload.call(this);
			return;
		}
	}
	,__class__: openfl_utils_AssetLibrary
});
var openfl__$internal_swf_SWFLiteLibrary = function(id) {
	openfl_utils_AssetLibrary.call(this);
	this.id = id;
	this.alphaCheck = new haxe_ds_StringMap();
	this.imageClassNames = new haxe_ds_StringMap();
	this.rootPath = "";
};
$hxClasses["openfl._internal.swf.SWFLiteLibrary"] = openfl__$internal_swf_SWFLiteLibrary;
openfl__$internal_swf_SWFLiteLibrary.__name__ = ["openfl","_internal","swf","SWFLiteLibrary"];
openfl__$internal_swf_SWFLiteLibrary.__super__ = openfl_utils_AssetLibrary;
openfl__$internal_swf_SWFLiteLibrary.prototype = $extend(openfl_utils_AssetLibrary.prototype,{
	alphaCheck: null
	,id: null
	,imageClassNames: null
	,preloading: null
	,rootPath: null
	,swf: null
	,exists: function(id,type) {
		if(this.swf == null) {
			return false;
		}
		if(id == "" && type == "MOVIE_CLIP") {
			return true;
		}
		if(type == "IMAGE" || type == "MOVIE_CLIP") {
			if(this.swf != null) {
				return this.swf.hasSymbol(id);
			} else {
				return false;
			}
		}
		return false;
	}
	,getImage: function(id) {
		var _this = this.imageClassNames;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.imageClassNames;
			if(__map_reserved[id] != null) {
				id = _this1.getReserved(id);
			} else {
				id = _this1.h[id];
			}
		}
		var _this2 = this.alphaCheck;
		if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = symbol1;
					if(bitmapSymbol.alpha != null) {
						var image = openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
						var alpha = openfl_utils_AssetLibrary.prototype.getImage.call(this,bitmapSymbol.alpha);
						this.__copyChannel(image,alpha);
						var _this3 = this.cachedImages;
						if(__map_reserved[id] != null) {
							_this3.setReserved(id,image);
						} else {
							_this3.h[id] = image;
						}
						this.cachedImages.remove(bitmapSymbol.alpha);
						var _this4 = this.alphaCheck;
						if(__map_reserved[id] != null) {
							_this4.setReserved(id,true);
						} else {
							_this4.h[id] = true;
						}
						return image;
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
	}
	,getMovieClip: function(id) {
		if(this.swf != null) {
			return this.swf.createMovieClip(id);
		} else {
			return null;
		}
	}
	,isLocal: function(id,type) {
		return true;
	}
	,load: function() {
		var _gthis = this;
		if(this.id != null) {
			var key = this.id;
			var _this = this.preload;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,true);
			} else {
				_this.h[key] = true;
			}
		}
		var promise = new lime_app_Promise();
		this.preloading = true;
		var onComplete = function(data) {
			var key1 = _gthis.id;
			var _this1 = _gthis.cachedText;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,data);
			} else {
				_this1.h[key1] = data;
			}
			_gthis.swf = openfl__$internal_swf_SWFLite.unserialize(data);
			_gthis.swf.library = _gthis;
			var bitmapSymbol;
			var symbol = _gthis.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol)) {
					bitmapSymbol = symbol1;
					if(bitmapSymbol.className != null) {
						var key2 = bitmapSymbol.className;
						var value = bitmapSymbol.path;
						var _this2 = _gthis.imageClassNames;
						if(__map_reserved[key2] != null) {
							_this2.setReserved(key2,value);
						} else {
							_this2.h[key2] = value;
						}
					}
				}
			}
			var key3 = _gthis.id;
			var value1 = _gthis.swf;
			var _this3 = openfl__$internal_swf_SWFLite.instances;
			if(__map_reserved[key3] != null) {
				_this3.setReserved(key3,value1);
			} else {
				_this3.h[key3] = value1;
			}
			_gthis.__load().onProgress($bind(promise,promise.progress)).onError($bind(promise,promise.error)).onComplete(function(_) {
				_gthis.preloading = false;
				promise.complete(_gthis);
			});
		};
		if(openfl_utils_Assets.exists(this.id)) {
			var id = this.paths.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				var _this4 = this.preload;
				if(__map_reserved[id1] != null) {
					_this4.setReserved(id1,true);
				} else {
					_this4.h[id1] = true;
				}
			}
			this.loadText(this.id).onError($bind(promise,promise.error)).onComplete(onComplete);
		} else {
			var id2 = this.paths.keys();
			while(id2.hasNext()) {
				var id3 = id2.next();
				var _this5 = this.preload;
				if(__map_reserved[id3] != null) {
					_this5.setReserved(id3,true);
				} else {
					_this5.h[id3] = true;
				}
			}
			var path = this.rootPath != null && this.rootPath != "" ? this.rootPath + "/" + this.id : this.id;
			var loader = new openfl_net_URLLoader();
			loader.addEventListener("complete",function(_1) {
				onComplete(loader.data);
			});
			loader.addEventListener("ioError",function(e) {
				promise.error(e);
			});
			loader.load(new openfl_net_URLRequest(path));
		}
		return promise.future;
	}
	,loadImage: function(id) {
		var _gthis = this;
		var _this = this.imageClassNames;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.imageClassNames;
			if(__map_reserved[id] != null) {
				id = _this1.getReserved(id);
			} else {
				id = _this1.h[id];
			}
		}
		var tmp;
		if(!this.preloading) {
			var _this2 = this.alphaCheck;
			tmp = !(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id));
		} else {
			tmp = false;
		}
		if(tmp) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = [symbol1];
					if(bitmapSymbol[0].alpha != null) {
						var promise = [new lime_app_Promise()];
						this.__loadImage(id).onError(($_=promise[0],$bind($_,$_.error))).onComplete((function(promise1,bitmapSymbol1) {
							return function(image) {
								_gthis.__loadImage(bitmapSymbol1[0].alpha).onError(($_=promise1[0],$bind($_,$_.error))).onComplete((function(promise2,bitmapSymbol2) {
									return function(alpha) {
										_gthis.__copyChannel(image,alpha);
										var _this3 = _gthis.cachedImages;
										if(__map_reserved[id] != null) {
											_this3.setReserved(id,image);
										} else {
											_this3.h[id] = image;
										}
										_gthis.cachedImages.remove(bitmapSymbol2[0].alpha);
										var _this4 = _gthis.alphaCheck;
										if(__map_reserved[id] != null) {
											_this4.setReserved(id,true);
										} else {
											_this4.h[id] = true;
										}
										promise2[0].complete(image);
									};
								})(promise1,bitmapSymbol1));
							};
						})(promise,bitmapSymbol));
						return promise[0].future;
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,unload: function() {
		if(this.swf == null) {
			return;
		}
		var bitmap;
		var symbol = this.swf.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol)) {
				bitmap = symbol1;
				openfl_utils_Assets.cache.removeBitmapData(bitmap.path);
			}
		}
	}
	,__copyChannel: function(image,alpha) {
		if(alpha != null) {
			image.copyChannel(alpha,alpha.get_rect(),new lime_math_Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
		}
		image.buffer.premultiplied = true;
		image.set_premultiplied(false);
	}
	,__fromManifest: function(manifest) {
		this.rootPath = manifest.rootPath;
		openfl_utils_AssetLibrary.prototype.__fromManifest.call(this,manifest);
	}
	,__load: function() {
		return openfl_utils_AssetLibrary.prototype.load.call(this);
	}
	,__loadImage: function(id) {
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,__class__: openfl__$internal_swf_SWFLiteLibrary
});
var openfl__$internal_swf_ShapeCommand = $hxClasses["openfl._internal.swf.ShapeCommand"] = { __ename__ : ["openfl","_internal","swf","ShapeCommand"], __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CurveTo","EndFill","LineStyle","LineTo","MoveTo"] };
openfl__$internal_swf_ShapeCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginGradientFill = function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",3,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.EndFill = ["EndFill",4];
openfl__$internal_swf_ShapeCommand.EndFill.toString = $estr;
openfl__$internal_swf_ShapeCommand.EndFill.__enum__ = openfl__$internal_swf_ShapeCommand;
openfl__$internal_swf_ShapeCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",5,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.LineTo = function(x,y) { var $x = ["LineTo",6,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.MoveTo = function(x,y) { var $x = ["MoveTo",7,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
var openfl__$internal_symbols_SWFSymbol = function() {
};
$hxClasses["openfl._internal.symbols.SWFSymbol"] = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SWFSymbol.__name__ = ["openfl","_internal","symbols","SWFSymbol"];
openfl__$internal_symbols_SWFSymbol.prototype = {
	className: null
	,id: null
	,__createObject: function(swf) {
		return null;
	}
	,__class__: openfl__$internal_symbols_SWFSymbol
};
var openfl__$internal_symbols_BitmapSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.BitmapSymbol"] = openfl__$internal_symbols_BitmapSymbol;
openfl__$internal_symbols_BitmapSymbol.__name__ = ["openfl","_internal","symbols","BitmapSymbol"];
openfl__$internal_symbols_BitmapSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_BitmapSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	alpha: null
	,path: null
	,smooth: null
	,__createObject: function(swf) {
		return new openfl_display_Bitmap(openfl_display_BitmapData.fromImage(swf.library.getImage(this.path)),1,this.smooth != false);
	}
	,__class__: openfl__$internal_symbols_BitmapSymbol
});
var openfl__$internal_symbols_ButtonSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ButtonSymbol"] = openfl__$internal_symbols_ButtonSymbol;
openfl__$internal_symbols_ButtonSymbol.__name__ = ["openfl","_internal","symbols","ButtonSymbol"];
openfl__$internal_symbols_ButtonSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ButtonSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	downState: null
	,hitState: null
	,overState: null
	,upState: null
	,__createObject: function(swf) {
		var simpleButton = null;
		openfl_display_SimpleButton.__initSWF = swf;
		openfl_display_SimpleButton.__initSymbol = this;
		if(this.className != null) {
			var symbolType = Type.resolveClass(this.className);
			if(symbolType != null) {
				simpleButton = Type.createInstance(symbolType,[]);
			}
		}
		if(simpleButton == null) {
			simpleButton = new openfl_display_SimpleButton();
		}
		return simpleButton;
	}
	,__class__: openfl__$internal_symbols_ButtonSymbol
});
var openfl__$internal_symbols_DynamicTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.DynamicTextSymbol"] = openfl__$internal_symbols_DynamicTextSymbol;
openfl__$internal_symbols_DynamicTextSymbol.__name__ = ["openfl","_internal","symbols","DynamicTextSymbol"];
openfl__$internal_symbols_DynamicTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_DynamicTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	align: null
	,border: null
	,color: null
	,fontHeight: null
	,fontID: null
	,fontName: null
	,height: null
	,html: null
	,indent: null
	,input: null
	,leading: null
	,leftMargin: null
	,multiline: null
	,password: null
	,rightMargin: null
	,selectable: null
	,text: null
	,width: null
	,wordWrap: null
	,x: null
	,y: null
	,__createObject: function(swf) {
		var textField = new openfl_text_TextField();
		textField.__fromSymbol(swf,this);
		return textField;
	}
	,__class__: openfl__$internal_symbols_DynamicTextSymbol
});
var openfl__$internal_symbols_FontSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.FontSymbol"] = openfl__$internal_symbols_FontSymbol;
openfl__$internal_symbols_FontSymbol.__name__ = ["openfl","_internal","symbols","FontSymbol"];
openfl__$internal_symbols_FontSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_FontSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	advances: null
	,ascent: null
	,bold: null
	,codes: null
	,descent: null
	,glyphs: null
	,italic: null
	,leading: null
	,name: null
	,__class__: openfl__$internal_symbols_FontSymbol
});
var openfl__$internal_symbols_ShapeSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ShapeSymbol"] = openfl__$internal_symbols_ShapeSymbol;
openfl__$internal_symbols_ShapeSymbol.__name__ = ["openfl","_internal","symbols","ShapeSymbol"];
openfl__$internal_symbols_ShapeSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ShapeSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	commands: null
	,rendered: null
	,__createObject: function(swf) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(this.rendered != null) {
			graphics.copyFrom(this.rendered.get_graphics());
			return shape;
		}
		var _g = 0;
		var _g1 = this.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmapID = command[2];
				var bitmapSymbol = swf.symbols.get(bitmapID);
				var bitmap = swf.library.getImage(bitmapSymbol.path);
				if(bitmap != null) {
					graphics.beginBitmapFill(openfl_display_BitmapData.fromImage(bitmap),matrix,repeat,smooth);
				}
				break;
			case 1:
				var alpha = command[3];
				var color = command[2];
				graphics.beginFill(color,alpha);
				break;
			case 2:
				var focalPointRatio = command[9];
				var interpolationMethod = command[8];
				var spreadMethod = command[7];
				var matrix1 = command[6];
				var ratios = command[5];
				var alphas = command[4];
				var colors = command[3];
				var fillType = command[2];
				graphics.beginGradientFill(fillType,colors,alphas,ratios,matrix1,spreadMethod,interpolationMethod,focalPointRatio);
				break;
			case 3:
				var anchorY = command[5];
				var anchorX = command[4];
				var controlY = command[3];
				var controlX = command[2];
				graphics.curveTo(controlX,controlY,anchorX,anchorY);
				break;
			case 4:
				graphics.endFill();
				break;
			case 5:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color1 = command[3];
				var thickness = command[2];
				if(thickness != null) {
					graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit);
				} else {
					graphics.lineStyle();
				}
				break;
			case 6:
				var y = command[3];
				var x = command[2];
				graphics.lineTo(x,y);
				break;
			case 7:
				var y1 = command[3];
				var x1 = command[2];
				graphics.moveTo(x1,y1);
				break;
			}
		}
		this.commands = null;
		this.rendered = new openfl_display_Shape();
		this.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__class__: openfl__$internal_symbols_ShapeSymbol
});
var openfl__$internal_symbols_SpriteSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
	this.frames = [];
};
$hxClasses["openfl._internal.symbols.SpriteSymbol"] = openfl__$internal_symbols_SpriteSymbol;
openfl__$internal_symbols_SpriteSymbol.__name__ = ["openfl","_internal","symbols","SpriteSymbol"];
openfl__$internal_symbols_SpriteSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SpriteSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	baseClassName: null
	,frames: null
	,__createObject: function(swf) {
		openfl_display_MovieClip.__initSWF = swf;
		openfl_display_MovieClip.__initSymbol = this;
		var symbolType = null;
		if(this.className != null) {
			symbolType = Type.resolveClass(this.className);
			var tmp = symbolType == null;
		}
		if(symbolType == null && this.baseClassName != null) {
			symbolType = Type.resolveClass(this.baseClassName);
			var tmp1 = symbolType == null;
		}
		var movieClip = null;
		if(symbolType != null) {
			movieClip = Type.createInstance(symbolType,[]);
		} else {
			movieClip = new openfl_display_MovieClip();
		}
		return movieClip;
	}
	,__class__: openfl__$internal_symbols_SpriteSymbol
});
var openfl__$internal_symbols_StaticTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.StaticTextSymbol"] = openfl__$internal_symbols_StaticTextSymbol;
openfl__$internal_symbols_StaticTextSymbol.__name__ = ["openfl","_internal","symbols","StaticTextSymbol"];
openfl__$internal_symbols_StaticTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_StaticTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	matrix: null
	,records: null
	,rendered: null
	,__createObject: function(swf) {
		var staticText = new openfl_text_StaticText();
		var graphics = staticText.__graphics;
		if(this.rendered != null) {
			staticText.text = this.rendered.text;
			graphics.copyFrom(this.rendered.__graphics);
			return staticText;
		}
		var text = "";
		if(this.records != null) {
			var font = null;
			var color = 16777215;
			var offsetX = this.matrix.tx;
			var offsetY = this.matrix.ty;
			var scale;
			var index;
			var code;
			var _g = 0;
			var _g1 = this.records;
			while(_g < _g1.length) {
				var record = _g1[_g];
				++_g;
				if(record.fontID != null) {
					font = swf.symbols.h[record.fontID];
				}
				if(record.offsetX != null) {
					offsetX = this.matrix.tx + record.offsetX * 0.05;
				}
				if(record.offsetY != null) {
					offsetY = this.matrix.ty + record.offsetY * 0.05;
				}
				if(record.color != null) {
					color = record.color;
				}
				if(font != null) {
					scale = record.fontHeight / 1024 * 0.05;
					var _g3 = 0;
					var _g2 = record.glyphs.length;
					while(_g3 < _g2) {
						var i = _g3++;
						index = record.glyphs[i];
						text += String.fromCharCode(font.codes[index]);
						var _g4 = 0;
						var _g5 = font.glyphs[index];
						while(_g4 < _g5.length) {
							var command = _g5[_g4];
							++_g4;
							switch(command[1]) {
							case 1:
								var alpha = command[3];
								graphics.beginFill(color & 16777215,(color >> 24 & 255) / 255);
								break;
							case 3:
								var anchorY = command[5];
								var anchorX = command[4];
								var controlY = command[3];
								var controlX = command[2];
								graphics.curveTo(controlX * scale + offsetX,controlY * scale + offsetY,anchorX * scale + offsetX,anchorY * scale + offsetY);
								break;
							case 4:
								graphics.endFill();
								break;
							case 5:
								var miterLimit = command[9];
								var joints = command[8];
								var caps = command[7];
								var scaleMode = command[6];
								var pixelHinting = command[5];
								var alpha1 = command[4];
								var color1 = command[3];
								var thickness = command[2];
								if(thickness != null) {
									graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit);
								} else {
									graphics.lineStyle();
								}
								break;
							case 6:
								var y = command[3];
								var x = command[2];
								graphics.lineTo(x * scale + offsetX,y * scale + offsetY);
								break;
							case 7:
								var y1 = command[3];
								var x1 = command[2];
								graphics.moveTo(x1 * scale + offsetX,y1 * scale + offsetY);
								break;
							default:
							}
						}
						offsetX += record.advances[i] * 0.05;
					}
				}
			}
		}
		staticText.text = text;
		this.records = null;
		this.rendered = new openfl_text_StaticText();
		this.rendered.text = text;
		this.rendered.__graphics.copyFrom(staticText.__graphics);
		return staticText;
	}
	,__class__: openfl__$internal_symbols_StaticTextSymbol
});
var openfl__$internal_symbols_StaticTextRecord = function() {
};
$hxClasses["openfl._internal.symbols.StaticTextRecord"] = openfl__$internal_symbols_StaticTextRecord;
openfl__$internal_symbols_StaticTextRecord.__name__ = ["openfl","_internal","symbols","StaticTextRecord"];
openfl__$internal_symbols_StaticTextRecord.prototype = {
	advances: null
	,color: null
	,fontHeight: null
	,fontID: null
	,glyphs: null
	,offsetX: null
	,offsetY: null
	,__class__: openfl__$internal_symbols_StaticTextRecord
};
var openfl__$internal_text_HTMLParser = function() { };
$hxClasses["openfl._internal.text.HTMLParser"] = openfl__$internal_text_HTMLParser;
openfl__$internal_text_HTMLParser.__name__ = ["openfl","_internal","text","HTMLParser"];
openfl__$internal_text_HTMLParser.parse = function(value,textFormat,textFormatRanges) {
	value = value.replace(openfl__$internal_text_HTMLParser.__regexBreakTag.r,"\n");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[0].r,"\"");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[1].r,"'");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[2].r,"&");
	value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[5].r," ");
	var segments = value.split("<");
	if(segments.length == 1) {
		value = value.replace(openfl__$internal_text_HTMLParser.__regexHTMLTag.r,"");
		if(textFormatRanges.data.get_length() > 1) {
			var len = textFormatRanges.data.get_length() - 1;
			new openfl__$Vector_AbstractVector(textFormatRanges.data.splice(1,len));
		}
		value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[3].r,"<");
		value = value.replace(openfl__$internal_text_HTMLParser.__regexEntities[4].r,">");
		var range = textFormatRanges.data.get(0);
		range.format = textFormat;
		range.start = 0;
		range.end = value.length;
		return value;
	} else {
		var len1 = textFormatRanges.data.get_length();
		new openfl__$Vector_AbstractVector(textFormatRanges.data.splice(0,len1));
		value = "";
		var segment;
		var _g1 = 0;
		var _g = segments.length;
		while(_g1 < _g) {
			var i = _g1++;
			segment = segments[i];
			segment = segment.replace(openfl__$internal_text_HTMLParser.__regexEntities[3].r,"<");
			segment = segment.replace(openfl__$internal_text_HTMLParser.__regexEntities[4].r,">");
			segments[i] = segment;
		}
		var formatStack = [textFormat.clone()];
		var sub;
		var noLineBreak = false;
		var _g2 = 0;
		while(_g2 < segments.length) {
			var segment1 = segments[_g2];
			++_g2;
			if(segment1 == "") {
				continue;
			}
			var isClosingTag = HxOverrides.substr(segment1,0,1) == "/";
			var tagEndIndex = segment1.indexOf(">");
			var start = tagEndIndex + 1;
			var spaceIndex = segment1.indexOf(" ");
			var tagName = segment1.substring(isClosingTag ? 1 : 0,spaceIndex > -1 && spaceIndex < tagEndIndex ? spaceIndex : tagEndIndex);
			var format;
			if(isClosingTag) {
				formatStack.pop();
				format = formatStack[formatStack.length - 1].clone();
				if(tagName.toLowerCase() == "p" && textFormatRanges.data.get_length() > 0) {
					value += "\n";
					noLineBreak = true;
				}
				if(start < segment1.length) {
					sub = HxOverrides.substr(segment1,start,null);
					var x = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length);
					textFormatRanges.data.push(x);
					value += sub;
					noLineBreak = false;
				}
			} else {
				format = formatStack[formatStack.length - 1].clone();
				if(tagEndIndex > -1) {
					var _g11 = tagName.toLowerCase();
					switch(_g11) {
					case "a":
						if(openfl__$internal_text_HTMLParser.__regexHref.match(segment1)) {
							format.url = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexHref);
						}
						break;
					case "b":
						format.bold = true;
						break;
					case "em":case "i":
						format.italic = true;
						break;
					case "font":
						if(openfl__$internal_text_HTMLParser.__regexFace.match(segment1)) {
							format.font = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexFace);
						}
						if(openfl__$internal_text_HTMLParser.__regexColor.match(segment1)) {
							format.color = Std.parseInt("0x" + openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexColor));
						}
						if(openfl__$internal_text_HTMLParser.__regexSize.match(segment1)) {
							var sizeAttr = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							if(firstChar == 43 || firstChar == 45) {
								var parentFormat = formatStack.length >= 2 ? formatStack[formatStack.length - 2] : textFormat;
								format.size = parentFormat.size + Std.parseInt(sizeAttr);
							} else {
								format.size = Std.parseInt(sizeAttr);
							}
						}
						break;
					case "p":
						if(textFormatRanges.data.get_length() > 0 && !noLineBreak) {
							value += "\n";
						}
						if(openfl__$internal_text_HTMLParser.__regexAlign.match(segment1)) {
							format.align = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexAlign).toLowerCase());
						}
						break;
					case "textformat":
						if(openfl__$internal_text_HTMLParser.__regexBlockIndent.match(segment1)) {
							format.blockIndent = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexBlockIndent));
						}
						if(openfl__$internal_text_HTMLParser.__regexIndent.match(segment1)) {
							format.indent = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexIndent));
						}
						if(openfl__$internal_text_HTMLParser.__regexLeading.match(segment1)) {
							format.leading = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexLeading));
						}
						if(openfl__$internal_text_HTMLParser.__regexLeftMargin.match(segment1)) {
							format.leftMargin = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexLeftMargin));
						}
						if(openfl__$internal_text_HTMLParser.__regexRightMargin.match(segment1)) {
							format.rightMargin = Std.parseInt(openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexRightMargin));
						}
						if(openfl__$internal_text_HTMLParser.__regexTabStops.match(segment1)) {
							var values = openfl__$internal_text_HTMLParser.__getAttributeMatch(openfl__$internal_text_HTMLParser.__regexTabStops).split(" ");
							var tabStops = [];
							var _g12 = 0;
							while(_g12 < values.length) {
								var stop = values[_g12];
								++_g12;
								tabStops.push(Std.parseInt(stop));
							}
							format.tabStops = tabStops;
						}
						break;
					case "u":
						format.underline = true;
						break;
					}
					formatStack.push(format);
					if(start < segment1.length) {
						sub = segment1.substring(start);
						var x1 = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length);
						textFormatRanges.data.push(x1);
						value += sub;
						noLineBreak = false;
					}
				} else {
					var x2 = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + segment1.length);
					textFormatRanges.data.push(x2);
					value += segment1;
					noLineBreak = false;
				}
			}
		}
		if(textFormatRanges.data.get_length() == 0) {
			var x3 = new openfl__$internal_text_TextFormatRange(formatStack[0],0,0);
			textFormatRanges.data.push(x3);
		}
	}
	return value;
};
openfl__$internal_text_HTMLParser.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.set_text("");
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineBreaks = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.lineDescents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineLeadings = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineHeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineWidths = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.layoutGroups = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.textFormatRanges = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	var leading;
	openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(format);
	if(format.__ascent != null) {
		ascent = format.size * format.__ascent;
		descent = format.size * format.__descent;
	} else {
		ascent = format.size;
		descent = format.size * 0.185;
	}
	leading = format.leading;
	return ascent + descent + leading;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	var tmp;
	if(bold && italic) {
		var _this = openfl_text_Font.__fontByName;
		var key = fontNamePrefix + " Bold Italic";
		if(__map_reserved[key] != null) {
			tmp = _this.existsReserved(key);
		} else {
			tmp = _this.h.hasOwnProperty(key);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		fontName = fontNamePrefix + " Bold Italic";
		bold = false;
		italic = false;
	} else {
		var tmp1;
		if(bold) {
			var _this1 = openfl_text_Font.__fontByName;
			var key1 = fontNamePrefix + " Bold";
			if(__map_reserved[key1] != null) {
				tmp1 = _this1.existsReserved(key1);
			} else {
				tmp1 = _this1.h.hasOwnProperty(key1);
			}
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			fontName = fontNamePrefix + " Bold";
			bold = false;
		} else {
			var tmp2;
			if(italic) {
				var _this2 = openfl_text_Font.__fontByName;
				var key2 = fontNamePrefix + " Italic";
				if(__map_reserved[key2] != null) {
					tmp2 = _this2.existsReserved(key2);
				} else {
					tmp2 = _this2.h.hasOwnProperty(key2);
				}
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				fontName = fontNamePrefix + " Italic";
				italic = false;
			} else {
				if(bold && (fontName.indexOf(" Bold ") > -1 || StringTools.endsWith(fontName," Bold"))) {
					bold = false;
				}
				if(italic && (fontName.indexOf(" Italic ") > -1 || StringTools.endsWith(fontName," Italic"))) {
					italic = false;
				}
			}
		}
	}
	var font = italic ? "italic " : "normal ";
	font += "normal ";
	font += bold ? "bold " : "normal ";
	font += format.size + "px";
	font += "/" + (format.leading + format.size + 3) + "px ";
	var font1;
	switch(fontName) {
	case "_sans":
		font1 = "sans-serif";
		break;
	case "_serif":
		font1 = "serif";
		break;
	case "_typewriter":
		font1 = "monospace";
		break;
	default:
		var _this_r = new RegExp("^[\\s'\"]+(.*)[\\s'\"]+$","".split("u").join(""));
		font1 = "'" + fontName.replace(_this_r,"$1") + "'";
	}
	font += "" + font1;
	return font;
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__hasFocus: null
	,__restrictRegexp: null
	,__useIntAdvances: null
	,getBounds: function() {
		var padding = this.border ? 1 : 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		var br = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"<br>",startIndex);
		var cr = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"\n",startIndex);
		var lf = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"\r",startIndex);
		if(cr == -1 && br == -1) {
			return lf;
		}
		if(lf == -1 && br == -1) {
			return cr;
		}
		if(lf == -1 && cr == -1) {
			return br;
		}
		if(cr == -1) {
			return Math.min(br,lf) | 0;
		}
		if(lf == -1) {
			return Math.min(br,cr) | 0;
		}
		if(br == -1) {
			return Math.min(cr,lf) | 0;
		}
		return Math.min(Math.min(cr,lf),br) | 0;
	}
	,getLineMeasurements: function() {
		this.lineAscents.data.set_length(0);
		this.lineDescents.data.set_length(0);
		this.lineLeadings.data.set_length(0);
		this.lineHeights.data.set_length(0);
		this.lineWidths.data.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		var currentTextHeight = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.data.push(currentLineAscent);
				this.lineDescents.data.push(currentLineDescent);
				this.lineLeadings.data.push(currentLineLeading != null ? currentLineLeading : 0);
				this.lineHeights.data.push(currentLineHeight);
				this.lineWidths.data.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) {
					this.bottomScrollV++;
				}
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group.leading;
			} else {
				currentLineLeading = Math.max(currentLineLeading,group.leading) | 0;
			}
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			currentTextHeight = group.offsetY - 2 + group.ascent + group.descent;
			if(currentTextHeight > this.textHeight) {
				this.textHeight = currentTextHeight;
			}
		}
		if(this.textHeight == 0 && this.textField != null) {
			var currentFormat = this.textField.__textFormat;
			var ascent;
			var descent;
			var leading;
			var heightValue;
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
			currentLineAscent = ascent;
			currentLineDescent = descent;
			currentLineLeading = leading;
			currentTextHeight = ascent + descent;
			this.textHeight = currentTextHeight;
		}
		this.lineAscents.data.push(currentLineAscent);
		this.lineDescents.data.push(currentLineDescent);
		this.lineLeadings.data.push(currentLineLeading != null ? currentLineLeading : 0);
		this.lineHeights.data.push(currentLineHeight);
		this.lineWidths.data.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		} else if(this.textHeight <= this.height - 2) {
			this.bottomScrollV++;
		}
		if(this.autoSize != 2) {
			var _g2 = this.autoSize;
			switch(_g2) {
			case 0:case 1:case 3:
				if(!this.wordWrap) {
					this.width = this.textWidth + 4;
				}
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = this.textWidth - this.width + 4 | 0;
		} else {
			this.maxScrollH = 0;
		}
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.data.set_length(0);
		if(this.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(this.text,"")) {
			return;
		}
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var maxAscent = 0.0;
		var descent = 0.0;
		var layoutGroup = null;
		var positions = null;
		var widthValue = 0.0;
		var heightValue = 0.0;
		var maxHeightValue = 0.0;
		var previousSpaceIndex = -2;
		var spaceIndex = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text," ");
		var breakIndex = this.getLineBreakIndex();
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
			++rangeIndex;
			formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
		}
		if(heightValue > maxHeightValue) {
			maxHeightValue = heightValue;
		}
		if(ascent > maxAscent) {
			maxAscent = ascent;
		}
		lineFormat = formatRange.format;
		var wrap;
		var maxLoops = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) + 1;
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			if(textIndex <= breakIndex) {
				if(this.wordWrap && previousSpaceIndex <= textIndex && this.width >= 4) {
					var text = lime_text__$UTF8String_UTF8String_$Impl_$.substring(_gthis.text,textIndex,breakIndex);
					var tempWidth = openfl__$internal_text_TextEngine.__context.measureText(text).width;
					while(offsetX + tempWidth > _gthis.width - 2) {
						var i = 1;
						while(textIndex + i < breakIndex + 1) {
							var text1 = lime_text__$UTF8String_UTF8String_$Impl_$.substr(_gthis.text,textIndex,i);
							tempWidth = openfl__$internal_text_TextEngine.__context.measureText(text1).width;
							if(offsetX + tempWidth > _gthis.width - 2) {
								--i;
								break;
							}
							++i;
						}
						if(i == 0 && tempWidth > _gthis.width - 4) {
							i = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(_gthis.text);
						}
						if(i == 0) {
							offsetX = 2;
							offsetY += layoutGroup.height;
							++lineIndex;
							break;
						} else {
							var endIndex = textIndex + i;
							if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
								layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex);
								_gthis.layoutGroups.data.push(layoutGroup);
							} else {
								layoutGroup.format = formatRange.format;
								layoutGroup.startIndex = textIndex;
								layoutGroup.endIndex = endIndex;
							}
							var text2 = _gthis.text;
							var endIndex1 = textIndex + i;
							var positions1 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth = 0.0;
								var width;
								var _g1 = textIndex;
								var _g = endIndex1;
								while(_g1 < _g) {
									var i1 = _g1++;
									width = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text2,textIndex,i1 + 1)).width;
									positions1.push(width - previousWidth);
									previousWidth = width;
								}
							} else {
								var _g11 = textIndex;
								var _g2 = endIndex1;
								while(_g11 < _g2) {
									var i2 = _g11++;
									var advance;
									if(i2 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text2) - 1) {
										var nextWidth = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text2,i2 + 1)).width;
										var twoWidths = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text2,i2,2)).width;
										advance = twoWidths - nextWidth;
									} else {
										advance = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text2,i2)).width;
									}
									positions1.push(advance);
								}
							}
							layoutGroup.positions = positions1;
							layoutGroup.offsetX = offsetX;
							layoutGroup.ascent = ascent;
							layoutGroup.descent = descent;
							layoutGroup.leading = leading;
							layoutGroup.lineIndex = lineIndex;
							layoutGroup.offsetY = offsetY;
							var positions2 = layoutGroup.positions;
							var width1 = 0.0;
							var _g3 = 0;
							while(_g3 < positions2.length) {
								var position = positions2[_g3];
								++_g3;
								width1 += position;
							}
							layoutGroup.width = width1;
							layoutGroup.height = heightValue;
							layoutGroup = null;
							if(ascent > maxAscent) {
								maxAscent = ascent;
							}
							if(heightValue > maxHeightValue) {
								maxHeightValue = heightValue;
							}
							var _g4 = 0;
							var _g12 = _gthis.layoutGroups;
							while(_g4 < _g12.data.get_length()) {
								var lg = _g12.data.get(_g4);
								++_g4;
								if(lg.lineIndex < lineIndex) {
									continue;
								}
								if(lg.lineIndex > lineIndex) {
									break;
								}
								lg.ascent = maxAscent;
								lg.height = maxHeightValue;
							}
							offsetY += maxHeightValue;
							maxAscent = 0.0;
							maxHeightValue = 0.0;
							++lineIndex;
							offsetX = 2;
							textIndex += i;
							var text3 = _gthis.text;
							var positions3 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth1 = 0.0;
								var width2;
								var _g13 = textIndex;
								var _g5 = breakIndex;
								while(_g13 < _g5) {
									var i3 = _g13++;
									width2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text3,textIndex,i3 + 1)).width;
									positions3.push(width2 - previousWidth1);
									previousWidth1 = width2;
								}
							} else {
								var _g14 = textIndex;
								var _g6 = breakIndex;
								while(_g14 < _g6) {
									var i4 = _g14++;
									var advance1;
									if(i4 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text3) - 1) {
										var nextWidth1 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text3,i4 + 1)).width;
										var twoWidths1 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text3,i4,2)).width;
										advance1 = twoWidths1 - nextWidth1;
									} else {
										advance1 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text3,i4)).width;
									}
									positions3.push(advance1);
								}
							}
							positions = positions3;
							var width3 = 0.0;
							var _g7 = 0;
							while(_g7 < positions.length) {
								var position1 = positions[_g7];
								++_g7;
								width3 += position1;
							}
							widthValue = width3;
							tempWidth = widthValue;
						}
					}
				}
				if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
					_gthis.layoutGroups.data.push(layoutGroup);
				} else {
					layoutGroup.format = formatRange.format;
					layoutGroup.startIndex = textIndex;
					layoutGroup.endIndex = breakIndex;
				}
				var text4 = this.text;
				var positions4 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth2 = 0.0;
					var width4;
					var _g15 = textIndex;
					var _g8 = breakIndex;
					while(_g15 < _g8) {
						var i5 = _g15++;
						width4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text4,textIndex,i5 + 1)).width;
						positions4.push(width4 - previousWidth2);
						previousWidth2 = width4;
					}
				} else {
					var _g16 = textIndex;
					var _g9 = breakIndex;
					while(_g16 < _g9) {
						var i6 = _g16++;
						var advance2;
						if(i6 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text4) - 1) {
							var nextWidth2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text4,i6 + 1)).width;
							var twoWidths2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text4,i6,2)).width;
							advance2 = twoWidths2 - nextWidth2;
						} else {
							advance2 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text4,i6)).width;
						}
						positions4.push(advance2);
					}
				}
				layoutGroup.positions = positions4;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var positions5 = layoutGroup.positions;
				var width5 = 0.0;
				var _g10 = 0;
				while(_g10 < positions5.length) {
					var position2 = positions5[_g10];
					++_g10;
					width5 += position2;
				}
				layoutGroup.width = width5;
				layoutGroup.height = heightValue;
				layoutGroup = null;
			} else if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				if(layoutGroup.endIndex == spaceIndex) {
					layoutGroup.width -= layoutGroup.positions[layoutGroup.positions.length - 1];
				}
				layoutGroup = null;
			}
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
					++rangeIndex;
					formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					if(currentFormat.__ascent != null) {
						ascent = currentFormat.size * currentFormat.__ascent;
						descent = currentFormat.size * currentFormat.__descent;
					} else {
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
					}
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
				}
				if(heightValue > maxHeightValue) {
					maxHeightValue = heightValue;
				}
				if(ascent > maxAscent) {
					maxAscent = ascent;
				}
				lineFormat = formatRange.format;
			}
			if(breakIndex >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) - 1) {
				offsetY -= maxHeightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			var _g17 = 0;
			var _g18 = _gthis.layoutGroups;
			while(_g17 < _g18.data.get_length()) {
				var lg1 = _g18.data.get(_g17);
				++_g17;
				if(lg1.lineIndex < lineIndex) {
					continue;
				}
				if(lg1.lineIndex > lineIndex) {
					break;
				}
				lg1.ascent = maxAscent;
				lg1.height = maxHeightValue;
			}
			offsetY += maxHeightValue;
			maxAscent = 0.0;
			maxHeightValue = 0.0;
			++lineIndex;
			offsetX = 2;
			textIndex = breakIndex + 1;
			breakIndex = this.getLineBreakIndex(textIndex);
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1 && textIndex < formatRange.end) {
			if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = null;
			}
			wrap = false;
			while(textIndex != formatRange.end) {
				var endIndex2 = -1;
				if(spaceIndex == -1) {
					endIndex2 = breakIndex;
				} else {
					endIndex2 = spaceIndex + 1;
					if(breakIndex > -1 && breakIndex < endIndex2) {
						endIndex2 = breakIndex;
					}
				}
				if(endIndex2 == -1 || endIndex2 > formatRange.end) {
					endIndex2 = formatRange.end;
				}
				var text5 = this.text;
				var positions6 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth3 = 0.0;
					var width6;
					var _g19 = textIndex;
					var _g20 = endIndex2;
					while(_g19 < _g20) {
						var i7 = _g19++;
						width6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text5,textIndex,i7 + 1)).width;
						positions6.push(width6 - previousWidth3);
						previousWidth3 = width6;
					}
				} else {
					var _g110 = textIndex;
					var _g21 = endIndex2;
					while(_g110 < _g21) {
						var i8 = _g110++;
						var advance3;
						if(i8 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text5) - 1) {
							var nextWidth3 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text5,i8 + 1)).width;
							var twoWidths3 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text5,i8,2)).width;
							advance3 = twoWidths3 - nextWidth3;
						} else {
							advance3 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text5,i8)).width;
						}
						positions6.push(advance3);
					}
				}
				positions = positions6;
				var width7 = 0.0;
				var _g22 = 0;
				while(_g22 < positions.length) {
					var position3 = positions[_g22];
					++_g22;
					width7 += position3;
				}
				widthValue = width7;
				if(lineFormat.align == 2) {
					if(positions.length > 0 && textIndex == previousSpaceIndex) {
						++textIndex;
						var spaceWidth = positions.shift();
						widthValue -= spaceWidth;
						offsetX += spaceWidth;
					}
					if(positions.length > 0 && endIndex2 == spaceIndex + 1) {
						--endIndex2;
						var spaceWidth1 = positions.pop();
						widthValue -= spaceWidth1;
					}
				}
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) {
						wrap = true;
						if(positions.length > 0 && endIndex2 == spaceIndex + 1) {
							var lastPosition = positions[positions.length - 1];
							var spaceWidth2 = lastPosition;
							if(offsetX + widthValue - spaceWidth2 <= this.width - 2) {
								wrap = false;
							}
						}
					}
				}
				if(wrap) {
					if(lineFormat.align != 2 && (layoutGroup != null || this.layoutGroups.data.get_length() > 0)) {
						var previous = layoutGroup;
						if(previous == null) {
							var this1 = this.layoutGroups;
							var index = this.layoutGroups.data.get_length() - 1;
							previous = this1.data.get(index);
						}
						previous.width -= previous.positions[previous.positions.length - 1];
						previous.endIndex--;
					}
					var i9 = this.layoutGroups.data.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.data.get(i9);
						if(i9 > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i9;
					}
					if(textIndex == previousSpaceIndex + 1) {
						if(ascent > maxAscent) {
							maxAscent = ascent;
						}
						if(heightValue > maxHeightValue) {
							maxHeightValue = heightValue;
						}
						var _g23 = 0;
						var _g111 = _gthis.layoutGroups;
						while(_g23 < _g111.data.get_length()) {
							var lg2 = _g111.data.get(_g23);
							++_g23;
							if(lg2.lineIndex < lineIndex) {
								continue;
							}
							if(lg2.lineIndex > lineIndex) {
								break;
							}
							lg2.ascent = maxAscent;
							lg2.height = maxHeightValue;
						}
						offsetY += maxHeightValue;
						maxAscent = 0.0;
						maxHeightValue = 0.0;
						++lineIndex;
						offsetX = 2;
					}
					offsetX = 2;
					if(offsetCount > 0) {
						var this2 = this.layoutGroups;
						var index1 = this.layoutGroups.data.get_length() - offsetCount;
						var bumpX = this2.data.get(index1).offsetX;
						var _g112 = this.layoutGroups.data.get_length() - offsetCount;
						var _g24 = this.layoutGroups.data.get_length();
						while(_g112 < _g24) {
							var i10 = _g112++;
							layoutGroup = this.layoutGroups.data.get(i10);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					if(this.width >= 4) {
						var text6 = lime_text__$UTF8String_UTF8String_$Impl_$.substring(_gthis.text,textIndex,endIndex2);
						var tempWidth1 = openfl__$internal_text_TextEngine.__context.measureText(text6).width;
						while(offsetX + tempWidth1 > _gthis.width - 2) {
							var i11 = 1;
							while(textIndex + i11 < endIndex2 + 1) {
								var text7 = lime_text__$UTF8String_UTF8String_$Impl_$.substr(_gthis.text,textIndex,i11);
								tempWidth1 = openfl__$internal_text_TextEngine.__context.measureText(text7).width;
								if(offsetX + tempWidth1 > _gthis.width - 2) {
									--i11;
									break;
								}
								++i11;
							}
							if(i11 == 0 && tempWidth1 > _gthis.width - 4) {
								i11 = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(_gthis.text);
							}
							if(i11 == 0) {
								offsetX = 2;
								offsetY += layoutGroup.height;
								++lineIndex;
								break;
							} else {
								var endIndex3 = textIndex + i11;
								if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
									layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex3);
									_gthis.layoutGroups.data.push(layoutGroup);
								} else {
									layoutGroup.format = formatRange.format;
									layoutGroup.startIndex = textIndex;
									layoutGroup.endIndex = endIndex3;
								}
								var text8 = _gthis.text;
								var endIndex4 = textIndex + i11;
								var positions7 = [];
								if(_gthis.__useIntAdvances == null) {
									_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
								}
								if(_gthis.__useIntAdvances) {
									var previousWidth4 = 0.0;
									var width8;
									var _g113 = textIndex;
									var _g25 = endIndex4;
									while(_g113 < _g25) {
										var i12 = _g113++;
										width8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text8,textIndex,i12 + 1)).width;
										positions7.push(width8 - previousWidth4);
										previousWidth4 = width8;
									}
								} else {
									var _g114 = textIndex;
									var _g26 = endIndex4;
									while(_g114 < _g26) {
										var i13 = _g114++;
										var advance4;
										if(i13 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text8) - 1) {
											var nextWidth4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text8,i13 + 1)).width;
											var twoWidths4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text8,i13,2)).width;
											advance4 = twoWidths4 - nextWidth4;
										} else {
											advance4 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text8,i13)).width;
										}
										positions7.push(advance4);
									}
								}
								layoutGroup.positions = positions7;
								layoutGroup.offsetX = offsetX;
								layoutGroup.ascent = ascent;
								layoutGroup.descent = descent;
								layoutGroup.leading = leading;
								layoutGroup.lineIndex = lineIndex;
								layoutGroup.offsetY = offsetY;
								var positions8 = layoutGroup.positions;
								var width9 = 0.0;
								var _g27 = 0;
								while(_g27 < positions8.length) {
									var position4 = positions8[_g27];
									++_g27;
									width9 += position4;
								}
								layoutGroup.width = width9;
								layoutGroup.height = heightValue;
								layoutGroup = null;
								if(ascent > maxAscent) {
									maxAscent = ascent;
								}
								if(heightValue > maxHeightValue) {
									maxHeightValue = heightValue;
								}
								var _g28 = 0;
								var _g115 = _gthis.layoutGroups;
								while(_g28 < _g115.data.get_length()) {
									var lg3 = _g115.data.get(_g28);
									++_g28;
									if(lg3.lineIndex < lineIndex) {
										continue;
									}
									if(lg3.lineIndex > lineIndex) {
										break;
									}
									lg3.ascent = maxAscent;
									lg3.height = maxHeightValue;
								}
								offsetY += maxHeightValue;
								maxAscent = 0.0;
								maxHeightValue = 0.0;
								++lineIndex;
								offsetX = 2;
								textIndex += i11;
								var text9 = _gthis.text;
								var positions9 = [];
								if(_gthis.__useIntAdvances == null) {
									_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
								}
								if(_gthis.__useIntAdvances) {
									var previousWidth5 = 0.0;
									var width10;
									var _g116 = textIndex;
									var _g29 = endIndex2;
									while(_g116 < _g29) {
										var i14 = _g116++;
										width10 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text9,textIndex,i14 + 1)).width;
										positions9.push(width10 - previousWidth5);
										previousWidth5 = width10;
									}
								} else {
									var _g117 = textIndex;
									var _g30 = endIndex2;
									while(_g117 < _g30) {
										var i15 = _g117++;
										var advance5;
										if(i15 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text9) - 1) {
											var nextWidth5 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text9,i15 + 1)).width;
											var twoWidths5 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text9,i15,2)).width;
											advance5 = twoWidths5 - nextWidth5;
										} else {
											advance5 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text9,i15)).width;
										}
										positions9.push(advance5);
									}
								}
								positions = positions9;
								var width11 = 0.0;
								var _g31 = 0;
								while(_g31 < positions.length) {
									var position5 = positions[_g31];
									++_g31;
									width11 += position5;
								}
								widthValue = width11;
								tempWidth1 = widthValue;
							}
						}
					}
					if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex2);
						_gthis.layoutGroups.data.push(layoutGroup);
					} else {
						layoutGroup.format = formatRange.format;
						layoutGroup.startIndex = textIndex;
						layoutGroup.endIndex = endIndex2;
					}
					layoutGroup.positions = positions;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					offsetX += widthValue;
					textIndex = endIndex2;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(lineFormat.align != 2) {
							layoutGroup.endIndex = spaceIndex;
							layoutGroup.positions = layoutGroup.positions.concat(positions);
							layoutGroup.width += widthValue;
						}
					} else if(layoutGroup == null || lineFormat.align == 2) {
						if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
							layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex2);
							_gthis.layoutGroups.data.push(layoutGroup);
						} else {
							layoutGroup.format = formatRange.format;
							layoutGroup.startIndex = textIndex;
							layoutGroup.endIndex = endIndex2;
						}
						layoutGroup.positions = positions;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
					} else {
						layoutGroup.endIndex = endIndex2;
						layoutGroup.positions = layoutGroup.positions.concat(positions);
						layoutGroup.width += widthValue;
						if(breakIndex == endIndex2) {
							++endIndex2;
						}
					}
					offsetX += widthValue;
					textIndex = endIndex2;
				}
				var nextSpaceIndex = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text," ",textIndex);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					textIndex = formatRange.end;
					if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
						++rangeIndex;
						formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						if(currentFormat.__ascent != null) {
							ascent = currentFormat.size * currentFormat.__ascent;
							descent = currentFormat.size * currentFormat.__descent;
						} else {
							ascent = currentFormat.size;
							descent = currentFormat.size * 0.185;
						}
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
					}
					if(heightValue > maxHeightValue) {
						maxHeightValue = heightValue;
					}
					if(ascent > maxAscent) {
						maxAscent = ascent;
					}
				} else {
					if(breakIndex == previousSpaceIndex) {
						layoutGroup.endIndex = breakIndex;
						if(breakIndex - layoutGroup.startIndex - layoutGroup.positions.length < 0) {
							layoutGroup.positions.push(0.0);
						}
						textIndex = breakIndex + 1;
					}
					previousSpaceIndex = spaceIndex;
					spaceIndex = nextSpaceIndex;
				}
				if(breakIndex > -1 && breakIndex <= textIndex && (spaceIndex > breakIndex || spaceIndex == -1) || textIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) || spaceIndex > formatRange.end) {
					break;
				}
			}
		} else {
			if(textIndex > formatRange.end) {
				break;
			} else if(textIndex < formatRange.end || textIndex == lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text)) {
				if(this.wordWrap && this.width >= 4) {
					var endIndex5 = formatRange.end;
					var text10 = lime_text__$UTF8String_UTF8String_$Impl_$.substring(_gthis.text,textIndex,endIndex5);
					var tempWidth2 = openfl__$internal_text_TextEngine.__context.measureText(text10).width;
					while(offsetX + tempWidth2 > _gthis.width - 2) {
						var i16 = 1;
						while(textIndex + i16 < endIndex5 + 1) {
							var text11 = lime_text__$UTF8String_UTF8String_$Impl_$.substr(_gthis.text,textIndex,i16);
							tempWidth2 = openfl__$internal_text_TextEngine.__context.measureText(text11).width;
							if(offsetX + tempWidth2 > _gthis.width - 2) {
								--i16;
								break;
							}
							++i16;
						}
						if(i16 == 0 && tempWidth2 > _gthis.width - 4) {
							i16 = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(_gthis.text);
						}
						if(i16 == 0) {
							offsetX = 2;
							offsetY += layoutGroup.height;
							++lineIndex;
							break;
						} else {
							var endIndex6 = textIndex + i16;
							if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
								layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex6);
								_gthis.layoutGroups.data.push(layoutGroup);
							} else {
								layoutGroup.format = formatRange.format;
								layoutGroup.startIndex = textIndex;
								layoutGroup.endIndex = endIndex6;
							}
							var text12 = _gthis.text;
							var endIndex7 = textIndex + i16;
							var positions10 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth6 = 0.0;
								var width12;
								var _g118 = textIndex;
								var _g32 = endIndex7;
								while(_g118 < _g32) {
									var i17 = _g118++;
									width12 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text12,textIndex,i17 + 1)).width;
									positions10.push(width12 - previousWidth6);
									previousWidth6 = width12;
								}
							} else {
								var _g119 = textIndex;
								var _g33 = endIndex7;
								while(_g119 < _g33) {
									var i18 = _g119++;
									var advance6;
									if(i18 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text12) - 1) {
										var nextWidth6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text12,i18 + 1)).width;
										var twoWidths6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text12,i18,2)).width;
										advance6 = twoWidths6 - nextWidth6;
									} else {
										advance6 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text12,i18)).width;
									}
									positions10.push(advance6);
								}
							}
							layoutGroup.positions = positions10;
							layoutGroup.offsetX = offsetX;
							layoutGroup.ascent = ascent;
							layoutGroup.descent = descent;
							layoutGroup.leading = leading;
							layoutGroup.lineIndex = lineIndex;
							layoutGroup.offsetY = offsetY;
							var positions11 = layoutGroup.positions;
							var width13 = 0.0;
							var _g34 = 0;
							while(_g34 < positions11.length) {
								var position6 = positions11[_g34];
								++_g34;
								width13 += position6;
							}
							layoutGroup.width = width13;
							layoutGroup.height = heightValue;
							layoutGroup = null;
							if(ascent > maxAscent) {
								maxAscent = ascent;
							}
							if(heightValue > maxHeightValue) {
								maxHeightValue = heightValue;
							}
							var _g35 = 0;
							var _g120 = _gthis.layoutGroups;
							while(_g35 < _g120.data.get_length()) {
								var lg4 = _g120.data.get(_g35);
								++_g35;
								if(lg4.lineIndex < lineIndex) {
									continue;
								}
								if(lg4.lineIndex > lineIndex) {
									break;
								}
								lg4.ascent = maxAscent;
								lg4.height = maxHeightValue;
							}
							offsetY += maxHeightValue;
							maxAscent = 0.0;
							maxHeightValue = 0.0;
							++lineIndex;
							offsetX = 2;
							textIndex += i16;
							var text13 = _gthis.text;
							var positions12 = [];
							if(_gthis.__useIntAdvances == null) {
								_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
							}
							if(_gthis.__useIntAdvances) {
								var previousWidth7 = 0.0;
								var width14;
								var _g121 = textIndex;
								var _g36 = endIndex5;
								while(_g121 < _g36) {
									var i19 = _g121++;
									width14 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text13,textIndex,i19 + 1)).width;
									positions12.push(width14 - previousWidth7);
									previousWidth7 = width14;
								}
							} else {
								var _g122 = textIndex;
								var _g37 = endIndex5;
								while(_g122 < _g37) {
									var i20 = _g122++;
									var advance7;
									if(i20 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text13) - 1) {
										var nextWidth7 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text13,i20 + 1)).width;
										var twoWidths7 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text13,i20,2)).width;
										advance7 = twoWidths7 - nextWidth7;
									} else {
										advance7 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text13,i20)).width;
									}
									positions12.push(advance7);
								}
							}
							positions = positions12;
							var width15 = 0.0;
							var _g38 = 0;
							while(_g38 < positions.length) {
								var position7 = positions[_g38];
								++_g38;
								width15 += position7;
							}
							widthValue = width15;
							tempWidth2 = widthValue;
						}
					}
				}
				var text14 = this.text;
				var endIndex8 = formatRange.end;
				var positions13 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth8 = 0.0;
					var width16;
					var _g123 = textIndex;
					var _g39 = endIndex8;
					while(_g123 < _g39) {
						var i21 = _g123++;
						width16 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text14,textIndex,i21 + 1)).width;
						positions13.push(width16 - previousWidth8);
						previousWidth8 = width16;
					}
				} else {
					var _g124 = textIndex;
					var _g40 = endIndex8;
					while(_g124 < _g40) {
						var i22 = _g124++;
						var advance8;
						if(i22 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text14) - 1) {
							var nextWidth8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text14,i22 + 1)).width;
							var twoWidths8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text14,i22,2)).width;
							advance8 = twoWidths8 - nextWidth8;
						} else {
							advance8 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text14,i22)).width;
						}
						positions13.push(advance8);
					}
				}
				positions = positions13;
				var width17 = 0.0;
				var _g41 = 0;
				while(_g41 < positions.length) {
					var position8 = positions[_g41];
					++_g41;
					width17 += position8;
				}
				widthValue = width17;
				var endIndex9 = formatRange.end;
				if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,endIndex9);
					_gthis.layoutGroups.data.push(layoutGroup);
				} else {
					layoutGroup.format = formatRange.format;
					layoutGroup.startIndex = textIndex;
					layoutGroup.endIndex = endIndex9;
				}
				var text15 = this.text;
				var endIndex10 = formatRange.end;
				var positions14 = [];
				if(_gthis.__useIntAdvances == null) {
					_gthis.__useIntAdvances = new EReg("Trident/7.0","").match(window.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth9 = 0.0;
					var width18;
					var _g125 = textIndex;
					var _g42 = endIndex10;
					while(_g125 < _g42) {
						var i23 = _g125++;
						width18 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text15,textIndex,i23 + 1)).width;
						positions14.push(width18 - previousWidth9);
						previousWidth9 = width18;
					}
				} else {
					var _g126 = textIndex;
					var _g43 = endIndex10;
					while(_g126 < _g43) {
						var i24 = _g126++;
						var advance9;
						if(i24 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text15) - 1) {
							var nextWidth9 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text15,i24 + 1)).width;
							var twoWidths9 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text15,i24,2)).width;
							advance9 = twoWidths9 - nextWidth9;
						} else {
							advance9 = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text15,i24)).width;
						}
						positions14.push(advance9);
					}
				}
				layoutGroup.positions = positions14;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var positions15 = layoutGroup.positions;
				var width19 = 0.0;
				var _g44 = 0;
				while(_g44 < positions15.length) {
					var position9 = positions15[_g44];
					++_g44;
					width19 += position9;
				}
				layoutGroup.width = width19;
				layoutGroup.height = heightValue;
				offsetX += widthValue;
				textIndex = formatRange.end;
			}
			if(rangeIndex < _gthis.textFormatRanges.data.get_length() - 1) {
				++rangeIndex;
				formatRange = _gthis.textFormatRanges.data.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				if(currentFormat.__ascent != null) {
					ascent = currentFormat.size * currentFormat.__ascent;
					descent = currentFormat.size * currentFormat.__descent;
				} else {
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
				}
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
			}
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
			if(textIndex == formatRange.end) {
				if(ascent > maxAscent) {
					maxAscent = ascent;
				}
				if(heightValue > maxHeightValue) {
					maxHeightValue = heightValue;
				}
				var _g45 = 0;
				var _g127 = _gthis.layoutGroups;
				while(_g45 < _g127.data.get_length()) {
					var lg5 = _g127.data.get(_g45);
					++_g45;
					if(lg5.lineIndex < lineIndex) {
						continue;
					}
					if(lg5.lineIndex > lineIndex) {
						break;
					}
					lg5.ascent = maxAscent;
					lg5.height = maxHeightValue;
				}
				offsetY += maxHeightValue;
				maxAscent = 0.0;
				maxHeightValue = 0.0;
				++lineIndex;
				offsetX = 2;
				++textIndex;
				break;
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var totalWidth = this.width - 4;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.data.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups.data.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				var _g2 = group.format.align;
				switch(_g2) {
				case 0:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						offsetX = Math.round((totalWidth - this.lineWidths.data.get(lineIndex)) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						lineLength = 1;
						var _g3 = i + 1;
						var _g21 = this.layoutGroups.data.get_length();
						while(_g3 < _g21) {
							var j = _g3++;
							if(this.layoutGroups.data.get(j).lineIndex == lineIndex) {
								if(j == 0 || lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,this.layoutGroups.data.get(j).startIndex - 1) == 32) {
									++lineLength;
								}
							} else {
								break;
							}
						}
						if(lineLength > 1) {
							group = this.layoutGroups.data.get(i + lineLength - 1);
							var endChar = lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,group.endIndex);
							if(group.endIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) && endChar != 10 && endChar != 13) {
								offsetX = (totalWidth - this.lineWidths.data.get(lineIndex)) / (lineLength - 1);
								var j1 = 0;
								while(true) {
									if(j1 > 1 && lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,this.layoutGroups.data.get(j1).startIndex - 1) != 32) {
										this.layoutGroups.data.get(i + j1).offsetX += offsetX * (j1 - 1);
										++j1;
									}
									this.layoutGroups.data.get(i + j1).offsetX += offsetX * j1;
									if(!(++j1 < lineLength)) {
										break;
									}
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					if(this.lineWidths.data.get(lineIndex) < totalWidth) {
						offsetX = Math.round(totalWidth - this.lineWidths.data.get(lineIndex));
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
	}
	,update: function() {
		if(this.text == null || this.textFormatRanges.data.get_length() == 0) {
			this.lineAscents.data.set_length(0);
			this.lineBreaks.data.set_length(0);
			this.lineDescents.data.set_length(0);
			this.lineLeadings.data.set_length(0);
			this.lineHeights.data.set_length(0);
			this.lineWidths.data.set_length(0);
			this.layoutGroups.data.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,set_text: function(value) {
		if(value == null) {
			return this.text = value;
		}
		if(this.__restrictRegexp != null) {
			value = this.__restrictRegexp.split(value).join("");
		}
		if(this.maxChars > 0 && value.length > this.maxChars) {
			value = HxOverrides.substr(value,0,this.maxChars);
		}
		this.text = value;
		return this.text;
	}
	,__class__: openfl__$internal_text_TextEngine
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,positions: null
	,startIndex: null
	,width: null
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl__$internal_timeline_Frame = function() {
};
$hxClasses["openfl._internal.timeline.Frame"] = openfl__$internal_timeline_Frame;
openfl__$internal_timeline_Frame.__name__ = ["openfl","_internal","timeline","Frame"];
openfl__$internal_timeline_Frame.prototype = {
	label: null
	,objects: null
	,script: null
	,scriptSource: null
	,__class__: openfl__$internal_timeline_Frame
};
var openfl__$internal_timeline_FrameObject = function() {
};
$hxClasses["openfl._internal.timeline.FrameObject"] = openfl__$internal_timeline_FrameObject;
openfl__$internal_timeline_FrameObject.__name__ = ["openfl","_internal","timeline","FrameObject"];
openfl__$internal_timeline_FrameObject.prototype = {
	blendMode: null
	,cacheAsBitmap: null
	,clipDepth: null
	,colorTransform: null
	,depth: null
	,filters: null
	,id: null
	,matrix: null
	,name: null
	,symbol: null
	,type: null
	,visible: null
	,__class__: openfl__$internal_timeline_FrameObject
};
var openfl__$internal_timeline_FrameObjectType = $hxClasses["openfl._internal.timeline.FrameObjectType"] = { __ename__ : ["openfl","_internal","timeline","FrameObjectType"], __constructs__ : ["CREATE","UPDATE","DESTROY"] };
openfl__$internal_timeline_FrameObjectType.CREATE = ["CREATE",0];
openfl__$internal_timeline_FrameObjectType.CREATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.CREATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.UPDATE = ["UPDATE",1];
openfl__$internal_timeline_FrameObjectType.UPDATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.UPDATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.DESTROY = ["DESTROY",2];
openfl__$internal_timeline_FrameObjectType.DESTROY.toString = $estr;
openfl__$internal_timeline_FrameObjectType.DESTROY.__enum__ = openfl__$internal_timeline_FrameObjectType;
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl__$internal_Lib.application == null) {
		openfl__$internal_Lib.application = this;
	}
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(openfl__$internal_Lib.current == null) {
			openfl__$internal_Lib.current = new openfl_display_MovieClip();
		}
		openfl__$internal_Lib.current.__loaderInfo = openfl_display_LoaderInfo.create(null);
		openfl__$internal_Lib.current.__loaderInfo.content = openfl__$internal_Lib.current;
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) {
				this.backend.setFrameRate(config.fps);
			}
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new openfl_display_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.__preloader == null || this.__preloader.complete) {
				this.onPreloadComplete();
			}
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display_IShaderDrawable = function() { };
$hxClasses["openfl.display.IShaderDrawable"] = openfl_display_IShaderDrawable;
openfl_display_IShaderDrawable.__name__ = ["openfl","display","IShaderDrawable"];
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.__bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	pixelSnapping: null
	,shader: null
	,smoothing: null
	,__image: null
	,__bitmapData: null
	,__imageVersion: null
	,__enterFrame: function(deltaTime) {
		if(this.__bitmapData != null && this.__bitmapData.image != null) {
			var image = this.__bitmapData.image;
			if(this.__bitmapData.image.version != this.__imageVersion) {
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
				this.__imageVersion = image.version;
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__pool.get();
			bounds.setTo(0,0,this.__bitmapData.width,this.__bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
			openfl_geom_Rectangle.__pool.release(bounds);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.__bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			if(this.__scrollRect != null && !this.__scrollRect.contains(px,py)) {
				return false;
			}
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__bitmapData == null) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			var bitmap = this.__cacheBitmap;
			if(!(!bitmap.__renderable || bitmap.__worldAlpha <= 0)) {
				var context = renderSession.context;
				if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
					renderSession.blendModeManager.setBlendMode(bitmap.__worldBlendMode);
					renderSession.maskManager.pushObject(bitmap,false);
					lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
					context.globalAlpha = bitmap.__worldAlpha;
					var transform = bitmap.__renderTransform;
					var scrollRect = bitmap.__scrollRect;
					if(renderSession.roundPixels) {
						context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
					} else {
						context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
					}
					if(!renderSession.allowSmoothing || !bitmap.smoothing) {
						context.mozImageSmoothingEnabled = false;
						context.msImageSmoothingEnabled = false;
						context.imageSmoothingEnabled = false;
					}
					if(scrollRect == null) {
						context.drawImage(bitmap.__bitmapData.image.get_src(),0,0);
					} else {
						context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
					}
					if(!renderSession.allowSmoothing || !bitmap.smoothing) {
						context.mozImageSmoothingEnabled = true;
						context.msImageSmoothingEnabled = true;
						context.imageSmoothingEnabled = true;
					}
					renderSession.maskManager.popObject(bitmap,false);
				}
			}
		} else if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			var context1 = renderSession.context;
			if(this.__bitmapData != null && this.__bitmapData.__isValid && this.__bitmapData.readable) {
				renderSession.blendModeManager.setBlendMode(this.__worldBlendMode);
				renderSession.maskManager.pushObject(this,false);
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.__bitmapData.image);
				context1.globalAlpha = this.__worldAlpha;
				var transform1 = this.__renderTransform;
				var scrollRect1 = this.__scrollRect;
				if(renderSession.roundPixels) {
					context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0);
				} else {
					context1.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
				}
				if(!renderSession.allowSmoothing || !this.smoothing) {
					context1.mozImageSmoothingEnabled = false;
					context1.msImageSmoothingEnabled = false;
					context1.imageSmoothingEnabled = false;
				}
				if(scrollRect1 == null) {
					context1.drawImage(this.__bitmapData.image.get_src(),0,0);
				} else {
					context1.drawImage(this.__bitmapData.image.get_src(),scrollRect1.x,scrollRect1.y,scrollRect1.width,scrollRect1.height,scrollRect1.x,scrollRect1.y,scrollRect1.width,scrollRect1.height);
				}
				if(!renderSession.allowSmoothing || !this.smoothing) {
					context1.mozImageSmoothingEnabled = true;
					context1.msImageSmoothingEnabled = true;
					context1.imageSmoothingEnabled = true;
				}
				renderSession.maskManager.popObject(this,false);
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		this.__updateCacheBitmap(renderSession,!this.__worldColorTransform.__isDefault());
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			this.__renderDOMClear(renderSession);
			this.__cacheBitmap.stage = this.stage;
			var bitmap = this.__cacheBitmap;
			if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				renderSession.maskManager.pushObject(bitmap);
				if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
				}
				renderSession.maskManager.popObject(bitmap);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderSession);
			}
		} else if(this.stage != null && this.__worldVisible && this.__renderable && this.__bitmapData != null && this.__bitmapData.__isValid && this.__bitmapData.readable) {
			renderSession.maskManager.pushObject(this);
			if(this.__bitmapData.image.buffer.__srcImage != null) {
				openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderSession);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderSession);
			}
			renderSession.maskManager.popObject(this);
		} else {
			openfl__$internal_renderer_dom_DOMBitmap.clear(this,renderSession);
		}
	}
	,__renderDOMClear: function(renderSession) {
		openfl__$internal_renderer_dom_DOMBitmap.clear(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.render(this.__cacheBitmap,renderSession);
		} else {
			openfl__$internal_renderer_opengl_GLBitmap.render(this,renderSession);
		}
	}
	,__renderGLMask: function(renderSession) {
		this.__updateCacheBitmap(renderSession,false);
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			openfl__$internal_renderer_opengl_GLBitmap.renderMask(this.__cacheBitmap,renderSession);
		} else {
			openfl__$internal_renderer_opengl_GLBitmap.renderMask(this,renderSession);
		}
	}
	,__updateCacheBitmap: function(renderSession,force) {
		if(this.get_filters() == null) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__updateCacheBitmap.call(this,renderSession,force);
	}
	,__updateMask: function(maskGraphics) {
		if(this.__bitmapData == null) {
			return;
		}
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.__bitmapData.width,this.__bitmapData.height);
		if(maskGraphics.__bounds == null) {
			maskGraphics.__bounds = new openfl_geom_Rectangle();
		}
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,set_bitmapData: function(value) {
		this.__bitmapData = value;
		this.smoothing = false;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		var tmp = this.__filters != null && this.__filters.length > 0;
		this.__imageVersion = -1;
		return this.__bitmapData;
	}
	,get_height: function() {
		if(this.__bitmapData != null) {
			return this.__bitmapData.height * Math.abs(this.get_scaleY());
		}
		return 0;
	}
	,get_width: function() {
		if(this.__bitmapData != null) {
			return this.__bitmapData.width * Math.abs(this.__scaleX);
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
});
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = ["openfl","display","_CapsStyle","CapsStyle_Impl_"];
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
});
var openfl_display_Graphics = function(owner) {
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__height: null
	,__positionX: null
	,__positionY: null
	,__renderTransform: null
	,__strokePadding: null
	,__transformDirty: null
	,__visible: null
	,__owner: null
	,__width: null
	,__worldTransform: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds != null ? sourceGraphics.__bounds.clone() : null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) {
			return;
		}
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.set___dirty(true);
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = thickness;
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = thickness / 2;
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) {
			return;
		}
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.__bitmap = null;
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var px = norm == 0 ? -matrix.tx : 1.0 / norm * (matrix.c * (matrix.ty - y) + matrix.d * (x - matrix.tx));
		var norm1 = matrix.a * matrix.d - matrix.b * matrix.c;
		var py = norm1 == 0 ? -matrix.ty : 1.0 / norm1 * (matrix.a * (y - matrix.ty) + matrix.b * (matrix.tx - x));
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,__update: function() {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) {
			return;
		}
		var parentTransform = this.__owner.__renderTransform;
		var scaleX = 1.0;
		var scaleY = 1.0;
		if(parentTransform != null) {
			if(parentTransform.b == 0) {
				scaleX = Math.abs(parentTransform.a);
			} else {
				scaleX = Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
			}
			if(parentTransform.c == 0) {
				scaleY = Math.abs(parentTransform.d);
			} else {
				scaleY = Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
			}
		} else {
			return;
		}
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(width < 1 || height < 1) {
			if(this.__width >= 1 || this.__height >= 1) {
				this.set___dirty(true);
			}
			this.__width = 0;
			this.__height = 0;
			return;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && width > openfl_display_Graphics.maxTextureWidth) {
			width = openfl_display_Graphics.maxTextureWidth;
			scaleX = openfl_display_Graphics.maxTextureWidth / this.__bounds.width;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && height > openfl_display_Graphics.maxTextureHeight) {
			height = openfl_display_Graphics.maxTextureHeight;
			scaleY = openfl_display_Graphics.maxTextureHeight / this.__bounds.height;
		}
		this.__renderTransform.a = width / this.__bounds.width;
		this.__renderTransform.d = height / this.__bounds.height;
		var inverseA = 1 / this.__renderTransform.a;
		var inverseD = 1 / this.__renderTransform.d;
		this.__worldTransform.a = inverseA * parentTransform.a;
		this.__worldTransform.b = inverseA * parentTransform.b;
		this.__worldTransform.c = inverseD * parentTransform.c;
		this.__worldTransform.d = inverseD * parentTransform.d;
		var x = this.__bounds.x;
		var y = this.__bounds.y;
		var tx = x * parentTransform.a + y * parentTransform.c + parentTransform.tx;
		var ty = x * parentTransform.b + y * parentTransform.d + parentTransform.ty;
		this.__worldTransform.tx = Math.floor(tx);
		this.__worldTransform.ty = Math.floor(ty);
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		this.__renderTransform.tx = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - ty) + _this.d * (tx - _this.tx));
		var _this1 = this.__worldTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		this.__renderTransform.ty = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (ty - _this1.ty) + _this1.b * (_this1.tx - tx));
		var newWidth = Math.ceil(width + this.__renderTransform.tx);
		var newHeight = Math.ceil(height + this.__renderTransform.ty);
		if(newWidth != this.__width || newHeight != this.__height) {
			this.set___dirty(true);
		}
		this.__width = newWidth;
		this.__height = newHeight;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			var _this = this.__owner;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
};
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) {
		quality = 80;
	}
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = ["openfl","display","_JointStyle","JointStyle_Impl_"];
openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
	this.uncaughtErrorEvents = this.contentLoaderInfo.uncaughtErrorEvents;
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	contentLoaderInfo: null
	,uncaughtErrorEvents: null
	,__class__: openfl_display_Loader
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,loader: null
	,parameters: null
	,uncaughtErrorEvents: null
	,url: null
	,__completed: null
	,__complete: function() {
		if(!this.__completed) {
			if(this.bytesLoaded < this.bytesTotal) {
				this.bytesLoaded = this.bytesTotal;
			}
			this.__update(this.bytesLoaded,this.bytesTotal);
			this.__completed = true;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__update: function(bytesLoaded,bytesTotal) {
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,bytesLoaded,bytesTotal));
	}
	,__class__: openfl_display_LoaderInfo
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 1;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
	if(openfl_display_MovieClip.__initSymbol != null) {
		this.__swf = openfl_display_MovieClip.__initSWF;
		this.__symbol = openfl_display_MovieClip.__initSymbol;
		openfl_display_MovieClip.__initSWF = null;
		openfl_display_MovieClip.__initSymbol = null;
		this.__fromSymbol(this.__swf,this.__symbol);
	}
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	enabled: null
	,__activeInstances: null
	,__activeInstancesByFrameObjectID: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__frameScripts: null
	,__frameTime: null
	,__lastFrameScriptEval: null
	,__lastFrameUpdate: null
	,__playing: null
	,__swf: null
	,__symbol: null
	,__timeElapsed: null
	,__totalFrames: null
	,play: function() {
		if(this.__symbol == null || this.__playing || this.__totalFrames < 2) {
			return;
		}
		this.__playing = true;
		this.__frameTime = 1000 / this.__swf.frameRate | 0;
		this.__timeElapsed = 0;
	}
	,__enterFrame: function(deltaTime) {
		if(this.__symbol != null && this.__playing) {
			var nextFrame = this.__getNextFrame(deltaTime);
			if(this.__lastFrameScriptEval == nextFrame) {
				return;
			}
			if(this.__frameScripts != null) {
				if(nextFrame < this.__currentFrame) {
					if(!this.__evaluateFrameScripts(this.__totalFrames)) {
						return;
					}
					this.__currentFrame = 1;
				}
				if(!this.__evaluateFrameScripts(nextFrame)) {
					return;
				}
			} else {
				this.__currentFrame = nextFrame;
			}
		}
		if(this.__symbol != null && this.__currentFrame != this.__lastFrameUpdate) {
			this.__updateFrameLabel();
			var currentInstancesByFrameObjectID = new haxe_ds_IntMap();
			var frame;
			var frameData;
			var instance;
			var _g1 = 0;
			var _g = this.__currentFrame;
			while(_g1 < _g) {
				var i = _g1++;
				frame = i + 1;
				frameData = this.__symbol.frames[i];
				if(frameData.objects == null) {
					continue;
				}
				var _g2 = 0;
				var _g3 = frameData.objects;
				while(_g2 < _g3.length) {
					var frameObject = _g3[_g2];
					++_g2;
					var _g4 = frameObject.type;
					switch(_g4[1]) {
					case 0:
						instance = this.__activeInstancesByFrameObjectID.get(frameObject.id);
						if(instance != null) {
							currentInstancesByFrameObjectID.h[frameObject.id] = instance;
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
						break;
					case 1:
						instance = currentInstancesByFrameObjectID.h[frameObject.id];
						if(instance != null && instance.displayObject != null) {
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
						break;
					case 2:
						currentInstancesByFrameObjectID.remove(frameObject.id);
						break;
					}
				}
			}
			var currentInstances = [];
			var currentMasks = [];
			var instance1 = currentInstancesByFrameObjectID.iterator();
			while(instance1.hasNext()) {
				var instance2 = instance1.next();
				if(currentInstances.indexOf(instance2) == -1) {
					currentInstances.push(instance2);
					if(instance2.clipDepth > 0) {
						currentMasks.push(instance2);
					}
				}
			}
			currentInstances.sort($bind(this,this.__sortDepths));
			var existingChild;
			var targetDepth;
			var targetChild;
			var child;
			var maskApplied;
			var _g11 = 0;
			var _g5 = currentInstances.length;
			while(_g11 < _g5) {
				var i1 = _g11++;
				existingChild = this.__children[i1];
				instance = currentInstances[i1];
				targetDepth = instance.depth;
				targetChild = instance.displayObject;
				if(existingChild != targetChild) {
					child = targetChild;
					this.addChildAt(targetChild,i1);
				} else {
					child = this.__children[i1];
				}
				maskApplied = false;
				var _g21 = 0;
				while(_g21 < currentMasks.length) {
					var mask = currentMasks[_g21];
					++_g21;
					if(targetDepth > mask.depth && targetDepth <= mask.clipDepth) {
						child.set_mask(mask.displayObject);
						maskApplied = true;
						break;
					}
				}
				if(currentMasks.length > 0 && !maskApplied && child.get_mask() != null) {
					child.set_mask(null);
				}
			}
			var child1;
			var i2 = currentInstances.length;
			var length = this.__children.length;
			while(i2 < length) {
				child1 = this.__children[i2];
				var _g6 = 0;
				var _g12 = this.__activeInstances;
				while(_g6 < _g12.length) {
					var instance3 = _g12[_g6];
					++_g6;
					if(instance3.displayObject == child1) {
						this.removeChild(child1);
						--i2;
						--length;
					}
				}
				++i2;
			}
			this.__lastFrameUpdate = this.__currentFrame;
		}
		openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
	}
	,__evaluateFrameScripts: function(advanceToFrame) {
		var _g1 = this.__currentFrame;
		var _g = advanceToFrame + 1;
		while(_g1 < _g) {
			var frame = _g1++;
			if(frame == this.__lastFrameScriptEval) {
				continue;
			}
			this.__lastFrameScriptEval = frame;
			this.__currentFrame = frame;
			if(this.__frameScripts.h.hasOwnProperty(frame)) {
				var script = this.__frameScripts.h[frame];
				script();
				if(this.__currentFrame != frame) {
					return false;
				}
			}
			if(!this.__playing) {
				break;
			}
		}
		return true;
	}
	,__fromSymbol: function(swf,symbol) {
		var _gthis = this;
		if(this.__activeInstances != null) {
			return;
		}
		this.__swf = swf;
		this.__symbol = symbol;
		this.__activeInstances = [];
		this.__activeInstancesByFrameObjectID = new haxe_ds_IntMap();
		this.__currentFrame = 1;
		this.__lastFrameScriptEval = -1;
		this.__lastFrameUpdate = -1;
		this.__totalFrames = this.__symbol.frames.length;
		var frame;
		var frameData;
		var _g1 = 0;
		var _g = this.__symbol.frames.length;
		while(_g1 < _g) {
			var i = _g1++;
			frame = i + 1;
			frameData = this.__symbol.frames[i];
			if(frameData.label != null) {
				this.__currentLabels.push(new openfl_display_FrameLabel(frameData.label,i + 1));
			}
			if(frameData.script != null) {
				if(this.__frameScripts == null) {
					this.__frameScripts = new haxe_ds_IntMap();
				}
				this.__frameScripts.h[frame] = frameData.script;
			} else if(frameData.scriptSource != null) {
				if(this.__frameScripts == null) {
					this.__frameScripts = new haxe_ds_IntMap();
				}
				try {
					var script = [eval("(function(){" + frameData.scriptSource + "})")];
					var wrapper = (function(script1) {
						return function() {
							try {
								script1[0].call(_gthis);
							} catch( e ) {
								haxe_CallStack.lastException = e;
								if (e instanceof js__$Boot_HaxeError) e = e.val;
								console.log("Error evaluating frame script\n " + Std.string(e) + "\n" + haxe_CallStack.exceptionStack().map((function() {
									return function(a) {
										return a[2];
									};
								})()).join("\n") + "\n" + Std.string(e.stack) + "\n" + script1[0].toString());
							}
						};
					})(script);
					this.__frameScripts.h[frame] = wrapper;
				} catch( e1 ) {
					haxe_CallStack.lastException = e1;
					if(this.__symbol.className != null) {
						lime_utils_Log.warn("Unable to evaluate frame script source for symbol \"" + this.__symbol.className + "\" frame " + frame + "\n" + frameData.scriptSource,{ fileName : "MovieClip.hx", lineNumber : 519, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
					} else {
						lime_utils_Log.warn("Unable to evaluate frame script source:\n" + frameData.scriptSource,{ fileName : "MovieClip.hx", lineNumber : 523, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
					}
				}
			}
		}
		var frame1;
		var frameData1;
		var instance;
		var duplicate;
		var symbol1;
		var displayObject;
		var _g11 = 0;
		var _g2 = this.__totalFrames;
		while(_g11 < _g2) {
			var i1 = _g11++;
			frame1 = i1 + 1;
			frameData1 = this.__symbol.frames[i1];
			if(frameData1.objects == null) {
				continue;
			}
			var _g21 = 0;
			var _g3 = frameData1.objects;
			while(_g21 < _g3.length) {
				var frameObject = _g3[_g21];
				++_g21;
				if(frameObject.type == openfl__$internal_timeline_FrameObjectType.CREATE) {
					if(this.__activeInstancesByFrameObjectID.h.hasOwnProperty(frameObject.id)) {
						continue;
					} else {
						instance = null;
						duplicate = false;
						var _g4 = 0;
						var _g5 = this.__activeInstances;
						while(_g4 < _g5.length) {
							var activeInstance = _g5[_g4];
							++_g4;
							if(activeInstance.displayObject != null && activeInstance.characterID == frameObject.symbol && activeInstance.depth == frameObject.depth) {
								instance = activeInstance;
								duplicate = true;
								break;
							}
						}
					}
					if(instance == null) {
						symbol1 = this.__swf.symbols.h[frameObject.symbol];
						if(symbol1 != null) {
							displayObject = symbol1.__createObject(this.__swf);
							if(displayObject != null) {
								displayObject.parent = this;
								displayObject.stage = this.stage;
								instance = new openfl_display__$MovieClip_FrameSymbolInstance(frame1,frameObject.id,frameObject.symbol,frameObject.depth,displayObject,frameObject.clipDepth);
							}
						}
					}
					if(instance != null) {
						this.__activeInstancesByFrameObjectID.h[frameObject.id] = instance;
						if(!duplicate) {
							this.__activeInstances.push(instance);
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
					}
				}
			}
		}
		if(this.__totalFrames > 1) {
			this.play();
		}
		this.__enterFrame(0);
		var _g6 = 0;
		var _g12 = Type.getInstanceFields(js_Boot.getClass(this));
		while(_g6 < _g12.length) {
			var field = _g12[_g6];
			++_g6;
			var _g22 = 0;
			var _g31 = this.__children;
			while(_g22 < _g31.length) {
				var child = _g31[_g22];
				++_g22;
				if(child.get_name() == field) {
					this[field] = child;
				}
			}
		}
	}
	,__getNextFrame: function(deltaTime) {
		this.__timeElapsed += deltaTime;
		var nextFrame = this.__currentFrame + Math.floor(this.__timeElapsed / this.__frameTime);
		if(nextFrame < 1) {
			nextFrame = 1;
		}
		if(nextFrame > this.__totalFrames) {
			nextFrame = Math.floor((nextFrame - 1) % this.__totalFrames) + 1;
		}
		this.__timeElapsed %= this.__frameTime;
		return nextFrame;
	}
	,__sortDepths: function(a,b) {
		return a.depth - b.depth;
	}
	,__updateDisplayObject: function(displayObject,frameObject) {
		if(displayObject == null) {
			return;
		}
		if(frameObject.name != null) {
			displayObject.set_name(frameObject.name);
		}
		if(frameObject.matrix != null) {
			displayObject.get_transform().set_matrix(frameObject.matrix);
		}
		if(frameObject.colorTransform != null) {
			displayObject.get_transform().set_colorTransform(frameObject.colorTransform);
		}
		if(frameObject.filters != null) {
			var filters = [];
			var _g = 0;
			var _g1 = frameObject.filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				switch(filter[1]) {
				case 0:
					var quality = filter[4];
					var blurY = filter[3];
					var blurX = filter[2];
					filters.push(new openfl_filters_BlurFilter(blurX,blurY,quality));
					break;
				case 1:
					var matrix = filter[2];
					filters.push(new openfl_filters_ColorMatrixFilter(matrix));
					break;
				case 2:
					var hideObject = filter[12];
					var knockout = filter[11];
					var inner = filter[10];
					var quality1 = filter[9];
					var strength = filter[8];
					var blurY1 = filter[7];
					var blurX1 = filter[6];
					var alpha = filter[5];
					var color = filter[4];
					var angle = filter[3];
					var distance = filter[2];
					filters.push(new openfl_filters_DropShadowFilter(distance,angle,color,alpha,blurX1,blurY1,strength,quality1,inner,knockout,hideObject));
					break;
				case 3:
					var knockout1 = filter[9];
					var inner1 = filter[8];
					var quality2 = filter[7];
					var strength1 = filter[6];
					var blurY2 = filter[5];
					var blurX2 = filter[4];
					var alpha1 = filter[3];
					var color1 = filter[2];
					filters.push(new openfl_filters_GlowFilter(color1,alpha1,blurX2,blurY2,strength1,quality2,inner1,knockout1));
					break;
				}
			}
			displayObject.set_filters(filters);
		} else {
			displayObject.set_filters(null);
		}
		if(frameObject.visible != null) {
			displayObject.set_visible(frameObject.visible);
		}
		if(frameObject.blendMode != null) {
			displayObject.set_blendMode(frameObject.blendMode);
		}
		var tmp = frameObject.cacheAsBitmap != null;
	}
	,__updateFrameLabel: function() {
		this.__currentFrameLabel = this.__symbol.frames[this.__currentFrame - 1].label;
		if(this.__currentFrameLabel != null) {
			this.__currentLabel = this.__currentFrameLabel;
		} else {
			this.__currentLabel = null;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var label = _g1[_g];
				++_g;
				if(label.get_frame() < this.__currentFrame) {
					this.__currentLabel = label.get_name();
				} else {
					break;
				}
			}
		}
	}
	,__class__: openfl_display_MovieClip
});
var openfl_display__$MovieClip_FrameSymbolInstance = function(initFrame,initFrameObjectID,characterID,depth,displayObject,clipDepth) {
	this.initFrame = initFrame;
	this.initFrameObjectID = initFrameObjectID;
	this.characterID = characterID;
	this.depth = depth;
	this.displayObject = displayObject;
	this.clipDepth = clipDepth;
};
$hxClasses["openfl.display._MovieClip.FrameSymbolInstance"] = openfl_display__$MovieClip_FrameSymbolInstance;
openfl_display__$MovieClip_FrameSymbolInstance.__name__ = ["openfl","display","_MovieClip","FrameSymbolInstance"];
openfl_display__$MovieClip_FrameSymbolInstance.prototype = {
	characterID: null
	,clipDepth: null
	,depth: null
	,displayObject: null
	,initFrame: null
	,initFrameObjectID: null
	,__class__: openfl_display__$MovieClip_FrameSymbolInstance
};
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) {
		fastCompression = false;
	}
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	this.display = display;
	if(display != null) {
		display.addEventListener("unload",$bind(this,this.display_onUnload));
		openfl_Lib.get_current().addChild(display);
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	display: null
	,ready: null
	,start: function() {
		if(this.simulateProgress) {
			return;
		}
		this.ready = true;
		openfl_Lib.get_current().get_loaderInfo().__complete();
		if(this.display != null) {
			var complete = new openfl_events_Event("complete",true,true);
			this.display.dispatchEvent(complete);
			if(!complete.isDefaultPrevented()) {
				this.display.dispatchEvent(new openfl_events_Event("unload"));
			}
		} else {
			lime_app_Preloader.prototype.start.call(this);
		}
	}
	,update: function(loaded,total) {
		openfl_Lib.get_current().get_loaderInfo().__update(loaded,total);
		if(this.display != null) {
			this.display.dispatchEvent(new openfl_events_ProgressEvent("progress",true,true,loaded,total));
		}
	}
	,display_onUnload: function(event) {
		if(this.display != null) {
			this.display.removeEventListener("unload",$bind(this,this.display_onUnload));
			if(this.display.parent == openfl_Lib.get_current()) {
				openfl_Lib.get_current().removeChild(this.display);
			}
			openfl_Lib.get_current().stage.set_focus(null);
			this.display = null;
		}
		if(this.ready && !this.simulateProgress) {
			lime_app_Preloader.prototype.start.call(this);
		}
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_DefaultPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) {
		color = 16777215;
	}
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
	this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
};
$hxClasses["openfl.display.DefaultPreloader"] = openfl_display_DefaultPreloader;
openfl_display_DefaultPreloader.__name__ = ["openfl","display","DefaultPreloader"];
openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
openfl_display_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	endAnimation: null
	,outline: null
	,progress: null
	,startAnimation: null
	,getBackgroundColor: function() {
		return openfl_Lib.get_current().stage.window.config.background;
	}
	,getHeight: function() {
		var height = openfl_Lib.get_current().stage.window.config.height;
		if(height > 0) {
			return height;
		} else {
			return openfl_Lib.get_current().stage.stageHeight;
		}
	}
	,getWidth: function() {
		var width = openfl_Lib.get_current().stage.window.config.width;
		if(width > 0) {
			return width;
		} else {
			return openfl_Lib.get_current().stage.stageWidth;
		}
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("unload"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) {
				percentLoaded = 1;
			}
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.this_onProgress));
		this.addEventListener("complete",$bind(this,this.this_onComplete));
	}
	,this_onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.this_onProgress));
		this.removeEventListener("complete",$bind(this,this.this_onComplete));
		this.onLoaded();
	}
	,this_onEnterFrame: function(event) {
		var elapsed = openfl_Lib.getTimer() - this.startAnimation;
		var total = this.endAnimation - this.startAnimation;
		var percent = elapsed / total;
		if(percent < 0) {
			percent = 0;
		}
		if(percent > 1) {
			percent = 1;
		}
		this.outline.set_alpha(percent);
		this.progress.set_alpha(percent);
	}
	,this_onProgress: function(event) {
		this.onUpdate(event.bytesLoaded | 0,event.bytesTotal | 0);
	}
	,__class__: openfl_display_DefaultPreloader
});
var openfl_display_ShaderData = function(byteArray) {
};
$hxClasses["openfl.display.ShaderData"] = openfl_display_ShaderData;
openfl_display_ShaderData.__name__ = ["openfl","display","ShaderData"];
openfl_display_ShaderData.prototype = {
	aAlpha: null
	,aPosition: null
	,aTexCoord: null
	,uImage0: null
	,uMatrix: null
	,__class__: openfl_display_ShaderData
};
var openfl_display_ShaderInput = function() {
	this.channels = 0;
	this.height = 0;
	this.index = 0;
	this.width = 0;
};
$hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
openfl_display_ShaderInput.__name__ = ["openfl","display","ShaderInput"];
openfl_display_ShaderInput.prototype = {
	channels: null
	,height: null
	,index: null
	,input: null
	,name: null
	,smoothing: null
	,width: null
	,__class__: openfl_display_ShaderInput
};
var openfl_display_ShaderParameter = function() {
	this.index = 0;
};
$hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
openfl_display_ShaderParameter.__name__ = ["openfl","display","ShaderParameter"];
openfl_display_ShaderParameter.prototype = {
	index: null
	,name: null
	,type: null
	,value: null
	,__class__: openfl_display_ShaderParameter
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
});
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.__upState = upState != null ? upState : new openfl_display_DisplayObject();
	this.__overState = overState;
	this.__downState = downState;
	this.__hitTestState = hitTestState != null ? hitTestState : new openfl_display_DisplayObject();
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.__tabEnabled = true;
	this.set___currentState(this.__upState);
	if(openfl_display_SimpleButton.__initSymbol != null) {
		var swf = openfl_display_SimpleButton.__initSWF;
		this.__symbol = openfl_display_SimpleButton.__initSymbol;
		openfl_display_SimpleButton.__initSWF = null;
		openfl_display_SimpleButton.__initSymbol = null;
		this.__fromSymbol(swf,this.__symbol);
	}
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = ["openfl","display","SimpleButton"];
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	enabled: null
	,trackAsMenu: null
	,useHandCursor: null
	,__currentState: null
	,__downState: null
	,__hitTestState: null
	,__ignoreEvent: null
	,__overState: null
	,__previousStates: null
	,__symbol: null
	,__upState: null
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		if(symbol.downState != null) {
			this.set_downState(symbol.downState.__createObject(swf));
		}
		if(symbol.hitState != null) {
			this.set_hitTestState(symbol.hitState.__createObject(swf));
		}
		if(symbol.overState != null) {
			this.set_overState(symbol.overState.__createObject(swf));
		}
		if(symbol.upState != null) {
			this.set_upState(symbol.upState.__createObject(swf));
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.get_hitTestState() != null) {
			if(this.get_hitTestState().__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				if(stack != null) {
					if(stack.length == 0) {
						stack[0] = hitObject;
					} else {
						stack[stack.length - 1] = hitObject;
					}
				}
				hitTest = true;
			}
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				hitTest = interactiveOnly;
			}
		}
		if(stack != null) {
			while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		}
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		if(this.__currentState.__hitTestMask(x,y)) {
			hitTest = true;
		}
		return hitTest;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCanvas(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(bounds);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
		this.__currentState.__renderCanvasMask(renderSession);
	}
	,__renderDOM: function(renderSession) {
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__previousStates;
		while(_g < _g1.data.get_length()) {
			var previousState = _g1.data.get(_g);
			++_g;
			previousState.__renderDOM(renderSession);
		}
		this.__previousStates.data.set_length(0);
		if(this.__currentState != null) {
			if(this.__currentState.stage != this.stage) {
				this.__currentState.__setStageReference(this.stage);
			}
			this.__currentState.__renderDOM(renderSession);
		}
		renderSession.maskManager.popObject(this);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderGL(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderGLMask: function(renderSession) {
		if(this.__currentState == null) {
			return;
		}
		this.__currentState.__renderGLMask(renderSession);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__currentState != null) {
			this.__currentState.__setStageReference(stage);
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setStageReference(stage);
		}
	}
	,__setTransformDirty: function() {
		openfl_display_InteractiveObject.prototype.__setTransformDirty.call(this);
		if(this.__currentState != null) {
			this.__currentState.__setTransformDirty();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setTransformDirty();
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(updateChildren) {
			if(this.__currentState != null) {
				this.__currentState.__update(transformOnly,true,maskGraphics);
			}
			if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
				this.get_hitTestState().__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		if(this.__currentState != null) {
			this.__currentState.__updateChildren(transformOnly);
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__updateChildren(transformOnly);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		if(this.__currentState != null) {
			this.__currentState.__updateTransforms();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__updateTransforms();
		}
	}
	,get_downState: function() {
		return this.__downState;
	}
	,set_downState: function(downState) {
		if(this.__downState != null && this.__currentState == this.__downState) {
			this.set___currentState(this.__downState);
		}
		return this.__downState = downState;
	}
	,get_hitTestState: function() {
		return this.__hitTestState;
	}
	,set_hitTestState: function(hitTestState) {
		if(this.__hitTestState != null && this.__hitTestState != hitTestState) {
			if(this.__hitTestState != this.get_downState() && this.__hitTestState != this.get_upState() && this.__hitTestState != this.get_overState()) {
				this.__hitTestState.__renderParent = null;
			}
		}
		if(hitTestState != null) {
			hitTestState.__renderParent = this;
			if(!hitTestState.__renderDirty) {
				hitTestState.__renderDirty = true;
				hitTestState.__setParentRenderDirty();
			}
		}
		return this.__hitTestState = hitTestState;
	}
	,get_overState: function() {
		return this.__overState;
	}
	,set_overState: function(overState) {
		if(this.__overState != null && this.__currentState == this.__overState) {
			this.set___currentState(overState);
		}
		return this.__overState = overState;
	}
	,get_upState: function() {
		return this.__upState;
	}
	,set_upState: function(upState) {
		if(this.__upState != null && this.__currentState == this.__upState) {
			this.set___currentState(upState);
		}
		return this.__upState = upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null && this.__currentState != this.get_hitTestState()) {
			this.__currentState.__renderParent = null;
		}
		if(value != null && value.parent != null) {
			value.parent.removeChild(value);
		}
		if(openfl_display_DisplayObject.__supportDOM && this.__previousStates == null) {
			this.__previousStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		if(value != this.__currentState) {
			if(openfl_display_DisplayObject.__supportDOM) {
				if(this.__currentState != null) {
					this.__currentState.__setStageReference(null);
					this.__previousStates.data.push(this.__currentState);
				}
				var index = this.__previousStates.data.indexOf(value,0);
				if(index > -1) {
					new openfl__$Vector_AbstractVector(this.__previousStates.data.splice(index,1));
				}
			}
			if(value != null) {
				value.__renderParent = this;
				if(!value.__renderDirty) {
					value.__renderDirty = true;
					value.__setParentRenderDirty();
				}
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__currentState = value;
		return value;
	}
	,__this_onMouseDown: function(event) {
		this.set___currentState(this.get_downState());
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.get_upState() != this.__currentState) {
			this.set___currentState(this.get_upState());
		}
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) {
			this.__ignoreEvent = true;
		}
		if(this.get_overState() != this.__currentState && this.get_overState() != null && !this.__ignoreEvent) {
			this.set___currentState(this.get_overState());
		}
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.get_overState() != null) {
			this.set___currentState(this.get_overState());
		} else {
			this.set___currentState(this.get_upState());
		}
	}
	,__class__: openfl_display_SimpleButton
});
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = window.application;
	this.window = window;
	this.set_color(color);
	this.set_name(null);
	this.__contentsScaleFactor = window.__scale;
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.__renderDirty = true;
	this.__wasFullscreen = window.__fullscreen;
	this.stage3Ds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var this1 = this.stage3Ds;
	var x = new openfl_display_Stage3D();
	this1.data.push(x);
	this.__resize();
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = 1;
	this.scaleMode = 2;
	this.showDefaultContextMenu = true;
	this.softKeyboardRect = new openfl_geom_Rectangle();
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__rollOutStack = [];
	this.__touchData = new haxe_ds_IntMap();
	if(openfl_Lib.get_current().stage == null) {
		this.stage.addChild(openfl_Lib.get_current());
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,quality: null
	,scaleMode: null
	,showDefaultContextMenu: null
	,softKeyboardRect: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__cacheFocus: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__contentsScaleFactor: null
	,__deltaTime: null
	,__displayMatrix: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__invalidated: null
	,__lastClickTime: null
	,__logicalWidth: null
	,__logicalHeight: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOverTarget: null
	,__mouseX: null
	,__mouseY: null
	,__primaryTouch: null
	,__renderer: null
	,__rendering: null
	,__rollOutStack: null
	,__stack: null
	,__touchData: null
	,__transparent: null
	,__wasDirty: null
	,__wasFullscreen: null
	,addRenderer: function(renderer) {
		var f = $bind(this,this.render);
		var a1 = renderer;
		var tmp = function() {
			f(a1);
		};
		renderer.onRender.add(tmp);
		var f1 = $bind(this,this.onRenderContextLost);
		var a11 = renderer;
		var tmp1 = function() {
			f1(a11);
		};
		renderer.onContextLost.add(tmp1);
		var f2 = $bind(this,this.onRenderContextRestored);
		var a12 = renderer;
		var tmp2 = function(a2) {
			f2(a12,a2);
		};
		renderer.onContextRestored.add(tmp2);
	}
	,addWindow: function(window) {
		if(this.window != window) {
			return;
		}
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		var tmp = function() {
			f(a1);
		};
		window.onActivate.add(tmp);
		var f1 = $bind(this,this.onWindowClose);
		var a11 = window;
		var tmp1 = function() {
			f1(a11);
		};
		window.onClose.add(tmp1,false,-9000);
		var f2 = $bind(this,this.onWindowCreate);
		var a12 = window;
		var tmp2 = function() {
			f2(a12);
		};
		window.onCreate.add(tmp2);
		var f3 = $bind(this,this.onWindowDeactivate);
		var a13 = window;
		var tmp3 = function() {
			f3(a13);
		};
		window.onDeactivate.add(tmp3);
		var f4 = $bind(this,this.onWindowDropFile);
		var a14 = window;
		var tmp4 = function(a2) {
			f4(a14,a2);
		};
		window.onDropFile.add(tmp4);
		var f5 = $bind(this,this.onWindowEnter);
		var a15 = window;
		var tmp5 = function() {
			f5(a15);
		};
		window.onEnter.add(tmp5);
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		var tmp6 = function() {
			f6(a16);
		};
		window.onFocusIn.add(tmp6);
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		var tmp7 = function() {
			f7(a17);
		};
		window.onFocusOut.add(tmp7);
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		var tmp8 = function() {
			f8(a18);
		};
		window.onFullscreen.add(tmp8);
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		var tmp9 = function(a21,a3) {
			f9(a19,a21,a3);
		};
		window.onKeyDown.add(tmp9);
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		var tmp10 = function(a22,a31) {
			f10(a110,a22,a31);
		};
		window.onKeyUp.add(tmp10);
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		var tmp11 = function() {
			f11(a111);
		};
		window.onLeave.add(tmp11);
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		var tmp12 = function() {
			f12(a112);
		};
		window.onMinimize.add(tmp12);
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		var tmp13 = function(x,y,a23) {
			f13(a113,x,y,a23);
		};
		window.onMouseDown.add(tmp13);
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		var tmp14 = function(x1,y1) {
			f14(a114,x1,y1);
		};
		window.onMouseMove.add(tmp14);
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		var tmp15 = function(x2,y2) {
			f15(a115,x2,y2);
		};
		window.onMouseMoveRelative.add(tmp15);
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		var tmp16 = function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		};
		window.onMouseUp.add(tmp16);
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		var tmp17 = function(a25,a32) {
			f17(a117,a25,a32);
		};
		window.onMouseWheel.add(tmp17);
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		var tmp18 = function(x4,y4) {
			f18(a118,x4,y4);
		};
		window.onMove.add(tmp18);
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		var tmp19 = function(a26,a33) {
			f19(a119,a26,a33);
		};
		window.onResize.add(tmp19);
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		var tmp20 = function() {
			f20(a120);
		};
		window.onRestore.add(tmp20);
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		var tmp21 = function(a27,a34,a4) {
			f21(a121,a27,a34,a4);
		};
		window.onTextEdit.add(tmp21);
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		var tmp22 = function(a28) {
			f22(a122,a28);
		};
		window.onTextInput.add(tmp22);
		if(window.id > -1) {
			this.onWindowCreate(window);
		}
	}
	,registerModule: function(application) {
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,setPreloader: function(preloader) {
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		try {
			openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadConnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadConnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onKey("keyDown",keyCode,modifier);
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onKey("keyUp",keyCode,modifier);
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		var type;
		switch(button) {
		case 1:
			type = "middleMouseDown";
			break;
		case 2:
			type = "rightMouseDown";
			break;
		default:
			type = "mouseDown";
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onMouse("mouseMove",x * window.__scale | 0,y * window.__scale | 0,0);
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		var type;
		switch(button) {
		case 1:
			type = "middleMouseUp";
			break;
		case 2:
			type = "rightMouseUp";
			break;
		default:
			type = "mouseUp";
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
		if(!this.showDefaultContextMenu && button == 2) {
			window.onMouseUp.cancel();
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onMouseWheel(deltaX * window.__scale | 0,deltaY * window.__scale | 0);
	}
	,onRenderContextLost: function(renderer) {
		this.__renderer = null;
	}
	,onRenderContextRestored: function(renderer,context) {
		this.__createRenderer();
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) {
			return;
		}
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		var event = new openfl_events_TextEvent("textInput",true,false,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__dispatchStack(event,stack);
		} else {
			this.__dispatchEvent(event);
		}
	}
	,onTouchMove: function(touch) {
		this.__onTouch("touchMove",touch);
	}
	,onTouchEnd: function(touch) {
		if(this.__primaryTouch == touch) {
			this.__primaryTouch = null;
		}
		this.__onTouch("touchEnd",touch);
	}
	,onTouchStart: function(touch) {
		if(this.__primaryTouch == null) {
			this.__primaryTouch = touch;
		}
		this.__onTouch("touchBegin",touch);
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,onWindowClose: function(window) {
		if(this.window == window) {
			this.window = null;
		}
		this.__primaryTouch = null;
		this.__broadcastEvent(new openfl_events_Event("deactivate"));
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		if(window.renderer != null) {
			this.__createRenderer();
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__renderDirty = true;
		this.__broadcastEvent(new openfl_events_Event("activate"));
		this.set_focus(this.__cacheFocus);
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__primaryTouch = null;
		this.__broadcastEvent(new openfl_events_Event("deactivate"));
		var currentFocus = this.get_focus();
		this.set_focus(null);
		this.__cacheFocus = currentFocus;
	}
	,onWindowFullscreen: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__resize();
		if(!this.__wasFullscreen) {
			this.__wasFullscreen = true;
			if(this.__displayState == 2) {
				this.__displayState = 1;
			}
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
	}
	,onWindowMinimize: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__renderDirty = true;
		this.__resize();
		if(this.__wasFullscreen && !window.__fullscreen) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	}
	,onWindowRestore: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) {
			return;
		}
		if(this.__rendering) {
			return;
		}
		this.__rendering = true;
		if(this.__renderer != null && (openfl_display_Stage3D.__active || this.stage3Ds.data.get(0).__contextRequested)) {
			this.__renderer.clear();
			this.__renderer.renderStage3D();
			this.__renderDirty = true;
		}
		this.__broadcastEvent(new openfl_events_Event("enterFrame"));
		this.__broadcastEvent(new openfl_events_Event("frameConstructed"));
		this.__broadcastEvent(new openfl_events_Event("exitFrame"));
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcastEvent(new openfl_events_Event("render"));
		}
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		this.__update(false,true);
		if(this.__renderer != null && this.__renderDirty) {
			if(!openfl_display_Stage3D.__active) {
				this.__renderer.clear();
			}
			if(renderer.type == lime_graphics_RendererType.CAIRO) {
				var _g = renderer.context;
				if(_g[1] == 4) {
					var cairo = _g[2];
				}
			}
			this.__renderer.render();
		} else {
			renderer.onRender.cancel();
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__broadcastEvent: function(event) {
		var key = event.type;
		var _this = openfl_display_DisplayObject.__broadcastEvents;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = event.type;
			var _this1 = openfl_display_DisplayObject.__broadcastEvents;
			var dispatchers = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				if(dispatcher.stage == this || dispatcher.stage == null) {
					try {
						dispatcher.__dispatch(event);
					} catch( e ) {
						haxe_CallStack.lastException = e;
						if (e instanceof js__$Boot_HaxeError) e = e.val;
						this.__handleError(e);
					}
				}
			}
		}
	}
	,__createRenderer: function() {
		var _g = this.window.renderer.context;
		switch(_g[1]) {
		case 0:
			var gl = _g[2];
			this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this,gl);
			break;
		case 1:
			var context = _g[2];
			this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this,context);
			break;
		case 2:
			var element = _g[2];
			this.__renderer = new openfl__$internal_renderer_dom_DOMRenderer(this,element);
			break;
		case 4:
			var cairo = _g[2];
			break;
		case 5:
			var ctx = _g[2];
			break;
		default:
		}
	}
	,__dispatchEvent: function(event) {
		try {
			return openfl_display_DisplayObjectContainer.prototype.__dispatchEvent.call(this,event);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
			return false;
		}
	}
	,__dispatchStack: function(event,stack) {
		try {
			var target;
			var length = stack.length;
			if(length == 0) {
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
			} else {
				event.eventPhase = 1;
				event.target = stack[stack.length - 1];
				var _g1 = 0;
				var _g = length - 1;
				while(_g1 < _g) {
					var i = _g1++;
					stack[i].__dispatch(event);
					if(event.__isCanceled) {
						return;
					}
				}
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
				if(event.__isCanceled) {
					return;
				}
				if(event.bubbles) {
					event.eventPhase = 3;
					var i1 = length - 2;
					while(i1 >= 0) {
						stack[i1].__dispatch(event);
						if(event.__isCanceled) {
							return;
						}
						--i1;
					}
				}
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,__dispatchTarget: function(target,event) {
		try {
			return target.__dispatchEvent(event);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
			return false;
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			var _this = parent.__getWorldTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				mouse.x = -_this.tx;
				mouse.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
				mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
				mouse.x = px;
			}
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__globalToLocal: function(global,local) {
		if(global != local) {
			local.copyFrom(global);
		}
		return local;
	}
	,__handleError: function(e) {
		var event = new openfl_events_UncaughtErrorEvent("uncaughtError",true,true,e);
		openfl_Lib.get_current().__loaderInfo.uncaughtErrorEvents.dispatchEvent(event);
		if(!event.__preventDefault) {
			try {
				var exc = haxe_CallStack.lastException;
				if(exc != null && Object.prototype.hasOwnProperty.call(exc,"stack") && exc.stack != null && exc.stack != "") {
					console.log(exc.stack);
					e.stack = exc.stack;
				} else {
					var msg = haxe_CallStack.toString(haxe_CallStack.callStack());
					console.log(msg);
				}
			} catch( e2 ) {
				haxe_CallStack.lastException = e2;
			}
			throw e;
		}
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,true,charCode,keyCode1,keyLocation,this.__macKeyboard ? lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) : lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__dispatchStack(event,stack);
			if(event.__preventDefault) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		var tmp3 = function() {
			f3(a13);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) {
			return;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			break;
		case "mouseDown":
			if(target.__allowMouseFocus()) {
				this.set_focus(target);
			} else {
				this.set_focus(null);
			}
			this.__mouseDownLeft = target;
			openfl_events_MouseEvent.__buttonDown = true;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft != null) {
				openfl_events_MouseEvent.__buttonDown = false;
				if(this.__mouseX < 0 || this.__mouseY < 0) {
					this.__dispatchEvent(openfl_events_MouseEvent.__create("releaseOutside",1,this.__mouseX,this.__mouseY,new openfl_geom_Point(this.__mouseX,this.__mouseY),this));
				} else if(this.__mouseDownLeft == target) {
					clickType = "click";
				}
				this.__mouseDownLeft = null;
			}
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		this.__dispatchStack(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
		if(clickType != null) {
			this.__dispatchStack(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__dispatchStack(openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
					this.__lastClickTime = 0;
				} else {
					this.__lastClickTime = currentTime;
				}
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto") {
			var cursor = null;
			if(this.__mouseDownLeft != null) {
				cursor = this.__mouseDownLeft.__getCursor();
			} else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null) {
						lime_ui_Mouse.set_cursor(cursor);
						break;
					}
				}
			}
			if(cursor == null) {
				lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
			}
		}
		var event;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				this.__dispatchTarget(this.__mouseOverTarget,event);
			}
		}
		var _g1 = 0;
		var _g11 = this.__rollOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(stack.indexOf(target2) == -1) {
				HxOverrides.remove(this.__rollOutStack,target2);
				event = openfl_events_MouseEvent.__create("rollOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				event.bubbles = false;
				this.__dispatchTarget(target2,event);
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(this.__rollOutStack.indexOf(target3) == -1 && this.__mouseOverTarget != null) {
				if(target3.hasEventListener("rollOver")) {
					event = openfl_events_MouseEvent.__create("rollOver",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),target3);
					event.bubbles = false;
					this.__dispatchTarget(target3,event);
				}
				if(target3.hasEventListener("rollOut")) {
					this.__rollOutStack.push(target3);
				}
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
				event.bubbles = true;
				this.__dispatchTarget(target,event);
			}
			this.__mouseOverTarget = target;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
			var dropTarget = null;
			if(this.__mouseOverTarget == this.__dragObject) {
				var cacheMouseEnabled = this.__dragObject.mouseEnabled;
				var cacheMouseChildren = this.__dragObject.mouseChildren;
				this.__dragObject.mouseEnabled = false;
				this.__dragObject.mouseChildren = false;
				var stack1 = [];
				if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack1,true,this)) {
					dropTarget = stack1[stack1.length - 1];
				}
				this.__dragObject.mouseEnabled = cacheMouseEnabled;
				this.__dragObject.mouseChildren = cacheMouseChildren;
			} else if(this.__mouseOverTarget != this) {
				dropTarget = this.__mouseOverTarget;
			}
			this.__dragObject.dropTarget = dropTarget;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var delta = deltaY | 0;
		this.__dispatchStack(openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,targetPoint),target,delta),stack);
		openfl_geom_Point.__pool.release(targetPoint);
	}
	,__onTouch: function(type,touch) {
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(Math.round(touch.x * this.window.__width * this.window.__scale),Math.round(touch.y * this.window.__height * this.window.__scale));
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var touchX = targetPoint.x;
		var touchY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(touchX,touchY,false,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var touchId = touch.id;
		var touchData = null;
		if(this.__touchData.h.hasOwnProperty(touchId)) {
			touchData = this.__touchData.h[touchId];
		} else {
			touchData = openfl__$internal_TouchData.__pool.get();
			touchData.reset();
			touchData.touch = touch;
			this.__touchData.h[touchId] = touchData;
		}
		var touchType = null;
		var releaseTouchData = false;
		switch(type) {
		case "touchBegin":
			touchData.touchDownTarget = target;
			break;
		case "touchEnd":
			if(touchData.touchDownTarget == target) {
				touchType = "touchTap";
			}
			touchData.touchDownTarget = null;
			releaseTouchData = true;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var isPrimaryTouchPoint = this.__primaryTouch == touch;
		var touchEvent = openfl_events_TouchEvent.__create(type,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
		touchEvent.touchPointID = touchId;
		touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
		this.__dispatchStack(touchEvent,stack);
		if(touchType != null) {
			touchEvent = openfl_events_TouchEvent.__create(touchType,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			this.__dispatchStack(touchEvent,stack);
		}
		var touchOverTarget = touchData.touchOverTarget;
		if(target != touchOverTarget && touchOverTarget != null) {
			touchEvent = openfl_events_TouchEvent.__create("touchOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			this.__dispatchTarget(touchOverTarget,touchEvent);
		}
		var touchOutStack = touchData.rollOutStack;
		var _g = 0;
		while(_g < touchOutStack.length) {
			var target1 = touchOutStack[_g];
			++_g;
			if(stack.indexOf(target1) == -1) {
				HxOverrides.remove(touchOutStack,target1);
				touchEvent = openfl_events_TouchEvent.__create("touchRollOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = false;
				this.__dispatchTarget(target1,touchEvent);
			}
		}
		var _g1 = 0;
		while(_g1 < stack.length) {
			var target2 = stack[_g1];
			++_g1;
			if(touchOutStack.indexOf(target2) == -1) {
				if(target2.hasEventListener("touchRollOver")) {
					touchEvent = openfl_events_TouchEvent.__create("touchRollOver",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),target2);
					touchEvent.touchPointID = touchId;
					touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
					touchEvent.bubbles = false;
					this.__dispatchTarget(target2,touchEvent);
				}
				if(target2.hasEventListener("touchRollOut")) {
					touchOutStack.push(target2);
				}
			}
		}
		if(target != touchOverTarget) {
			if(target != null) {
				touchEvent = openfl_events_TouchEvent.__create("touchOver",null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = true;
				this.__dispatchTarget(target,touchEvent);
			}
			touchData.touchOverTarget = target;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
		if(releaseTouchData) {
			this.__touchData.remove(touchId);
			touchData.reset();
			openfl__$internal_TouchData.__pool.release(touchData);
		}
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		this.__logicalWidth = windowWidth;
		this.__logicalHeight = windowHeight;
		this.__displayMatrix.identity();
		if(this.__logicalWidth == 0 && this.__logicalHeight == 0) {
			this.stageWidth = windowWidth;
			this.stageHeight = windowHeight;
		} else {
			this.stageWidth = this.__logicalWidth;
			this.stageHeight = this.__logicalHeight;
			var scaleX = windowWidth / this.stageWidth;
			var scaleY = windowHeight / this.stageHeight;
			var targetScale = Math.min(scaleX,scaleY);
			var offsetX = Math.round((windowWidth - this.stageWidth * targetScale) / 2);
			var offsetY = Math.round((windowHeight - this.stageHeight * targetScale) / 2);
			this.__displayMatrix.scale(targetScale,targetScale);
			this.__displayMatrix.translate(offsetX,offsetY);
		}
		var _g = 0;
		var _g1 = this.stage3Ds;
		while(_g < _g1.data.get_length()) {
			var stage3D = _g1.data.get(_g);
			++_g;
			stage3D.__resize(this.stageWidth,this.stageHeight);
		}
		if(this.__renderer != null) {
			this.__renderer.resize(windowWidth,windowHeight);
		}
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) {
			this.__dispatchEvent(new openfl_events_Event("resize"));
		}
	}
	,__setLogicalSize: function(width,height) {
		this.__logicalWidth = width;
		this.__logicalHeight = height;
		this.__resize();
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		if(transformOnly) {
			if(this.__transformDirty) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGraphics);
				if(updateChildren) {
					this.__transformDirty = false;
				}
			}
		} else if(this.__transformDirty || this.__renderDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGraphics);
			if(updateChildren) {
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__wasDirty = true;
				}
			}
		} else if(this.__wasDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGraphics);
			if(updateChildren) {
				this.__wasDirty = false;
			}
		}
	}
	,set_color: function(value) {
		if(value == null) {
			this.__transparent = true;
			value = 0;
		} else {
			this.__transparent = false;
		}
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value & 16777215,6);
		return this.__color = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,value,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
			if(value != null) {
				var event1 = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack1 = [];
				value.__getInteractive(stack1);
				stack1.reverse();
				this.__dispatchStack(event1,stack1);
			}
		}
		return value;
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,set_scaleX: function(value) {
		return 0;
	}
	,set_scaleY: function(value) {
		return 0;
	}
	,set_x: function(value) {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,__class__: openfl_display_Stage
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
	this.__x = 0;
	this.__y = 0;
	this.visible = true;
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,__contextRequested: null
	,__stage: null
	,__x: null
	,__y: null
	,__canvas: null
	,__renderContext: null
	,__style: null
	,__webgl: null
	,__createContext: function(stage,renderSession) {
		this.__stage = stage;
		if(renderSession.gl != null) {
			this.context3D = new openfl_display3D_Context3D(this,renderSession);
			this.__dispatchCreate();
		} else {
			this.__canvas = window.document.createElement("canvas");
			this.__canvas.width = stage.stageWidth;
			this.__canvas.height = stage.stageHeight;
			var $window = stage.window;
			var transparentBackground = Object.prototype.hasOwnProperty.call($window.config,"background") && $window.config.background == null;
			var colorDepth = Object.prototype.hasOwnProperty.call($window.config,"colorDepth") ? $window.config.colorDepth : 16;
			var options = Object.prototype.hasOwnProperty.call($window.config,"antialiasing") && $window.config.antialiasing > 0;
			var options1 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : Object.prototype.hasOwnProperty.call($window.config,"depthBuffer") ? $window.config.depthBuffer : true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call($window.config,"stencilBuffer") && $window.config.stencilBuffer, preserveDrawingBuffer : false};
			this.__webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.__canvas,options1);
			if(this.__webgl != null) {
				this.__renderContext = new lime__$backend_html5_HTML5GLRenderContext(this.__webgl);
				lime_graphics_opengl_GL.context = this.__renderContext;
				this.context3D = new openfl_display3D_Context3D(this,renderSession);
				renderSession.element.appendChild(this.__canvas);
				this.__style = this.__canvas.style;
				this.__style.setProperty("position","absolute",null);
				this.__style.setProperty("top","0",null);
				this.__style.setProperty("left","0",null);
				this.__style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
				this.__style.setProperty("z-index","-1",null);
				this.__dispatchCreate();
			} else {
				this.__dispatchError();
			}
		}
	}
	,__dispatchError: function() {
		this.__contextRequested = false;
		this.dispatchEvent(new openfl_events_ErrorEvent("error",false,false,"Context3D not available"));
	}
	,__dispatchCreate: function() {
		if(this.__contextRequested) {
			this.__contextRequested = false;
			this.dispatchEvent(new openfl_events_Event("context3DCreate"));
		}
	}
	,__renderCanvas: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderDOM: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested && this.context3D == null) {
			this.__createContext(stage,renderSession);
		}
		if(this.context3D != null) {
			lime_graphics_opengl_GL.context = this.__renderContext;
			this.__resetContext3DStates();
		}
	}
	,__renderGL: function(stage,renderSession) {
		if(!this.visible) {
			return;
		}
		if(this.__contextRequested && this.context3D == null) {
			this.__createContext(stage,renderSession);
		}
		if(this.context3D != null) {
			this.__resetContext3DStates();
			if(this.context3D != null) {
				renderSession.blendModeManager.setBlendMode(null);
				if(renderSession.shaderManager.currentShader != null) {
					renderSession.shaderManager.setShader(null);
					if(this.context3D.__program != null) {
						this.context3D.__program.__use();
					}
				}
			}
			if(openfl__$internal_stage3D_GLUtils.debug) {
				renderSession.gl.__context.getError();
			}
		}
	}
	,__resize: function(width,height) {
		if(this.__canvas != null) {
			this.__canvas.width = width;
			this.__canvas.height = height;
		}
	}
	,__resetContext3DStates: function() {
		this.context3D.__updateBlendFactors();
		this.context3D.__updateBackbufferViewport();
	}
	,get_x: function() {
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,__class__: openfl_display_Stage3D
});
var openfl_display_Window = function(config) {
	lime_ui_Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	create: function(application) {
		lime_ui_Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(this.config,"background") ? this.config.background : 16777215);
		if(Object.prototype.hasOwnProperty.call(this.config,"parameters")) {
			try {
				this.stage.get_loaderInfo().parameters = this.config.parameters;
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
		if(Object.prototype.hasOwnProperty.call(this.config,"resizable") && !this.config.resizable) {
			this.stage.__setLogicalSize(this.config.width,this.config.height);
		}
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function(stage3D,renderSession) {
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage3D = stage3D;
	this.__renderSession = renderSession;
	openfl__$internal_stage3D_opengl_GLContext3D.create(this);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	backBufferHeight: null
	,backBufferWidth: null
	,driverInfo: null
	,maxBackBufferHeight: null
	,maxBackBufferWidth: null
	,__backBufferAntiAlias: null
	,__backBufferEnableDepthAndStencil: null
	,__backBufferWantsBestResolution: null
	,__fragmentConstants: null
	,__frameCount: null
	,__maxAnisotropyTexture2D: null
	,__positionScale: null
	,__program: null
	,__renderSession: null
	,__renderToTexture: null
	,__rttDepthAndStencil: null
	,__samplerDirty: null
	,__samplerTextures: null
	,__samplerStates: null
	,__stage3D: null
	,__stencilCompareMode: null
	,__stencilRef: null
	,__stencilReadMask: null
	,__supportsAnisotropicFiltering: null
	,__supportsPackedDepthStencil: null
	,__vertexConstants: null
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString(format),optimizeForRenderToTexture);
	}
	,__updateBackbufferViewport: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.__updateBackbufferViewportTEMP(this);
	}
	,__updateBlendFactors: function() {
		openfl__$internal_stage3D_opengl_GLContext3D.__updateBlendFactorsTEMP(this);
	}
	,__class__: openfl_display3D_Context3D
});
var openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_"] = openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFormat","Context3DTextureFormat_Impl_"];
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D_Program3D = function(context3D) {
	this.__context = context3D;
	this.__memUsage = 0;
	this.__samplerUsageMask = 0;
	this.__uniforms = new List();
	this.__samplerUniforms = new List();
	this.__alphaSamplerUniforms = new List();
	this.__alphaSamplerEnabled = [];
	this.__samplerStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	__alphaSamplerEnabled: null
	,__alphaSamplerUniforms: null
	,__context: null
	,__fragmentUniformMap: null
	,__memUsage: null
	,__programID: null
	,__samplerStates: null
	,__samplerUniforms: null
	,__samplerUsageMask: null
	,__uniforms: null
	,__vertexUniformMap: null
	,__use: function() {
		openfl__$internal_stage3D_opengl_GLProgram3D["use"](this,this.__context.__renderSession);
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_Uniform = function(gl) {
	this.gl = gl;
	this.isDirty = true;
	var this1 = new lime_utils_BytePointerData(null,0);
	this.regDataPointer = this1;
};
$hxClasses["openfl.display3D.Uniform"] = openfl_display3D_Uniform;
openfl_display3D_Uniform.__name__ = ["openfl","display3D","Uniform"];
openfl_display3D_Uniform.prototype = {
	location: null
	,regIndex: null
	,regCount: null
	,isDirty: null
	,gl: null
	,regDataPointer: null
	,__class__: openfl_display3D_Uniform
};
var openfl_display3D_UniformMap = function(list) {
	this.__uniforms = list;
	this.__uniforms.sort(function(a,b) {
		return Reflect.compare(a.regIndex,b.regIndex);
	});
	var total = 0;
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		if(uniform.regIndex + uniform.regCount > total) {
			total = uniform.regIndex + uniform.regCount;
		}
	}
	this.__registerLookup = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,total);
	var _g2 = 0;
	var _g11 = this.__uniforms;
	while(_g2 < _g11.length) {
		var uniform1 = _g11[_g2];
		++_g2;
		var _g3 = 0;
		var _g21 = uniform1.regCount;
		while(_g3 < _g21) {
			var i = _g3++;
			this.__registerLookup.data.set(uniform1.regIndex + i,uniform1);
		}
	}
	this.__anyDirty = this.__allDirty = true;
};
$hxClasses["openfl.display3D.UniformMap"] = openfl_display3D_UniformMap;
openfl_display3D_UniformMap.__name__ = ["openfl","display3D","UniformMap"];
openfl_display3D_UniformMap.prototype = {
	__allDirty: null
	,__anyDirty: null
	,__registerLookup: null
	,__uniforms: null
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,__class__: openfl_display3D_UniformMap
};
var openfl_display3D_textures_TextureBase = function(context) {
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	openfl__$internal_stage3D_opengl_GLTextureBase.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__context: null
	,__format: null
	,__height: null
	,__internalFormat: null
	,__optimizeForRenderToTexture: null
	,__streamingLevels: null
	,__textureContext: null
	,__textureID: null
	,__textureTarget: null
	,__width: null
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,size,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__size = size;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	openfl__$internal_stage3D_opengl_GLCubeTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__size: null
	,__uploadedSides: null
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	openfl__$internal_stage3D_opengl_GLRectangleTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,width,height,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	openfl__$internal_stage3D_opengl_GLTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__class__: openfl_display3D_textures_Texture
});
var openfl_display3D_textures_VideoTexture = function(context) {
	openfl_display3D_textures_TextureBase.call(this,context);
	openfl__$internal_stage3D_opengl_GLVideoTexture.create(this,this.__context.__renderSession);
};
$hxClasses["openfl.display3D.textures.VideoTexture"] = openfl_display3D_textures_VideoTexture;
openfl_display3D_textures_VideoTexture.__name__ = ["openfl","display3D","textures","VideoTexture"];
openfl_display3D_textures_VideoTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_VideoTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__class__: openfl_display3D_textures_VideoTexture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = ["openfl","errors","IllegalOperationError"];
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,__class__: openfl_events_Event
};
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.list = list;
	this.index = list.length;
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = ["openfl","events","_EventDispatcher","DispatchIterator"];
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	active: null
	,index: null
	,isCopy: null
	,list: null
	,copy: function() {
		if(!this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		if(this.index < this.list.length) {
			return true;
		} else {
			this.active = false;
			return false;
		}
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex < this.index) {
					this.index--;
				}
			} else {
				var _g1 = this.index;
				var _g = this.list.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.active = true;
		this.isCopy = false;
		this.index = 0;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		if(Reflect.compareMethods(this.callback,callback)) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) {
		redirected = false;
	}
	if(status == null) {
		status = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null ? keyLocationValue : 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
	this.isRelatedObjectInaccessible = false;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,isRelatedObjectInaccessible: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	info: null
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) {
		bytesTotal = 0;
	}
	if(bytesLoaded == null) {
		bytesLoaded = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,__class__: openfl_events_TouchEvent
});
var openfl_events_UncaughtErrorEvent = function(type,bubbles,cancelable,error) {
	if(cancelable == null) {
		cancelable = true;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.error = error;
};
$hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
openfl_events_UncaughtErrorEvent.__name__ = ["openfl","events","UncaughtErrorEvent"];
openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	error: null
	,__class__: openfl_events_UncaughtErrorEvent
});
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_filters_BitmapFilter = function() {
	this.__bottomExtension = 0;
	this.__leftExtension = 0;
	this.__needSecondBitmapData = true;
	this.__numShaderPasses = 0;
	this.__preserveObject = false;
	this.__rightExtension = 0;
	this.__topExtension = 0;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.prototype = {
	__bottomExtension: null
	,__leftExtension: null
	,__needSecondBitmapData: null
	,__numShaderPasses: null
	,__preserveObject: null
	,__renderDirty: null
	,__rightExtension: null
	,__topExtension: null
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		return sourceBitmapData;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters_BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.set_quality(quality);
	this.__needSecondBitmapData = true;
	this.__preserveObject = false;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__blurX: null
	,__blurY: null
	,__horizontalPasses: null
	,__quality: null
	,__verticalPasses: null
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var finalImage = lime_graphics_utils_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? Math.ceil(value) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? Math.ceil(value) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,set_quality: function(value) {
		this.__horizontalPasses = this.__blurX <= 0 ? 0 : Math.round(this.__blurX * (value / 4)) + 1;
		this.__verticalPasses = this.__blurY <= 0 ? 0 : Math.round(this.__blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.__horizontalPasses + this.__verticalPasses;
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,__class__: openfl_filters_BlurFilter
});
var openfl_filters_ColorMatrixFilter = function(matrix) {
	openfl_filters_BitmapFilter.call(this);
	this.set_matrix(matrix);
	this.__numShaderPasses = 0;
	this.__needSecondBitmapData = false;
};
$hxClasses["openfl.filters.ColorMatrixFilter"] = openfl_filters_ColorMatrixFilter;
openfl_filters_ColorMatrixFilter.__name__ = ["openfl","filters","ColorMatrixFilter"];
openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ColorMatrixFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__matrix: null
	,__applyFilter: function(destBitmapData,sourceBitmapData,sourceRect,destPoint) {
		var sourceImage = sourceBitmapData.image;
		var image = destBitmapData.image;
		lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
		lime_graphics_utils_ImageCanvasUtil.convertToData(image);
		var sourceData = sourceImage.get_data();
		var destData = image.get_data();
		var offsetX = destPoint.x - sourceRect.x | 0;
		var offsetY = destPoint.y - sourceRect.y | 0;
		var sourceStride = sourceBitmapData.width * 4;
		var destStride = destBitmapData.width * 4;
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourcePixel;
		var destPixel = 0;
		var sourceOffset;
		var destOffset;
		var _g1 = sourceRect.y | 0;
		var _g = sourceRect.height | 0;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = sourceRect.x | 0;
			var _g2 = sourceRect.width | 0;
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				destOffset = (row + offsetX) * destStride + (column + offsetY) * 4;
				switch(sourceFormat) {
				case 0:
					sourcePixel = (sourceData[sourceOffset] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset + 2] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourceOffset + 1] & 255) << 24 | (sourceData[sourceOffset + 2] & 255) << 16 | (sourceData[sourceOffset + 3] & 255) << 8 | sourceData[sourceOffset] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[sourceOffset + 2] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if((sourcePixel & 255) == 0) {
					destPixel = 0;
				} else {
					var value = Math.max(0,Math.min(this.__matrix[0] * (sourcePixel >>> 24 & 255) + this.__matrix[1] * (sourcePixel >>> 16 & 255) + this.__matrix[2] * (sourcePixel >>> 8 & 255) + this.__matrix[3] * (sourcePixel & 255) + this.__matrix[4],255)) | 0;
					destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					var value1 = Math.max(0,Math.min(this.__matrix[5] * (sourcePixel >>> 24 & 255) + this.__matrix[6] * (sourcePixel >>> 16 & 255) + this.__matrix[7] * (sourcePixel >>> 8 & 255) + this.__matrix[8] * (sourcePixel & 255) + this.__matrix[9],255)) | 0;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					var value2 = Math.max(0,Math.min(this.__matrix[10] * (sourcePixel >>> 24 & 255) + this.__matrix[11] * (sourcePixel >>> 16 & 255) + this.__matrix[12] * (sourcePixel >>> 8 & 255) + this.__matrix[13] * (sourcePixel & 255) + this.__matrix[14],255)) | 0;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
					var value3 = Math.max(0,Math.min(this.__matrix[15] * (sourcePixel >>> 24 & 255) + this.__matrix[16] * (sourcePixel >>> 16 & 255) + this.__matrix[17] * (sourcePixel >>> 8 & 255) + this.__matrix[18] * (sourcePixel & 255) + this.__matrix[19],255)) | 0;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
				}
				if(destPremultiplied) {
					if((destPixel & 255) == 0) {
						if(destPixel != 0) {
							destPixel = 0;
						}
					} else if((destPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
						destPixel = ((destPixel >>> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destOffset] = destPixel >>> 24 & 255;
					destData[destOffset + 1] = destPixel >>> 16 & 255;
					destData[destOffset + 2] = destPixel >>> 8 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				case 1:
					destData[destOffset] = destPixel & 255;
					destData[destOffset + 1] = destPixel >>> 24 & 255;
					destData[destOffset + 2] = destPixel >>> 16 & 255;
					destData[destOffset + 3] = destPixel >>> 8 & 255;
					break;
				case 2:
					destData[destOffset] = destPixel >>> 8 & 255;
					destData[destOffset + 1] = destPixel >>> 16 & 255;
					destData[destOffset + 2] = destPixel >>> 24 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				}
			}
		}
		destBitmapData.image.dirty = true;
		return destBitmapData;
	}
	,set_matrix: function(value) {
		if(value == null) {
			value = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];
		}
		return this.__matrix = value;
	}
	,__class__: openfl_filters_ColorMatrixFilter
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) {
		hideObject = false;
	}
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 45;
	}
	if(distance == null) {
		distance = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__distance = distance;
	this.__angle = angle;
	this.__color = color;
	this.__alpha = alpha;
	this.__blurX = blurX;
	this.__blurY = blurY;
	this.__strength = strength;
	this.__quality = quality;
	this.__inner = inner;
	this.__knockout = knockout;
	this.__hideObject = hideObject;
	this.__updateSize();
	this.__needSecondBitmapData = true;
	this.__preserveObject = !this.__hideObject;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__angle: null
	,__blurX: null
	,__blurY: null
	,__color: null
	,__distance: null
	,__hideObject: null
	,__inner: null
	,__knockout: null
	,__offsetX: null
	,__offsetY: null
	,__quality: null
	,__strength: null
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var a = this.__color >> 24 & 255;
		var r = this.__color >> 16 & 255;
		var g = this.__color >> 8 & 255;
		var b = this.__color & 255;
		sourceBitmapData.colorTransform(sourceBitmapData.rect,new openfl_geom_ColorTransform(0,0,0,1,r,g,b,a));
		destPoint.x += this.__offsetX;
		destPoint.y += this.__offsetY;
		var finalImage = lime_graphics_utils_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality,this.__strength);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__updateSize: function() {
		this.__offsetX = this.__distance * Math.cos(this.__angle * Math.PI / 180) | 0;
		this.__offsetY = this.__distance * Math.sin(this.__angle * Math.PI / 180) | 0;
		this.__topExtension = Math.ceil((this.__offsetY < 0 ? -this.__offsetY : 0) + this.__blurY);
		this.__bottomExtension = Math.ceil((this.__offsetY > 0 ? this.__offsetY : 0) + this.__blurY);
		this.__leftExtension = Math.ceil((this.__offsetX < 0 ? -this.__offsetX : 0) + this.__blurX);
		this.__rightExtension = Math.ceil((this.__offsetX > 0 ? this.__offsetX : 0) + this.__blurX);
	}
	,__class__: openfl_filters_DropShadowFilter
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 2;
	}
	if(blurY == null) {
		blurY = 6;
	}
	if(blurX == null) {
		blurX = 6;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16711680;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__color = color;
	this.__alpha = alpha;
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.__strength = strength;
	this.set_quality(quality);
	this.__inner = inner;
	this.__knockout = knockout;
	this.__needSecondBitmapData = true;
	this.__preserveObject = true;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__blurX: null
	,__blurY: null
	,__color: null
	,__horizontalPasses: null
	,__inner: null
	,__knockout: null
	,__quality: null
	,__strength: null
	,__verticalPasses: null
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var r = this.__color >> 16 & 255;
		var g = this.__color >> 8 & 255;
		var b = this.__color & 255;
		sourceBitmapData.colorTransform(sourceBitmapData.rect,new openfl_geom_ColorTransform(0,0,0,1,r,g,b,this.__alpha * 255));
		var finalImage = lime_graphics_utils_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality,this.__strength);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? Math.ceil(value) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? Math.ceil(value) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,get_color: function() {
		return this.__color;
	}
	,set_quality: function(value) {
		this.__horizontalPasses = this.__blurX <= 0 ? 0 : Math.round(this.__blurX * (value / 4)) + 1;
		this.__verticalPasses = this.__blurY <= 0 ? 0 : Math.round(this.__blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.__horizontalPasses + this.__verticalPasses;
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,__class__: openfl_filters_GlowFilter
});
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) {
			skipAlphaMultiplier = false;
		}
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function() {
		if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			var this1 = new Float32Array(20);
			openfl_geom_ColorTransform.__limeColorMatrix = this1;
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_Matrix3D = function() { };
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.prototype = {
	__class__: openfl_geom_Matrix3D
};
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		}
		var _this = openfl_geom_Point.__limeVector2;
		_this.x = this.x;
		_this.y = this.y;
		return openfl_geom_Point.__limeVector2;
	}
	,__class__: openfl_geom_Point
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare == this) {
			return true;
		} else if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,__class__: openfl_geom_Rectangle
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform.__copyFrom(value);
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			var _this = this.__displayObject;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		return this.__colorTransform;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		}
		return value;
	}
	,__setTransform: function(a,b,c,d,tx,ty) {
		if(this.__displayObject != null) {
			var scaleX = 0.0;
			var scaleY = 0.0;
			if(b == 0) {
				scaleX = a;
			} else {
				scaleX = Math.sqrt(a * a + b * b);
			}
			if(c == 0) {
				scaleY = a;
			} else {
				scaleY = Math.sqrt(c * c + d * d);
			}
			this.__displayObject.__scaleX = scaleX;
			this.__displayObject.__scaleY = scaleY;
			var rotation = 180 / Math.PI * Math.atan2(d,c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = a;
			this.__displayObject.__transform.b = b;
			this.__displayObject.__transform.c = c;
			this.__displayObject.__transform.d = d;
			this.__displayObject.__transform.tx = tx;
			this.__displayObject.__transform.ty = ty;
			this.__displayObject.__setTransformDirty();
		}
	}
	,__class__: openfl_geom_Transform
};
var openfl_geom_Vector3D = function() { };
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.prototype = {
	__class__: openfl_geom_Vector3D
};
var openfl_media_ID3Info = function() { };
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		var tmp;
		if(defaultLibrary != null) {
			var key = this.url;
			var _this = defaultLibrary.cachedAudioBuffers;
			if(__map_reserved[key] != null) {
				tmp = _this.existsReserved(key);
			} else {
				tmp = _this.h.hasOwnProperty(key);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var key1 = this.url;
			var _this1 = defaultLibrary.cachedAudioBuffers;
			this.AudioBuffer_onURLLoad(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]);
		} else {
			lime_media_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
});
var openfl_media_SoundChannel = function(source,soundTransform) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) {
		this.__soundTransform = soundTransform;
	} else {
		this.__soundTransform = new openfl_media_SoundTransform();
	}
	if(source != null) {
		this.__source = source;
		this.__source.onComplete.add($bind(this,this.source_onComplete));
		this.__isValid = true;
		this.__source.play();
	}
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__soundTransform: null
	,__source: null
	,stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) {
			return;
		}
		this.__source.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__source.onComplete.remove($bind(this,this.source_onComplete));
		this.__source.dispose();
		this.__isValid = false;
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__source.get_currentTime() + this.__source.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__source.set_currentTime((value | 0) - this.__source.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) {
				pan = -1;
			}
			if(pan > 1) {
				pan = 1;
			}
			var volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			if(this.__isValid) {
				this.__source.set_gain(volume);
				var position = this.__source.get_position();
				position.x = pan;
				position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
				this.__source.set_position(position);
				return value;
			}
		}
		return value;
	}
	,source_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
});
var openfl_media_SoundLoaderContext = function() { };
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = ["openfl","media","SoundMixer"];
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
var openfl_net_FileReference = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.FileReference"] = openfl_net_FileReference;
openfl_net_FileReference.__name__ = ["openfl","net","FileReference"];
openfl_net_FileReference.__super__ = openfl_events_EventDispatcher;
openfl_net_FileReference.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__data: null
	,__path: null
	,save: function(data,defaultFileName) {
		this.__data = null;
		this.__path = null;
		if(data == null) {
			return;
		}
		if(js_Boot.__instanceof(data,openfl_utils_ByteArrayData)) {
			this.__data = data;
		} else {
			var this1 = new openfl_utils_ByteArrayData(0);
			this.__data = this1;
			this.__data.writeUTFBytes(Std.string(data));
		}
		var saveFileDialog = new lime_ui_FileDialog();
		saveFileDialog.onCancel.add($bind(this,this.saveFileDialog_onCancel));
		saveFileDialog.onSave.add($bind(this,this.saveFileDialog_onSave));
		saveFileDialog.save(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(this.__data),defaultFileName != null ? haxe_io_Path.extension(defaultFileName) : null,defaultFileName);
	}
	,saveFileDialog_onCancel: function() {
		this.dispatchEvent(new openfl_events_Event("cancel"));
	}
	,saveFileDialog_onSave: function(path) {
		var _gthis = this;
		haxe_Timer.delay(function() {
			_gthis.dispatchEvent(new openfl_events_Event("complete"));
		},1);
	}
	,__class__: openfl_net_FileReference
});
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = ["openfl","net","NetConnection"];
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_net_NetConnection
});
var openfl_net_NetStream = function(connection,peerID) {
	openfl_events_EventDispatcher.call(this);
	this.__connection = connection;
	this.__video = window.document.createElement("video");
	this.__video.setAttribute("playsinline","");
	this.__video.setAttribute("webkit-playsinline","");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
	this.__video.addEventListener("loadedmetadata",$bind(this,this.video_onLoadMetaData),false);
};
$hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
openfl_net_NetStream.__name__ = ["openfl","net","NetStream"];
openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
openfl_net_NetStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	client: null
	,time: null
	,__connection: null
	,__video: null
	,__playStatus: function(code) {
		if(this.client != null) {
			try {
				var handler = this.client.onPlayStatus;
				handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadMetaData: function(event) {
		if(this.client != null) {
			try {
				var handler = this.client.onMetaData;
				handler({ width : this.__video.videoWidth, height : this.__video.videoHeight, duration : this.__video.duration});
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Start"}));
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		this.time = this.__video.currentTime;
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,__class__: openfl_net_NetStream
});
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = 1;
	if(request != null) {
		this.load(request);
	}
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,__httpRequest: null
	,load: function(request) {
		var _gthis = this;
		if(this.dataFormat == 0) {
			var httpRequest = new lime_net__$HTTPRequest_$openfl_$utils_$ByteArray();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.__dispatchStatus();
				_gthis.data = data;
				var event = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event);
			});
		} else {
			var httpRequest1 = new lime_net__$HTTPRequest_$String();
			this.__prepareRequest(httpRequest1,request);
			httpRequest1.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data1) {
				_gthis.__dispatchStatus();
				_gthis.data = data1;
				var event1 = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event1);
			});
		}
	}
	,__dispatchStatus: function() {
		var event = new openfl_events_HTTPStatusEvent("httpStatus",false,false,this.__httpRequest.responseStatus);
		event.responseURL = this.__httpRequest.uri;
		var headers = [];
		if(this.__httpRequest.enableResponseHeaders && this.__httpRequest.responseHeaders != null) {
			var _g = 0;
			var _g1 = this.__httpRequest.responseHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				headers.push(new openfl_net_URLRequestHeader(header.name,header.value));
			}
		}
		event.responseHeaders = headers;
		this.dispatchEvent(event);
	}
	,__prepareRequest: function(httpRequest,request) {
		this.__httpRequest = httpRequest;
		this.__httpRequest.uri = request.url;
		var _g = request.method;
		var tmp;
		switch(_g) {
		case "DELETE":
			tmp = "DELETE";
			break;
		case "HEAD":
			tmp = "HEAD";
			break;
		case "OPTIONS":
			tmp = "OPTIONS";
			break;
		case "POST":
			tmp = "POST";
			break;
		case "PUT":
			tmp = "PUT";
			break;
		default:
			tmp = "GET";
		}
		this.__httpRequest.method = tmp;
		if(request.data != null) {
			if(js_Boot.__instanceof(request.data,openfl_net_URLVariables)) {
				var fields = Reflect.fields(request.data);
				var _g1 = 0;
				while(_g1 < fields.length) {
					var field = fields[_g1];
					++_g1;
					var _this = this.__httpRequest.formData;
					var value = Reflect.field(request.data,field);
					if(__map_reserved[field] != null) {
						_this.setReserved(field,value);
					} else {
						_this.h[field] = value;
					}
				}
			} else if(js_Boot.__instanceof(request.data,haxe_io_Bytes)) {
				this.__httpRequest.data = request.data;
			} else {
				this.__httpRequest.data = haxe_io_Bytes.ofString(Std.string(request.data));
			}
		}
		this.__httpRequest.contentType = request.contentType;
		if(request.requestHeaders != null) {
			var _g11 = 0;
			var _g2 = request.requestHeaders;
			while(_g11 < _g2.length) {
				var header = _g2[_g11];
				++_g11;
				this.__httpRequest.headers.push(new lime_net_HTTPRequestHeader(header.name,header.value));
			}
		}
		this.__httpRequest.followRedirects = request.followRedirects;
		this.__httpRequest.timeout = request.idleTimeout | 0;
		this.__httpRequest.withCredentials = request.manageCookies;
		var userAgent = request.userAgent;
		if(userAgent == null) {
			userAgent = "Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) OpenFL/1.0";
		}
		this.__httpRequest.userAgent = request.userAgent;
		this.__httpRequest.enableResponseHeaders = true;
	}
	,httpRequest_onError: function(error) {
		this.__dispatchStatus();
		if(error == 403) {
			var event = new openfl_events_SecurityErrorEvent("securityError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		} else {
			var event1 = new openfl_events_IOErrorEvent("ioError");
			event1.text = Std.string(error);
			this.dispatchEvent(event1);
		}
	}
	,httpRequest_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_URLLoader
});
var openfl_net_URLRequest = function(url) {
	if(url != null) {
		this.url = url;
	}
	this.contentType = null;
	this.followRedirects = openfl_net_URLRequestDefaults.followRedirects;
	this.idleTimeout = openfl_net_URLRequestDefaults.idleTimeout > 0 ? openfl_net_URLRequestDefaults.idleTimeout : 30000;
	this.manageCookies = openfl_net_URLRequestDefaults.manageCookies;
	this.method = "GET";
	this.requestHeaders = [];
	this.userAgent = openfl_net_URLRequestDefaults.userAgent;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,followRedirects: null
	,idleTimeout: null
	,manageCookies: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestDefaults = function() { };
$hxClasses["openfl.net.URLRequestDefaults"] = openfl_net_URLRequestDefaults;
openfl_net_URLRequestDefaults.__name__ = ["openfl","net","URLRequestDefaults"];
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLVariables = function() { };
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,__class__: openfl_system_ApplicationDomain
};
var openfl_system_System = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = ["openfl","system","System"];
openfl_system_System.exit = function(code) {
	lime_system_System.exit(code);
};
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.loadFromName = function(path) {
	return lime_text_Font.loadFromName(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	__fromLimeFont: function(font) {
		this.__copyFrom(font);
	}
	,__class__: openfl_text_Font
});
var openfl_text_StaticText = function() {
	openfl_display_DisplayObject.call(this);
	this.__graphics = new openfl_display_Graphics(this);
};
$hxClasses["openfl.text.StaticText"] = openfl_text_StaticText;
openfl_text_StaticText.__name__ = ["openfl","text","StaticText"];
openfl_text_StaticText.__super__ = openfl_display_DisplayObject;
openfl_text_StaticText.prototype = $extend(openfl_display_DisplayObject.prototype,{
	text: null
	,__class__: openfl_text_StaticText
});
var openfl_text_TextField = function() {
	this.__forceCachedBitmapUpdate = false;
	this.__renderedOnCanvasWhileOnDOM = false;
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__mouseWheelEnabled = true;
	this.__text = "";
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	var this1 = this.__textEngine.textFormatRanges;
	var x = new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0);
	this1.data.push(x);
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
	this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
	this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
	this.addEventListener("keyDown",$bind(this,this.this_onKeyDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__interfaces__ = [openfl_display_IShaderDrawable];
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__displayAsPassword: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__mouseWheelEnabled: null
	,__offsetX: null
	,__offsetY: null
	,__selectionIndex: null
	,__showCursor: null
	,__symbol: null
	,__text: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,__renderedOnCanvasWhileOnDOM: null
	,__rawHtmlText: null
	,__forceCachedBitmapUpdate: null
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) - 1) {
			return null;
		}
		var rect = new openfl_geom_Rectangle();
		if(this.__getCharBoundaries(charIndex,rect)) {
			return rect;
		} else {
			return null;
		}
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			return -1;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				return group.startIndex;
			}
		}
		return 0;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		var endIndex = this.__caretIndex > this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		if(startIndex == endIndex && this.__textEngine.maxChars > 0 && lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) == this.__textEngine.maxChars) {
			return;
		}
		if(startIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			startIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		if(endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		if(endIndex < startIndex) {
			var cache = endIndex;
			endIndex = startIndex;
			startIndex = cache;
		}
		if(startIndex < 0) {
			startIndex = 0;
		}
		this.replaceText(startIndex,endIndex,value);
		var i = startIndex + lime_text__$UTF8String_UTF8String_$Impl_$.get_length(js_Boot.__cast(value , String));
		if(i > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			i = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		this.setSelection(i,i);
		this.__updateScrollH();
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) || newText == null) {
			return;
		}
		this.__updateText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,0,beginIndex) + newText + lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,endIndex));
		if(endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.data.get_length()) {
			range = this.__textEngine.textFormatRanges.data.get(i);
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				++i;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				if(i > 0) {
					new openfl__$Vector_AbstractVector(this.__textEngine.textFormatRanges.data.splice(i,1));
				} else {
					range.start = 0;
					range.end = beginIndex + newText.length;
					++i;
				}
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				++i;
			} else {
				++i;
			}
		}
		this.__updateScrollH();
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
		this.__stopCursorTimer();
		this.__startCursorTimer();
	}
	,__allowMouseFocus: function() {
		if(!(this.__textEngine.type == 1 || this.get_tabEnabled())) {
			return this.get_selectable();
		} else {
			return true;
		}
	}
	,__caretBeginningOfLine: function() {
		if(this.__selectionIndex == this.__caretIndex || this.__caretIndex < this.__selectionIndex) {
			this.__caretIndex = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex));
		} else {
			this.__selectionIndex = this.getLineOffset(this.getLineIndexOfChar(this.__selectionIndex));
		}
	}
	,__caretEndOfLine: function() {
		var lineIndex;
		if(this.__selectionIndex == this.__caretIndex) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		} else {
			lineIndex = this.getLineIndexOfChar(Math.max(this.__caretIndex,this.__selectionIndex) | 0);
		}
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.getLineOffset(lineIndex + 1) - 1;
		} else {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
	}
	,__caretNextCharacter: function() {
		if(this.__caretIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			this.__caretIndex++;
		}
	}
	,__caretNextLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		}
		if(lineIndex < this.__textEngine.numLines - 1) {
			if(caretIndex == null) {
				caretIndex = this.__caretIndex;
			}
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex + 1);
		} else {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
	}
	,__caretPreviousCharacter: function() {
		if(this.__caretIndex > 0) {
			this.__caretIndex--;
		}
	}
	,__caretPreviousLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		}
		if(lineIndex > 0) {
			if(caretIndex == null) {
				caretIndex = this.__caretIndex;
			}
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex - 1);
		} else {
			this.__caretIndex = 0;
		}
	}
	,__disableInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__dispatch: function(event) {
		if(event.eventPhase == 2 && event.type == "mouseUp") {
			var event1 = event;
			var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
			if(group != null) {
				var url = group.format.url;
				if(url != null && url != "") {
					if(StringTools.startsWith(url,"event:")) {
						this.dispatchEvent(new openfl_events_TextEvent("link",false,false,HxOverrides.substr(url,6,null)));
					} else {
						openfl_Lib.getURL(new openfl_net_URLRequest(url));
					}
				}
			}
		}
		return openfl_display_InteractiveObject.prototype.__dispatch.call(this,event);
	}
	,__enableInput: function() {
		if(this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.backend.setEnableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		this.set_width(symbol.width);
		this.set_height(symbol.height);
		this.__offsetX = symbol.x;
		this.__offsetY = symbol.y;
		this.set_multiline(symbol.multiline);
		this.set_wordWrap(symbol.wordWrap);
		this.set_displayAsPassword(symbol.password);
		if(symbol.border) {
			this.set_border(true);
			this.set_background(true);
		}
		this.set_selectable(symbol.selectable);
		if(symbol.input) {
			this.set_type(1);
		}
		var format = new openfl_text_TextFormat();
		if(symbol.color != null) {
			format.color = symbol.color & 16777215;
		}
		format.size = Math.round(symbol.fontHeight / 20);
		var font = swf.symbols.h[symbol.fontID];
		if(font != null) {
			format.__ascent = font.ascent / 20 / 1024;
			format.__descent = font.descent / 20 / 1024;
		}
		format.font = symbol.fontName;
		var found = false;
		var _g = format.font;
		if(_g == null) {
			found = true;
		} else {
			switch(_g) {
			case "":case "_sans":case "_serif":case "_typewriter":
				found = true;
				break;
			default:
				var _g1 = 0;
				var _g11 = openfl_text_Font.enumerateFonts();
				while(_g1 < _g11.length) {
					var font1 = _g11[_g1];
					++_g1;
					if(font1.name == format.font) {
						found = true;
						break;
					}
				}
			}
		}
		if(!found) {
			var alpha_r = new RegExp("[^a-zA-Z]+","g".split("u").join(""));
			var _g12 = 0;
			var _g2 = openfl_text_Font.enumerateFonts();
			while(_g12 < _g2.length) {
				var font2 = _g2[_g12];
				++_g12;
				if(HxOverrides.substr(font2.name.replace(alpha_r,""),0,symbol.fontName.length) == symbol.fontName) {
					format.font = font2.name;
					found = true;
					break;
				}
			}
		}
		if(found) {
			this.set_embedFonts(true);
		} else {
			var key = format.font;
			var _this = openfl_text_TextField.__missingFontWarning;
			if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
				var k = format.font;
				var _this1 = openfl_text_TextField.__missingFontWarning;
				if(__map_reserved[k] != null) {
					_this1.setReserved(k,true);
				} else {
					_this1.h[k] = true;
				}
				lime_utils_Log.warn("Could not find required font \"" + format.font + "\", it has not been embedded",{ fileName : "TextField.hx", lineNumber : 1093, className : "openfl.text.TextField", methodName : "__fromSymbol"});
			}
		}
		if(symbol.align != null) {
			if(symbol.align == "center") {
				format.align = 0;
			} else if(symbol.align == "right") {
				format.align = 4;
			} else if(symbol.align == "justify") {
				format.align = 2;
			}
			format.leftMargin = symbol.leftMargin / 20 | 0;
			format.rightMargin = symbol.rightMargin / 20 | 0;
			format.indent = symbol.indent / 20 | 0;
			format.leading = symbol.leading / 20 | 0;
		}
		this.set_defaultTextFormat(format);
		if(symbol.text != null) {
			if(symbol.html) {
				this.set_htmlText(symbol.text);
			} else {
				this.set_text(symbol.text);
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.copyFrom(this.__textEngine.bounds);
		bounds.x += this.__offsetX;
		bounds.y += this.__offsetY;
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getCharBoundaries: function(charIndex,rect) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) - 1) {
			return false;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				try {
					var x = group.offsetX;
					var _g3 = 0;
					var _g2 = charIndex - group.startIndex;
					while(_g3 < _g2) {
						var i = _g3++;
						x += group.positions[i];
					}
					var lastPosition = group.positions[charIndex - group.startIndex];
					rect.setTo(x,group.offsetY,lastPosition,group.ascent + group.descent);
					return true;
				} catch( e ) {
					haxe_CallStack.lastException = e;
				}
			}
		}
		return false;
	}
	,__getCharIndexOnDifferentLine: function(charIndex,lineIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			return -1;
		}
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var x = null;
		var y = null;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.data.get_length()) {
			var group = _g1.data.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) {
					var i = _g3++;
					x += group.positions[i];
				}
				if(y != null) {
					return this.__getPosition(x,y);
				}
			}
			if(group.lineIndex == lineIndex) {
				y = group.offsetY + group.height / 2;
				if(x != null) {
					return this.__getPosition(x,y);
				}
			}
		}
		return -1;
	}
	,__getCursor: function() {
		var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
		if(group != null && group.format.url != "") {
			return lime_ui_MouseCursor.POINTER;
		} else if(this.__textEngine.selectable) {
			return lime_ui_MouseCursor.TEXT;
		}
		return null;
	}
	,__getGroup: function(x,y,precise) {
		if(precise == null) {
			precise = false;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.data.get(i);
		}
		if(!precise && y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.data.get_length();
		while(_g11 < _g2) {
			var i1 = _g11++;
			group = this.__textEngine.layoutGroups.data.get(i1);
			if(i1 < this.__textEngine.layoutGroups.data.get_length() - 1) {
				nextGroup = this.__textEngine.layoutGroups.data.get(i1 + 1);
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || !precise && nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || !precise && (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					return group;
				}
			}
		}
		return null;
	}
	,__getPosition: function(x,y) {
		var group = this.__getGroup(x,y);
		if(group == null) {
			return lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		var advance = 0.0;
		var _g1 = 0;
		var _g = group.positions.length;
		while(_g1 < _g) {
			var i = _g1++;
			advance += group.positions[i];
			if(x <= group.offsetX + advance) {
				if(x <= group.offsetX + (advance - group.positions[i]) + group.positions[i] / 2) {
					return group.startIndex + i;
				} else if(group.startIndex + i < group.endIndex) {
					return group.startIndex + i + 1;
				} else {
					return group.endIndex;
				}
			}
		}
		return group.endIndex;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(renderSession.renderType == lime_graphics_RendererType.DOM && !this.__renderedOnCanvasWhileOnDOM) {
			this.__renderedOnCanvasWhileOnDOM = true;
			if(this.get_type() == 1) {
				this.replaceText(0,lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text),this.__text);
			}
			if(this.__isHTML) {
				this.__updateText(openfl__$internal_text_HTMLParser.parse(this.__text,this.__textFormat,this.__textEngine.textFormatRanges));
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		var transform = this.__worldTransform;
		var textEngine = this.__textEngine;
		var bounds = textEngine.bounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update();
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				var transform1 = graphics.__renderTransform;
				if(renderSession.renderType == lime_graphics_RendererType.DOM) {
					var scale = openfl__$internal_renderer_canvas_CanvasRenderer.scale;
					graphics.__canvas.width = width * scale | 0;
					graphics.__canvas.height = height * scale | 0;
					graphics.__canvas.style.width = width + "px";
					graphics.__canvas.style.height = height + "px";
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a * scale,transform1.b * scale,transform1.c * scale,transform1.d * scale,transform1.tx * scale,transform1.ty * scale);
				} else {
					graphics.__canvas.width = width;
					graphics.__canvas.height = height;
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
					openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) {
						var i = _g1++;
						scrollY -= textEngine.lineHeights.data.get(i);
					}
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.data.get_length()) {
						var group = _g11.data.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						if(group.format.underline) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#000000";
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = .5;
							var x = group.offsetX + scrollX;
							var y = group.offsetY + offsetY + scrollY + group.ascent;
							openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						var tmp2 = StringTools.hex(group.format.color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						if(this.__filters != null && this.__filters.length > 0) {
							if(js_Boot.__instanceof(this.__filters[0],openfl_filters_GlowFilter)) {
								var glowFilter = this.__filters[0];
								var cacheAlpha = openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha;
								var tmp3 = glowFilter.get_alpha();
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha * tmp3;
								var tmp4 = StringTools.hex(glowFilter.get_color() & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
								var tmp5 = glowFilter.get_blurX();
								var tmp6 = glowFilter.get_blurY();
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = Math.max(tmp5,tmp6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = null;
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha;
							}
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i1 = _g3++;
										if(group.positions.length <= i1) {
											break;
										}
										advance += group.positions[i1];
									}
									var scrollY1 = 0.0;
									var _g31 = this.get_scrollV();
									var _g22 = group.lineIndex + 1;
									while(_g31 < _g22) {
										var i2 = _g31++;
										scrollY1 += textEngine.lineHeights.data.get(i2 - 1);
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
									var tmp7 = StringTools.hex(group.format.color & 16777215,6);
									openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp7;
									openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group.offsetX + advance - this.get_scrollH(),scrollY1 + 2);
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group.offsetX + advance - this.get_scrollH(),scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
									openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
									openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex || group.startIndex > this.__caretIndex && group.endIndex < this.__selectionIndex || group.startIndex > this.__selectionIndex && group.endIndex < this.__caretIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
									end = this.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							var tmp8 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp8;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							var tmp9 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp9;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY2 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) {
							var i3 = _g12++;
							scrollY2 += textEngine.lineHeights.data.get(i3);
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						var tmp10 = StringTools.hex(this.get_defaultTextFormat().color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp10;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else {
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
		this.__updateCacheBitmap(renderSession,this.__forceCachedBitmapUpdate || !this.__worldColorTransform.__isDefault());
		this.__forceCachedBitmapUpdate = false;
		if(this.__cacheBitmap != null && !this.__cacheBitmapRender) {
			this.__renderDOMClear(renderSession);
			this.__cacheBitmap.stage = this.stage;
			var bitmap = this.__cacheBitmap;
			if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				renderSession.maskManager.pushObject(bitmap);
				if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
				}
				renderSession.maskManager.popObject(bitmap);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderSession);
			}
		} else {
			if(this.__renderedOnCanvasWhileOnDOM) {
				this.__renderedOnCanvasWhileOnDOM = false;
				if(this.__isHTML && this.__rawHtmlText != null) {
					this.__updateText(this.__rawHtmlText);
					this.__dirty = true;
					this.__layoutDirty = true;
					if(!this.__renderDirty) {
						this.__renderDirty = true;
						this.__setParentRenderDirty();
					}
				}
			}
			var textField = this;
			var textEngine = textField.__textEngine;
			if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
				if(textField.__dirty || textField.__renderTransformChanged || textField.__div == null) {
					if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
						if(textField.__div == null) {
							textField.__div = window.document.createElement("div");
							openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
							textField.__style.setProperty("outline","none",null);
							textField.__div.addEventListener("input",function(event) {
								event.preventDefault();
								if(textField.get_htmlText() != textField.__div.innerHTML) {
									textField.set_htmlText(textField.__div.innerHTML);
									var textField1 = textField.__displayAsPassword;
									textField.__dirty = false;
								}
							},true);
						}
						if(!textEngine.wordWrap) {
							textField.__style.setProperty("white-space","nowrap",null);
						} else {
							textField.__style.setProperty("word-wrap","break-word",null);
						}
						textField.__style.setProperty("overflow","hidden",null);
						if(textEngine.selectable) {
							textField.__style.setProperty("cursor","text",null);
							textField.__style.setProperty("-webkit-user-select","text",null);
							textField.__style.setProperty("-moz-user-select","text",null);
							textField.__style.setProperty("-ms-user-select","text",null);
							textField.__style.setProperty("-o-user-select","text",null);
						} else {
							textField.__style.setProperty("cursor","inherit",null);
						}
						textField.__div.contentEditable = textEngine.type == 1;
						var style = textField.__style;
						if(textEngine.background) {
							style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor & 16777215,6),null);
						} else {
							style.removeProperty("background-color");
						}
						var w = textEngine.width;
						var h = textEngine.height;
						var scale = 1;
						var unscaledSize = textField.__textFormat.size;
						var scaledSize = unscaledSize;
						var t = textField.__renderTransform;
						if(t.a != 1.0 || t.d != 1.0) {
							if(t.a == t.d) {
								scale = t.a;
								t.a = t.d = 1.0;
							} else if(t.a > t.d) {
								scale = t.a;
								t.d /= t.a;
								t.a = 1.0;
							} else {
								scale = t.d;
								t.a /= t.d;
								t.d = 1.0;
							}
							scaledSize *= scale;
							w = Math.ceil(w * scale);
							h = Math.ceil(h * scale);
						}
						textField.__textFormat.size = scaledSize;
						var text = textEngine.text;
						var adjustment = 0;
						if(!textField.__isHTML) {
							text = StringTools.htmlEscape(text);
						} else {
							var matchText = text;
							while(openfl__$internal_renderer_dom_DOMTextField.__regexFont.match(matchText)) {
								var fontText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matched(0);
								var style1 = "";
								if(openfl__$internal_renderer_dom_DOMTextField.__regexFace.match(fontText)) {
									style1 += "font-family:'" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexFace) + "';";
								}
								if(openfl__$internal_renderer_dom_DOMTextField.__regexColor.match(fontText)) {
									style1 += "color:#" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexColor) + ";";
								}
								if(openfl__$internal_renderer_dom_DOMTextField.__regexSize.match(fontText)) {
									var sizeAttr = openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexSize);
									var firstChar = HxOverrides.cca(sizeAttr,0);
									var size;
									adjustment = parseFloat(sizeAttr) * scale;
									if(firstChar == 43 || firstChar == 45) {
										size = scaledSize + adjustment;
									} else {
										size = adjustment;
									}
									style1 += "font-size:" + size + "px;";
								}
								text = StringTools.replace(text,fontText,"<span style='" + style1 + "'>");
								matchText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matchedRight();
							}
							text = text.replace(openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont.r,"</span>");
						}
						text = StringTools.replace(text,"<p ","<p style='margin-top:0; margin-bottom:0;' ");
						var unscaledLeading = textField.__textFormat.leading;
						textField.__textFormat.leading += adjustment | 0;
						var _this_r = new RegExp("\r\n","g".split("u").join(""));
						var tmp = text.replace(_this_r,"<br>");
						textField.__div.innerHTML = tmp;
						var _this_r1 = new RegExp("\n","g".split("u").join(""));
						var tmp1 = textField.__div.innerHTML.replace(_this_r1,"<br>");
						textField.__div.innerHTML = tmp1;
						var _this_r2 = new RegExp("\r","g".split("u").join(""));
						var tmp2 = textField.__div.innerHTML.replace(_this_r2,"<br>");
						textField.__div.innerHTML = tmp2;
						style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
						textField.__textFormat.size = unscaledSize;
						textField.__textFormat.leading = unscaledLeading;
						style.setProperty("top","3px",null);
						if(textEngine.border) {
							style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor & 16777215,6),null);
							textField.__renderTransform.translate(-1,-1);
							textField.__renderTransformChanged = true;
							textField.__transformDirty = true;
						} else if(style.border != "") {
							style.removeProperty("border");
							textField.__renderTransformChanged = true;
						}
						style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color & 16777215,6),null);
						style.setProperty("width",w + "px",null);
						style.setProperty("height",h + "px",null);
						var _g = textField.__textFormat.align;
						switch(_g) {
						case 0:
							style.setProperty("text-align","center",null);
							break;
						case 4:
							style.setProperty("text-align","right",null);
							break;
						default:
							style.setProperty("text-align","left",null);
						}
						textField.__dirty = false;
					} else if(textField.__div != null) {
						renderSession.element.removeChild(textField.__div);
						textField.__div = null;
					}
				}
				if(textField.__div != null) {
					var old = renderSession.roundPixels;
					renderSession.roundPixels = true;
					openfl__$internal_renderer_dom_DOMRenderer.updateClip(textField,renderSession);
					openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,true);
					renderSession.roundPixels = old;
				}
			} else {
				openfl__$internal_renderer_dom_DOMTextField.clear(textField,renderSession);
			}
		}
	}
	,__renderDOMClear: function(renderSession) {
		openfl__$internal_renderer_dom_DOMTextField.clear(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		var transform = this.__worldTransform;
		var textEngine = this.__textEngine;
		var bounds = textEngine.bounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update();
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				var transform1 = graphics.__renderTransform;
				if(renderSession.renderType == lime_graphics_RendererType.DOM) {
					var scale = openfl__$internal_renderer_canvas_CanvasRenderer.scale;
					graphics.__canvas.width = width * scale | 0;
					graphics.__canvas.height = height * scale | 0;
					graphics.__canvas.style.width = width + "px";
					graphics.__canvas.style.height = height + "px";
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a * scale,transform1.b * scale,transform1.c * scale,transform1.d * scale,transform1.tx * scale,transform1.ty * scale);
				} else {
					graphics.__canvas.width = width;
					graphics.__canvas.height = height;
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
					openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) {
						var i = _g1++;
						scrollY -= textEngine.lineHeights.data.get(i);
					}
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.data.get_length()) {
						var group = _g11.data.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						if(group.format.underline) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#000000";
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = .5;
							var x = group.offsetX + scrollX;
							var y = group.offsetY + offsetY + scrollY + group.ascent;
							openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						var tmp2 = StringTools.hex(group.format.color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						if(this.__filters != null && this.__filters.length > 0) {
							if(js_Boot.__instanceof(this.__filters[0],openfl_filters_GlowFilter)) {
								var glowFilter = this.__filters[0];
								var cacheAlpha = openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha;
								var tmp3 = glowFilter.get_alpha();
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha * tmp3;
								var tmp4 = StringTools.hex(glowFilter.get_color() & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
								var tmp5 = glowFilter.get_blurX();
								var tmp6 = glowFilter.get_blurY();
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = Math.max(tmp5,tmp6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = null;
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha;
							}
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i1 = _g3++;
										if(group.positions.length <= i1) {
											break;
										}
										advance += group.positions[i1];
									}
									var scrollY1 = 0.0;
									var _g31 = this.get_scrollV();
									var _g22 = group.lineIndex + 1;
									while(_g31 < _g22) {
										var i2 = _g31++;
										scrollY1 += textEngine.lineHeights.data.get(i2 - 1);
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
									var tmp7 = StringTools.hex(group.format.color & 16777215,6);
									openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp7;
									openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group.offsetX + advance - this.get_scrollH(),scrollY1 + 2);
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group.offsetX + advance - this.get_scrollH(),scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
									openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
									openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex || group.startIndex > this.__caretIndex && group.endIndex < this.__selectionIndex || group.startIndex > this.__selectionIndex && group.endIndex < this.__caretIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
									end = this.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							var tmp8 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp8;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							var tmp9 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp9;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY2 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) {
							var i3 = _g12++;
							scrollY2 += textEngine.lineHeights.data.get(i3);
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						var tmp10 = StringTools.hex(this.get_defaultTextFormat().color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp10;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
	}
	,__renderGLMask: function(renderSession) {
		var transform = this.__worldTransform;
		var textEngine = this.__textEngine;
		var bounds = textEngine.bounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update();
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				var transform1 = graphics.__renderTransform;
				if(renderSession.renderType == lime_graphics_RendererType.DOM) {
					var scale = openfl__$internal_renderer_canvas_CanvasRenderer.scale;
					graphics.__canvas.width = width * scale | 0;
					graphics.__canvas.height = height * scale | 0;
					graphics.__canvas.style.width = width + "px";
					graphics.__canvas.style.height = height + "px";
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a * scale,transform1.b * scale,transform1.c * scale,transform1.d * scale,transform1.tx * scale,transform1.ty * scale);
				} else {
					graphics.__canvas.width = width;
					graphics.__canvas.height = height;
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
					openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) {
						var i = _g1++;
						scrollY -= textEngine.lineHeights.data.get(i);
					}
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.data.get_length()) {
						var group = _g11.data.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						if(group.format.underline) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#000000";
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = .5;
							var x = group.offsetX + scrollX;
							var y = group.offsetY + offsetY + scrollY + group.ascent;
							openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						var tmp2 = StringTools.hex(group.format.color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						if(this.__filters != null && this.__filters.length > 0) {
							if(js_Boot.__instanceof(this.__filters[0],openfl_filters_GlowFilter)) {
								var glowFilter = this.__filters[0];
								var cacheAlpha = openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha;
								var tmp3 = glowFilter.get_alpha();
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha * tmp3;
								var tmp4 = StringTools.hex(glowFilter.get_color() & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
								var tmp5 = glowFilter.get_blurX();
								var tmp6 = glowFilter.get_blurY();
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = Math.max(tmp5,tmp6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = null;
								openfl__$internal_renderer_canvas_CanvasTextField.context.globalAlpha = cacheAlpha;
							}
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i1 = _g3++;
										if(group.positions.length <= i1) {
											break;
										}
										advance += group.positions[i1];
									}
									var scrollY1 = 0.0;
									var _g31 = this.get_scrollV();
									var _g22 = group.lineIndex + 1;
									while(_g31 < _g22) {
										var i2 = _g31++;
										scrollY1 += textEngine.lineHeights.data.get(i2 - 1);
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
									var tmp7 = StringTools.hex(group.format.color & 16777215,6);
									openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp7;
									openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group.offsetX + advance - this.get_scrollH(),scrollY1 + 2);
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group.offsetX + advance - this.get_scrollH(),scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
									openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
									openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex || group.startIndex > this.__caretIndex && group.endIndex < this.__selectionIndex || group.startIndex > this.__selectionIndex && group.endIndex < this.__caretIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
									end = this.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							var tmp8 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp8;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							var tmp9 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp9;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY2 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) {
							var i3 = _g12++;
							scrollY2 += textEngine.lineHeights.data.get(i3);
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						var tmp10 = StringTools.hex(this.get_defaultTextFormat().color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp10;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		openfl_display_InteractiveObject.prototype.__renderGLMask.call(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
			this.__selectionIndex = this.__caretIndex;
		}
		var enableInput = openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true;
		if(enableInput) {
			this.__enableInput();
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__stopTextInput: function() {
		var disableInput = openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true;
		if(disableInput) {
			this.__disableInput();
		}
	}
	,__updateCacheBitmap: function(renderSession,force) {
		if(openfl_display_InteractiveObject.prototype.__updateCacheBitmap.call(this,renderSession,force)) {
			if(this.__cacheBitmap != null) {
				this.__cacheBitmap.__renderTransform.tx -= this.__offsetX;
				this.__cacheBitmap.__renderTransform.ty -= this.__offsetY;
			}
			return true;
		}
		return false;
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			var cacheWidth = this.__textEngine.width;
			var cacheHeight = this.__textEngine.height;
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(this.__textEngine.width != cacheWidth) {
					var _g = this.__textEngine.autoSize;
					switch(_g) {
					case 0:
						var _g1 = this;
						_g1.set_x(_g1.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					case 3:
						var _g2 = this;
						_g2.set_x(_g2.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,__updateScrollH: function() {
		if(!this.get_multiline() && this.get_type() == 1) {
			this.__layoutDirty = true;
			this.__updateLayout();
			var offsetX = this.__textEngine.textWidth - this.__textEngine.width + 4;
			if(offsetX > 0) {
				if(this.__caretIndex >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text())) {
					this.set_scrollH(Math.ceil(offsetX));
				} else {
					var caret = openfl_geom_Rectangle.__pool.get();
					this.__getCharBoundaries(this.__caretIndex,caret);
					if(caret.x < this.get_scrollH()) {
						this.set_scrollH(Math.floor(caret.x - 2));
					} else if(caret.x > this.get_scrollH() + this.__textEngine.width) {
						this.set_scrollH(Math.ceil(caret.x - this.__textEngine.width - 2));
					}
					openfl_geom_Rectangle.__pool.release(caret);
				}
			} else {
				this.set_scrollH(0);
			}
		}
	}
	,__updateText: function(value) {
		if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
			this.__forceCachedBitmapUpdate = this.__text != value;
		}
		this.__textEngine.set_text(value);
		this.__text = this.__textEngine.text;
		if(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) < this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		if(!this.__displayAsPassword || openfl_display_DisplayObject.__supportDOM && !this.__renderedOnCanvasWhileOnDOM) {
			this.__textEngine.set_text(this.__text);
		} else {
			var length = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text());
			var mask = "";
			var _g1 = 0;
			var _g = length;
			while(_g1 < _g) {
				var i = _g1++;
				mask += "*";
			}
			this.__textEngine.set_text(mask);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		var _this = this.__renderTransform;
		var px = this.__offsetX;
		var py = this.__offsetY;
		_this.tx = px * _this.a + py * _this.c + _this.tx;
		_this.ty = px * _this.b + py * _this.d + _this.ty;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.autoSize = value;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.background = value;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.border = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters != null && this.__filters.length == 1 && js_Boot.__instanceof(this.__filters[0],openfl_filters_GlowFilter)) {
			return false;
		}
		return openfl_display_InteractiveObject.prototype.get_cacheAsBitmap.call(this);
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		if(value != this.__textEngine.height) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.height = value;
		}
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__isHTML = true;
		if(openfl_display_DisplayObject.__supportDOM) {
			this.__rawHtmlText = value;
		}
		value = openfl__$internal_text_HTMLParser.parse(value,this.__textFormat,this.__textEngine.textFormatRanges);
		if(openfl_display_DisplayObject.__supportDOM) {
			if(this.__textEngine.textFormatRanges.data.get_length() > 1) {
				var this1 = this.__textEngine.textFormatRanges;
				var len = this.__textEngine.textFormatRanges.data.get_length() - 1;
				new openfl__$Vector_AbstractVector(this1.data.splice(1,len));
			}
			var range = this.__textEngine.textFormatRanges.data.get(0);
			range.format = this.__textFormat;
			range.start = 0;
			if(this.__renderedOnCanvasWhileOnDOM) {
				range.end = value.length;
				this.__updateText(value);
			} else {
				range.end = this.__rawHtmlText.length;
				this.__updateText(this.__rawHtmlText);
			}
		} else {
			this.__updateText(value);
		}
		return value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__updateText(this.__text);
			this.__updateScrollH();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.multiline = value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) {
			value = this.__textEngine.maxScrollH;
		}
		if(value < 0) {
			value = 0;
		}
		if(value != this.__textEngine.scrollH) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__textEngine.type == 1;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.data.get_length() > 1) {
			var this1 = this.__textEngine.textFormatRanges;
			var len = this.__textEngine.textFormatRanges.data.get_length() - 1;
			new openfl__$Vector_AbstractVector(this1.data.splice(1,len));
		}
		var utfValue = value;
		var range = this.__textEngine.textFormatRanges.data.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(utfValue);
		this.__isHTML = false;
		this.__updateText(value);
		return value;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
				this.__textEngine.__useIntAdvances = true;
			} else {
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
				this.__textEngine.__useIntAdvances = null;
			}
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		if(value != this.__textEngine.width) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.width = value;
		}
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.wordWrap = value;
	}
	,get_x: function() {
		return this.__transform.tx + this.__offsetX;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx + this.__offsetX) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value - this.__offsetX;
	}
	,get_y: function() {
		return this.__transform.ty + this.__offsetY;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty + this.__offsetY) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value - this.__offsetY;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				if(openfl_display_DisplayObject.__supportDOM) {
					if(this.__renderedOnCanvasWhileOnDOM) {
						this.__forceCachedBitmapUpdate = true;
					}
				} else {
					this.__dirty = true;
					if(!this.__renderDirty) {
						this.__renderDirty = true;
						this.__setParentRenderDirty();
					}
				}
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) {
			return;
		}
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var _this = this.__worldTransform;
			var px = this.get_x();
			var py = this.get_y();
			var norm = _this.a * _this.d - _this.b * _this.c;
			var px1 = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - py) + _this.d * (px - _this.tx));
			var _this1 = this.__worldTransform;
			var px2 = this.get_x();
			var py1 = this.get_y();
			var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
			var py2 = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (py1 - _this1.ty) + _this1.b * (_this1.tx - px2));
			var upPos = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Math.min(this.__selectionIndex,upPos) | 0;
			rightPos = Math.max(this.__selectionIndex,upPos) | 0;
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
				if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
					this.__forceCachedBitmapUpdate = true;
				}
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopCursorTimer();
		if(event.relatedObject == null || !js_Boot.__instanceof(event.relatedObject,openfl_text_TextField)) {
			this.__stopTextInput();
		} else {
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
		}
		if(this.__selectionIndex != this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,this_onKeyDown: function(event) {
		if(this.get_selectable() && this.get_type() != 1 && event.keyCode == 67 && (event.commandKey || event.ctrlKey)) {
			if(this.__caretIndex != this.__selectionIndex) {
				lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
			}
		}
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable() && this.get_type() != 1) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		if(!openfl_display_DisplayObject.__supportDOM) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 97:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
				this.__selectionIndex = 0;
			}
			break;
		case 99:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
				}
			}
			break;
		case 120:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741898:
			this.__caretBeginningOfLine();
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741901:
			this.__caretEndOfLine();
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741903:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
				this.__caretEndOfLine();
				if(!lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
			} else if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__caretNextCharacter();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretNextCharacter();
				} else {
					this.__caretIndex = Math.max(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__updateScrollH();
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741904:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
				this.__caretBeginningOfLine();
				if(!lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
			} else if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__caretPreviousCharacter();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretPreviousCharacter();
				} else {
					this.__caretIndex = Math.min(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__updateScrollH();
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741905:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__caretNextLine();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretNextLine();
				} else {
					var lineIndex = this.getLineIndexOfChar(Math.max(this.__caretIndex,this.__selectionIndex) | 0);
					this.__caretNextLine(lineIndex,Math.min(this.__caretIndex,this.__selectionIndex) | 0);
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741906:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				this.__caretPreviousLine();
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					this.__caretPreviousLine();
				} else {
					var lineIndex1 = this.getLineIndexOfChar(Math.min(this.__caretIndex,this.__selectionIndex) | 0);
					this.__caretPreviousLine(lineIndex1,Math.min(this.__caretIndex,this.__selectionIndex) | 0);
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 13:case 1073741912:
			if(this.__textEngine.multiline) {
				this.replaceSelectedText("\n");
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
});
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,__ascent: null
	,__descent: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		newFormat.__ascent = this.__ascent;
		newFormat.__descent = this.__descent;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null && format.url != "") {
			this.url = format.url;
		}
		if(format.url == "" && this.url == null) {
			this.url = "";
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
		if(format.__ascent != null) {
			this.__ascent = format.__ascent;
		}
		if(format.__descent != null) {
			this.__descent = format.__descent;
		}
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = {};
$hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = ["openfl","text","_TextFormatAlign","TextFormatAlign_Impl_"];
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
		var devices = lime_ui_Joystick.__getDeviceData();
		var device = devices[gamepad.id].id;
		var devices1 = lime_ui_Joystick.__getDeviceData();
		var device1 = new openfl_ui_GameInputDevice(device,devices1[gamepad.id].id);
		openfl_ui_GameInput.__deviceList.push(device1);
		openfl_ui_GameInput.__devices.set(gamepad,device1);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control;
			switch(axis) {
			case 0:
				control = "LEFT_X";
				break;
			case 1:
				control = "LEFT_Y";
				break;
			case 2:
				control = "RIGHT_X";
				break;
			case 3:
				control = "RIGHT_Y";
				break;
			case 4:
				control = "TRIGGER_LEFT";
				break;
			case 5:
				control = "TRIGGER_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + axis + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + control,-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__axis.h[axis];
		control2.value = value;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__button.h[button];
		control2.value = 1;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__button.h[button];
		control2.value = 0;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.h[gamepad.__id__]);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(type == "deviceAdded") {
			var _g = 0;
			var _g1 = openfl_ui_GameInput.__deviceList;
			while(_g < _g1.length) {
				var device = _g1[_g];
				++_g;
				this.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
			}
		}
	}
	,__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,__axis: null
	,__button: null
	,__controls: null
	,__class__: openfl_ui_GameInputDevice
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
var openfl_utils_IAssetCache = function() { };
$hxClasses["openfl.utils.IAssetCache"] = openfl_utils_IAssetCache;
openfl_utils_IAssetCache.__name__ = ["openfl","utils","IAssetCache"];
openfl_utils_IAssetCache.prototype = {
	get_enabled: null
	,getBitmapData: null
	,hasBitmapData: null
	,removeBitmapData: null
	,setBitmapData: null
	,__class__: openfl_utils_IAssetCache
};
var openfl_utils_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils.AssetCache"] = openfl_utils_AssetCache;
openfl_utils_AssetCache.__name__ = ["openfl","utils","AssetCache"];
openfl_utils_AssetCache.__interfaces__ = [openfl_utils_IAssetCache];
openfl_utils_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,getBitmapData: function(id) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,hasBitmapData: function(id) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,removeBitmapData: function(id) {
		lime_utils_Assets.cache.image.remove(id);
		return this.bitmapData.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bitmapData);
		} else {
			_this.h[id] = bitmapData;
		}
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,__class__: openfl_utils_AssetCache
};
var openfl_utils_Assets = function() { };
$hxClasses["openfl.utils.Assets"] = openfl_utils_Assets;
openfl_utils_Assets.__name__ = ["openfl","utils","Assets"];
openfl_utils_Assets.exists = function(id,type) {
	return lime_utils_Assets.exists(id,type);
};
openfl_utils_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			return bitmapData;
		}
	}
	var image = lime_utils_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setBitmapData(id,bitmapData1);
		}
		return bitmapData1;
	}
	return null;
};
openfl_utils_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	if(js_Boot.__instanceof(bytes,openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	__class__: openfl_utils_IDataOutput
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	__class__: openfl_utils_IDataInput
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	this.__endian = openfl_utils_ByteArrayData.__defaultEndian;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	position: null
	,__endian: null
	,__length: null
	,readUnsignedByte: function() {
		if(this.position < this.length) {
			return this.b[this.position++];
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) == 0) {
			return;
		}
		if(length == 0) {
			length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeUTFBytes: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(haxe_io_Bytes.ofString(value)));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			if(this.__length > 0) {
				var cacheLength = this.length;
				this.length = this.__length;
				bytes.blit(0,this,0,this.__length);
				this.length = cacheLength;
			}
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
		}
		if(this.length < size) {
			this.length = size;
		}
	}
	,__class__: openfl_utils_ByteArrayData
});
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
var init = lime__$backend_html5_HTML5Application;
var init = lime_app_Application;
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [{ name : "__ASSET__:bitmap_Picture", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQWZRQUFBSDBDQVlBQUFETDF0K0tBQUFBQ1hCSVdYTUFBQjdDQUFBZXdnRnUwSFUrQUFVbUYwbEVRVlI0WG5UOUM2OXNXWEllaU1XS1dEdnozS3Ara00zcEZpVmFNaUdaa2ppR2JVSGpNV3dEL2pmK0dmUGZESXdCR3g1WTBCQ2o4VWlreUdHVDdHWS9xcnZyZGU4OW1YczlYTE8rTHlMV1BoZmNWWGt6VCtaK3JHZTg0NHZ5My96Zi8rVlVGVkVyVXEzSzdWN0ZWT1YyVnpucVp6SkUxdCs5VDJsemlraVg5U1lpOTNwSUcxMWtpbFJUR1gzSWtDbUhGQkV0SXFMU0JFZTFLU3BkcEhjeE8wUnZKbmVyVXV4RjZsRmx6b21YREdudEtUS2VvdmREcEtpTU5tU011dTR6WnBQUnp0VmVGWlhaaDR4NWlQS1pmUXlaTXFXVTFjajFlYzRoOTJvaVp2TGh3M09kZTN0NWtiTGFLS0tsck5lWVExYm5WTVNxeWxGdU1xVklFVnZmelNFeVJwZFNSR1QyMWNVeFRqa093N1BtbE5hNmpDbnI1REdtcUJhUlV0YXp4aENlSjRMV0RSRXA2M3pjWVoyNzNrc3htYk92YncrN1NldHpuYTFTMTJrOG5jZGs0NlpNNmF2Rk12cDZ0VG5rMEVQRytrOWxXcEZhS3k1bm02WE5tTk14OEpReG5yS2VPUEJkVVZuallNV2txSThzT2pSWE8xVG1tdTFES3NmamVYYTJycXhPOTk1RTljQ0QxRllMcWhwR1FjdTZMOW94VnVPc2xEV0d1TzljUDg0eFJGVEZUS1ZxWGRlb0d1YVFZemVsNEQ0Rjd6NnRaZlVQNjBGYVcvTTkycFRubWcrVlVVeW1mRTlPd2FIelZjYjhLUGUxbnJwVTFiV3V5bnFXU3FrM3dXUEthbGZobUZyRjZGcFZtYU90dnMzVkVQU2tta25STzhaNW91MnkrbHFreUJDWkhmMGRHSXRTVk1TdzlxWk0vQ2JvZDdHS3RzaUJlVit6TEJ6SVUzcWY2N3V6ODNhbGlxbkpIR3czQjJaT1gzNksrVnA5eGl6M2ZtSk8vT2hqamJLMCtJN3pVTlkxdUhwaTMrUkM1ZjdsdnVSbUdQNWd2cWxXVVYzdHdKVm8yNklSVW5LL3J0MnZDdm9rUmZycXg1U3pyd1dMdmFJcU1SU2NKeHo1K1ZhTHFCMGMxU0txaWpGZWRLMUxtWjN0d3g0eE5SRXJNbWRIcjBwZm54WGp6dlZYMTdtdGNZK3N6MTM2NkJoN1VTbTFpQ3IyMHdEdDQ3U1NEdmFHdVpmQ2ZUYWp6V01PekxrdnVCbTlFalVMdW9JalNBUFhqQWF0WFljcFhqNjJjNkxmWEgrNTA3SEdPUUdZS3pPT1B2cUN2UlgzWG5TN3owRWFXa1JXbTZ2VXFsd3Yzc3dwVnREUU5ZM0Z4OUZXbjdHaFZJb3ExKzVjTkFuMGQvZ0FjS3hJeStZcDBwczgyaERSdm5oRjcwOVJ1ZkZNWmErVVk5cmwyYnZNTXFYTWdUNk1LV1ZOUzF0M1ZxNUgwMFZIc05kVStabnpzL2hJV1czVmVpeGFZMnFMNXJiV1lsLzExbVMwTGxvbStSRDREdGJtQk8xZnR3Vk43MmNEQ1VSalpaRFBvUGQrb1N6dWdNRXRKc2NOek56TVpJeGpkVmM0R2RXS1NNZjJHV1NXYWlxVkMxQ2RLQTl2b0M1Q2YxUkZJOGdvUk5HSVcxbnNmVzBZN1Z4dzQwbUNjYUtEWnhNNWJHMnVNaWNhN2dTaFQrbll0aGdBcm8yakZoQ3hOZkJGck43azQrT2pGTHRSc0ZoWGMrUGk2SDFJRndXaGR6NnJVOHFCTStwYTd5WmxEblREcGdqbUczMFNIek9SMjYxampOaVhzM2M1ektUUFhIajVVZGNpMTltbGxCdnBodThabFRtRFJTeGh5TVM0bWFaMGpEbEhBRzJad2tWUW5Ndlc5YUEyaTh5cDY5bzVWTnA2Qm40OUI1ZkRrRFhIYWxXc21zZzhwTTlYYVdjVEdmd2RPejdHeDQ4NXdYUUtoUTN5WERUa1NuUEFySXJoSkJCdENqMDRrd1NjL1ZqYjA1a2hmaU05cWFKaTZzSlA4WjJBMnpnelh3VEVSRmI3UUJoQktLTTFTZkIwaU1qaHYwRlFsTDV0bElKMnZybVdMZkJ2K2E3NWF6RXl6ZzRpT0NmR2lZZWlzYkdScy9PWWxEbm1HdXM1ZW54cmVzaGE0cW9Vc0E2SWVscGtkbzdoUUgrS2RwbHlFd1BEQWFIQmtuTGhoM3VBemRXNjJqdEc4OG5OWGpvak5FeEV1WW5NMWpndlBKd1lvMFBKbEhzeUI0N1h6c1E0M2NHRTRqcFZ4WXMwSlE0ckx1OUlMMnRtWmM3bWd5cGxaSVBJSk1uTVFIaXRVQ0J5empLeEJxZHlWeFZiYjVUT3MvOVd0NWtlWUVMRFdlNVZXRkRGTXAvT1NHV0FHL2lQeFdrbWxhWWxSR0FERkZPTXNaYlliK0JkTWRJWXlYZ29tQWllclQ2K2FEVzdaR2JZYzJEUElieXBjazQ1MzdPTnBmUU1IWndUL055TGNxNDR4NTIzS3hMTWZCZVlkQW0wSlBqSmVGd29SdDk0cUdHTjlkYXhKaGY5NjB2Z0xYMnM2U2hUSWRTQ29ZQ1J1dkRBZVJYcHFSalZRKzYyaEZyTXdiekpmb3loUWU3N3RvSG5KQkdMT2JWRlc3VmcydmE1SFFQTVA4aE8vc08rS3M2ZEhXMmNUWW9aeEpXS3ZjaGRrWVNTNnpqNVUrNTlUdStpMFRZeHh4Uy9wRlFsUXhjWGxaSkJxVmFaSFl1dUxZRjFnSkhKeENhdUZSckhHR0tsb0xFY0dIVXFXZXE2RHpSVkxNNXhrbkFmOTYyRklrM0c0dU5GbnJMV01wK3BGQVphSDlJN0p2NzVhSEk3d055Q0xGRzZONU00ekd4cFZlL3U3K1NvZFUxY1BiNGZFbU56bXFWOVl3cVlrSHJjcENxWllxRW1Wa1ZrR0tXcHN1NHRYY1NzU3EwRzdYd1lKeDJMNTdPalNGRm9WOC9uYzU4VjZQNWFwRFdqQmwrWHhvOVpuRXZRTU5XMUdLQkl1VkRVTnlXOWlRaTB2QTZ1THRxaDlUdnhORDZ6UWMxR3U2RnV5UEVFQTRDUXhwMGYxNHFvcFN4V2toR3NzWVh1UEJaQlNxSU81dE1uZnNkQmpWbVVESTd6Y3h6NFhKVHpCMUxmaDBrSEI2REd5cnZ3cFd5UFFJaUVJR2NXalJqeDVDUzlTaUZuQ3Q3OVhxVU8zTE9xRERXUjVwWVlFdVUrSWNrWU5QdlFYR2NuMDFQUk1rRmNlTSt6UVh2QVh5RFdSaXZZZVRZUk1PN1VwQ2JmWld5TVlzSml0RjRxTW9vVVpYOU54S1pTaUNvZ0drbHNjWjZBTUlGcGxhVmppSko0cHpVSWhGZmRJRkNEdWFzZTB2ckpzYytqb1BOcDNhb1ZWb2hrNXZnZjdRcU5ldGprZU1waVZyTk56QWZveG1LSzlURDBxUWpiaGZiRjNxd2xWVTJacWRoejNlSk91K0J3YlhjZXppTjV6VlVhaVgxUVZFVzBTaGxZMDZZVjYzWEFVamJtazhTZmxpSDBQeGtiNXlBRmd1cVdSSXlQMmlMQ3BWRWdwa0tSTWluTzZ3UGpFMVlMdCtkZGU4aTlOR1ZNbndxZll5Z2NXb3g4YXNSZWxaeXl0R3ptYVBnUGUzLzRvMUxCS2x6N1NVUDMvdHRHTXpvdHNGTU0xa1R3YlI2MDkybUJnSW9KaDk0US9jYWFvV1h4UW5NSzMzbGM3MmxLUmpsZ0RTMndVSFhPeTg2UXgrQzRGNlB5RWZUaUtxZExvWFkrcnYxMml5RkVJcG1UMXVYWlpiUm5XcWRjc0MyWDVybzFrZzlCSDRzTFRxN2FMWnFRUGJjcGFRbVg3ZWhOb1lsdlM2VVVDOEplRGM5cGxEaUxTL0JjZUhPVGFzNGxtcDZpcDRvYmdZNUZYSWEwWlZJNmwvbWx6UzV5MUdXQ0VLTndNb3RZS1Z3SWVINlZJYy9XcFRlUklxZU1DUkdKN1VCYnhybE0rQ0pkN3JjcVJRM2E5U0lXUmM0K1pmVEc2VDhFUEFDZlpXY0N5cWVXRzRkSWFjNWRUUlhzR01VQ1cxSldoUlpST0U2MWh0azl0OG9RS3dZcGZNeGdXSFBVeFloMXlDSVFjV2dSZzFrUjh4R2JwTXZvM1RWMUNvTzR0M0FzMUZTa3dSVGtnbmViSmRUUjFzYnFZKzFkempua0prb2hoUE8zbm5GaUFlOW1QU09SdHRqcDYyTlhYV2JrUGtoWVZHbWxTTFBwVUl6RmNSd1FWTXpOc3poQ3IrQmhrR0JnR0hQdG5aWUwxVTJiR0ZQVU5VYU1HNWhHVVVpdTdIYyt3NkI1SzF4RVhMUFV4am8vSkJXck54RTdjRFVaQjlmQ1JtQ3Jpc0w4alBZVTdvOFNURGlvZ1ptbTlqMTFtZmlpOFp4TENjSStPUDRRdm1vdGtDcGpiNDYxUnExb0NvckdRVFVRbEdnNXVYWmU2NjRtRXpzZ0FPbzAvZ3Boc3RvaFRaNXJIUTQwaFJydEpoRHBsTG5hQklHSFhBVnRDaUZOMTlpcW1yVFNYZk9HdVQyMW9iVTNpblF4bWxoVHkvSGhvRlpHWVVRVmJEdUlXNXFudUVhY09NZG5XdElnS0NjcktMc092dW1ndnA1NWowSTNuNkl0S2pkWUNYRUZtWWF2LzkzRTNVV1ZiVktsMEdWODJnaUx0L0tKOUZURk02MGFMQ2c3czhUVk9aa1FOcWg5RCtjSHlad0Uyam1hVnJQTjB1REM4TnNOOUNnM0xrM1krVXhYeTJPOHpNRFkwc1d4V3hGY3dFaEJyTFVwdFlKR2hPQlhjdjhLTFZxamcvNmJlb3ZvRHFHZ1N4dGxDdTIwRkxUMlhIVEdKUkp3VFZxMHhnZ1g2RUhoZk1tV1luZ2VxQVl1R2JUa1FNVVcxU0VhcEMvMlAvdWNib0JDR2pvNzNiUFU0bE1JNlg0TENPcXU4cnR3U3NGcXpIQ3RoZFllbEdTNXVMRitaaEdwQll1bzlxVmgwcFMrTkdGSTllbnNoV20wNGlzd2p0U0NWNk5iN3hoQVdsVEZRQ3dtaVU4OVZOcEpTZXU0aXp3Zmk1bTdPdERHUklQcEQ5UnF3YnptOGhVTWViWnpTY2t4aHFXUlBGZG82RW9aMk5oa3dTU0l3bVJ1NnRxanlsaVNBNGtUbUNhSmQ1WDJuRkp2YTdCdzhNT0FFeDNYVFhwckpyUzdQcHJvT05ZRUtDWGlKYithdVhzQW5QNFFLYWRLTDBOc0RsR0J2M0NlNFJ4Smtqc21IcjN1YWVoS0NYTXdTTUZTN3ZxYXpGN2c5NXRrTmdPTE9BaGo5YzEvNHdEU1ozWDRXYkVwY1UxUncrTG0vTW1FdjF1bXhOaE4rcExLbk90OEsrNXV0RFdQM1p6QWlTakh5OHk0cUxrNGt4Y2xJeDFVazY5bVBCY2c4RDNObCtSM0thR1BHUnUyY0o1VmFHWUlUK25rSEVFQ3F6cmxGTUZ6NVk1N2dPakMzK2UrVEY0N3ZFM2p4RmkxNU1HRmpIcU10dFk0aUNvRVFOTzlKeXBsUUdOSUpiRlJuYUY1bnBLd1ZaTjZnLytSTFZ0V0FKa0hpSUxmbHgrVG1pc0hPaXdkOVArTGFDVTVWcllHOFFaWUsvQ3RMS2F1alAzZ1hmZS9rN2ozNTI2aWdlblg0bnEyeTJpcXAwWEdzUDdJZzBSN0N1ZWZIdUU3Uk53RHg3UVBkYUV2bWI2L3A4OTRmOC9QeFpsNE1rKysyRWFhNDJlRHU2OEVneUpkcFB3MDd5THk0QnltTURBdmhnU3NlVzlrbHk2RFBsSnRQSzFJV05XY1QrV09TTWJaKzZieHU1WU12eTQxUGd1TDgrU0tYYWZNMUxBM2M0b3pWZmpOdzNKWTZUZm1HQlhoYi80OFpmL1NyNzh6Y3JvMXJwWUQ3dE1jSDd3R0pjVkJhODFjOUNiSXJoZ3VXcStwZ3ozeUxRckd6a0VLcy9WeDBFL3VycGZsazZiVmM5QWlCZktTSHFWOVoxcllCa1dOWTd0b3NiclFSS0hqMm44enU5b0dKbWhCZ1hXQ2YzUDJMaTY4RW9weCtneFR3SnZMd21DaDFXdFBBYWgzMzFJdzVGVUlaWVVQNk92Q2dnQXhha28wYWNjcVN4OXYwU0l2THkvU2U4ZmtxNGdhR2xpTnpQeCtJOUZ1VG5lZ29UY3c0ZXVrREpoQjJrRGdBQWVjQkRSTnEwdmJGNFo1TlM1QVNvT3Q3NXJmYWtlQmpSWUJOQlZNNFR5VDJSM1ZvbS9IRFpzbmVCZTBLellQZ1ZlZzNvckF1R3FpMUFUbmF2cFlCUEgxOFZGdVhGaEtXN1Z4cWxvZjBzWXBWWlVMcSsvV25OQTZOTVpIRVZCWTZpSXdlcUIzTUJzcEZuTUhrVEJiMDB3VHJJbENBZzNMaXB3dHJKZDVqTzFkNlovcXp0eVQ4TEovS2lybUd0NnR3dTJnRWhwNjYwdGg0QkdtYmdiRzlkU29iSzV4SzhVWC9nRHpkOTVRMHFkZWNoUFF0RVdCelNLWUx6V2prcDdzN3ZSZ1FodnZzKytHMlJRY2h6UFNweFM5clkvVnNpMlRUQzhKRktrbTlZU3AzTVFqekphOG42MzJWaHRjQ3lJamFUYitWc1IrdEdIUnFqd3c3UVh6SEgwME8valF3ajNGT1dVYk1YbHAwOVNLWUI4d3pZWmd1czJFTGxLbHZ6VTlweDgyZmJGN1VKcGI1dlRPT0lGenY1d01oZHFaMGRLMkFvVW05dUxnS0tsckhyckxDYmg2RWYwT3Q1MDVrM1VCRkd0cTBDZk9oOUVGU0pLWWpQb2ZOTDlQdXE2MVJnaERNR0JhZWZsUDZ2VFRmMWg5NlZLbXBjSzhNYkVobng1R21qQVo4TWd4OWlBNDdJdXc5bHpiVGRjZVhSTEtQWmZqM2RjNmRRb2ZjU3E4SDl2alRJVXZuUmo3d3BQTTB2Y3ZHbllwTWpSTjZ5UzVDbytyNlRtUG1GUG9ndXJDQ2MvbkdML1prVllObi90MHU2VFlMTEJPa2pjVlNzaHBudDYwOGVKam1nZFhiYmlMYkI2Z2RiTkxwMUJvV3NNYWFwcThyNVJLNldENGduanJpZ0lmVkFFOUc5dzdCaVV0ZUlhUXNSZTQwVUlJVk15WjJuVGVIdlNsVExuMlRYTnZkbnlBZFd3Z2lvbi80VWJkZmJlbW9vVVJ0aVNJWjV0eXYvbHF3SGZwWnl1dVdFb1ZrOGJUMnVNcG43MnJLN2pLM3QzV1pudVJPelFvQmpkSlNhbjluRk8wc3NXK2NFdGRwdkxyOUhBUityYnBTdUo0Sm1PazFqWFVpWHVUMG9zOHB6TFlxanZiRDBZV05oVkVRN09qcDh4eXVCaTJGcG01dVQwQ3F5WS9rSkJkeG1TbWZxazBON1U3ZnNOV3lTTWlMeWxKcGk0ckVveVBDaWRNUEJGY1kwRVdNdnBUVFdFeW5TTDNtOG9vdCtnbjR4T0M5Nmh1NW1EeERZTHZVbzNNUUxVK2VtamNXelRhV2o5SHRaQ2lkYnJHU0RON01BWUVIK0hBZUkrbHRZN3drNmt6VFkvSXhqdk1XQkVzbGMyN09pRXBGRFZjdC80QVkrTzhZRVBkSm9qSE9ZdDBPdjVzTmUyUUlhK2ljL1BYNW80aVBhTUoya1Z2bld3bmZHZHFneEhQS3FwWUo5Tm5QdnpvbGxLN3VFdVd4Tk5JWkt6eXVTVk1wSDJvekVaaDZXcEx4enY5MGVseFRhNW5zWW5SQjBiaXI4K2pUS25WMlZZVjFaSHJTZTFxeXFjOG9DYlN6eXBTT29oU0wxSVBFRkRKSi9OQUU2bHMwalZoTkdtajdVN1BTdWc3QThHckhzL1JiaHdQRDV4RGNPdldyZlRybG95MnZ4Nk14Qy9jREI2dGpTaHZFUDVwMUY3bllueTd6RlJvRmF0aXF5OW1LcTEzN2hDbjNjbm9VbGd1TlB1alovemR2YTc0bXdQTFpwT1pXTVJ3Z0srR1JZaTl4WFhEbWRGMGlxQXlTOW1aT2IrVFM4eU1kRTVTdm1FL3Vsd3dDeGlyYnU0UXRrbTFNSkNYVmo1bWxJelJPWit4WnlKWUxNZGwxK2JINXRTZnNlWnQ3cTFpUHpxVXdYTHNicWpySGNuWjJFM0c2emU2UFVMd3g4UjI1U09pdFlpUHNqSmxab2JTSjRlcTBwS2FNVWdaQ1JoQnZhRm85RUgrWVZ6Yk9EV1VZUzI3cHpQR0t5MHRIZjNJakpkZGdWWGNJTU1PK0k0M3BoaEFLajVxRng3MGw3bEVucVppVlR6bXNDTG5GTG5abE5HYW1JMzFybm9zTGVrWXRyVGYxL09VZWpNNTBHRHVZcjVaQ1I1cng0dUl2SVlKTkl3aUVkaFFsOFJXMkVtdElxTXhvTy9ad0JER2xPY3NWeVo1amF6TmVmQStDaVY4YVh5bkpEd25OQUVCd1JhYVQ2RUV0eldKaitkalRkck5qcFg2VXpqaHIyM0llRDFGRE9aZVg0aUhwZFZnRCttNXJlOE5sZzBxcGlOMTBIWFBaTDVrOGhVVGp6TUxmRXV2QSttRjBoYWpFYTJ3VzR5ZVBKQSs1dUwrWi9vNU15S3V4OURSTlJJYmVQZGpucUhoUjZvUmlYZXdSVjlwbEo4eUdJejhMRFhBbkJQK3pvZFN1NXgwcFloU0FFM1puSmFPdExocmpHd0RVM1RCYmlLZHlGYVkzMTJtUlRlcHZ2bkdIVXNJVlZOcE9JT0JpNHhPblg0ZXNtMFFNUzVpUm9OOUREVG1ia3owTXlQaEMrZUYzek0xclJqYTUrNlU2Y1RGSnA3dDlNL2JpLytUc09Wclc5TmNNNU56NC9xSWVwc2huSGxnWHhKTUJuQ0JzZUJlakRjUUJCTmhXN1VxcFJZZkZqZE5aQm9FMDlPVTJvdENCdU42TnZxOFY5S09sS2U0cVoyYVpxTnZrZjUvOTdXeENSV0NDcGw2M1hpQk14NTNxOXpKQkJHbjRLbDlTb3ZpdkhpTE16MHBmUVVJQ3JXMW5nYllXeWxTdUdlR3BrVnpESTRkclc1akRycXArSVJTb2c5V1ZIcjF0WXI3ZXVpVEdkMGFGRmg3QnNDNVpzbjdoWFFUdHVXSWw2WXlvM080bTQ2bk1UVzV1K2xaNURnVUxwaFJ4SmhkTXNObFNTRkVMRTNGZEFWb2FUSjJ1c0RucExuWjc3UHZid1pnWjNvZWhUejhIUjFzempnNUQrZVVlVkRhUzZHUVFqVFRMQnFDRzRmNnVLWXlvc3owVGJMUjZPTGtmcWtxcy91YUFuMi91SEtDSDJpWTFoa0FGeDJzZGpCTXIwUDVZanlGZWhzd2E3bFAwamV4S1MyVCt3M2EvQ0cyK0t3ZnRTeG5QanMvcGt3OWx6WXhPc3pKcGNDOFYwcFpVZG9JMHVCZ2p2VEZqdFVoUzNObk1mbnNsbDQ5MVJyNXRTN2o2eGh5czVvU2JaLzBTVTlxYkVId21aSjJZTjJHbEJuM3AvWXFtWVp6bm1DMjBHRGdveUtmRzFJeDhDSC9wOWtlWnltMVJaajdyQ3A4d0tPSTZaU1NEZGlQTUtlMlBud3U0Q2N0blQ1YjVNSi83OTFOZW4wZzByNGozeldPbEo4enpkZVEvc1l0eUNFUFV3NERMbWp1MmYxTHhZa0FOTjZicWVpQklMNWQwZXg4dmpIZnZuU0x6VHhrQk1FdTFhUTBwRFpxZlJzS1cwWEx1VVlTWTVlQlNGZkpQUHBJd2toaXZtdlltcHM4djkwaWQ5MTNoVmVhK0Z6cUQxTmU1cTR6eWdXbXVPbUV1Y3ZnZFJWT0RlbHZ6S280UXVqbFdPQjY4L25BYjBGd1ZMbW5kb0pGYzk4QVlZdTB5ZUZXdk82UndCUUNoTmFIeGN3OUk4UUMvNkJUZzV6bkRJdFFONVhLNlBCTVJVN2ZHbjJodFBMWTFlc2U3M1ZUMHhDZzFydjNJZCsxR01lVHJvYmRSVUltcW9kYkxWWnZxSzVPR1JhckhIMFFReERxTUxGS3MycTBZcVpBeFhFZnpiTVdycGE2eWdBMktaWHJ2b1lWYStReVNwZUlZeGRVamQ2TEUvc0JFMnNwUGRJZ3JXeTBTVVlHNlVWcmRURjF0U0xvd2lRelVqSXh6NTRZNmJZczI0S2ZieXgxRVVGT1l1OEJzdDd1QXN1UVI0TDMzR3E3UVQyMHViUVJoT0xFdGtVZlVnQTBDQXhXQTkrQkNSa3E5VkJtOXVIKzU2TGJtZW1VbWhHandDdXlNRXdWOTczYUpDOU0vVEIxNFJWV012Vk1vSVkwTFZxTnV3MWMwOGtQRnEwM0tjcVVQL2JldURsTEpjRnEyNzZlWi9yOTRiKzg1anFzT1MvYzIwRVQwczJSUHZSY1QrQkJkS25Nak5GS2premhXSGRMVkFiTmlXU3MxdVl1Q2NZM0dCbFBQYXdOdElIK2ZBVEhtVXZhRWtFemNiUStwVmlUZmtMRjhSenZOSnVHcGtqSnNrTFBPNFRKKzdLMFU3T0RwaXhaU2ZMbDVubmZuWXV1U3dweHNZZG8xc05udFVvaFZwYzVma2poMWdKQXlDaGpDU1cxbXB6OUpDSkZ4WUtCS1lvSFRicitzTVhNa1g1eVVxQWlRMmVmTUtIaEh4RUFKdmprRDdhUnZuY3U3aEtCSTQzZ0ZGVVpjUXFMQTZMeSs1UlozbTRFVEdiRlBZT1dTOXNZbzhMblpXWWNoUk1Sczg3a3hiVURNRFExNkJ1cmcxVzMxS1pyQkUvcHdZZ3pwWWl2MXRaY2dUaWV1QUhwUDRMRnVqTHRBOC9LdzVudy9zM2VsK3c2aGV1VWNQT0NNRVdhMWdSMG9SUS9DemErbHBvakdZRTdISWV3QUxTVkhsaGl1Rk5MV3F4OVRrRzgxWk50VEVTR1dreEUzVVJNNjFXNFYrK2g0YWhGT2w1dzFUR3d6dEUyODRGTHBscVVOQllYWVYwcTJRSUQvWVp4UFF6UkprZ0g2MFVtVTF3VURDZnZEVk54V0J4U1k4dThWM3l3ME5CTDVOblNSUktaQldFOW9XVkVyK1pOSjM1NE51blNZTDV5WkdvSEkySnZJOTZqR0ZQYzBnOGJiYlRqUm1wc01pdE52Y3lJS1pFSzFDUFZhWFFYZ0V4NlM4SE1URVFOV2xzaG9Fd0puM3ZJbHpobVNTYnRLVlVqMlora0JTcURNTzNpV0FpM2pGV1YwY3JhaHljRHM3U0NudVM1YzEzZU0wWW43MlRxV2pHSmZzM2h5UmE5TVlmTGhhbm5UbmFOMEJCMHBwa0tGc2RWdmdoaVVhdEljU3dKajNQbVBGSkpBdE03RVgyZFdSMnBQcjA5aXAvblVmMnFZUUt2QmVCUkZRYXdFRnBtSDdRd1FldDJEWE1PWER2Q2lIZUl6U2RhZHpQd0k1NitLMlpuTW9jcjVacU5lZ0ZkRTlQSEthMEpiRkphRnpjbGRoUmF1aTZDWDhuWWxZdm9PdERwUGlFdzQ4dzg1V0xoSzJGRnJpV2puNnFXeGtBSGs2cEdZb0pHWXpPSTNPNjhDNUhSSXVGaVlBTTZRKzlyU28rMU9WNC9kSG4zbWZJWHV2WDB0cGdZamhIaCsvU0g1a2lTd1YyZ1UvSkFldy9hVVRzdlNyOE5tY29ldVJ1cDQ0eEVINHRBUEpzSEpDaDlHNkhsMFMrVlRKdlcwQVJnRUF2dHZvMGg5d3pYSmxwWXBRRFUwVTZ0Y2ptS0lqNHRpWFQ0OUVsUzA3UnNLcVVuOTVtTjJ4UXZtSFlYa2g2WjFJUTJkSHBBaHdIbktQTjZYZk5KVTVINCtBTVlLUHBTMVJoYkVWR2tLWDliWGMrSlF3OVI3YmdWL2VCc0VJTldNdFd4YkZwcThmR1hrY3cvVXJrS3pKcE9ISWtLRjRlU0VTdWtZbXdlUENPNU5iczNmRTZUOFI4cndsMVhrSXAxZ3pzRGtmWmdEMGVSTWp5ZUpMZTg2MWtNQStCR1Q4TTJ6Y1k4VjBPZmw3bWJCQTlSSnBuMk9YYzlEOWZhUVUwSjUxK09Qc2pRMHRaVXd1WitwVXcwNDBIckwwNVFZSEdLd0tTeGszdVNKWVZwZUNxRUJWem5mTXdGNUM2YndrZWhvektJYnF3MVBXMkliRzFUQ05PNTdnb3pKSEFLVTVxMlRJUEY5SnEwQ1NsaDl1NHRKQUNMcjlkYkVrQ3JFUXZqUjJJSWxFaU5NQWRraVd3VVNSUGdhSEQ5Y04zTWlEam11RXdFWXVKcVl3UjJ4WHNac1kvVHdxM09kRWtUUnlMMGJWWXJnNytNQVhCam5RZWE2UEVUNzdZMExsZFQrMnBCbVJYdHg1RVVkQ3JYV1dON3dXaE1BcndtRkNzUytxQ25VdEhXWUw1cXBOejc5cC9Ta1NWRDRRb1pJTFlMN2JIM3UraHFaK1NvcDV1QmNUU2l6TzgzVitaTXhocGRnOW1jOUZWSFdldGhia3gxOU1IMWVVMVh6RmlkUmpwakdXeWRpRys3bFRTaEZUYlBZMTNweDQyQnFzTTMvMllTNXpLcWRGRVl1Q0JST05PTUgydGV5UXN0bG10MS9JYjFIZGJTNkZjZmZuTkF0bUlNS0ZhcFZxZDQxNDBTakZwU2hlTkFMcnBXU0hnSEloQS9CVFlvTlNYQy9oQTlEa0pPOXBCdVd2KzQwc0phYi9LT21tTmgzclpjL0tST0tEb0ovcUFwMmFBcDdMbC9UcUIxYTByTWd1eEh0Sy9lN3dDZFFYOFJhY3FOUFlkRVdzYjFubFBNd280dUJaR29HVzFPZ3BvOHBJUDR2RzFQU2NIbHFJYm5xV3ViUmRvSjVwYzZ4VURPZlppb0lad3IyMmZ1YTdZaUtnY2JSTi9zaUVqZDFQcFhUdXZnODBJWStwVG94VVNZcDNLa3lUdGdITEVwL0ZSTWpjbGhhRE9ZVS9yTmJrc0lJeGdSVHM1VU12cWpHbjFPTTZjdkpWN1B2VStoaUtaSUVBUGpHa3d6ZTk2Yjl1MzRQQzloSjNweERaakM5RjBMTk1HalFoZ3hEK296bUYrdHVoOHd0YzRFMzFDWHNwTkZrbERQYUFNMVJaMlgvT2V4QXNvTTg5UG4wc0twRlBQYUpyT1BnSWNjWkVCemdQQ1ZXVVRoY0FwZkpQZzQxTk1TOVBwNlRFcjlCTEh4ZzBKZ3B2TVVOdDRHdklHS3ZQTzRSbzJCVks3TjVBTGs1M0tGNlNzV3o5bjNiNmJKd1JSMGFGbkN4WmlHT1Jwa1RabXpEWHBpNGR5WHgwTVdqUFdBdEo2RXRKVHIzcGtpWnhrODR5MUN4NGkwTklheE1SV3FCRTNoLzBINXpaU3hIZEFhTTdvRTNUMTg0K2sxR2p2UkVvMXB1RThaZzBLRHh6ekUrSENmVEFpa3RDTGtmcUpLeWJpS05PZW15Vy9ERTBDc0NsaUhzci9ZcDZvM1dsRXljaWxGdnhEMHVhY0RBUTR1ZzZBbGpsNkV6S0hPTnBxUTVscTZyQ1lXOVp2MHRobC85d242YkVzUTdOSVgzUWE5M1VSNDZXZVJlZXVmcHRLNVBqelovMUlEVFlCUDNYbk1aUS9uT2tpaFVMcGtIRk5lNi9GTURPYmNVU0F2NndiSGhBdnJZUGJHcEtLTWlDZW1ZUFRKaDVIbW1vcjFsWm0xK21wSGthbzBFOWZETjFSWkcrQjhEcm5kSEUzaUZETW5yVFVZZnQvYVB2ckU1QnZBTFJSM1hnMThuZythT3FhMGpuenlrNEE0dGF6V2IyYlppUVluUjlzK3BCbGN5V0hVbEtZUXVBTlVpYXV0K3oydXpQNnF3bHhCU2lDa0lWSTF6dmVBTlVyZU00Z1ZtKzM0OFhQbVJLcUJxSEVDRHJVVkVLakZBbkZzQ2xEZ3pqN2xNRVpBbDFPcUhvc1lLL05LdFNDS2xzbVFMaVdEcWRnTTA3T2tQNGdMdnJpOERlbXRGbHhiTmFJdmNabGxrcEh1eWgwRHBDQmpwSVNUREpaUUFubUY0b2xzRTNMWVZTVDlyWW5KbmlsWTYrMXFXbXFYc1hSL1V4SU1ma29BbC95T3dyMFRzendHelBhY3Z3d0E3VFJyNDFENjNJNUZkTjR0UytnUW80WmVQQmR1N1Jkdmx6SnRmbjRhL2VyM0RlWmtMczNUakw0UjZPTENrd0VaekppYjIzdDZCbVRDVFRQT3BXbmdoOHJnT29VcG5pTmw3TStJU2QyeDFxOEVaaFkzOFdaN1VpTUx5cjBMbS80TXpJSG1LU014QWRJOUJIOW9RbVhHZWxVeE9Ta01IRUVVY3loVCsxSFhxR29UQlY0Nm1aK1BMYXhOZXdCUnZWSG8xL0JwMDNkK2dJaWFwYkJMdU5GMHpkQjl4VEhMZjdnUE02R1I3ZVk2WFB1UHJFNEpJdlUyUGF1TUMrSlo3cG1aOUVpRVFrdGduQlBFYW5jUlRXa2VyRnRTeStmY1lrMm14WXBZWFJiNEhDbzFzS05WQzdET3k0N1pVRUpJeFZLMWtBbEdKK2hTcExkQnkrV1U4VHhqOEo3R1BTY3V4amxTSlpNV2xmR1p6Q0huYnlTWFBCL1dNckVERVNtZE9YWlhaT2tVc0srNThBUzI2dHZhS2htcldaUjkxbVRRbnlEbnhYSzhIc1VSNzlNbGVsUkdJVDE2bmhkdUUrTTZTemRqSVY2OTNpaW9odnVxb3JhSGRRRzRCL2NSc2pIZ0dtTTdhNzBwaTF0VUVkUEk5YnpkOEprYVVSNVlUR1FJc1JENWFEQ3hNWWUwNXlPUXI2WThwZlhPQUJQbUVUWm81NzEzbVBxbHJUdkExOXV1ajlzSUlvOGM4Tm1aTnJUbDVtdElNdXYrYXR3c21GVkc3amFZS3JSZVRDVUZHaWNaWjEyNDJiQ3luWmRnb1oxMmE0VUVuWGtxTUZFTlQrc0FVNFNaRk9zdjBJN096YmRpVmtUdGxzRlRic3FqQUhPd1lNdDByUFFEWENvVG9UbFhRMFVvS09GSWdjZXNCNkJEU3FEakgvQnRJYUwxMlMrK25nRDR5U3ZjS1pWeHdjb0NGR0hwY3RRNGRiTlpMdjQ4aWhodHJ6WlZKRzZubDdTNTRpbEd3Y0xSQlNEeW04elJkak5jUkRYdm9CUnp3M01lYnJVMVdEV0tHdDhuQTdvT0tmT0U0QkRlRnQzVy8wNEFyakg4WkRRVVJwWGo3bHFWcEFza1hBcmM4S29aREpQNDhvaStuUzFNd2pnYWN1emxrR01lTXNMVWlXdnA3MFliT2htczc3R0pzYUU2N0g1b2RqS0lUV3FodWlIWEcvM3psd3dIUmtrTGl0TG9TRHQ3SGxzUkh0Zkdoa3FwcDRnY0pLNWt2cU5rc1JtT3Z4WUV4OTdVM0k5SXM2eHIzMmxWVTBuQkM0ZUIzdGw5QjVTQkVBekdsbmpjZmFBdmN6aURJQ1IxaktZSE5PRStNZUw3aHhNcHNIYUtqQ2Vadis1Wkd4UzQ4Rndzajl5WEdmL1JLYmcxYXZ6S0ZNTWNXUGFkS1pSTmNCYUhWeVlGZkdNOFdKZFNqVXFDWnFCalFyL3dkVFh6NGlOUTNQbzhwRXFGejM4VXhqaVVzRkFWZGNYbmxEbVM0VzBOUm5wMEZHSzVTdCtUWWN4Mm0vSjRlRzY0QnVpU2lVbWZaNlRLcm1ad1dSMTM4ejI2YTg0SnZ5Myt2WWJDWU1zZEN4Ry9uWVZ6MzloL3pjeVFkRFd4K0JINFdyMHNnRWtJYUhVdUVBRzRlclZzaENDb2l2Y0FNK042clZGb3pMSytCRkZBeThIVVVRZFdFeHlCUVZzenJ4ZFYwSVJIQmdkeFlVQXFDRE94YURDdU1TWVoxMG1HQ3laUFhPRjQ0TzBRWWx1bm4yL0cza3Ntbm9NNEk4clUxSUxJR0N2OVdNMEZRL2syelV2eFhHanc0Tkk3ZFVIZ1FxRXZXd01TRmt4MEU5RkRnTWpnTVd6SjVsckhtSkp4T0pyRFI0TGFHdHBaTGF6d05CMmpEZkRid1grQ1EzTnpGL28walg0aDk1UVhhZ29NQkpTenlZeGN6aHpMVHlOTGR4TTIrZklXcUtJSzNQQStQT1Z0UkxwYStueVJSVkxWZ0V2ZzNvVTBuZTNWMHBJUmpkVDYzd2JScVhsZ2x1Mlk3ZXdyR1ZIY1c4SzBQTnRZNzF0SEl4aFQzWGRmWEpPa1JTbUt6bFFJZU5BUXVJWGNueDhCS1d4MzF2QUFQMFprZGRYUUFIanZTY0FtQ1UxNEVvNXlodlFmTGhVd0c0NUpuMFJxNjhrb3BUZW1DZlhOMmpGNXpsTWVUNUZidlVtcHUxckpzZk9NR1Bnb2FiSWRQS2RGVk1hVWsvdW5jU2RkemNKc2EyWUxzRVdDYTVKUlI2NTB3cUx1U29BbXBqNklOUG9JRjk4TVBJYXNwVFg5N0pIcHJZNDh0MXZjQ2pYMlBkZVlBWEk0ZlB6bGF2cE0xREVlZzI3RElUZURHMmFNQmxmZkxQQzUweHFrblFLQkk3UlJZQitrQzdXcnRNVWNpcGpWeU0vUElORHdDdkh2eWZkazhLb25tZUpCSHoxai9PMkc0S3dRcU50bC9TdTFkOXVFellTeU1uNTZDOExNSFFLQktDMzFJU2F3OEZhbTVCSE9kN2lReXJVcll2b2lmU2tiRDFvQ2tnOW9QQTg2aUJhTnRqMzdXRUY3N1VOUGdZV3cwbWEzaFZCWTdKQlZkK3U1QUhtQWQzSkhMQVhpTGRUUmtvbTdubGE5anZTTlNCa2JaWklSZDJaTmpReklMcWllV01wZGJKN3krakVqNFdrZGcxSkxlaU5EQVlSVEoxRzNZc1p6VDlieUJqV3pZR21yYmpEcWd6Q3dVRkQ4ZTJFYnEzSnZjSzFXWUxXcjVLRUloS0pXVlhUbWROTk1NS2NHQTV1ak9PUXB6bUxEcXFsWTNXTlNJUDFVZGNrRUM3Q3FlWlEwSjJBc2N5ZHBLREcvRDVtek1XQmtjQkdqMVlBWlpaQk9SMEFYOTJVRUd2UUJMUjBBQ1RCNTV6RkRRekd0WUJqajdyd1lFNW9haFRNa012bGJaalZmTmR6UUpqTHkzOGVpc08xVGxJVkthdTFpU3UyaUlWV2tsSmRGUEpEMUxQSnNqWm9JZzRuYzcxVU9NWTlJSDZRSVNPOWdveVBIbS9qUllUckczSFZvWlhHa2xPOWdZMUZZUjR1bHBMcHBHRk9CWkRma1RMdVhZVjZTb1BNS2hZbTc3Rk9RUU9HWEhIUU5MSFR2U3JLbm9PMHp3SHlTcWVPTE9FcW11a1cyeEhBZVR1c0Q3VUxvaTFab24xMFJIZDdQRktxOEs5ZjBPZ2JOR1YwRUZGNHhCM2srMjg2SWRXOTQvajREY0NPWVVDMkxWbEZ6ZE9hS09RNFRJTjU1R01lWmhIZktteU45djNzcTRlUkN6MkpIcDNSVzF1T3NaT3VMK0RyS3VETXdzU3hnazNKU3Bqd1ZRK3BtbzdVTCt4Tk1CMlhUcEJ3aldYaGhNQ1ZvVEdLcWk2V3ZOcjBHekkxUHhzaEJURVpVWXJDWUprUUVNbjd0Tnh0WmhQY3ladElITFcyaDMzQ2VFOFFIbC9RWUd4M2J0RFRlaSsxS0sxaVZQdHJPdklNdTdjR3lZL2k5Rll4RWxYUzE0LzdTZzRtK0xVOWtKS2hXK0xmaEhXVkdqNmc1bFdOUmFBTXJnZkkyd1hBeEYzUVhzYnlyMHhrd2RrdC91aTRhemhLM1RWTkxuMkJPbzh3SXZoekIyaWtTMGxqMDFrbGF0VXJIeHNFNUcyMndhcWtCUjgyRUNJNUxpSExTZ3psS0NOQkcvbFlybDZpZ3J5cWVvbmVuaFVZdWgzb1FwTTRyNGlHY3FvemZxSEJZVjdTVWVDSnZNd0FJek9uV0lxYlZPV2JDT2FWMEx5bXpOeUtESnFzV0U3VVNaUlAzSU5vTWd0bDlXcERDVHU3SnRIWGp0OC9mRlhuL2Njajlob0ZyWSt6bU1tZ09qUXc4aDMybmtDNHRoUVI2bENKUEFuQk0wd3Z1VkFJRCtHTTBmR2F6QjhTUkRPYTNIK1pCVEJaQUtoZ3pCT3ZoZ09tdkJrZ3lUZnFoeWZtS2ZLeEpodldSSlUxTENrQjVkSmhMSmpkZjhpRlJTNFphQ1AxbjlVV3FtVHhQbzByRi9NTFppVVNGZmxFUGlxd0RxNGYweHZ2M0lpcDlNU1BMTVY1QmlYWXJLSXNxam9KMU5haFpOVEs2REhhYlVmRXhpZXJvcmlXT0tBT28xUU9QVGdhM0gxdDlieEQ2ck1Ea3hKRHBVaVRpY1FTODhSVnRpOXpobW00VUJIQytRVmpLRDZYczZTSENPdFF3Q3dQUVNxa2gzd2pjOENvK3lvUDJrZ3piYVR0VTZjVjNLNnBnYnJDdFo0U3NOTlQ3cHZtQmRidzV2b2s4bDdXNkliamNDT2s1MHhXYXhLMm90SXAwdFNGM2VYbkIrS1I2WEtXZ2NBYnZrblhMYzg4bDRhWittVUwyVzNpVjRjTS9YUWdQYTB5YkxmYzZ0UjRwaVV1WHRWdG9YdXdXNWxBK0c2NFNTSkpKekNpOXdmQVhUUFFxMEtTVGlrZUFBVEY5RG50elJqcm15WFNuQTRKTHdPV3lOc0ZNNFVncGpKSlhYOFlqTFF4YkpiQzlvcUlPQUxNVURVSFpVWnhUWC9PNi9YdnAzSmJFT24zb20ybW9pb1lRcktuYUMxK0V4RlZXWHhzWDNuaUpVNEJGWmxZS1o2U2ZNcjMzRklpOU5SU3k3QkxJbVloelpQWVV5R0M1dXhWMnlZVjFXbXhacEt1UFE2VGl1ckhSOWRzdHhqcGRiZnJKMk5EeTVUTnlkUm1XNUJlUnVyZGpyNDl5dGVvV0VPVVZETjRiN2wyZFJtV2krcHJUM2lmNFZGcWE0amtrQTBqWDN0MXdHYWpvODVkMUZ6WU1BRUhjVEtJR25xU3hWcVNkbldaK2gwWW16VE9UV2lvMUVsNUhhWlBhS0RyNGpFQTBFaFNhWUsya24xQjFMalBaeHcvTVU1UWhiWENEQjRBUHdVdG8vakZGcjNBQ3RSdXhBTlhYSUJnOUZ0aUlZWHRMc1lYNDFKbXExb3RRMnhMUnc2QkZXZDN5dVkwcEJkajBWWFV0d0I3Szdia0N2a3pkMTRkVXU5YWZNb2VYc255eWFNWjBzdVhhVjJoek00QW9DbUZvQzc1ajI4ZXNuQnVUczdOWVFhWXdVQnVCU1YyTmZqUXNkTENhZXBPeStacWplR3M1NUh3a29sNnRHdzczVWVWc3NqTkVscmtOcEthRWYrM3NpL2N0US9kcHp0T01mYzJTQWlsaDgzN0JNNjRXalBUaHB2NU5WNHRzNVZZVDQ1Z25iN25vOFZlMlUrWmJDTmlNN3FiUWc1bUExYWdabU4vVWQrakR1c2NMYi9EazNVTElwWFhGY0gzcERsMmE4SjRVTUhJVFo5b2RieExuVGtta3NMVEFKSUVhVnNRY09ueVlweTh3ZnFMS0VXWjgyUUIzN2o2U3JxeFRZMitZYzMvUjlSTVNheGdPOHFTcmpvNUR3d2YrM0kyMUZNanJkdTVnYnA5Qzg1aTB1dlE0SVZuTWFpY1pWRHhacjFrbjVRZ051Q2pIdEhzSUtaNERLNCtsYVZXelhHM09pRnQrR3NFNkNwaDFnbnhjclBDalg0cmloVmFxYVR4UE5ET08zaTVZcVI0clc2STl4eXEwYzVSYjlwOXI4QndoNm9QMnByem9lQURzcDFFK1pxTFpvck83c0l0emZUNEdYVGR4eEg3WkJZUjBXL1YrSW9XTWlma1ZDZk9DcnFGZEVPZ3VNSzFocHUrelhLd2VzME0wZUQ0Ylk3TVUyUnV3L0VINDdTak9CVmZJMk4yVXhGTWFlQzdjcmpnL2dVSTU3eVAyVUxxOHJ0YUtHYlNydjBHNUpHaEw1dk83MXNzZ085M3ZROXlFdnJaaW5RRTh3M1RkbVFGM3ZVVktaVnE0bUdjL2Fia29NNFNUT016N1QvY2JveDk2S1ZRcS9YbStsK1lTSHFzcUdTakw3Tmx4V3d5cVdxNmtha1EwQ3dMYXhiaWhKazJ6VnJDQnJFcVlGMHcxeXlJT05zMmxaVWtKMjFRWHd6V1plRGNEZnU0Y3dhQjN4NER5d25ZTmxndi96R0RVOGh5TklDclF2SG8xVVVPa28rb056Sk5BSUcxdzJNWVJ6eGdYaVRtalJLc0Y1dmRWdWxQNUI5SWVTaEI1Sy9XNnFhSVA3S0VYb0lqTk9FTkhTdnpzQ3VoTE9iSytPZE12VE5GdTk0d2U5enZReFVSUVZXeWNRU2lQT3VUNTNBaXg3Ulc0NklQYU44U1kwZFphVEo2RnpDZ3NOVDFac25leW4rbVB5NGpPbll4djRhazFpZGRlcGNralgwT0QxVTBxbGNqUFJLOXhKQXFURjI3SXdFTzVsNldKNk5OQnlGaTRoTmQzUW5pSzV5RFhJLzNGbWlBM3VsVXJUZlg1QVJxZXNiSVJrVnowbm5VRGd2bFp0akhNM2xkcFhsSE9FVlhjZElDdzlpMTBQOHA3aG9MTXczeUU0LzN5eFJYTjU4SThaaUIvSlJ1RVBUV3pRSW84czFnRnkvMWVrZWNpOERLaFZpa1ZwU0djWnRxUSsyYU1uNmp5RENva1pKNlR3VU01U2lPd3lZMFRWS0tVNTY2ZGxUaC9EbDIvamNuRm93ZmlVbkp1TXZzbWcwdW84VUhvTXBkWFhCQUpJK3ZjZktQbU9PZFlUMmJybWxhNlZOSEx1RmZ3T2JRcEFudHpUYWVRWjJJbU9XKzhScVdFTUg2MVdReXlDK0lBWHFNcWRnMzdHZ0dlTTNiVm5TNm03TWJSNVRtUlNzdG5IQ0pxb1BmdlhvajlZSWM4K3BOWk5qTXlDNmJqQjBUR3hnYTBaWVZyQkJnUiszbzJKOWhUTDR3Um9WSUdwU0RPMzVueWRXUVBGUVlBUjJZQTZZTmVCWUxkVnFqRUtHeG5saE5QSXBaQVY0bXZFdXViYWJBNW5tK0hYQ3Mxa0FqNHd4aFlwYWcrOW5tQ0ZVYk5ZUVFWUHRia1NnbWhjUTNPK0xScUVSZXNWWkdqb29QMHhvUEIyaEJqTGRweTZNSVVWMGEwbUZWTWlxZnF5Qlpjc2RleURSMHdyTkJTWGN0VjUwS0RPY0pHVGZObHdjVk9WWnF6T1NTRzZqbUg5TUNNcmdoMG9VbnBpdExFRmlTQVRvZjJPUnRnRFl1ZGpGQUZ5bEd5K2V0aHVwZkM2VVFMQzFwSmFiWEttRTdJNkRjMEUzWHRwcmdaRjR2MGRzdTJ6Y2dmN2VuelpWV3k2dExVWmlZZUxZaGM0ZzRyRU45VTAwZitoZzljbzJJTDZnQmZuU2U1Y09rc2kyZm5QU1pmaVR1dG9XR3hYWk45R1JZUG42cU9rODFnbkVHbzFYM2JwVVZBeVN6VHpOamdUZ2cvSithZ2dpR0VObWttSWZIUGNSQmIvV1JBSG9XYURCREkvczhVUm1iSlFMdzJxNWluWlJXRGRINHNlVWZNeUZPdU1Zd1JHMEVXRlBXaTV6d0VybWQzYjF3WU1qUU52VlEraTh5SUVVUnR5aTdpRTJKa0cvZWNPNDJiZEZ3Mm53a001UzNyR21WaXI0VXh6Sm5GVmFCVGd1N1FoRTExd1pFSVNleHFrazdES0JBZjhtcEFqbW9naXRzaXM0U1A1VTVnM1lYc3RtdFJicTd1TWtjVkNWZEN1bnFZNXNLQVdrTDN1c1pzYUU4YWp0TFdXSEorb3FpT0t1NDkrNVJtbnNQU3BGRndFMjJpNDhyTXM1NzRTUHp4M0VPUmd6MUxsekp2SW04VW4xRTAxNzlmZGhVVVVqSlJTV0UydXBSWFo1d0V5cGtDRlZNeXZhMWd6YUJuRkpKSFhkK2ZaNU9YbDdzTTNpUDA0Ukp2dkRTRnVKeGpRRlRQdHVld2VmODh6aUNQVlBUMmdNa3c5MmROL2gwWVp3b3RUb204ZU1WUTNtTTdYR0R1SVVTbmhjd3l5SUtFbEs4dzkweE5vWnVPbmtBN0pETW51QlNGb0hkTjVQUXNseWxpdHp5M043aVNPdDBEeWN3ZE5zR2RwaFpFRDN4MzdMVU55YnduSlNwSVRiMDVtSDJWZWJabDJwVU93b3JvVlZRRmkyUC9xRVhVb09sbnNaTVp3QUpLUDJqaCsrVHZ4bHhiMDhET1JaNmVLQ1J2OXpVRkp2T052Z25IV0ZZRzVOSDhHaXJRdkVTRVYvYkJicDlKR3cvcEVEcDJsa2dpY3FHTnk5ZHNpdUM4dWhhclJkNzZkUUFTZG5hZW5sNVJHZUMyUytoS1B6cmp6MjczM1B3YzY0NG9MOHluUXhRV3J6Q1hKbC9RS3k1b2xTMlF6Y2VtUkJHRzF0eW8zcmlZQi95TkpXckdoeGt5ZFB1NSt3RFpqNkpCaUdmMmlZRjNPeW9wYzFXbkV2S1hlZ1YrREI5cDc1MWxWYU5mR1oxTmVwMTlGekVEdHZnNXJoRkxVSU9mUUJ4VFpIQ2J5a3BoVVFZZkdwbWdGUTIzd0podXBNK2dqbXNRUUEzSVdOZ1BjeTlhWkRwUTB4NGpCYUkrUTR3MXQ5NHlKWEZnOU9WS0U4a3NDQTR3dWZGTnJ3RThvNGQ1TkRDc3RSWnZRMkpDakIwNlpHNjUzSzVWeld2OGdoVnE3K2JlVUViOWprL01ucXdONkoxM1JrTWduYkpodFJPWVk3WkVOMVBuT21Ra3ZVTzRLeUNnUHFiTjF6N1dZTXdIdWxLdWFVTzJWM2RMZVNleER3eVJ6eFZSZ01wTWc5VEtwb2doYUNuc0dqRXJCNWw0a1JscjhWeHoyV2VIUU5lN2p5L2U5MmozbUphWlB1amdVV2NFK0pXbDZUeXBrVm95NmxSSy9INkpoS21rcWNsVjg0VytZU1FIcXRCdG9sNjRFQ2VFRmxwSE5peUFDRGVDTXBMUjhHU21NaERjTnpnSEI2d1BhaForbmF6TXRHZXV4czB4emlWTjNobVRnVG00d01FT3dHeVB6b3FBWURCWFYwMlppV1paTytkV3FTL216S0tyaVY3UlZVVk9XaU5uSTU2OEJqUjZDakVNdEpzVEdyaFNZR1p3MGVpV3hDR0JaQkYwY2V2WFltTDlwR3M3TmE2YUdwU0YxT25ZZGV3aEpLMFFVaUdWVkhPZ0FhWFpqM2ZzVGF6cXdtc1hYODVWcGJRZWNKSFR5VGo5YWZSWGtabEhybTdXbjZiWjMycFVzb2xCVnJTUldNa3VyZDhXc1gxWFhVamdoRGFqUCtJcE4za25MV0xtSE5hUW9mL2lhV2RaSnRMbTducnhOczlMd1JEZDBjSzRSVmk3bVJxNnNlY2pnS010U0dKZjQySFNwQXVKbDV1OXg1R1J3a1JnMmwwLy9ka29ZWVpSUm1aRDRCWUNXUnVlcUNjMFU1YUpsRXBzY2paVVJ5RXdENEgrNjQwQzRBREIzK3FIbDYwT2VIRzgrSklWNTJaUDRKTGRkSDZKYlFOTGlvandhdkNQOWhUUFhSQUlWREFvZ1dEd1cxRUNtb0R6WUJqL3prVDI5RDhnMTkwdzl6Y3A4ckVwODJrUkh6RVBiTUlJOENKT3ZGWGc0UmRWc2RRTWlTNDNRU2gzTlRzQUl5cmpBYUJSTUZBeGtRSXpOSHRQd3lPQnllL1ZrM0RIWHU5OXB1Y0NmK2ZhN2NQSGgrYlllVVZ2eTdMZW9uNVpzS1E4U25IOEF3cU13NlRNTTh5Qk16cFM4UjFBTWtLank3RW9DVUJVM3JvRFNBTks0WGg1bjF0VUNUTUdRb3l6aVNTa0p4a0tyazEvN3N4OGR3WWZ1c3BDblNGTm9Vdk5QQjNVQk80alhoZEd1MVMxdHRpUGJheURHYWViTHQrQVNGY0dCQUcwNG1yeURnRDhNVkpndXZ4SytsSmFwdS9GTnB0UmlMZk03bU85TDhWc2Q2QXVwdVJTUExWNEpNUE1aNGF6TXdsZzdGdGxLbW5GOUxOTkVoREtRR1RMUUwrRGdobVZJNHNxZFBpdEVGekdjUllHUjcwM1R3dExPcVFYdTA0VzJ4RlhralhMcCs1MThWVVJsWjRGN3JJSVdCRHRIa0c4UlJvQmVHQWpxb0RFVGJDc2RvcjFJYjNzeXAzbC9zNUJ4VE44MGtZR0pvdVpUSUR0cERCZm9SQnhRU1lOamNJck43aXYreVBpdE9yeWdWdHFaanRxa1IzTU80dlNqaXBzWlFaZFVNcTdtVFBmQXdOMkRMYU1iOVhFaEVYZ2kwOThKdXliMVlRRHBlb3lCaWVzSGpMN2svNEs4NEhPQ01FM0xrRzFCQSs1MlIzOU1xeVo1enlseWdFejE2UEo3VjFGaE9jOHVURmlnY1JZSE94Mlhha2loVXpnUlpxOGhoemNzd1J0Q29oS0IrKzJkY25TbVpLWHVPWFFVYzVNTWVHNDgzcC9FZnI2N3N3SkRJNU0wRllzd0JOcDZQeHRQdGM5Y2U2Zzc5UGFaaEZJMkVjajR0Y2dZWG1MaElTdk8zM1lIMlZJcDFiZ2M2M3NoeGRsOE5yNjJGU3FoVUFNVzFDeFJFMXhETmRpRk5UTTA4cTFCK0p4RFJVWC90YUxkUHlhOVhEMStjV3pTdnErSWhqbTVWYmsvVU5sMkkwYmlwZlZDak1veDhrS2Nrc1AzU282K2I0NVdlTjhKdmpOVzMvRmpJNTFZUGduWkdodTJubGxHak0wQVNVaEFQTTlDZFl4NXhhcU5aTkFGU1hrOHJrbmczZHZENEUvbEVJNUxDQVlzdzJub1F5TVdhQzFOVEtkTGxkZkhGOWwwbzJsSVZPbDJYaEhhMHRhdzBmeVVCQzMwQ2wzdFI3dnUrdXZ0NGEvUzM1ZnBpc00yYkJkQzdXTWpFL2RKVGlqTWYyelo1bG01WHVaTzlOT1psNXkvbmdrM2owTkYwNWNUdWJwVTJ0ZGUyaWlJQWNYN1lVQjVOOFQvbnV3ejVGTktNNnlSZ29PbkFNUm9nMDI5NlpIdGxIdWU0a2puNlZjRDFkRm5XdlY5bHhSR1lTMmJYVklCVi9pZUxnV21tdEF5MEZycXhBMWMwYm13OFFHSWlPa0ZhT25LVjFMWWhEcFRoZkdDVlJPdXZTdUNIYzlLS3VQa2kyYUFZdHBrdXZKdE9iNWxseGs4SEZwVlByeEhhTDBPekFkSmw1MklSczF5K2JPeVpUanRJcE5kMkYxOW5rTWo4bEtwWWtXUjgwYUJQdGNSVC9WbFB1K1NHMkw0SnJrTWFJVHJSTkVaajBySllUcHBscmpRSTJVbXFpQnVod3MxNk5jUDlKZnJoUWczdnJ2VFRYODY3M2NLRG1sS2Q1NDNWd0wzWWw0dVdBMkQ1WWh0RkVXTXcvdFlOb3FPcU1KUUMwMTRCaDdwTlhwdHJFaTFYOHp5Wi96UkVHYTBYTS9Gd09oTkpxUWpnTVZkTEsrZXJvTHNyOEowaEhJaXdBNU9Pb3JhMURieHRkTXB1N1dweWFqbjZ0dHp4UHBQMkM4cDFnWmw0Q1FIWExlek5Pb2V1UlZFdzByekZjSmF6bGNKZmUwaVNRS3hVRVcwZzFqbnEyenpVa05VMGVhL0JYMjVDZ0lNZ2t2T2M0dWM4OG4xVXc5MjVrZGppUlN0ZUwrclRtalM4RlJmWFVuMWNXMnNIZnlvaXF2SXNqTm41YVRQaGxNYVNKYWgyaFQ5SmZ0dXZwTDBLYzh0cjluSjZIdDFPNTZNTFdyTldQZnVPZ25CRGEyaDM3TDNSL3E3R0tNUnFKVHBhelhFOCtjNFlZSU9NMWErV2lpQ25jYkdjMDdleFRNbU5wZGxZSHVqWWNsaGMyZ1FQb0hTWWhIUERNNGdxWlpnSmplSERkYVo4UXNHTzlvVFVxMUZKejhYSm5KdUZWRnl4VWthdUozYW9UWGpJZVpYdTQ5eXpDajRHRjFRRCtLNVhxRHBzYU9vdTNSanpuMmFyMnArZzlmUWc5cFRhVld6RDFuRUprUzlDV1Awc21vTXM0bGkzUlhodjVZN0lleFd3bzUvNHJYRlJQZTZ5NUVaT0hwRVRhY3U1cUFWYjZKUGkxYXpGaVZFcEMxemVtdktHdGNqSUFBVDRKNTh0cHRMMHd3V2N5VDQ1Tm9Xb1RzRVhobnZPTWVjK09aVDNSSE5WZ3krR3lsTm12Rk1rT25iQUhONnN4V0F6TkNTSC93cUYzN2Q4c0VsTmVjMEJHQ3NRYWZtTDY5eElMcE5yNGZPMmhCOUFOTmRRRXpOL001dUw3VzFIUDg1TWphWG5EMWNWenhlZGtZZTBOOUVwbk5xNFR2Q3gxUndQeXV1dm1tcEhRdEJiOUhFeWRlOExjb0k3cTNUdEJNM0MvMEtoSFNDTCszL3hhYW5xMU5pMmg1R1dRY2E4UGxYWnA4ZW1nQTNWQmJMMGYrR0VFeEhTODV1VmNQbENIVjZlRGZhVUlFaEdpZ0FzbTA4QmNaUnp5TXFaVU0ydGczaFJvZkxHUVBIR2Z3VkVaQlFqcDE0V01Ra0VFSXZuRWNRT0hUNER0TkJtOVV1TkY2d3VOU3dPaXhnRjd1QndnOGZ6TUR4bmdHcWN4a3RGTmxXdC9MOWhHeEw2VmJ5Vnhjcm9rVXpCTGF0UGoxZUcwTW1KSkVsTVkxZFJ3RWxaNWdRYndzQ1ZtK3lBeFZVMU5pdWhZWFBzZVNycGwrVXZpSWxyTytRSkhoZGZVdmdxWFhWSjVTbG1ENWlLcFNKYlN2RXVlT2k1Q3hteXFCRmQ3NlFNbThXUmt0UDJOWWt2TzBxOWJVQmZqMlF4TVhZdTdHOWI3TWtpTUlqa1kwc0pvbjhqM1hPU2k5YVlzUUpCUG9UT2N6YWRMVytxMW02RHZrWHo1M1dZTWdNRUxUdUVLbzdyQWViSXVtN1RHNXFsWkcrcHAwczdXbldzZHBwcWpjQmF0ckovY2k0WCtycVErVVRYWmZ1RTZDU0k4MGcwOEhSOXI5eWNYV3VGQnA1WHk0MXNTeFZ3Z0hxWmtORmxQUkpOQzZ3U3pRc2pjR254dHBVRDBaT2Q2SkpLZnc1ekppZmlTOEpGN2djQ3djbDdRang5WUxTZ0gxUmF2eHRFUE1hckJEVlVjdnc5akZmb25TSC9TOFp0NS8rSmM1YTNTZEdQZDI1TXl4a0VOSkJlc2dzNEdwbExuKzZRWWE5S1dMUlBEcnp1aXcxdlRjMXRYY0F3dFRPdENHc1NCZFVKK24yUWw3VFdtMU1KRFRhc1FQaktHaENLZ1YrdmNuZzdIRGhST011M0t2RHdZcU1zSFlwVzI2YW5jZlAvdFZEcDYvamJuUG82YlZnU08yL3ZjcitpcVExRElvdlNFVHJBUXpuODdZY1k2aHYxVTgwQ3lJaWhJb1pNOEd6YUN5bEM1RzVnbHJDM0NxakhEUDRJYzkxdDlla1V0bnVtRjdxNGFDby9SeCtLR0toZE1iTFFlWmhKTGFIdzgxQ3h6cWFvVm12MC9nUVhkMWV3a0c1Y0pndXN5c2pPUGFLcldUVUxVV01lanpsUkxXL1pvY2RJMnU0YjBUV1NtVEIrZkZMcUtKLy9oR1BqN3pWc1hRbmx6YjRhc0o1STEwUTRBSTB0bHRPdCtNQTRXMmFXRWluSUVDNWUzZXVwSFZwaElTTjVrZmEwVVh2NGJYNS91WW9mV25kaEZFM3VSNkljZU1EOGk1eHZ2K09aSC9obWdpbDlIa0wzR2tlMGZESHd1S0RCUHhYZUVQSDkwQktSMDd2TXJ0R0NzSVZKVnBVN3VzeXAxc2x2UnQ1cndBQ1V0dUNLYXprbTFjVUtER2lIV2NYT0tlZk84b3dhdkM4U013U1N5VlFPaHJ3Q1NZd0pmV1BTSzZ1U25Wb1pNYlhFbnJXdlE5ajdaaUNXeUtuRzJLSE4yL1R2OGl0TUtRblVMR0g5UmMySHYrbS83bk1md0NXaW5jYmVIVkRsT2h5UFhMTWZmODNlMlowOUhoNG50T0FqVXRQempkS1VIVEZYRzFLenZDWFV2ZjlmU0IxclR6dXNjRWpVc0dSOUNZU2NQcmJxOWs2eVBnYW5xOWZJRXI1NU9xRmROTEtySmR1V2R5cllNUjgrK1N3ZFRwTjJYS3BPUnJzRzN6amVJMDAxcVZJYk03b2lHdXhaN0ROUFlGVU5WRWQramlOQVZuTi9qT3I4SjZRcXRHb20vaVhJdzFxNDIxTWVWd3ZxUkFOeGpPUE5YQ3ZGSlVWMXhVSHREZXBSendIbENyVFZ6M3NKVHkzbzdBMXdQWVNTa2tuQlRPR21xcXN5T241OHF5enpQNFgzY2VlUTdwWmJtSnNiNW5jMWpwQkYxS1oyenlpVW80bys2V1hBK0tROEd2QkJ5a0FuNGxtRkxkL0ZEVU1wSGZtYVg3YTZobGNONGk2cEtMa3ZqU252cmkwamVxZW1VTU16V1hkMVcwanhCUHFwcFlOY2V4eG4xckRZa20weEdTbWUrYmN5aE1nTEVxUzZPVjRJWFI4dENTOFh0UzJmUFo2Uk1ubUkyNWdXUkk1d2FJZU5WK3JrVm5kb2RmYkRSS1ZqY3gxU3pLVVh4NjhPNkJDbjA4eFBUd1NHN09uMkpqRjZITEludjRhVDNyekdjdkYwR2dnTUhQRXZhMjZoWHpEdGZBSFpCaGlGMk1jK050OFh6K1g5Smx6aDA1SjFHVEN2SmQremtCME9NYjMzeSs4V3c4QVl3MkxRZFhjem5Iako4OWJhTUV6R1lXYTlFMHVuMlN1Kyt1RlFYVHpCYnhMQVpOSlVRd053ZlRJbk1iWmZvb0dhSEdMNnhyYkRuSG9oWFM4NGx6OWhUTG9ocW00U1NjZHg5bWpNZHNmbi9PcCsyK3lqd0dsTVVCaUZMdTVCN2Z6L1Z0azdNOXhHNUVBVlNSMTlkSmJBS1AzMmdpaDk4L2c0Rkd5MW9IVmhHWDBkcHc0c05DUGk0RWthSHVOSUp5YWJHdGlwNjh0YVJjMDhUaTZNZktoR21rR1gzTU9MZG5DZGRZSUJtU01yZjdCZzUzVnZOS1JzcjI5RFZXOVRCcGJYTUZwU0tWMTVWQmVYenNja055eEVpRFVxN29ZQklvRkZMb1R5MWJBU2U4S0Z5U2tTSHZHc0dGWEljYVdSUG1mVXI5SUVXM1FMd2I0VGUzR09RZGJHbGdFc2pnWWQ0ZmlyVllwbXVOV2ZwWitwWkVwUXJYbEliRE1lKzE0NTZlU0NJTWVVcFY2dlJ4d2ppZmpIbktqYTdjTTVrUnBCYU8ya2pWTklmTUx2amRwTVk5NSt4ME9UTnZ2eiszdE9vZVdRa0YvQUdDYnBSanZmUm94N3JEM05JU3hUVkpiQklBMjFDSkpDL0V3TVZodEpyMURzU1I0aFlNRXowazk4NkdVYUN1Y0pHdVRwbVp3NVR1aUZpajVuU3dUNThHQWxobDhHMDl0RHFpVXBaN05HNldrWnA3c3N3WlVhT2pwVkI1dGlaRkp6VGpRUzJiUDJzdFM0dlZPZUFYVUUzSmxFenVxQnBtRVZNZzBTVTRSaFpWYWIyTFlWYTVVS0xEMElEVjIvb3FwWHdPQnJvVFoyNjBlbFhjMC9RR0NSdjM2WEJIMUZvOVpTc0RIVVlUVlYzOVBtcWt4dEUzT2hpZHlVV3JRL3JSWmJZN29HOW5ZOXRIK0lsU0kwdG84M1E5N2xta3ZHN2RIejYyTGtvQUJVZHRJOFhPalo1UFNab1huenVGSnQ0RDVyb0c0QnFBZnJ5U2hGOUozQmk2ZkQ2R0RBd3dtVEJSY3l5U3pPeEliMEhzdEtvdmN1YTAwd0pFUWpFY25Tb2pQWGN0bStPTjh5aS9aUmhNTVRKeVZqYUR4c3BVbjhpaWlMVTBKMno5dHcyU283Z0xMTkpQbkNIdG8rcis0blFmYVBIaU91cEFFdENjRi8ydDlOVUt0S3lSbFFEMm5OZmVPZ0pxMnBEbkNyaHJZT1lQa2ErLytWWWVqd1p3cERmSDZ5c3NSeDgrUE9UeHpBeVgxeE94Rmo2T24zMCs1UFB2SFlTeU5Qbis5NzhubjcxN1dXUDArZWYzaGIzOWZKVGwzajVxWFdOZUpGQWNBMis1VFBiWFJwVHMzRjFtNDZJSVQ5b0ZIaklaaTlCMGg0VlZMNWxMVTJmL0JPTEVLdkw0TlRUNE53Sjd1R0ZHbU16YkdkeWI5U2RjdEUxdDNSd3QwM1NOYTdxWk1xQlNtQ1BQY0g5K3E2QTluVVdyVnBiUE05SXVaVGNzcDBDVTN6T2xrVjhFRGRzWjBObDdWRVpqV2tIK2JXVUQwMUcvY0EvaDNnMXNGUExpTS8zanU3RHNZRVVXMFF1YlIxR2V2YThTbjlJZzVGV3pYVXNNaHQyanRzUmdEQ0gyNEZoN01pRmpSOXNFRWp5SHoxd2pUcTM1bXBhcDE1TDZrU0tiUWszV1BTamwyQlVKSHhyQ1BHTnp6RUF3M3crdjFnZS91K3p4Vk1ZMU51WjFQazJsOUVIZjluUkdHK1hHRlc3cnNKeDZ0elNVSEdQaG0walhSZDh0OEFVSVg2N3B0TmhjbjVVbDVoSlVYb3ZQWi9pZWJJUDlITU1YQVhCNlZhY29xZHZOb0oxN0NkWjNuOTFYdVRxcjhNTTd2R2tTZXFkL2FKam05K0h2NkJpY3pEbk5PdHA1SkNvQnRUemtYZHR0SnVyWUJScG16MHN1MnpOSFNrQnlycHJ3dFQ1bERHY2N0bVB5Y2VCdkVWUmhGR2JhMnRiWFE1ZDI4TVFrcFM1TzR2TUdQUzNPR0ZmdGNhL2E3ZVJLQjA2em1rTmh4aFBjNTBOZ25RMFZUTWQxREszdWtkSWsrcDdLMU9HVng4KzV3UTdqcU5aUEppSXlGRklidjVyaXZWTzlEVEs1Um1JVkxlWml4bWRSaFdiaEcwR1Q4YW1NSU5CbHFJeXdrRkk2WndNOXcxdDFsV2ZDR2xNdk5ZdTB2KzdSdHNXb2VYV3htdGRYVlc4ZGE2cWJITVhCTUZSMFp0NHllQVcxSUVvd3JSVVo4eUhwTmtPYVhDN2hyQ1grK3B3eTVvZGx4di80YlBLenYvdU4vUGJyNXhJQVBwNWRmdm5UcjJUS3VaaHZLZTh1WnZPUEg1dWNaNHNnc052OVJRN0ZiMzc4K2hmZlhoQUliM2VOd01peW9FcUwvTUYvOFFQNTRROC9seC84M21meWgvLzRuYWdZclVBYmdwYnk3MUdsMnJpQ3ZWQ0RvS1NWdFFmMHpvVTNsbGJZWWhQMEZHVEQ4ZkVwY3BsRklaOXlOYWZ6aWhGUWJWQVFrcHVsdTJZRzBFcExkRE0wZnVIb24yTys4V3NwL2M0cUd0VGtDdU9iM3J5S29GZ1RtVzIrQWRzNXRoU2t6aXBlbHVNMkd4a1ZMWHk5NS80cnJDcmdiVFYzZndtT25YbFhESGh4NENkZ2gwcXhHVWg0bzRHeHhjVjU4SjRKUEdvRytuZkk2OWJ2N0pzWTIxK3FWSzZ6a3pmUlBROHlQMmJRc2Zyeld5b3p2U0t5MzVTdzNGeGJZYlNGUmZJTWdSQ1RPSHRhSDYrTS9JcUYwSHRESEVPQUNFV2xzOHhTa0NzMlFBNUtac2I2TndwaTVmUjIwWVhHVEFDZURIdzNwS0lDeThJT1dvQlQ2TDIyMjlXOXA2Z3dqWGdNcm9kSy9zRjUxd2pkMG92WjFaUUlPQnhuQk9abTJ0cVlnd0ZCWU94cWhvaDNyYUpWbDBaNzNBNVJaZXJiemtUclZRdkJBd0UvVzgyQUFYVWMwTkFwdlk2c1B4NjUwZVpnMEY1bnZDcHFNRTlMMzhqOElDYWYwM2ZyYzlKRVcxc0RDdXVkUXVLZUpwM3RxU2J5QU0ybENYS0tSRDF4TCtLQlNXTTNra0NQbE02YzF4WWhRVzlkVk05bHlxbGlXZVpqMExJUmpEd2p4ckVFbEFFOHJLcGpvUzlBT3pWb1R6MHcyRFB0QmxPYmhHYWNuVkdnbTNsOTNYYUR1ZkxxUW8zWXpxeGh2Nk9GelZGekUvWllVR0dxTXBYck1WTWp1TTQvektqREF3Q25Vd1kzcGNjMVFOOWlPbHdla3gzWVV0YlVDYTJ5MlNVdlVhR0xDU1pmV0NhNlRIbXc4cWYzY3dkNjdoU2F2R3hvZlpPK1ZDNG1ZTkFWWmhuTXRnSmNkQ3BNZUNWamlpYm5xejBkZHZoVnZ2ajdwL3o2aSs4WTkyOC95bSsvbW5JK01lOWRSTnA0bGNmemlZQ3htVkREMzM3VFJjcTNvbVJ5dlo5eTlod2p0U2JQaDhnSjRRdUMzbmpDdEo0NGVmTHhJN1lTNUlsVDNyMFQrZmI5RjJMNjJ3VUovZU9mM09Uejc1dFV1OHZ2Ly9EN2k4Qy8zRVIrOElQdmNiNUFFMTV1WFdxRlVOL0VzOXltNkpGYXFJMVg2WElYZWFySXdURUhPQW5jUS9SakRzZTZZTjZ3VlNXdUJKRHAxRjBlWTBQRlgvZVpDN3ZncUlrVE1jT3BHOHc4TWc2MGJNNmlRam9BQUx3QVExSlIrdnRkcTc1NUdoT0RocFZ1blNHdGFKcmM1V0xweEI3bUhqTWRVa3FOaWw5elp6N0F2R2NBcG1iY0FNNUpScDRwZXl3OEJDR1dzbFhtWlJPOWpacjN4UnFnbWE4ZGtzMmN4bmZVTGpDajVWU1ByTnAwQlorVVVPVm5wamhuOU5FZTA1VEFVNlROS1NpemYrb2RtTlBUUVpQaGIrMnRlc2h6UERlMW5mM1NLQU8rUHB4blE0cmJuZ3FjaWs1RzNXTlIwWFZMbDJVM1VldjhudjBEUERuWG5SZDd5dnIxTFVzSUJOQk1UdktrcSs3aytrQmJya2ljV2NJc0wvUllOM3cydWpVbjZVcVZjcE1LSmtYbmtxVUpoNUppeVlBQ01KWU9WS1owZzBJSXNJcUtYMlRtQ0x3SnpSRUxNTEdDRTFYTHRJaldZek1KN2Fkd0lSS1NNM1hBZzFwWWcvRGY2TVhYbFc2Q1ZKK3pMNllPb25ZUGhxUWxWM3FWd1lDaVRtWmtVVjVRVlpjMjF4dk5LN25ab3JCOUwxME9xYXZ2NldsSVgrQ3hUSzFwUGgvbkV6WFI1UlF4QXJ6TWdUNWVxaEFMdFF3VnM2QUVsM2dBZmdxa0lmcnpmVmd2eDFYSDJhd0VJZDdGaUMvZmNEbUFDMzNPaG9VcmcwaFJZTzZqTlprRndwVWVLZER3UTJpYXFsdXF4Z1hHZC9PM3pvemVhQTFqRDR0TnJBRXd3OUJ3ZGwvODJBcDNDTFV4ZFcvVUhvRWVObzVwVllieFBBcDJFMVZrU1BMRWc3dHdaU3NpTndoUU5tZFNTRk15eGhqaENIb2NtMDFncnB4OVJ6eFVlYVd3K1BIOVUzN3ptNi9sdzN1UlgvL3E1L0N4RHBGZi92S1Y3Z2FtYU00dWp3WmlFaWIyZ2ZkcFU4NGliTHZBQW5DSk00RXNidmE2Z3JiR09jSTlNWWNMSDdBcDliYklmZFF0ZjU1WVM4akQ3OSsxODNWZGNOeFV0SHdodi9kN0t2ZjdJZFZVdnYvREg4Z1BQdnVoL09FZjN1VjhWcW5XcGQ2VkdnL2lCR3c2ZDNSU1EvcHlIb3c5eUR3YklrSGl4VmlUd0poTW1OdDRoNnQ0STMyUlBrbFVpY0N1NER4TnQraTVmMXJFekFtdjkzdUlYZEFIUVJ2TFBBZ2xYYVV6TjMrdjk5RE9HY3BCSWJIT3VnSURTb2M2MnBqSjllaDdhaFBUc3JnT2c5bTV3SzlNK1ZMcEpRUHFlSVNybzZxbXRUN2oxbVgwMURBcEw3dzlVaWdwSlJTR3kyclhHZlRLUWlrWmpBb25uWmdkWmFCWjBFUFZtWGZmeFB1M1NKSjlDVHJsU2tPd21GRU1KZWF4dFZONEpPNDdpUkxmblhZek9BNnhOV21pdjhRcUpGYkVXeFI5dXNwU0h5SHNPWUlOTS9zaWRDUGpzcWtFODhMb1g4TzVuRW5ydFVEVnAwOTN0VGdzQVdNMDdOLzFhTkRONnFGMVkwbTFOZUFrVlV3VU40SDBQYm8wYWdaelhoNFVUTC9vblhuTkY0NUNBdUlYaGY4VEM2U1lDOUNjN0FxcDYzYVg5bXlpSWNra0xBVVJqVmltMG9JcFdBWjF4YWJNbzZmc295YVRqRjBMMjhMZjVtak9mTW00dVZrdjkxV3BGVUpRQk9XL1JTa2ZsWG1ScklnVWZ1S01JRDlVQ2JLbmIyWnZoS1JlZHF0ZVQrU2JIUC9iMG9hcW1uUUVXRkdqQkFPZW5STHc0ZHFvN1ZrL01VWnQrQ1luZE9mREsxRU5TdEUxVEt6bFZrWFpxQzV4MEdxakcyWjBrbzlxeVlpTFJJb01zK2Y0R3hmcllxK21VWmxJYVMxSVdsV3VqTDFveGpDc2UvbUNYMElDK2h5WTlPcHBtcEdqYTlxazJTSG1hM3Y0K0tOQ1hsWExnRU1IdHRnalcwUVJOT09FbC9TZ2dhaVJpUTU1YlNJZjM0dU04YVg4OVYrWlBKNWZ5TmRmZjVRUEg0YU04WlJ2dmpraC9BVVlTOFk5bkgyUStMNEpvKytlUnFnUjdQVkpDUE1BdHlwVlVPaFo0VDdxMUhaYUs3dzNyV0k1eGh3UEVIeTY1dVgxNDVUam1QSjhzc2EwaWNqUHY1TGI4VFA1ZzcvOVhINzg0OThYSzRjYzkwTisrQWU0cDVyS3U1ZDNxd3FjcWNydFhxUkEwbGpqZmhoQmIzU0tqa3huVkU5Wms3cEgxTzh0WkRjdkpVSzIvSC9OQU1vMzFmMTJDSUJpSlBpeUt3MGpNU1AwSUxCTFJjeEt1Y1ZlbnNPNE9FOVkramhIRnJqMUkrSU1Kck5ERXNJMTY2SlBjdGRaa2c1Y0VKTXlrQzJPNmNMQzdvampYMVU5RFhCZkRlYmxXcExtU2hIcUZXVDZ1WitGSnZUYjdaRG5lZklrN2lVZjU3clRXb0lPNmJuVzJod24zVHhQR2ZORmJ0bVM3QTgvcUpZSTNpMmE2WnpYWWpLZkhrYzlnaFpoNXdZNko1bXBNZ0o4UllGdjV2YzlVOFpCaVRiQXNua1RzeWZ2TS9kQXEzU0pYRXJ3WmF4RkhvbU5RSGYxVzJ6aHJJYm40eGx6R3kzYzF5cjJiOWRvaWxtSEMvd2NVaGZoYVZ3RUZmalFsWFRpTGtla0hYU3BoRm9PL1RFRzhXb213SHN5UHpCejdsMHljeDQ4ZDJxbGRoeFpKM0krVG01WE1rNnBJT3hrc0VObFRSQzBpQ0lINGR3YWNiYm5KK2JlSHZsN1pZNHJZZkI2NTZIbGlwem5vSmttcFQvVFErWU1wclYrT3c0RS9iaUx3SlNFaDVKZWtoekMyeklPNFZDMDJ5aFJScHFsVVBFN21XVmdpbzBmRm9MZGRIRmJrbWE1M2NGc3VoRThxY2xBNWJOZ1FGYm8xM00vVjcvb3VZR3VKeU9CUFpKWkR1RUF3VHhiTk00eFh3ZExvK0szcnFYT0NHa01ac2VsbllFY1NKV01GVnl3Um9KWXFDbE5yV2lmb2xBR2lqVzBqZlVrbFNmQlNyVEFQcHBZcnNzczhlSHUvd0x0WE4wS3RVR2g2a1Q5K0tPWXFEbk9YUFRsS2xpTUpsT1A5ZURXbXZRT1FlNjNYOExYL2JzdlJINzE2Mi9rZDc5OUw0OG5OdUdIOTRqVjZHM0syWHlpMk82ZWdoYXFKdmJNRk9DNjRyUlFnREJKMHNia3FZbDNHMTNrSEdUbWduejd5RjVSYW9Sako3WEoyaWFBaW9ieFBBYlp6VE45b01xbzdZL2ZQdVZuZi8rbG1QMUFmdkpqazl1dllHR3F4K2Z5azUrY2NuOHhlZmZaWnlMbGM3bmRtU2RmRHF6MzFTNUdocmFzdVpSSG9hWWZzRlVKc3ROaDVzUU1xU1FuOExWeExVaFR3TkJTY0tDRjVxb1M1SWRwbkJOSHVKNWJnaGR4STdUY1paUXpBUG02RmJIUitOeEp5d1BZVGxvUnZKMEpUNXdjZXc4WTNZUDRQUTRnTFZDWnpNditGZUFkV0lFckxySGRtNHhMdlhzVFU4YTRXT0toejZLQXZ5N3V0ODJDVDNsOEd0MlExZ1ZQQ2M3c2hhT3FXOUF3VTBVUzNJV0JZc3EycUZuTVd5b0tLbTBpbzBDTEIxL21uckVRM0l4N21vZjM5dzNTcEdUSmFGNlRBdTBNSC9tTk10V1Q5TThZNDhDVXZqNnZhYXJCMzBka0Q2UXltc3g2WjBEcFZyd0tPbG4wRFlKZEJOb05CeWFERU5pN0N6NU5La3FwNHVZblFEeUlMMEUvbFJ6ZVFHcDlRMng3Zk5VaVZrMVVLLzNkaXMxWU5iRnlZWklLcU03VTFObWhZcXhYN1NsMEtzZjl0b2hpMVNyOVBITTdLOHoyYXl3N3BUb2lxaW14aTZidDJzbUk2SFVhMzY2UW9wZG9VK2VvQ1FhamVxY2c0QWhiZ2ZTR0FiNllaeWh0aVY3TE91NjFtQWZDYWk0UjBYbDVtcU4wU09FQ04vcGNyWktRYzh5S3BmRzhKZjU1NWdVN0kxQmxHYjlNdmVMNlJUOU1tUTRqam9CRi96TldhaWM0QStlS0M0NnMwV3MzMTVJTGQ1YmNSMlBHNHNjeTJ3dEJsTlN6TUI0VUZpd0V4TUhJOEg0NnVVcmhLV01qS1V5VXZLZlI1eWVzYzg0RmhsZkM4K1puMHlVUTJXd3lsVVN3K1B6Zkl5K1ZDWW4wbDUzWVVLUEw2RzI1QzFTZWEvODhUcVRXL1BxWDM4alhYMzhsZi9YVDMwcDdGdm4yUFRjc0FVaWVqODJFaVB6VGlMM3BqcndtRUtnNkdiZ3EyOEI4M2I1VnpZUEhhTk5weGdRZjU1Z3gzSVFCTzBIbXFTNWFyaHVNNmc3d252RU9vVVhpK2VybzVHWEtoNDlnRE85dUgrWG5QMGM2N0k5K2RNajk1V3RwcDBrOWZ2VGQzOS9JOTc0bjh2cy9BbE0vNVhWcHZFYkZDTk40cmFpVng1QStEcTVYcnVkUVR2ZVE4a2lWNUg3aHFJZFRNOGZKU3FVNXZMNWhuc2NsRURnMU82QVpXaUZ5bmt3WlROSFZlWk9YNHltdmZYRU9oSk90VG8xZ1VMUW9abjUycHVoZjI4OXFrbVRzMmE3WU5Ta01xQXR3TVhhYU1TOXFNa3Z6U0xCUXdJeXBacUlWNCtwUjIwcGZETHhLVEtjN0lDUzByWjF2d3FGbUdhQmI5RHVyS3QxdnRseVhhbXh6MlZEV014WHlBcEg4NlpHRm5GdWNqeFN4cW5mSkE0dy9kZVZMMEJvMVdsdXZNUkx4czlZdTdkd0M1MmFtV3ZKdHcweW95eDA5T2dMcWFONGlZQlNDaFFldHFXYTdSVURvZDJlT1BSemYwYjlyeWVqZDBLNnNzNUpwdlJtM294R0JiNkpRMlNZdm5tT212ejh5bFkyQUVjYnNuczZJYWNXa0hkVFlsSVNZR01LRFRGMEx6ZWpTRW01UGxST3JYSTAxdy9vcG5UNzdsakp3YUhaeW9uaEtweW1wOTdKQmsyWWYwTnNZUXlBeUpUdm4rc2tzZWZVaUd1WUxyc0xQeU0zWG9QTnhJTG5KcVpFWEozcFRJNDBpZzJzaXU0ZFMxZzRxUUlaLzJTRlhvNmNIa3R0TVRYZjBRYUdscm1qYzZrVnZBcGtKMDZCQXVsdVIrR1VITnk4S2s1dG16dlplcjlydC9NckU3ZHBleUVrL3NnMUo5RklDNWIvNGg0U2hoOThxd1BWOFF1SjVta3c5YXhmbDU0a1lCR2pER21tTlJUL1ZFdGk0UlZpd3Q2aFJXK2dXSVpVWExuVFhzd29kdXpxTkpsbGx6dG9SL25rWmUrcmdFKzZZZnNwNFREa0hzaUUrbmlKamZKQy8vSXZ2WG4vNWMvbm02eUZuSDh3SXNiMXVSd3FWbHg0a2c1OFQxMFVkT3lWQm9JUitacG55eE9Ydk8vNVdacU5RRnNTNEFQc0FQbnZXVlRCZnUzd2xCTFM3dDJZU3gxSXV3YXFsaEJzRnAvWXBIMWQyaTY2QXBkOThNYmpWaTFSN2xXOSs4aUxmLzRISXQ5L083eGk3eXUvOUY1L0p5eUV5VGFQVzkrUTRxR3lGUHNJMDNKYkpzU21RL3libU5Ca0RqMFJCM01HVytKNyt0eXVRa1phYzR5amtFZUhCc1FaRm9BRVh6MWVHMlRmdTkvSWlNbDBvSHNGb1F5QklyaFVWeU9nVEg0VDBqQVdkNVVsNVlDaHIzb1lmck93d3hDNzRsUVNBR2hEQVk1aVVxRU5Ea3hHV2xnV2w0bTZIS0FVKzA4ckF5UzU5Y2wwU2l5QTFCSkU2VUloVVdFSzc3Q00vcVdSUUpjQVArbWxxbVU4TlB6QkZrWXlZTHhldlNEOUtwR2psSmt0a3luejN3ei9tOXlUV3VSdEl3NnIwVG5GaUdsQVp5ZWtWYUgwbyt6RGdUdW5kNUxDNE0vejhlcXoxK0E4ZFFVQm5SdEFud2g1Nk9LWXJpY241OTZwOHRlRjNIRzNLUEtCRjNscVJmaGlxQXZiQk5Cd3dSU3dZbDI0ai94RTBmRWRVNjJtTzd6M3JQMWRXZ29sZnllRFZUZFJ6NHhmRGErQUdKWUlrSkpLRTNzMkNRMlhpb3VWL1ArNlZKc1lOc0hwMmFCUnppam5zcG9WTElQd2F6OUhrWG80VkdXbVFZTmxXSXhFTkFwRGtNL0NRT3phUmt5RktnVWJjZWxWc3NuSXBiRjlTMmgzWkRqcUQyUWY0eXR0c1luWUhMRzZ0a2dkd2pmTnc3UmlhZFJhd2tEY2FzdXgxZTBtc1dXaUhERkg2cXhUbVFwcTBEUHcyYWhFMGZaWFVQOGw0TjVRM2pSckkrZHd0b0diMHZkbHp6YjNwa1NaRzNvdEg5aU1QbU9Pblh0SlFrc3h2QkU0eEx5WUg1b1pSN2FkS3BQcE16NmQzL0E3WDBOc0Q5L2o0V0JIbHIrMTFyY2srcHZ6eTE2ZjgyYi83Ry9uMXJ6OHVpOWZyYTVGNnVGdGxnTmhkMHBZUVRYMXdUNTBUd2l4YW0xNVI4UFVTWnQ4KzhRS0xncEJaQzRJaVQrWXAxd0tUZmVlYUtpWlJack9SYUQ3bmxGdkJDcjE2OERTZ2c2ZnVac1hDRlYwQ0FteUVsU21ET1hVQzZLWXJZSlg1MjlxVGYvLzNUL25WTHovSXo5NVYrZkVmZkNZLy92S1A1SWUvOTFIKzBULzZIdnk5UFhXc05DRUF6aE5tQ2M1Rk54QzdQbVhha0Y1bTRHSnozVkV3aGRzbDQwYThwMjVpcmhMZDJSeERRSGlvTXZpZU9kekFCbUN1Rk5mY0tiVWMwbVJFR3V0ZS9ubkN1b20vQjlJaVRWV2lrMWRvNVJBMnRDREZjaTlLTTNNeUVzNFZTRkJraG1tVjVEVzVZY2FHWVcrSFRMbXhzbDBCZzU1MXowamJQa0NaeXorUmtaRGxyRWRtQXBVaDUreXM2eUJKSDd2blZWbDhyMktzYVZDb1VPVllKTkJlQ3hONnJiSmlON0phWG1KUU5BR2dFbHNKeFd2VHpQRjJaZFpjRDZuLys2dEVHZVBVam1jbi9kakdsTmtWZmNBMWNEZFVuanNNZUNzejF3QUw4bXphZ2RpbEhydUNKdEZJb2pIZTArZVZGaGZPQmw5WnpJYkZ0cU9kMFBwb2JtK1g2bWNxdkhlRytwc3MvM0hSNHdxWmNJcllUVVZCcERQU3VlTmE1dkhTSlBPeWtmYTUxYzdONExRUlpUWTlBSUZCZWdGQnlhY1hjaGh1Q2pOallNVXVoY1VjVUJCSitEK0xIRXFYc01HOGpsdDFBQjBlNmV0T2huUWk5VXhSZEo0cEtoNmh6RnhZdUhxcVFpb3RmWEpSZGphNlh1NllvQzhqNmsyWDBXU1lWN3p0YXdHckRqZGJ4ZUlUaGRBQ0dNR1M4eGlqbFRDb05HdjZLOU1sU2hVek1wN1JaWlQ3Nm1kbWlUOUZHcE5JZUcyYTNlZEtGeW8xODJYM3dnMVdNeHFWWUIyeCtVZkxIUFloRDJqVDZyNVR6RkZLMm1UUTBZZXRyckZvYm9CUlErQVlMc0ZIME42Wm11Y1FnTkFRNEdHS2lpMW1QRmRzeGxINkN2UjVQajdJZUQ2bHpTN25vOG5ybzhrWHYybnkxVGZmeXIvLzc3K1E5eCtiUEQ1T2VkSzMwNS93czlaRFJIdVJkb2dZQ2N6ZEZEU3V3MlJwWTRpUVlYUnk0dDNnT0NKWXJsd0FSc1dGMUVWY0dxSi9pMHAzRFZJTExBUmtiSFdLTkM5TnFkZ1BCT3dpR1l0bzhCU3d3OXhFZDBaUndNU1drdEhaUmlTMVJXSEpmR2RHRDUrUHZrenZaa01lenlZZlBqemxwMy83cGZ6bzkyN3lqLy9KaitTZi9KTWZmMmVTLzF6dU4vcFlhNG44YkMwVXJvZEhrVGZwb3pJRFkyemtDYStJbTdoV2l3MWxZanBEV2VjVGJVT1ZWSHJOUHRxUXd1THUySXh5cHNtTTJ5NkZ5UnlQNVNxYW8xRXNlNllnU3JTejIyR2lFWkFINVVOM2pscGNRVXBhVmdDV3RBdFpwSmt3ci9mUjA0MzVobTRwbVV6bTRxZDJKMDcrKzZZQnIxUzFFOWsvU05FQ2c5a1V5Z3hDQjExdXZYdmhKNndoQ21PYWlnZDhROHI3QlBpS1NRMlRPdHhzWmhCY3pSclBHMWNYWlNGeVhFK3NDSnBEQTFSSUhhbUxncjZWRVRFRVd2QmJLQldqeUd3Tis1WTRIcFdCaDFUSUdlbXVZa0Y3UnlCbWVvMWhsUnVFcjhMZmNpRVJQQnZNM1MyWVVyZ0daOFlmZFNCbmtpVlBYam5GeGUrWnRlVDRDa2dReGNlWmFGZDlGams3VGtoUVFJUFB3cG0xTWdUbFVCa25JRlR6QVBic3ljVnY5YlltRlVTSHZ2azl3TXVSOHFDZVhpTUorL3JrT2FPOFI1YzhpSGxOSVVDMXVKUURmSHhMWTI0QmZ3MmZXSkN2WXJ0ZWkvU3ArallhaFhuc3N6cFQ0a1RkNU5BWlZaKzZ4d3dRZS8wb1Vkb3ZOenNKNzNRSmUybTlOY0VJT1pVMmE1aDlpbkhNdEhxVk93U2U5Q0phVGFZenZIa3hjS1VtWGt4TTRMOVJHU2k3MXdGVGFHemZvQ1puTTJyZ1p3RVozQkhNNkxoSk9icDhPQWRUZ2diTlh0eWsxU2dZaUZpdFM5cFVPdTZMN1Q0bHRFOHh2UlRiMmhwblJKRStwQWdDVS9vcUtYanpxSG1tMGpnSkdHbW1ML3lFWGhKeEVzc2ZCaFdMNmxNNmNTNlZXaHd1SDdBWXpxU0o3NVMra3NiNzR5bVBENDhWbi9tYjM1enk2MjgveXQvKzdXL2taejk3TDYvUHZuTEhINWpqdEc2T1ZWNFZCRndBcmZwaXNGWlZoUlZrTUIvOU5xWThIRDBxL0tNbG1YbXd6eExtTlkrdmFoUTJoVUxxMk53SjlTanlPakpEb0ErUHZpMHNibUZ5VTg4VzJkME1oVUswQnNla3JISkJ5Qkx1QVc1YzlEN0dsYzlzQ05nYWcrdVA1dVhmL0hiSStmeU4vTzZyOTkvbHVIOHUvK1dmL2xqVWJuS2ZCMDJ0ZU5pek44d3poWWE3RFdrZWpLdHc4Nkc1Rm5DOG5ka09WQlk4bmlNQ1BQY09UKytuaVpUUWREVkpBSmg0eENja01IK1hOZzNFdm9tb0FuZmZyR0h0Y1IvdFIxSFVQWDhiZDVMUnhsU2U5RVl0dFREd1BhZ1poU2NxNmd4V3RRZ1hPYVNvK2F4eHpwNmJCZU1GWTJuS1ovWWRBQVpNaTJWNGgyZ0k1RHNvajRsdm5oWkZXYUo1bVY2SjNIZ3lNcXRVZkVDTktCUXg1YS96Ri9WSWN3YVlEOHRJYzNrRTZhREtFbjhsVU5mTXJBVUNzSlY1NGx4dUcvTThZMHdoQTNmYm90OXpKT1lHTTNGU1VHQmJld1kvSk5SdjJhSG1pNXdOZ2I1VkxINVhENzViNzdhN2ZnaU1jK1dCbGtHZW1HK3ZKb2ZhQlVRYUJyNUExWVZCckpzWmh3TXl5c3B2TmRlR0dGeG1ZbEx2V3lSem9XK2FQbE1DTDNHaE1ranNxR0pLd283QzRmU2htUFRaczF5aVR3YmYwMFRrOTh2VlhzcVdTMHN6WC82dUdjZ1d3RnZwQmJ1Z2tGeUxxWCs2ZVlrMTNGdW12UFRTQS9RbWZUNGx0QmFiQ3AvSlhpYVVpMEpCL1dDV05KVSt6OWcvbkRSK1pQeUNBVk5WeTlXbll6Ny9lZ0F6SDFvMUNVMm51b25DSXVZRjRWVVhjY1N1UWR2Z0Z3b3pJZG81YVZxZUhHZEdLdFZTdmJRc055M1FrSjZQM0dBZU5GNUZBdzgvRHJwbjlzcGlXcmI1dUEycG84blpYYmpMOUoxYWp3RDBzVVdNaklUM0NTZEFtMWNrcURCVUk5OTBOcFFCbmRNa1NpRm5tbGxtQk16Q1NHWkd3dzh2bk5OQnJCK3Y4dmo0L083dC9JNkJnNUgvOG90WCtlTGpLWS9ubExPTnRjYkhaTENnKys4RHdTdkJJYXFTb2RQbE1XNUQ1RlhFVjhSSW5wcDQ5bnNBNTlXNEV1NldWcmpaUjQ2SmlqSzFFMXBFNzd3cVpYNzY3SXNvbVo5UktOQXBXNWhpK21aM3M1L3AzTkVBMlVjd3ZkUmlRMnZpRExsV2pTQ2lyNzg5NWR0WGtXOSsxNzlqN04vS24veHYva0IrOGgxUzNlMm9ZQUxGZ3lhN0ZHTUZPaGMySnZjWi9mdGFLT0R1RWhxSmVUcG5VK0RiN0JMNWZ0SE9hWDZVa3QxMk44aVlXWEpWSnQxRk9BbGFvQWVXV2dqcWVlOFJ3YVowb1Z5em93SVI3M0RsajgvYjlkMXlnUmd0ekV3cGRxY2JySXFPUnQvekRmMVFaakJwZGsrTWJnZ2J6cCtCS2pkZFV4d1lmd3AwV2laTXZMWWpZdExSQ0pRN3pIOWdOSExXNTRZcmNOR1hEcXdsNHRWbjlISVV5VUZ2RlZERXo4WU91R1dKN2hpWEJib2l4Z25UM2hpa3haTWIrWVNYZnVVZXAvMFI1dzBIOXZKcGIrdGNqL2V4MHFWVUpiaE1SWnZSR2RiQnArRFRFL0cwQk1jUEEvbWlGMW9MbXRjUm5QZzJIalJ1WFRDR085eFdIS3NWRG1HWjlscG5MT3YxTEVYZXJWRzZ5YUV3TDZ0b2F1RUVUM2wwVERha25TWnpObXhDcEhrUnNDSE43aVdNQmJHaVVpUGZpNitNRVlGTW83YzQ4U2xUWG00RnVUTU1ZTE1wQ1lCVHJtRm5Hc0ZhZTJZZkN3dVVBMzN2KzA2YW9WazhteEJWSzZYQXhIYk9Da0plaVBaNTB1ZkYxZHI2a01PQXRpUjhET01LZ0FZM1pnTCs2NVp2U21GcG1ydVZXZVJHUi9vQlZYZUw0TlY3N2k0V08yQTlJL09zcHN0Y2JDclNEUDNZc2VLTEl6ak5GdHRRbUdvMm1KNVVyVWlYUTI0VlZvSFJubVRDSFJJbGZDNWl0R0xvQUFlTG5PQWsrbkhZVkxHWG04elhaL3EwaXExTlk1V0UycFE1Nm5WSjRXUGVwUFhYdlpvVmd6QXJKRmxkZW5qR2RkQjNhTXVQZmtTZXN3ejJNcXFuemJVSnp6RUFYOW1hU0h1Vjhmb3EvZlVwLzk4LyswTGVmL3VGL04wdm1uejF4SVhQSjlQTU10ODBJdFFURGd0dm4rdVFkd3BHcXpxbFJXYkVJWDNOTDdrUjM4REdyb1VkK3U0Tm5EM081NldFeGQyeExqZjMxaEJHNkZOakRpekx4T0U2S2FPcjhyMk10WGR2MGhmRUxpSmZ2VElXcGhkdUxLNnBPUU1jaDBmdVRZMDhUZXdSUmJWQjYxMitha08rZmkveTdWZC8veDNjN0t2OHF6OTVrZTkvL2lPWmRwZUQ3Z3FKUHJhd3NTdk5xbnNLMFpoOC9sQStrOUtWV3JyZlpEOTgzRWNHaTQ1SDRvaEhaOG9HcXp4SXR5aWtjTTQxeW12Nm5tNFpEaERTMFJEbGZqRlhhT1A4NFFXU0VvV015cGR4SHJYV0VQeXMrSnJnT0NpZzdrcEZVcm8yQnVycHdWTTArRnNHb1RiUThZT3d6TVNvWVB4TlFvSVRpMFBENnFqc2U5dEUwSXlaU1JyaW45UFVubVIxckFEbzBaTUZaU1R0SXBha2EvU2JUN3N3dll2ZHdweVhkZnc4bU5ZSWh6c3Z5clRQMGpHSEVxbkdlSSsxT2lZQ0F2dVpGZ2hpb01DcURqZG5RaE1iUHc0dU5kdjJRTjExVlJic2dsSU1NQjZuZmVsRG9oYVVCWWwyRGk5cEFLNk9tVzBGeEgwV2FJWGd6U3JIQnQ1ZlNwaTZTSlNoN09sZ1JHNFRzYU9RaUJYeVRvT2tOcFZhYnZweDVqVkttVm9OYzVSUlJnZXBhNGhVcFJVQWkreUcxRExpSXVOOE02YTBLZjFqaC9IdXJsRXJmQm9lOWc4bm5WUTRzYVFaSnRIYm1PbEVwN01YL3M2cDB6M0NmaERqZXU0d2xwRVdwdVVhQkpibTk1cWdPNXFnTzQzNDdKbTBRb2Fja3hqdHFPV0ErVmtiMThDTDlQNEJLVzhhWENSMzQwd1RmQzNqQ2hiQkhlTkhDVWpUbWVjb28xTTZzaHpZNHRWb3BmU2U2SklzM0tFbXBzSk43OEU3M2pRbGVleElnOUlqcEhneFMxak0waWpGWjRXN3RRTHNSY2I0eUdaUCtyZWdTYmhSYnZHZkxCb1loRmpWd29ETjVTVWRma0RzdUVaTFUyc2lqdzl5dmpiNTcvNzkzOGpmL2UzWDhyc1BYWjQ5YSszazVpb1huNldETUpxQmozeXZpdHhWbGpCVVBmcDdLZWNxcHc1NWpnV0N5NzVzT0FhN2w0SzUvNXc3ako5WFVzc2EzcWx0cm1EU1JndlkraHVYaGhEang5d0ZXa1pJQXhzZHoyREtGaERGSTNQRXdtU2M2MStOVmNqT1F2MHVuNEtHVU1jZ1kyK0QxcnMrbHhEMStpanl1Nisva0YvOC9ZdjhzeithOHIvOTMvOXd1ZTNtOFc2ZGc5cnpFSHFkemVrb01pMFZFaG1reHlGRXZtMUMxRVJQVUtDTFpFd2xJcjV5aGpDeDNqSmRocWJuVFVBY1o5cjl6Smc2aWtCQnErck1oejdwRHVFMXREaXZxNCt4aTkzbllGTjZaSzBIbWgvN1ZFUjZKeFBhVFFrUjJQNDJiYmRGY1JyTkwvT3FpRnM1Q0ZHcnVyZ3BnVjhNaUtJS3BmWlV3QnhQYlpmSXRtVE1tOGxaR2lNMTZTbzRPcFF6eTJ0bU9LNjl5cHBYVDJPTmQxRXl1aXRwVEJkaHBJbHl3cm4yZ2JxWjJRMm1pL2ZWTm1XYVJ1RDE3T2syMjZuVmtCN0FYM05HdkZnOFkzcjFNMVlPVlkyd1UveStCUmFLT1pRNCtPUXBaOFFGRmQxQmNSWG0vNERkSGVMK2drSzZYdTkzTUswVEhCVW16Rm16NXZuVWJZUk1DbkZ3ajNMSTJXRzZHN1hLbENjV3pMckhsclBwc0gvdWR4aGRuZytsLzZ5TEdFeW9mWHlLbjMyMnRnSkttcGVYbXowcnVTV1g4dUZPWDNqNk8yQlFIQ1ZOT0dPYmNVYXkxaXpZVGNrT01JZllVSkNHK2xZTnFrZ05FQjB6RGIvZEhPNG93NWpham15bVZRelk5NUQvTk4wSHFoVmdNd2J3bWk0aXQ4VTBUZXhRa1haeDdvdVZBUTNvT09Sd2JQTkl2K1BXTGU4UUhGY3NNZGZ6SU5hMlNJSUZGR1FvYlA1VExZaTRySmtTekdFMXNlTllpK3VvQ0pCNmZSV0FhdlF6R0ZwWjd5amRxTnc4aHFXWkdvaHI3QzBad1R4TTFDc05GQXBENmxYTXVORWQ2NXRhbE5raGFoT2ZpV3EzbXpVYkZqN3BSUFVObjRSY1lTWWNoZm5oVDBTd1ArY1VmVFFaNSt0S1Uvc2Z2bVBtLytuUHY1SDN6MDZFdGt0Y1lWVER0cERVOFRxS3JVREJQemhRbmVyZEhlWjJMcW5nck8wRzk4NG9jQ041cW1waDBKcHVadFpqQUZlOFRiUmJhYnJYTVlLWVhSRzJNb2phaWpJNWtHdzJtSFdBSWxHcmdWKytVbERyb2dGYWRKTXB4Z3FMc3pDRFkvSzVXNnFHVmdRYkJiYTRodlVxbU44cE5WeXVqUmF2WjJreUh5Sy8rZDJyUEI1ZnlObE8rVGYvOWdjeW5pcXFTQk95WllsNXJ0YkVkQWNHU3FjYmxtdGxLdW1TaVkyQy9sdVFTaEQ5dEhqZ1JwMk52dVJuSERJcDVNZkJxOGtnRUhHdWxlaUNFSWh1azBMalRPMk5seklORGs4eHJXeC9hbVVweUIyOGxxbUx4ZkhOSytKWTFDYzUwKy9jMVp1Ui9PbUM3UExwWWJRY0hUZENSeFVMc0psaXlwRkk0Q3RwV2Z5Y1RTT2lhT0kydkpXa3JsQVVrNEpDd0lUajJnS2hKakhXbFR5RmFLVFQ4czU1cGJjakZWdHFJWk9XTWhLT2VFYWFBL0lvRzE4Wm9kV0xIRVRjSkkvSi9vYkxKaG43dktRUjFvdm1YelVHQUtjUDhNRFd4aWV1UXpWWUd5TTExWU5RQTZFMDU2T0tvckRCd1k1TlV3S09HVHdhREFxNTYxalNkcW0zMEhadjlrNzZlS1NoZHZLQ2E3M3UzYVJMaWZncG94dWxmNVhtenhZazU5Y0NyVGdZSXlNNHMzYWVtN3VONHhxUmhpbjlRWElsVVllMXdHWmlzYXNDajk2V1dYYUl5dFgvVnkyVU02S1RRWG9FWm5yVVIwWXdSWE5DTUVGTXlYaklxTm1hRWxxTGpGVVdFeEs3UGxkL1hvNFhVVFBteTgrTTFteXhsaUFObTBnN0d5TmpjVi9HdEx0L2haSjg1RzBubHJaaWsxM1JpQ0xTa3lsOWtxaFNJOGVqeHc3RUdhT2hqUjBCaE9uYjljYUNXV0N1dklMZmVoK2NNN0tia1g1M1BiTjZWdXZGQlMyOGdwaGcvbjBLRWtORHlmamUrRUZqb1U4NXZTQ0tOUit2S3laKzhhSUtUZnI1UVQ0dUtGYkVJL3pGbi85MnZiNzU1cjA4QmdKZ0dLdnFhVEhFWXlqaUs3NFFkOEFJai9wN0MxUEJGcUc4S1N4TUZOb0RWL3ZEcXpNQXJHbnkxVGdzMWlubmU0NjFUNTh6M1N5Smh1b0VMdmxIM1FhbXBoeVZLWGtlOWZ3SnUwcjBQQ0hneVFQQ0h1N2Z1SVlZdFQ4ZG93a0VpR21UUGMzUGJsbHdzS2x4d3ZWVnJpYjZSaGZ0dDY5UCtVLy84NWZ5MVZkZnl4Ly9zeitVZi80dmZrL0dNRGx1aU96R0VuNUtzUnVJSHpNbGtnanFabUdzNk51QVgzV1d5VFdVK3pncnAza1U4aUZsOHJjbzNYdW12VTBIdGZMVTlFVVphSlYxV04zMXg3KzhlaU5PcnBZVjRsaWlkVDNxMGRJdkczeUFKS21TbjViZDloY0xRVCsxaU9RUldVVjVLS3haSFV4Y2hHTXJtTCtxYU5QTWxCQTRnbXFGdHQySzFKdktHS2ZJV1RIZkxqeHFKMEVOUUM1R2UzdjZubTFyUStJem1YaVcrRFpEMXNZbmdpck4vRm81M3pIbUdZdGdOVmI2WUZEWjdCTm1lT0ErNUxuaE9YT2gwNUZHcVhSdUJiKzZGaW5EdUgvNjVxWWtqYzdabDhHKzVYRzcwS3BxSXVmVTdGdXhoQUFQbWpXWXArNktTQXFVZFpWdkxKcnkzNUswT3dNLzRRUFZqVW9jbU9pSUVMZmpKbjJCT3FPVEE1RjA4bksvWTJPbHRMR1lWZThqeXJLZXp5YjFkdU1neDBFZ2pDRnFwN1JHODByZzdMSURWak5kbzNQaVBKZFJBWlp6SERmWDlRa3JhQWdJYWsrcGlzSHRTK3NuMCtZbUlHS1BzeXY2N21reTVkRFRIa3dtelZ6RTNxVlBhRXphVFVybDR2U3drT0c1aElhaU1xdXZDazNOaklLUk84TVlUQkVsalEwYkhnUW1KRjhrcjRXVXc1RE1KalhUT2Vtamg3bjZMWVk3OWlpWG5DTHFYVFVMcWVDQ3Zsbk1kRkdSN29wUWkxYVRGbDF6NEdObGhTQWtaSWFFNi9TNzhoK2VBYXNOOHF0Qk9QeGFienRlcUZnRkVKK3c4aGgraWh6UXZDZkFTNGFVYTZ3RUFiTEhlS3hheiszYnAzejc1YmtzU0IvT2gvejhyNy84anBuL1FuNzdOUVF4cG8zUmM3T0JBQ0dPUDFPTThMNzY4cklGRTFjR05kNFVHbFlYRUphek4rbGk2TE9qZUEwWHVxN0JVdFhuMytNSlo1Rm5tQVBWY3hZa1NCTmhoblZ1b0MyamgyUi9oZTk4bTZhV3BveFJOcnBDOTFWcnVNZTdhVElQbUN4dlhySEw1M1F3d2s1Q2tPQXhuRUJIT3pJdm1NYXBzMHVsMitQdmZtWHl1Ni8vVG43NjYvZnlmLzZ2L2tqZW9WYjNvanQyajdCNkVFSU9tRm5NTlZMMUNNZHE3aWRWQ0dON0ZQdGdoVGNOYU5nRC9iZkczUFRFVEJjRksxUXo3cFVtdW1mcmJJQmRRa3NHNzB0WDRyZ0dqZ1k5bmhIV1EyVEtIYkdQMXdPc0c3S1VvazNYMU8xdzNSUys2SXFubTA0RkUyaHNybmxERUdOQ0Nkb3NHZTV1WE5GaXZKL0pySDBGZFExVnh1Wk04VUxveXVySUhjcE1XS2ZOM1piSnpOOGU4ZHdNOE1UUnVjZjhzQW9CNkI4NjBtVjY0ZlBiMzdxN0J2NWhXV2ltRmFISDN6NC9kZkdMV20vUzJwbncxcUc1K3kxaUxFUDdWblBJa2N4M0w4YTFKWXlGS0JIMEFLNHlybHA2MWExKzdvMFVXVXRQYzdCa0RlVkRFMkp4am5keTl1ZlNlSHJ6aFM5TUtTdUxHREt4SFZCM1hhVTNuQXRzZUppMGdhdE9Ka3JnbGRsYlJEMnFQcW50aGRTSlhpdjhEWG1VUzIzYXFoWm1YeHVIR3c2b0lSc1pBWldLU2hPWk00QW9FQUxJdzhHSWF3c1lTTGFEbEUydGl0SzBQMm9YR1RkVW1sZDdJNldaSEZwQXpMcUMyQndzeDhxTlptVHN3eGo5Ny9KTExMaEc4eEZ4a3JuUXRTWjByVTRWOVhObkV1c3h6dHp3dlVCakowTkxXdUdTcW5KTXp6VjNlV0FPNjdGdC9lbHBRbWN1ZkxRK3RmV01IK1ZZWnhnZUp5N012ZmdsRktZWWdEaUtYY3VGemJLYktMTm1vYlJvajlHM1Bnb0lkb3pEbUxRVVBlVHg0VlVlcjExKys3dUh2SjRQK2ViOVYvTHJuei9rci8vblgzM0h6QWVFdGJFTC9vcStHQUNTWVhMK3RQNytzWldNUHdwQVN1NEdYUDI3REhrT2tZOHk1WHdxemFQS0d1K3dNbWtLU3Nsc3FXR1FCTUhINldsWEZIRFJFbVpnVEtLUEJSR1FET2dpRTh0Um9VdEhDL1B5VTRwS0NvZTN6b2JaRVBud2hFYjJUcWVVRjFyR0J0SVhzOFlJNTNMQUxHRnF5OTk2THRtZ29RaFF0S1NJaXh5TkVNUGoyZVRiczh0VGZpZi83Ly9YQi9tdi95Ly9YSjZ0eUE5LzhKUTY3bElxeGtTdGsrNlJrYWt2SGVSRXR6NEM4VTNoNmVkK0xYS09Ta3ZFU0dMTWdGK2J4aFM2T3dPNmJLMmRVTTJuSlFKYjc1S0g3M09ENlJxRWw4S3pidFVjSlVGSDVDbTNjc3NNTm5tQmR0djMvTW9yRnJoRGZseWh6T2Z1Z0FFZVFPOVFpanIyaUIwbVZpcXRYbGNSVHczdmZpU0MzdzRUdlFWalRHTHFBL0tXb1VJVndzTDVjSlJ6dXF5R21FYlVMNkZSMHh6ZU9ZWXBVSlJ3ZldvVzBVcENvUlNrRlE2bFhmcS9zTDV3Q1dlOEttMUdrTDhVb25FWkNjKzZhKy9YeWo3RkZTTmE5SS9GWjJxcDBsckxLVWdHSG1uZFcvWS9yYzdkcTJZQ1Q4Q1I5aXJhTXhOS2FoTXBlMnI0bUdBRU15RTlaNkFBaXZXbE5ReHpiYU92bk45S2dmOGNyeEdKclBVaTF4TXlHRFdZMjRvS05HemNBRnF4U0ZtNlNrOWJMZTU1azl2dG1mNnFnWHEyZHFob0p3TXVrRzU5OHJOOEE1aHNhSHlSdUU5ZldmaDRNWUNvMzkwUlZFUnRwRDBHSzZwaHdWcVpZSkprcEVLYzY4R3dkUWRWN0tsNjdGV2gwdVNuSmpvNnA0QmFQWFMwNWZZNDF3TFB3dnJGakgzSVVkcmZzU1luVGZqOExXbzhBQ1pXd24yUVdRWFVhSm1HbHVhM2hFSXRwQTQxM0E4cDFoN2hmSnUyTWNVeGRpWk9vSW5VVEpWVWZYcW9wRUU0ODZoeVpjUFZjSzFXRkdNUTF3S0taWW9Qb1ZSTDRJbkRJbEltSkdSc3RqUG10SlA1VHpsU3dHRkdob3lIOUkrdjhueHQ4dkcxeWZOOGxmZGZmaU8vK09Xci9OVmYva1plWDZFcERka3NBOFRHcjJVdWhtMnVsU05HSWdTYUd1TTVGMU10VnVWV0R6bUl4elNJSWpZSDYxaDNrOUlMME83bStEU0ZLb1V1Vjl2aUhBcUZER0N6MWIrNlVyaGdxeTJHdGR4YjFrYlFDZGNUVWxVcEZEcmd4VlZidnByZXk3enMyVUdLcU9lUUQ2cnljUXo1bmhYNS9DNU1tOHdiUERId3NGeWhjNmkycGhYUUsyRkNuSlEvRkZDMU13dDV0UGtxZnorYi9ELytuLzlaL20vLzEzOGg4blVSK2NGTjNra1R2VzNXczlnNzdrU0dncUpsTUEwTE5FOE5aV0E5dGExUkE4YVJEREw5OUpPZWEvcm1keTk3NXVzelBDVVJ4NFRQeUdPQVNhZWZBWFc3YXdQQThIaTYzSHJGdHRLcjVxZ1FlSkplSkpRcHhUUEovR1dDdmd4UDhVUHRldnlXSlk3VHZhVzNMQVVyRGptWXdrZTY3MHFpN1dtbDYvQmsrM2lzZTcwbWF1UGcvdFdyd0RwSTB4bm92Szk4ZmhnYkxHeVBJTE5jclpxNTdwZmtMdDFLcFBxOXNMYjJ3d3BjbWJYQ3BWczBhZGZiS21wcE5rekU0TGc5V0Evbnl0M09KMzRMQmEyNk9NSHZqZGxJRm5GRFI4bUNUZmcwTW5KL1pxdnFrdFFLcE03TllDT0ZSUmhVSUVGaFlMWXg0SWU5OU9XN3F2TGs3MW1iRzh3OEF5QnVaSlRvYWRSaEp6SGhFZWJqRllQUUR2VDlibktEZ2szcFpteVRhNVRrVk9ydGtOdEJKbFRSVmtwUERFZ3dvUC9VUXZuQ28wV01Kdnd1R2xva2lIV1hpSzZrOURlUWcwclRQU05TaWUwZThqQy9LOXVTeHJsblAzMys4MzNtWng1NUg2YmdLTmRybjB3Wk1SZU1sZldnTjdOMjQ3MDYvNW0yVldTU2xPKzhqeE8xcTZHUUF5ejhIQjVaTHBkQW00RTRpTUFlbitjcmNRbkdoc3F1N0R2bUZ2WkRDZ0M1T1JKNEpPdExjWDB3N1cxQlZKcFRSUHFwY2E5TWU2d2tRQVRpR0UrMisxd0RoTkdxcVlQQ0tvQ28yZWNwei8rRm9UK0dmUDN4SWEvZk1mT2YvL0tqL09XZmZ5bVBKdklZNkRjZkdhTm1wVXBsQ3hTQUxCbHNOM2l1UDVHQVNDcE43Z1Z1cG9DdERGZWRadDd4N2pxSVZaRmZLTTNaNmt4Mmk2enQwdEtkRXRROVRPUUpTU3JUSDd6dFQ2SW9ldXVkT3UxNEk5ZjNxNVZNL2NRaDN3N292NS9kc1I3aWNGTi84Tm00YU8zdlV3VnVRRVRpWjgzNk9jTy8vdkV4NWF2V1pjcEgrVy8vMjcrVWYvTi8rQmNyaGFzS0F5TGZPZEFWZktUc0N3bXV4NDE0ajVUckJIcVBUbzBNbFZtdWZjMU42bGt0RklMRC9ZTHYxRzRpSjVTZVlETzJCMVJKTXFHUzlkOTU3TmJHdE5wb2t6bUJqQmZOdUNUUUtXbDladUJZTlJhWndXOXRER2lCaEw0ZTFaSUpKOU1NZ2I2b3ByV0dlNEFQRU5WSS84dUtiTzJ4aUs0cE5IOWdsRHlYMWRjWW1GMjE1dHFIRmVqdDArUHpTRWE3ZGRnQ0dUSXRldjJ5S2xsbUhCWW8wb1UrSFNYT2hlNmV6RFlSL0FLUlQxVURyNEszeXhidUppZjhuNHBYbHNRTjU1aVU1bk1WNTR1TmF5SDZTUmV5NE4zNHZmS3BtbHNsaTFSNWJCbm5PK3FXbmt4RlVaWEVBaTU2TVIycWJoR1RNZERHL0VkQVhVN0NQYjZlWFY1ZWpxVzV0ZTQ1L081L3I1UThFQ0UrUzAxcmFhSktmd0pYZW9NOGZOWDZHSVZySm9Sc2hRL0NqQ1lmSmNNeTNRaFJ6UktlczBocE5JTkxUbzY1bVhDVDJBWVhBSVBSZUk5aldTMmVzemlSSlRIa2hoTE5nSnJsaHJpUzZQekxwR3ZXWStiKzJ3bHkrdG9ZTFQ2ZDJRMmxpUTRUV3NvUis4dzhkN3loZW1hWmV0WDRIQUFHS2l2eXlJZEtINU9WMVNyZWl5Q1lxTHZFUGFIZE5sL1VqYk9XV3BGYVJ0bHkrNFNwbmZnRXdleUhGMk9ZSklEckQ4VTV3ZG9xQSt4aWEyUWZ1RjZyaXZSd282Sll6VkFndmcwaHJzRTh1WTZIdE9kNzZSL2Z5L3YzUTc3KzhuZnk3WWRUL3VLdnZwSy8vZG5yMmpEbkpFdG11LzA0WEE4emgvUk5IN0NNcEJJMmtQWlR1VWJmVllIRWJieFgxMlgrUEI4UU1teGl2bURWeVhXOUV6Z3FzTlM5UmhZM0ltTmdVSWZNYm5JYzd1S1p3RDBnREdubStXZkpJdER3UWhkS3hzbnJwYkRvSGxoSk0zM3UxMkRBczZjRjZtT3I4dTRPQlB0QlYrM04zaFFGOGp4SFZJQmpBS09rK3llWk9YVVo5T21Ydit2eS91TjcrWGYvL2kvbDI2Ly9tZnlyZi9WRCtYMjdpM1duZTY3OVdRU0JUcXEzM0dmVTVCT2NwYkFqblRYS014cGtSaUNmM1JEQU9ub0ppR1pIalUxbDlFV2tONm9DbW1xK1A0c2NnRXNGZ0RUWVg5ZWo3SEgwalpOdmVNK1RrTjB5VE1iY0JFSWc4QkxpZ2twTFViZk1oYkJaZHNqZk1YSU5xWkRPVlZZa0pMSkhaNVIxeGlhc3RzMnlhNjF2dkdZaDdWYk9pU3VUbXRnYmdmLytKazFXRXVZNVM2Zm1ISTUrRlFkeUkxYXNuVTczb3NNVmE1ZENxK3YwQU5GT1FiS253SmxtM3BIVnpwSUlnNTVGRVB6MUtERkhjek9zYmlyOFFPYldITjV2ay8wWXc5MGRHLzR5QS9qYStXQWxPNmJQMFpJSlI1Nm5EMG5QNHNvRStSZWkyTnlxWlpKRFJvRUdjcGU1L2Y2dTh1aW45R2VUMTQvQUxyWmJaWDFnRTkyaWJ3Y1h6eXpRb3NZVmQxQUtBV1BxWnlhdFBkYWttQ3F4aXFuOTNKeHhkQ0N2eVZ6UzUyekdJQlF5aUVDR01oQmY0c0FldHhNd3RNOXpNV1ZmZlo5S2hjNnRRYUMzYUVjUXpPY3A4M1pMZUQ4cExDeUNZSTNaSnFuemxOcXJqRG91ZnAzN3dUSjdvMjgxaEVpQUVGQUlNemtsdDF4QnhvODByNW1KaFlSNEZ5bk1hYVNvTUZ5aW5VYlRVMHFiblNBZ3BtZ0RjOGh4YTBqcEllMlBOcVJTbUVyVGxndFNRM1psUk1pZ1p1OXdkK1FScGo2ejNTeWxXWVd0SGlTWUNIYThvdnE5Z2VVc3hIVWE3WW9hdUVtMkJYV3pGNk1aNTBQNks1ajU2OWZmeU92L3dzei84Ni9rcDcrQTF0VmNlOUxFMWxiWUNqeFlsTzEweGdPaGpVSkwvRWFpZzNycTlrNXVkM2FDOWZzZjUwVEJHOTVURXhBSno0K0JKR09RTkFsZlFUdFVEalVFTENxRmZ5c0FjS3lkc1M0aXZiOVZPMUhsYTA1M0RibWJLTjJpbXNuTEtaZ1Z4bm40dVZuS215dU5Da0JyS3dmK3NDcDJyL0paQkw1Q0ZxbnNWV0drYy9yNWlhMGZwcHNTZ05wTlVBaXFkSkZ2VmhIQWIrWDlmL2dMNmZKaitTLy81Zjk2cmRQUGJsWEs0YVlMYUJWUlk5dUJYM3hkY2gyS3ROQ2M5NVMra3VJTEdZVElHQkNpWWNJUEN4WUQ3S2d3b0NvZEYyQnFkVVhNdFVxZXQxV0tUSDBwbzVuTEZuM1BQWGROOGJMQWZpOEJtRFZDRlJxcFhlWXpNcUk4KzFqU1l6QUtMWUpxNkhQcldVenJ2Z3Q5RFc2ajN0Q25PYkJTNGN0bVFhSXFZcnZEYTVMWmJoWFdVbVRrZUdZNmZTbUFOdFdvdnpGM2xZOUJ6MlR3UWgvMDFDenkxUWY2cEF4MGJwai9vVUM5UFB1a2F3UFBtQ05pcWRJcW5TcDJNbnZkVmZNZDY5ak5kRzc2MThobU1QVU5CZmxvd1BxVTFSbGlYdmhBaDJkbUdzWG9nL1NzQkd2eWFhdXp3MFNhSmZpSWxjNlc2ZzBSbnBHdE1UdmhRU0hsbVRReFBkaFBtRUQwcEZUYW1WNkZyU3NITWI2TEdTYTVsUEE3azFnaWJjMG84ODh1bFJ1OUtzM3VKbUxVTXBTTFdvMm04d3k3b20rVXNjRG1XZ0NKZjNnNWJ6S2VrK2RYYk9DMmlSUXpQb2VKSjZzZGpURGZ6WUFPUktsTVhXMmRtN1docEE5bUVxaUJNMWZOaE5DOTdnOU5rSXpTS1NubnV4bjZoUHRKOW10RE0rOE1DdXZQVXdSZ2ZYbHNkYkV5cEFwU2E1YVRWZzQxNDh3TWJLeG9DZUk2UUhPdlJHaGhMTCtJeU1rNVorOG56eHNCNnBQRXpXVFRqc3ExdEs0NnRuM1dmYy9ZQVNjbXVmR0xaeklZL0pyU3orVVNtWjJqMHljazRqWVhNMzk5ZkpESGh5NnZYMzhyWDMvN0t2L1RuLzlTZnZxclRtUmN4YjA5SFI3Ym4vMmhUeHpOSnVpUzg1eGdjZmpkaXR3cmdDZCs3L01xZHpVeGM5d0ZJa094NUtRVjlzUG1KWXhIMlFiaUJnSWJ3R2huQ2lHSXZscGpVR3JzYTgyU3JIMXVNR3ZVaHBYbVNZK1BUOENmSzg4dmFRSTB6bGVmb1ZsOUdpaWMxM0xkRXczZ0lmTGVaTGtyWHF5SU52VHJ1RlVmVDRoTUk0a2JOZVl3aVo5Qk90T1IvTTNIdm9UTVAvc1BQNU9QWDMrVS85Ti8vYStsZlNaeTc3b1FKVEZKSkJMcDkrUTdVZEVPSHhlbkY5c09ZVUJrNm9VRVRITGdibWYvUmE1SjBIV0l6aElsYjNOVUlyMTJaN0prV3NIb3lRQXlqNXEzMks4Sm1PWTlwVW4waUFEU0cvbG1SRTRNUGptZXNSZG5vV0NLWUVGMFF6dk41SmIzbCtKQ1M2YWloV1VLQTVVOU14RlByVCtJZW5oMk1TT1doNElmR0tMMkkxNkYvd1pJVkluODl2U0JaNEc2a2FWdGk3dEFsYitER3BHMWIxb3p6b2psb0paMEpzUGYwMHBFeFNTcjJtVWVlczdyTFQrT2syUGh2QlhYYW9saUxvVFlUU0U3Tnc1Sm9BYUtIdlkzaFU0ZElaam1IaVAwYTZiZDhJNjJiVTRUYWtneEZzNzhlMEN5U252S1VTMWdKNnVDNFBSVEZ3Qkp3WXE4UmtvL3VzaHgwRWZpR2dFMXdwUjBnRUlWSmxLY3R5OTJaTkUxQis0bnlWTU9XcE5aSzMyeW12ZFhqY1d1RGhSd3duYzJLczNoYld6K3J4Rk1uN0lXVEcwREprOHNNQmFFMGRTdjBzU1dER0hNdHdFNklQYVJkbWNtRWFoSUY4T2czMUZWd1F5WSt0UldBNGttZDZ0Y05GV2t3WGx1dHhLZ0RVTU9CUFpsSGQxRkFDYzBiMkwxMHl5WlJqSUdyYllrNEtRZGVYRCt0R1BCc215cVhxWjdjQ051WW01eGY3anpsbU50WnZOa0lvKzdDTmpXNm9TVU1NQVlJNnRLLytodTc2RHZycUJRVFMyVDdwSlR5cEFsZEkzSHVaajUxMTkrSytlSFYva2Z2OHN4LzltditySXNkYXN3LzRXVndxWGw5RitycHpFcUlyWEg2Qjd0bXpTZGthOEh4Z085dUc4RXB5ZGpjQ2VPRlFJU1JlWERJWlh3c01xSTlUUERJRkpMVWJxRStJVU81cVVlQkg5eUlPVHVXcWNGOUtaNlpIR3hKRmk1enk1QnB4bGxES0Yrc01PcC9iSHRjMFBiS2htcm9RaU5sMjRpSDdzc3BNSmpGYWJwb2dwb1dWRUdhRzF1cnlvSWtqelBIcGtmdWpQRk9lVFJpOGg3a1QvL205K0p5SC84anFuL3F4WHNKZytCRmZHZ2htZTR2Nm82L25maWFNd3c1MTZ6TFJUN0huZ0lOVFRLS3JEUXRjZUxsUElJMDZ6dTlmcnpUdnZCOFRlM0JaRXBGcWR0WEhlRU1BYjBERXpkZmxqWm1Wb0NuRVJhYTQ5K3RYRWpjN29tbFJhMnQyd3BpcDJtM0FHa1AySXU1WE1WRXM1ZTR4enJEUmxRWks1bjluTTFyQ2JkQythWjN0VTNCWGhGU3ZOV0VoZGRJeUFXSDFCbklXbW9oaXMwNzNWbGtOSHpQZk5ZQVRwbVlQbllYMmZFaDExVENvTVhUQWFzN25OcWVHbUp2N3JlNUtoanVkTXNzN1hTUFJYb3A1L1daNTk3TG4xWWYxeWhUTnFVRmlkY1ZDSFF4QUVHNVloZVJuSzZxcTFnOG9OWEpTbVBmNSt0aTBXVktrZWNJZ3ZzeXBTUktmMjBaWUs3M1d4SmF0ekFoSEljZ1ZKYUQ2b1B2cEhVQjljM1pjOHFRaXlpTWJXTFR2Y0REcEZuazNsN3lmelNLTG1LNmoxdnRsa3M4MVkwTXIzWllacE53V3pzUlVRR3BjV1RCTS8xeWFnNGRVTDdEVUhFSXJYaWNKRTFnQ3VNd295N1NxTFFRaUNnMVFOb1NycXNKSWRZNjU0VGptdTNVTnlDSWlOcmZJL0QrRDJGSnQ4Y2g1RUlkeG1kcGlIOEZXdkNoTG5iR0dUMnkzSkpxWW9WQi9XNUlyQ3hOajNHNkEwelY4NmhGbTRDdlFwOU14ZDZmSzlKd25sL1haSnRyZWdUQ0lkeUZXZThRc2RHamZ1T3gxTmU1NVN2djNvdnIrL2JkOHo4bC9Lelh3dzV6eUhOdDJsTjdkc2lNb2w5WS90djFWc2xiNG9CcFc3NVFvSlZyVUQ0UE5ML05qdTNTY1pMN05zZDdpTitUNXRTRkhVNXg2ZEJsRmwyUzhnbVJNNG5CYWxCTTZaVktsRDV6SkgxTjNMc3l4WGNJNDRFTU5qQnpxNkVqMnBrZFZ0ZytPQ1ZuWUdRM1dmdVhTMU43aE1tU0N0Q2MvMFZtRU8xcklEWHMvV3NjalZTK0JnRHJvYlh4NUNmL3QxN2VmZUR2NU4vODZkL0pQSjV4ZjNHQzdVOW1NQ2hmZFlZak42N21CbVI4TklIK2phY0I5MWlJaVoxdW5vVEdmMHVzeitJc2RDWmtwWllGRE9ZVzdrQ3dNeE01VlJWcE82cExhMWVBd1NIek1Eb0s3OWdBUEloa2NldmdoajhRL3JDNW83c291V0dtMTc2emVqZUtwT0FVSXcvS3ByaVRIZndrcDVWMXF4c3FHZWJndGRaLzJHY3NHWk5wWldxeG5pYXIvQnhPbU5uVDY1dWhWelZkR0ZrakFlQzc1TEd4S0dxZ1A2MlRYYVkzRE1IOUJ6NnU5TmhGeVBZcEozQ0VzUGo3Ym9QVTM4Zk9KZGljYnFRUzhlNzFOZ2ZsU0szdmRPVnlqekhNOXU4QndPSG91eVhzcGpzRlk4NGtWY2IrS2hhay9FY0lyZGNvdFVscUp1OHFVQlZkNzhSMFBBYkx5Q2lSenJzZVZnMWJMQWhoRERDWnc0TUo5MWtXRjlWNmo4cUphN1Jvem1INzNtTVloWkFnT21Ydm4wM1pUdkNGdndnQUdWRnJuSDhkM3RaV3E4V0k2MGIwQVFaRUplNXNTcWpNODFMQzB0MWNubXRUVUhOZUpwbzdWTFU2NjBmME5Db2dhWXBxRk96d1hjQithOGpVNWhURC9LY2FyNWxZRWhxUjRGeVIwMndjNUhaSGxDQjM4UExTRzJ3WDJGRFpsQ21ESUJVWTZDTEMzTmxwTERFQlo2V1NtK1h5WkZSazk2Yk5BdTJUaDJBQkkyQ1JvYXpzelhEeDc4dmdjbFRaQjJCaUpZcUdWZFFod3htbWs2QVZMelZxaFlwSGlZbkVSVk0ydmxlUHZSVGZ2T0xyeFlTM0ovL3hkL0p6LzV1a0NRcEdVbUp1MUdQNEQwVHRaUWhlL3NtaExRUE9RUkVCRXM0dnJ2ZHdIVk9IZEo3V3dXTldzOUFiejJLcUx0Ym53T3BTQzZZWGpXTkN6Ry9aZ3JDRi9qRTJpYXgyQ0htK2J4NHo2UHNUUHQ2cElidWNMVHVMeWJTMitYSS9SczNyZUdyMVVpMWpJS0tjNGFML04zQnlGOVJYRjVvUmxXTmdMbWpxTFJsa2FCQXZmWXM0a3ZPRTNQMzFmZ2cvL0V2ZmlFdmg4aWYvdXMva25jdktyMC9wZXRkS2xOanRXUnNqZlJ4TlRrbkliOWlnMnRxa2Nvdm81ckI0bjkzS2VNUnhXL0UrOWlKZW5hZHU0eDZmdXZFWnJNMlNwQ21WOUxFdkRqUDQ0RHlGdWRLMDFRWlczajBxL1N4dmduaDExVEQvNzgzdzh6b0J2RmErajJSQkNPWXgxMzNVd3hpTk5xM1kzb01wZ2pyQnU0MUxacDV5aEFqVW1YM3FQUXJvRXYwUFdkbmhpK2RoNmU1MFNJNWNtQnovMFpOa0xtZTVTd3c5VVpWRFhTNnBMa3BtTTEyTWlXWXlxUUZVaW5wUWwzdlVFNW56a2RhbUs4N2wrZU1zY2NqQWxJOG9Xc2pIVEJpc29ySElOeG9sZU45YXluNGNjd0xLRlNDeFBUelFzeGJQZVFtUG1BNVdNOEJEWnVvTGl1STdrbnAwSVQ3UmNQTElLL0Y1SzVHNnFkcFBsUmRaa0pwazFWb051QTh6WVhJalVaR2VMdEFmbHBVZFRvdWhFbzlVcHhCRWpiN1luYnFmbWxEL204c0tBb016MkFhckRyYVZENTdWME55bk9PNVJ3SnpGaElBSUFsRSt4UWNaRGRMaTRiend5eUw0bGhOSWVaYWJoQ0NUQVc4TGszUFE0WUZ1RGdGRDhtdDJxUElURm8raXRIM2F0UkNKMkIxN2VwbXlRVklYMzhaNUhCN1NkV2NGdHlwWC9NMzZWcWhqaDVhV004aVY1d2ZFRTA3dkw5c3c0RFFRMU0xRnIvV3hOY1hJVzdCRmpFL3dIUmFOL253R0l1WnYvL3FXL25QZi9tTDd6UzVrejQ3ZzhiSVRwU3R1b2V5MzdwcHl6Y2lmdVZEQ1hSQmsyUTFJTUhabWgvZzlHc2RUSStxRUJ4NVhIQjdQQTdDbno4S2JqaDQ0elZIbkwxTUc3Mk1leU1CdWFxVy9LN2p6cGxVNStQRUkzMlRGOGpOcTlTUURHWmNDUi9uOXZMWTFLWmN3NHBvQkFsQ2haSHBnSnllWTJFeWpHS01yOUM4eDZTMW84dXFHRGl0Wkc4VzQwK1h4RmRmUHVXLy83Ty9XeGYrNmIvK3NieDdlVm5NVnA0cWR0UE5Db1AxbDhPWS9tUmZxWEVVek9NWVhMOUs2ODgwcWVwdE9OZ2pDNHRITWFaam92aExndk00Mmx1NVdubm1kSmpZUVFHb3MzaVliOXNwNmhzRyt5RmNvT1U1RWNkV1dZaUVzUWVwSkJoTjJWMnMyZ1h4M3pheWF0eXJPUHEyQnllRXVxWlh5TFVCeitkWTN3dEFzeVJUM3hRNzZKS1pNbUk5TmFkdGVFOFFsaXl5eElxVjUvbU1OZGZhU1l6MXcvSGpnOFlYMHAvVUhzWWxtcjdBbkw4Zm9CT3RpVEc5NUtwTThSNGo2VHErR29nTm8wVnRYTFVmNU42UGg1UU1jdHdQQ2dDSm9LbW0xMVM0NENzRWVXSlFwcFNHOXkwQnZocmU4ZnlCWURhclZhU2RVdXptZHd2elNOMDJ0aFZibWl6N0ZpVkFieFVNOS9idUhubDlQWUl4cUg3Qm94d21xNUtEQjRueFJrR2djbklVNWxubUFqSG1nSG1LSStwNE1IQ0xxVnUxaXQ3dUtSVlRzR0NiZ1BaVUh2UlR1VzBVaUZGbEdQejhGV0ZlcjFHNVNITWlERkNwOEtiZ1AwNGF0YlFDaTRDWDlLMjc2VHVBVVdGZTQva3FOWUp0Vk8zQy9HVW4zQW5NUUFCL2pvM0hEMWhkQUNKWnU1cCs3VW9HeUhhYzdXU3hBMHFSdmxBN0FXZUMrS1lQdkhpZ3g5eHFTWk5ZUytiV0p0enRsYmtRS09iZzRyd3NXNzZTaDdjT0hJVGtuRFZBNHVwUlJXbWVKQlZpeWd4TWIrMkUzN2tUSzZrL1JMNzYraUUvLytYWDhwc3ZmaXMvL2VWakVlMXpxdlJobUQxREgrY0o0Q0EzTHVvV2phdXVmR3EyK3NJWks4Qm1rR003Uk9zVXZTbUErK29VWVUzb1ozT3JzY2tKcFZ6NkdZRHJ1ZDRHYzN3NytibGpzSVl2ZS9MeFpaZjFnakc4Tlpmck9wOUVnLzNqNzNqMWZtWGtTZEJBeksrVzlkM2ttUXhzYTBRSnRMYkM5cjVOSXVtaEg1NW5YM1BTU2tFd20yMGdMV1pTSzlLS1RCRVlCTGhsUEc4VVpRMXIrT0xQcWZMVit5SC84Zi8zODBYdy8vUlBmZ3g2YzRNMktiSzVmQWFESHZjR2xpQ1VaTWlJUkM2QlVwZzEyQ2V4b1ZHbXZXZmFrVjdxTlBMN1pBeXpkR0pibUZ3T1Yrd1VZdzdodk1GTk8rQm1HdDI0dFh2bW41T3k5bEhFNWRyNlludXdHcFVEZDgvRlF0NXR3Zmg2NVEzaTl4UTBuc1RieDlobDVKVmJVNEMzamxXYUFFeHpCZDVhV3J5S1plQllVdWhJU1o1YUNXQjBZK0F3WExmcHRjTUUzZS8zeXhyZEQ3WGlpZ0VCeVBxR0xFYytrWEdRbHpUYTZ6dDcyRDl5M3VjdUFZQ050MGtyN29PYStGMGEzU0NqblFLdnA1SXVjdTRSRDVUUGtTYlZVSUJNMVQ3MXBZdTdBanlsTXl1d0NYRUZXUEV6ekRuUkFLa1Z2blBtakF2M1ZuaURGOEtRSnNJY1N2OGx4UC9MRFdGZ0h6K0NhUjJiQnFBbXgxMEl3bEl1V3F1NjI0b21JdE9nRnB1SjJvdks0NmlxQVd5dnlrRlM0bk5SZ3B0YVBpMUdNRnBHczZOWFlEYlUxT3BuS21mRCtTK3R5MnQ3eUx1WE83Q3pqMFBxd1VHLzMrWHg4YjJJYS93cTY5MUtvOG1lNkdoTERhMEUxTWFBWGpFZHpNMHFJRnk3cE9yb1JydTVFb2d1Z2RHK3c2Nk9xWW1LRkp0SU0rSmVsUG5RUzh2Q3dqZkExM0l4UXpvT2MxaHFqcnUvaGxvS0NkOUJ1Tm1kTGxrU1JiOVNqL0RSa2tTS25CbVl4REdJbzg4c2ZtSWs4SGFySUJaVDhSNW9VY3pDNklXYlZtVjBtTCsrL1BwMzh0ZC85ZlB2bVBsWDh0Ty9lUy85UE9VeENDK3FIaWRTa2hpUlB5dWVuOUhySXlMZXhBSnlNdWxTcFZXcTJseWZieWJ5L2M5VWJpZ2dMUzBDdXZCNUQ4SFNBOHpydUhVNVQ1VmFFdHF6VTN2MlEvMDYwL0I3WjRHdFNaY1MxNWk3cWE3NDF6dURqVFdVdU9Za2ZubEVhbDZTbHp3eUJWSXVJQnJaS0Jha21Uc004QWdoMGp3OWx3NmoxOWJsYUYyTzIxM0V4ZjgrSW5DTjhTQWsxRnhMeERSNFhRV25RTVIvK2RzdThtZC9MZDg3UHBOLytzYy9FTE9ubkdkZE5QaCtGREdrLzBCZ1VKUHVwVVFMSWF4TENjdkNEdjJaQ2VScG1adUhTSGtxNi9FM0tDSlVob1puOHl3bXJkSm5EMkNRTVFMYlBGTUZLQkNQZ1RHcUUzUzNLeVM3L2VDaVQwRXdjeVFXWE81QUhBZStLVGNwUjJYY0R0MEFLeHVrd1NvYmQ4LzVTOXdOQjNOQk5sUm1SVVRLYVVSZXA0Q2tJaUhRR2JYNUFhOHN1cGswaHpFRTFScUVCV3JvbG5ub0VXQXNrbkVQNTlua1FPcHZhTmVhS2VVN2VCS1phQVRZMHRxYisrSjIzRFlYUjBiQlgwdTVEaWRUbUVPVzgxWUlub2dCWXhiUDFFUEtmSXB4N1R5YVNDRWdnNVcwbHpYcExFSCtYTW9tQlFBY3BKVEV1MFZtbHhpRzB3Tk9PY2R3OUk5QkUvY2t4OCtheUxvVGtXVEFrUktnTkxOWGUxa1BPQmljWlRiazlkMDdrY2NwWlJzSUhIMDl0NVlhOTdXanJuYW9MeHAxQ1VvdmdVUXBVcW1ZTVUxZ1BCR3Naa0FIVTJvRGIxbExLNU5RclFWQ1NhbnJ1YldZTkZIcFo1QnpKelBRRHFvQm0xZUsxRmxGbVc3Rm5nU1V1Qm9HWGd2TXc2anhUdkpybVY0bE9ZNFpIZTBhVjBVWnZlTW9zWWhLTHJHcmpoNksxYmdXVnNqVXRCaXVURy9nZTZFZk1teXVsUUV5TENheitjUDZwcjJyVU5xM053RXI2cVZKaVQxbmd5WTZaQmxrMjhLWHlrNWJScXJzQjVuTFNQR0JJaXRNN0NCQ1llMmd0V2hHQUZpbUtRTEE2ai85VDMvNUhUUC9XajUrYUhLZVJJQ0xzWnJ1SmtsOFpoOEVubFhvYktQc2c0M0QrQXdOeHR2RjlaWjZGTGxwbCs5L2ZwTjMxZVQrVGdBenZESXFpOWdKWXRnNVJ5WjkzUTh6Q2Z5SERJYmpQTHpWUkxUa2ZGSmVCZDhQRTJFUy9Gdzd5WFRuM0ZQT1NCQXp0WkRtWVFvSTZKOGYxNkNzRWp6dTdaRVBTTVhBUWtsVDFKNkhsaHV2WTY2eHdyamdwbURtdFlKb2FpVWdVaE1aQTR3OHBGK3NyYk5qajU0bThzV1hUZjdkZi9qUEl2WW44cy8vK0lkMHBVeDV6SVpBTUZXcHFwbmxVeFNBV1dvaGZGYlJFSVROaElCT1NTY1RJUXp4UkdPK3JVQllkcE53bmgrRXlqWGZDNmh1UmtkUG9tSFNUNk1CSjVPUXlFTTdzT0gzckFRTGpHOHkwQ25nSENhRHp6cWo5bnNhMDZibm9SZjJZVXloUFRKbytNVGdlRDhoU25RS1dsSVNUbnp5YjhUMDBQcVdGRTNWRUhBTTMyd0dLNmJsallKUFM4b1hlZnk2Q25GcG11Y1pUWk9wYmhuY1BxLzdKLzdXNjFwMVNPWTRMZDJGZWJPZEVrTzRjU0ZKdENDajVqeUJtODlNb1ZVTnUzV3BaVkFoeVh0Wk9jVHFZczEwalEzV3lLY0FNdDFkYVNpTlBRMENlNkdWcTl5bDloVlVjc29FTTAraTN5ZWl5bzFhZWpDdmhockVLaUhaMFdRYzZHK2xLZ0pWaXNxdEVqN2h3UTZid3RkVWtGc2VnZDlIV2QrbmxIa040eUs0RTVtbGVjWVA2b1VYWllvY0I1TFhwaGVVUko3QloyOGprYnNVQ2hZcWFpU3dBNFFCTUxVK05HY1F5SThmcDN6K3VadC8yNkpBZXZxdllJcHpwUFN1Vm5odGxtUnRwd1NPY3VGdmRoelF1clBHYlpicTQrSnJ1Y0EzYWY3Y1ZYMVBUNklFZWdIc3pNMFlnQ1FaaFQvNUc0N1VGb3hCWHRQN3BpWDhtMVJuS2Fqc3RaRlZodk1STXl4STNiR3NQVVhKTmQ3UTRxK3BqTFBLZU90VU1sMUFKY1BLb2tOYXVZMjd4RnBHYk5sWVVkRmZmdmxCZnZPYmIrWGpzOGt2dm5pVmM2MXhFbFJ6VFhXSUVSWldPL3M5UzlZZ25zNWdxQzJDd1FVekx3VldJaXJaOHZuTjVINHorZEh2djhqMzdsWDJlTzh2dm5xSWZrL2svYmV3UUJ3MkY3MHVkQkdNQlUvY3c3OHBBOUhwMEdyS3VtYTZTYzZkbjhnbVNDRnZwT1k2WWFNTHd2VDJ5UHFjZzgvYy9hNlN6RHp4cVJPQ2R2b1htbjcxL1RHS2Y2d2k3ejB0UmppaEdnamhvSDgvWFQ5RFd0RlZSOXlzMHBTYkdOcUZRRGk1TklMWThpMDlFNDgrNWU5L2Njci9ZRCtWdy81WS90ay8vZUVDWFJLNXJUM2ZSbDlieU83Y1ZWSGFNOTFmMlNjK1RlSDJvKytJUEtaelAyWjdRTHhVekFZUTVVcUZDMlh1VmJUNWlmMGVBN2N5azhBZEtPNHlzN1RrU1Fjd1RveG52dmxlRHROOFVqd0t5R2w1ajd6L2NwbnpkVFg2MTgvUXZGWGpEcUpHaHJuYi9CUFRnb1ZzcUJTWkpBMk1RTmtxOTJORUdxVVlBSkw2R1l5VmFJWXpvSjlIYjZSZVJZYW1aYW9ZaExETDJ0S0tlaUtwMUFUMlFvcFR1bkZudm8xeExheUZUU2JTdWZZbzVLeS9hTTJVaTJVcjczVVk0bk1zR25lQ21WTVlTWjgzNW1BSGxVblZyRjNMWHZPNjdNR3gxbWlkWjI0aUtXWDNJVG1oandkazlDRFByYm9rVWRNWDRNcEdrTUdnZ1l3bUREVVpkNExqRUFUbUVJdW9kWnJZeVRzTVJISm5RYTZoamg0YWk2WUF3YUMySnNVT0VtajJOUUtQQnR2RVJ3eEpSa1FjOXpZVUMzZ3FUTWM2dGdDTmNtSFNSVEhoL2ZtUXNSWktFemtuOHdUUFhacWdrR0NpaW1mZXE4azBFb2tvL3RJaGhTM3o4aWxiaEU0eTdqbkpuSmZvaUYrR1l3UWJkUWZITDk4QmNYcWt3S251QVVaOGQ5bzZ5bldoTERqYnZxN1hKRXlKZmdUZlRSd3F0bThramlVaE4yMUtkV0tzdG1rUWlaN0ZHWlk4Q3VmM0JzdEhnRzdVNVI5VVF3V3U4YVJQYWZYejNQT0hhUjA0NWN1djNzdC85Ly81OTNJK3UvejZpNDhyclNtWVRsZzVvTldiUitXaXNjRW9OUHhzV1IydktwbjNJWElZVE90SzE4OW45eUl2dGNqM3ZsL2tSNStaMkdjVjdYbklnbi80Sno5UytYQjIrVkpPK2UyM0lyMGlwZWUxVDZsTG9POHlwcVpBV3FaVXkyQ3BaMWgrU21oWmxtRXFnVU0rSjFINkF2VnYwNG80VWZsR3ducmh4TXpMempIMUQybGx1WXBnd00rT2VVaUJWZ04wWUlzejBTS3RtZFJhNWF4RnhpTXh3SlhtMDdQQW42dGllNWxreE9hMEN4M08yZ25wZ29LcFcwV2UxdVRMOXgva1AvN1ZUK1hkRC85VWZ2d2pJMlJ4bFdJd3I4UExXRVM5MkUzRW0yaG1Wd3dDL1BRVVhrRDRuaUxqVmM2VzBXWHE4UU04aFZvck91L3B0Wkx4RjFZNWhpWmlSMklLRk9Kam1PRjl6enVzbnJFVDN4Zkp3M3pJUHdtUUxMV0tGVU1mdE12QjYvUElFc1RHZXhER09JK1k1NW45TmJkTStzMEc5LzBXUzRINjRlaHZzYXhDUmw0elBBaXREUGZCUjM1bDBTckdXSTVxdXRBa0MwdTUxbkpJWDhwTlQvcldNNWc0aHpxUHQ1VUVzKy84UjUzQmF6Q1FDZUUzQVpzcWhHM3BBOFNBYWRUbXNNeWEyVUhWSjNaNnBVZloycWU3a01GTUtyY1VFMUFyU3l6dXN3cGxlWTZ4Rm5LcEpwcFNSNTYyVjlRM2JqUlRVVHZ3a0tGU1gxVGFBN21NdDZQSTdYYkk4L2tVTTBTVFV3Z0lVSmRCSkRSUkM0WnA2MFdKTUt3RmpMNEh1QWtYU1dkZXRubXUzQkkwN3VVV2c5TGRFVy9nS2hwd2ZJWG1ucTNNNWpRc2x1a0IzUjZKcWhoQXFDSVFHTFJoR0xTejNqaWIya2o0UE9paWp6Q1BxS2hVcXlMbUpwd3U1eW5ocHk4Vk5kU3hzVDE5eHFJYVY0a0ljMGVrSzRIekxrcVhSWjJiWkgzdXdrQ2F2TVJndnZiVE9DWjBFZEpuZnBONVFEOHpheUx0SXlBVFo3dUFVVVNZblYwY0d1d3pIUVQ0UGRLYlVyUEpOMG5mRlFWOHNzOVl5TGJ5UjgrWmpHTlNKc2t5dHNNMVNmb21kNzl2bHcvdnY1Vy8rWnRmeXFOOWxQZVBKaDllWjBRRzV3Rm1ma1FVc3dzUU5JVURVNTJBTi9ReDJsak0vTGlwM0EzUzkzRXJjbE9WMjYzSXU2UEk5eisveXc4K00vbjhlKy9FREJ0ZVB4ZXBLMnVocmh6Nkx6NmY4ay82Qi9uNXI3ck1ydElFcHVMWGJ4L3lPSWxwemxLcUQxS0dQZ0UyMDdwY2puTXg5U0VQSGJod3pXdm16MSt4SXpMQWpVcjdlb1p4ZStTeG01THAwNHlncjZCTFZ6Y1FHVmNBL2pINExGT0NlbHpZVHV6cEUyc2h0Q28vT3EwS0p6V1l1c2ZvSzlmSnJTNTYwUWJNNkVVVjYrQlNqQmVBUXIvOThwVFBYcHI4eFYvOHJlaWYvRFA1Z3gvZFE5QUFTU0UxSXVwZXd0K1c4TG1hWlZYRkV1VjNVZXlsVVpFaVJqUHBsL2NOV0J3NlRkckFuS0tRU1JIVnh1SStsQXA3bDNLVVpRRW9WWUQyTmgxREFqUzZaMkdpSzV4cVlXdTMydXFsZU5xWnVXNGRPUFB3b0QxbGFHZG1EV09SdUFjMFVrZDdhdnFSbFhMSkNjcCtDb1NFQkgwaVBMUnpJd3AwRmd4VlNWc1VRMUJOWkUvOWJTNDNPWU12bnNyTUtvY3FXZytScVZRS2JUZkowOHFvNEMvc2MrNzk0dWZRNXc1bHpldEJxTURpWEl6M2lqei93dldWcVg5aUNwcW44TTA3SmJaTVJYYlhkaExDM0VOWng2SjR0YlVkSXB1RG4yQkNHSXU0dDBsMUU1a2lNQ29yM0N5a3R5a3ZjQmE3QkVYQ2VjQ2ZQSm1id0EwdzNUZWE0UFpyRUxWV21RMm9YdXdnZkVWbXlRNnFtNXBGYkN0d29tWExDeDNOL2ZCZzZBWGEva2ttVWpNOUtxK1p6NFdVbFp6TTVBcXduYWJDbEpRNHFRRzYvMWliUVVzTHhtU2xwdkY2Tk9uWTFOZ1FVK2ovdk12ZFBGalE1QW1jT1REcmVDeUxBbXpRaEdiTXZ3Wkx6c0FVYlNTb2t1YlFRaXo2d3VDdHd1K3R5N052b3hIUXFLa1JNTTBENHpoQVBLRU5VeGV6S3FNMjBkUGJsaUEvOVJEMHErZ2I2RGdOYlMvWnlNeEZ5UUV1cFpKeGFKaTdpMW84d2c2alQxUGxrSkordm91L2NXd2dFRXpaOFFqUzhaVEg0MXY1MjcvOVFoNGZmaWVQczhtdmZ2VUtRc3Y2MkM0dHNpWVNDVVNDY0NsVDFreUwzRXNSclRqLzBDSXZ0eWtIWFVoSGhXdm1mbE41T1FBNDgvMGZ2TWhQZnZUOTFkcVh1OG50enFJa054Z3JIOCsybHVRZnZZajBhZDh4ZjVIM3I5L0loMWU0TjhjUFZaNVBrZmRMUG1zTEFLZVJsWjV0eXVzRDRRcDlxMC8rRHFxRWZEemJZdjZQZ2IzOUxFeHoyWEJNbWx5UEZJSFNYS2dPY1praWdKK1JLRlZYZ3BUbGJNbHdsWmkydFNKZ0NkSHl1Vy9tSU84N0tYeUs3dnZ6MHI0T2hnTGtQR1B3WUozeTdLaC9YbDJ3Y3lmOVpPQXQ2L3FMUXVqNSs5OTlYS0JLZi96SFE5cUoxQzBiTzhxT3d0SldiTzB2TFFjWWNCT2lGSTdFZTVpd0F2VndiYVhQZVU4a0h5T3NxcUNiSE1VOGNING9QamREYzQ2K1p3QjUrYVhJS2hrRDBmMHB4SmFFWjAwcVRDa3RYYWNoT3M4czBLSmhOSXNKSi8zUm5JVFl2eGNQQk9jVmNOVVRBamZ3NnZPOEdDOSt6bFk0MDlVS29UNFFqeFJ1a2JSVHNTOXZYSUl6RVRaRkM5aGFTWXlTMGZQOG5aR25kL0pralJCWldBVkc5TThzRmJINkJOcHR5SjRnNCtZekJINXlVazZiN1ZxUjFFdDA5OFpRcWhub1crMjhDczU5UXpsb1JrRVljOENxZHlmcHRwZXhuUkY0N0RPY1FRT0Y3ekhKTkUzMkpxbzN3QzV5dzkzZVdhSkV0YkxuQ2xMS2Rna2JhVlE1bHNyL1RXcFJrVFVSbEdZRzhxOEJ4TStSNmdFT1RRM0J6Zk5VcGV6Z2J6REJXa2lKbEk1em5jZFJ6SWhEamY1cXlQSXFDZWltWW5NRUNwS1Z4bnpnbVJISGJPS1FwK2djaVJ4MWlMem9UWXE1aVJCalZaV0FNMzJzdGxZTWY2WlJRUDBrRkNRakxVMjJjN3p5a1FKaWQ1YlllNGVudjFOTExUWWh5TWhNaU5XUTZ2cGxVK1hSY3ROYkVSMHFjcnlJdEVZU25xbUJ2QnNGTFBaemJQeDcyaVV0S2wyUDdLdmZndjNoN1FqV0FXc0NHSHg2RmpQV2RRc2RzQ2xHOTROS2gxU3ZRODdIUTc3OStpbmZmUFZlL3Y1WDM4aXZmL1V4c2ppUzZCSWFkMmxpcm4wWHJyRzU0RVp2VEFWUms4WEFiM2RkMnZkS01MeXAzSXV0QWtIL3E1L1lRajc4eVkvL1FPNHZoMVJ6cldES2NjTVkyT0ZydU1obms5REEzUHcvK1VkRDVMekxzNDJsL2IxLy8zRnh1cStma0hPN0NFM3dLb1BXcEcrK0dkS2VwN3kranNXOHBUVjUveHpTeGxPKytURGsyNDlUSG1kZjJtMmo4YWV4RktseXRudHVlUjRaU1Q5bUFuZms3NVpXb0NqTWtxWlp6dUNHelIrd25EdG9CMTVNeDV1U2MyOUg3Z2svZW04aXRUSytBWDJ3WHNTcUM3eFVJTkp5bFhuSWdTaGdLS09xVXo0K3gzZHI0bHY1RC8vam44dS8rZC85YS9rSmdRSktMOUtxeXExM0dVYXE0RWlLVFJsUVZ0NCtoQlhET3ZkZmxzNU5yN2p4UE9TSDExVXY0eEN6RG5oNW0rN2NZVHlHSnRTczJVVmd1cWJONHVkNXJ1ZGpUSTNhS1psU012RWR1dmNHWVN0bG1MQ0d6dTZBZy9oYnE4VzhFL09DVExsanpzeVh6Tno3bks1S3BhQXNGWTExSldsMm5MT3UyL3pYcVU4bDFITm9QQnFNVElsZ0tXNnBJWjZHYUQ1WEo2ME0zZlk2dEw1V0l5aVhNYUFRUnFSajc5Y01Gc2JzNEpxelkrM3FnR2E4U0pRUkpmTnRBTEprVU9UTkZjUU1MZ1lEUGd5NERHZVhRV1c2NkExZEFIb29ZemtZdFRDQXYrQU9uWlFXWVdHcWo4Y0R3REJ6QUhuc3dFMDlYVUFCOEVDYzdtTk5jSzB3QzJMU1hLcFU1SitYS2tVRC9EMnhsNGI3bFdyNHYrMjRzVDBEQXdOd2ZRNE1jWlpMZy9rN0pVV2ZSR3A3NlV2dmN3VDhxYTVOWXhzZWRFYktaL3BXSlF6bHA4RDRxV1YyejZ2bFltU09NV3NMTm5uS2ZwakJ3a0Mwb0lpWFA0a3N4SlExRElYRHUwNE1ac1l3VUxJTkpwNEJFOFVaVVhkenNJRlNxMGZMbHl6ZzcvR3ZocnRvMWNneHA4NERnSk54U09FOFRHM1NTOVQySm5UaDkyUzBCd1VOa1JxbXAxaVlPV1pYWlI1ejc1WEpadnJwU3psUlZsYVNLR1Q2RFNMSDBRaEY0UXpPMzY0eFhsblJCTHJmR0FzWC9QWGpxL3pzYjMvK0hVUC9Tcjc2NGt0NXZQWTRkZGQ0aEFBZEZRcFMrRzl2UmVVb0JacTNxWHorenVUZGdYWCt6Ly80Sm1wVmZ2Uzl1dHI0aHorK3lmSHlJb2UrckxrNTdtajMrV2dZOTd0S2Z6VFJXMldrNjMweHM4OCtNMm5QYjZVMzVwbmZSVjdHWEF6czNmMTc4ank3ZlBiczBwOGlkcU9McFdKaUhrMmsvNlRMOHdITTlDKy83aklHdEl6M3J5L3k4YlhKcjMvemxPZDV5cmZmVHZuNlk1ZW1VejZLeVNSaHNsTGtIRE1zSDRQdnM2UmROWmxTMld0aEJVSE15bGg3S0dwaWpBTmtjcXc4Y0ZXTlZDTytncU0wNlZMVmRvQWFwdzE4NzlLTGlWbmo1b0pQdGtjZzFsd0JqR09qcUN4OWd4eHptQ2lnZlNrQWh2N3liNzZVWW44bC84Zi82bDkrTjVlTUU4TW1RNXhMWWVHaVB1VHNmbHUwTVRWTFdmY3JaRkJsUnBqSm5pV0RsNks4cWNJU2lkcm1waEVqWkR4TjlKYTEvUkZwelNIdGUrRmJzYWcwWFR6MmFDOWdRa3gzUHhLdlBXMDBaSFJaSWpZdFZFY1I2elJwVXlDeENkb1MrNGVDOU50anBybG0zNmsrdUdHdE1BMW5kakxyQ2JjZzJHbGJiV3R0Y0prTWZPY0lrYU93N3h4bTJZNnh1WUNRa3JBWEpVb3JSNFVnTUwyK29oYW1STW9WbmpmVy9DQXV4Q1NPQUFsbDNZUU9HZGxyTDhGTEpwaUIrd09NZ2tpa2s3OVJ5RWxZZUozaGxpaWNKL0k2N3Nia3daWWFlbHBJNXlWWUNKM2JEL3BJbVJlTm5MZEpjNGRHRlNMdmtzbWgzRndJM3JvT3VsSWl0V05kSTlhd3lTZU56VjJTQ2NpV0loSjEybSs3R0JUUnNaUEYzMmQvbFRheU4xWlZ1cGV3NmZTRlVMdlBnS2VLY0Q0bFlJQXZkSkk4b3laSzFKU05ZUjFybzk1dkZaampBUENuNzY0bjdNellGM2xiejB2SVFiZ3pwT3dTUGo5RDlGOXRzVklaK0dHRTNwVHJRZWpXbFdySzNNd3gwdG5RQWc5MG9BOHdkaWJDblg5Y0FEc2R0WlVyL1Y4cnpVY1pmVXZpOGtueGc4MGNrREZEZTVrYitOUFFiOFpUdlBPNVFQNXYxbnk3bW9ncEVFeXZ3cmMwcVhOUENaWkhmOG92ZnZtRi9PN3JWM21lRC9ubVE5c0l6TFd0aDFkTlkwRGN6ZEMzdTVhRk5mQzlvOHJ2L1g2VmYvcUhJa1hmeVkrK2o1T3JWZm5EZi95eTNBSmE3dkx5d25TNmhTc1BsOHh4WnhiZGFGTDFqaWJVS3JXYVZJT0dkTHo4VUdvL3BUMCtnTm0xc1ZJdkR4M3lXUzl5ZGpaYUU2LzhiTUNtSHQxazNycThmNXp5MlEyQlNHMEN2NzMxS2o5OHFmSjRudkxOdDZkOC9hSEpOeC9QWmFyLzNRZVIxeEFVRTFyeUdXQWJqQ0RPa0Z1aXFwWExmcGphbDBhbjVqajVhWEVKdlo0TTVqelBaWGJQZy92dUgySUdWM3h1M1B1QWR0UmNveVFlTzNPaGlTd1hFZGJjUnhwQ3NsTitMMVQ1L25YS1gvNzE3K1NsL3BYODIzLzd4L0w3TndBZXVhR3BOOGFoTkFmVjJRclhsTWpub2ttMEFrUm9EcG5INWlaZ0hxb1JSMTlGNUtFcTFrOW1KNm5INWxMUjhUMGhVRGJLQ0ZmaktHVVA0TXpvZnJvTFVpK0FhNEI3OFZKUXgyS3VVSEJsQko0OExJZk9IL3FUTkhOVEJFcTZxdmE0MVRpNGYrUGw0ZEZxbWhnYjdrVXZPek12RVd3NkJqTWhobHRXQnJIZXdOUmJiMUloM2FJNFVPZmdYUm41Nmx2Z1h6aTlvRXVua3dWb01jbUQ5R3owN0ZzS3RSdThOZElPcXRwUzlQcmMwK0pHV3JtcGtFN3htSjJUQTBScnNHWnN4VkVQNmNKMDZ0SGdGZzJJWGNocUNscWJGUUFubGRvQnl3d25WMnJ2ZlpQa1NqSVhVdlZkK0I2RUhwcG5wdy8xRUt2UUZBK1kxVkFpa1dPNVhZeEl4RjBMSlJRZ0d3a05xNC9FZG00RHY1YXNSalRkaEZzWldyeWpLam5ERHpQVGdFQ0FnWUNrTjRnSFArU0M4cVNtWWRJZnZFZEtuaE9MYkNzUG90dHo2NWh5M084aUJkSnoxWU4rT0Viazc4RmFzY0VnWEhJZUluclhGRzBaNGJTa0ZFd3ptZXBUNm5IRDkvVkdnQTJzUE1mY3c5SGRCMFRvVmFNMC9aQWVRV005TnAweUZLTEpYQXhseHk4WkdWQVY4MVlJWnE0dTJxM09wQmJIWnVQQXM2NjRrcXBBOG1PK2FaRmpvMDdZL0RtL3JNb21tYWpQNTNEekVQM3EvMC9abnpWSjBtUlpZdGpSeGN6Y0l6THpXMnJybnU3WndCa0N3Z1VVY0VEeWxjSi9UaUdGZk9BRE53Q3pBVE05dlZWWGZYdG1STGlicWVwVmducU9YRFVQcVFmU3F1Snp6d2gzVzNTNSt6Mm5HVHN0bW1IL2NzZmYvZjRWTDU5L3dYLzg2NThBbTVqNkFmUElBSEtJckZhUEVkc1c4TTNIQlIrZkVyYmxpcWR0dysvK0xPS2FGM3p6bTJjOFh4bUNmbG95MTIyT3VGemoyQWNLYVNBbnJ2TVU1dDV1TFozNHJXa01JQUE1QkNxcjNCSHhST01wN3I0KzI3S3dnZDZEQ3hUcUtjcG9yWVlhRXo0bEtyM2Izc2JHWDNORWFjQ2YvMW5FL1RYaTZXbkJwL3VCTHk4TFByOVdQRjg2WHEzZ3A5cVJib1o3NHc3TGxmRzBwdlJWYkZLNnlueWNwOVE5dFRSSmJPeFJzdk90RmxFeG83SCtDRUtqODNja2FtYjM0dVdwODkvQzVnL0FXY2pUcTdYZ2FhQ0l5VGR0ellNTWo2MCtEb3JUY2FEaDVRYjh4Ny81RHYvRi8veFh1QnhmNFNrWmpsQ3hISXVnenJrSGZIMjZjcERDY2U1N2FNK0p4bE9EazdESUU1dTg5dHVTVVhNU0plNXhob0htZnNoSnFJQnEvYXhLaDFYMWdYZnpoMU5JM3NQZi90eE82R00wRUJSZlA0ZnJZMjk2RGhOZnVJTjZPV2xVeWtxYmRFRmpJOUNRTS9rRDBhYkJBRmZvRHdaWml0cmZtTmdHc1UrT0JzVGcxM1NRbmRDSlhGcHBiRlN0T1VmN2prcVhlaVpkNzZUdFNqL3d3TjhzNWRyMDZWSTd0bzN6VXVvK3ZzTlRjbytmKzg0VFcydWRBcndrSUFoRUw3MnI4dytPb2FSMGRhODBsa3dPWHBpM0tiMGs0L0dZeHEyUks0UmFUYVdFanpiTHBESm5KRVA2ODRLTVI1SUpSOHJKT2NOZ0RuYVB3Q0syNUlRSnhwTlpBVkp5dHEvb3RTeFZiVVRoSGFybjVvSzVXU0R6YWU1SW9hRlpleUNRaUl0b3BYcENXSU5YMXhLOUx1bzA4aHg1ZllWUUd3RGk1ekpGNlJhTWlQc1pvaklIRHVmR1RPa2NRWGpQSWxYSkZFZGg1Uk1GVGNaaitZNVQycHpyeUp4b281dm9WbHRFbEhpS3lFUjNHejl5azdWaVE2K3F0bDNSZTNaRUFNL1BSL2huemVDZVZiRStDcmc2R29WQ1lvaTlxTmRuV3lMWjdoWmd3U1lCMDdGbEgybHZJVFN4a3RzNWQyN2M2VTRyM1dXd01hdWdTTTJEZFlkd0twYk1lZFhBK0RRSUZsYXRIc2E2QW02TU04cGRjSkhxaFZxSzJsaXIrS3UvK2x0OC91a24vUEVQcjdEeU1DK3VaZk5RcUN4b2U3NUdmUE14NFp2bkQvaG4vL1NLRHhkMlRIenpLV0ZidHhFYVR4dGJENWR0RWNOY0FpbWltUjVTcXhSU1dJR3dJVzJCbGVaR2Y3Q2xpaTRheUcxYnRSbk5lVUdpaEVHSVQ1N2daalowUTI5R1hnU25IOTIxYjFnMVBiWmdwT2NQZEpRYWNMc2Iwc1d3QUZoV3d5MUZyR2tmeHNxWGU4UG5sNGlMQVVkdStMbDJ2TjBiTEFPM2FraGNFaWhCY3pMeDJkMFkxUnpyRUdOOThOamR1NXhva0dJMENYdFg2TDRIYlhnZVZPTHZGVUxPQ3oxamVXNkF2Nm9XSmVoL1NaRzF3RDBXb1EzeExuMWxRSXROWGsvQkgzL3UrRC8rbi84dC9nLy8rMytGN2NxaUt1ZDBYeWZIZ0l2aHlZbzRlYXNoSG9qZW5HNjM2clBpR2VENFNJdmxibXBQV3lUeitpTWhUVHJWQWlIRE8wcWhmQ25PRThDeDRaL0llQllqSFBlQlFEZkxIRlBOVVRXMVVsbkR1NFAza1pXb1JOT0VSeC9iaVd1dWN6aEd1cjFEZnVNcjNFZUdhb0M0WG5pY1djVnNvckpaQmxBR05YY2ZFTCttMHpnaDE3dXdHL0ZUanI3RHlTRTg3SkhHUE9TRmlqTWgrWGR6M3REdFlJVERaZ2RRVXczV0xKZVFITFI1V28yK2QwTzk1MlNBRXA4cFZoVUs5dWxSdzl5aDJrTEE3ci92V0JPUUhwdXRCZXpqM1QxdVdNKytvaDA1eFRnTFY1d1ZQUTZjYkd2Y1pIR1IwaFFyMTBUUFVxalNLb09YVnBnZlhsWElFREU4bG9wSzRQNTBjV3YzTWVlbXdxN2tTWDdlWm1HUVpKSnlCQldES2l5WXRFakFpbWlqSmVQYU02Um5wUEFLWFJSZGpHblR0S09BakZBQTI3Z2hpelZFWEFGQVZJck5OMHhVSDdCQlJTN3duZVJwaDFLcmI0cEtDOWcvMTAvaG5KaTZXaFl6a0NMSlpMcUhCUjNKU3lwUVJWOFRYbGZoT2NtclJ0N3JXaFRNbDdKVGN3QnJHNnMyUldVZXRoaTAzSUJlRkU0eVdFMm9KcDd2L1FaYkVub1JHcUYxS1ZWWjJPaWVDcGlZSmMwamt1b3dIK3ZMa0ZSYnNGTEFSRTFDT0ZmNlpyMm1VNUZna1hjdFQxY1Z2cnFFNDZYc3g0R1g3ei9qSDM3L0ExNi92T0RsaFcyRWU4V1ovdFh6VGNzQy9NWFhDZDkray81SFJmNXJmTGl1ZzVYcnVnWjgvSml4YkhtRXYwUEtXTmJSclVCa3dzaG9TbDQyTHpwS01SSGxNSXNtTldhRVZaNHNGdVJlZ1BzTWFiSStLNk94VE0zYmpaREVVSmRsZ3BoU011MDRFU0l0WXkxWU1CTFVMTjFWV2hFWXlickcwVysveDRCMUdIWUZlZDFHK29GS295UGRnTmZZZ2RlR05RTDNHeENXaEphQW93SEpSRm95bEh1SFBZSTBuNFdUREd5K2QxcHM3MUNaZ3RqMWtKUTNacTc4dmVmdXprUTh0OUxHS21XdW80c3YyeUJqbTZnTXdXWGRHWHFXNTdlZ1BaR0Q4cm9WLy9EOUMvN2YvK2JmNEw4TS96UDgrWjkxZ2dDaUFpVXJ0T3dxU2Y5VEpESFFhTFBRa0Z6aG1QdFdEaS9qRWxPWSs0K0cwalIwREtBWWlIT2tZNE56bVNrRjZZZkJPenZvU1hOMXQ5NDRSK0xHU0dva04xY0twM0ZuMXdCbDhDS1dML2d4allOdzZzdHU1Z3BKOE1KZXJmNys0QkIxQkQySFV4RFAyNUFIclhYajYyb3FzNUFTVW1WRXd4MHhkUlp3ZVRXbUJoS1I2dnJNMFBxNktyVk01TTNBVk1Cc21ZMW5kQWJsdExVKzVTd282c1lXYjNUVzY1anBmcHVXY2o1cmVqa2pxbjBJNytvTHVxNmtRVjdNUUNrYy9vUmppVlBFVlRJMmlJM1J4ME91VUU2SmJWaks0L2hoWkRQcXBTRUk2UXpaVG5rMFl4dEdhRWlXSmdCRGQzenJlWVFNNlF0MENHai9sQmdWallaQ1pseUUxY0lrc0hXMTZVQUFJbFhKTTdPbjYwV29rQzhhMERmMGVIL2dXdkJUbUJSdFp4cmhDSDJHVCtKTmczNmdxNWYzNkFmUStKbFcyeUFxV0pkVmhxclk0S3lxbDFNM0k0akpGRHJNQTRaYVlLMkxYejJ6bnpNUkxuSWlFY3pxYm9YZ0hlS3hldnZIdTNTSndFY1c2MmhUQ2ltdlZqVHYwNEpNR1lvK0VLbDlFOEJON0JWQmlFd1pIUVdtK1dyTWI1a2hFQ1NJUXMyeDJmbktYV3VzSFBmY0lJWnlTNW13clY0RDc3STNBNnIrN21lUWhiQ2doeVpCUDhkUHVUTG1DMHRCM1N2Ky9tOS9qMSsrdStHbm55dGFvMkIrcEJRenJBQytmWTc0Ujc5YThNLys4Vy93OFZQR3I3NWFzVzBMbnArQVBKUjFRbHF2MkhKRVdGWWdQZ0VoWWRzSSt5c1FKQmdraEdJa3hZZ0NKbE5ZeFVtTWM2MlFVOEs1UDBWWll0WWFicWJjSlZ1aHN2aXYxWG5COEYyTTBtQVB6SHYwWnQwRDFnMkFobHpaZ0NjTHFFZVc0QkV3eG11Q1hRUHcxckZjZ1Z3TnRRZmNLN3NYRGtXaE1nS0s4T0ZiRFU2Q1NBQVFWMHUrVEdPSG8vdEpEWjZwS0tkeFc0R1FuUWpHOTg3alQwQ3RiY0tYT0plWlY5TlQ0RnRqWGMzQVV6ZXR4ZmtkM1p6UUhlWC9qSDFvdzVqNXEvL3dlL3lUdi93TmZ2M043NUMzeUhTZkNiM01XMmlqQ3FMT1lYSkRnaFMxT1NpOXZQTnc2aTJHZnQ2WFFVOTdCMG1maFQxb1JHVmJ0YzhLcnlVNU5qL2JLV09iZVpWNVRpdFNZQnFJVVRPL2EyUkZPWHMzamU5anhzUi9vRGVJWHR2a0FGcThCOGs3eXI4ekEyRDJFTFBPRDQ2bFk5MjdEalhBOUt5ak02ckNmUGtvc0owVFI3UE9zWThlanA0T3pKb1NkcXR6VEZUSGtwZU1WcXZMRm10Y1NYNllXRFdoZm5VMHBRZmpWSnFTV0NGRWppVXBrOTN4eEdPSEJ3bUVsQzE4ajREcGQ5MXQzcW81TGEwSGx1emQ5eEdNNjFxR3lTeWNIdklpSUFzWE80Z014WG03bG93bGJYU2FiR0pHV3lGSVFGckJ0ck1lME95Z3ZoZTdtZUtIWUJ3M3ZVY1NQUzhla3RKbmh1MThRU1ZtbGc5WlRsTGI4QTZRRTZxSlVXQTZCYXlnYmxFYjJ5VmFrMkNURmR2MmluVFZ5ZEJSbTd4T1FLUURFOFRBK2dIY0c4b1dZZmNEUFNWdmsrUUdtL1kzcktFYWMwUmhBdUlqQ1owazFzbVpYUVBKSTVRN1ZLaGNXWjdBUXEvUXAzZHdkaFBhbnlvaTZrYTEyN3FqZTNtZnRqOFBVTXVFRkxRRXRvZk5jK3R4VEs5RUoyUDBSRlh4bGRYUmZpUnZVWE1nazJtQU91d3NDK3pDd3FyWjZKMEZ1bTUyenhQeDNLU2ZWV1JsTTJ3bk05NGdLOW9xOFozdmQreGYzdkNmL3ZydjhPWExqdnU5d3NUV1pnOTR5UkcvZlFiKy9EY1gvSXQvK2p0OGZZMTQrcEJ4eVlIS2ZQU1ZKeXpYQzlLNklhVk5VWU1Fckt4S2RzK0J1VDk2TDV1YUVIV2ZGcVJ3SFNjK1UvaWdVdWlFakxyalJHRXJ6L3VxeW1GY2dMZTdvLzMxVkRrV1hjYVNaZVR4R3NXeGI5NkM0elNNcHlGZU10RFdnT3V6NGZnaUVKd09YSS9BTzJvQnQ2cFVXQXZZbG80RFFEYkNMSmR1aUFaVVVZSFc1cUw1RWZEaXNkZDRZdE82NThWWFk1MktvSDBsa2tJZnNpRG5mRkxzTHZ6OG1LYmU5R29iVFBTM0RUajBtWE9sNUF3Uk1KS2xkUlFpaTYzZWpvb2Zmdzc0UC8xZi94dGNVc0kvKzh1L1FOZ1VQc2ZpU1ZNNkRrNG80K3hwelIrVC9kaVBSR1lTMnJOWWRIcThhWEdFQlJnRTltTm54RVBoZ3ZkVEQvK2llYTBQNkcrendIK21EeU9hN2llNUVKQ1dSdlE5bTZDR0l5ZkVlai9rdW5IMzVxMWVBTjMzOUpaVkFCaUZNUkFWY2JGQzJSek5vM0FCMnZlb2JoeTFVdmpVWHBCNVZocHRpdHJZVlFqSU5sdkhOV2hGejRkNU5EakZxclhLUjNkV1FLMWdtSlJHbjVoVC9SU3FQN05BZWpqZVZDaXBhTEtIU3lvQ1MyMm5QVzkxOXRLSDg1UzVjdmRpN3lXeGNGWU4wQ3lFOUJNMS94Ni82VTZLYzJ6a0phK3pnQ0lxOVdBVjdaQTF0cTdNRDBVMTFvZUVzTkdUSkp3ak5DbGM3Qm43YU1zNWNzU1Nzd1JaY1IzZXpFN2VpNVJIUEpIWGE5UFhvNkMzdVpCSzFyQmJoTVVJR0FzMjBqSVdLOG40ZVFYL2laa0N2UGRGYXI5aStnWlVVTFVsZlY2dm5UUWZheVN2OXQwNndoWnhpY0J0aVI2dUpET1Npb0VZdi9NUU0zdHVhY1ZsMTVKUmVvOUhkTjdiTStPYXJCTC9uQ0U2ZHJLRUVPQ0lVbDJWbjFMZ0NzL3BIUElNYkZyLzh5Zmg4VGUrSm96d3NvRjVlM2gvZXhQODRWUVNIbDNzeW45R0NHTzZFb1JIRUs4V0RURm1kZ0drTU5HaWdsSWtLYUpaeGhpcEhuMW1xSVFyenorWEN2L3F6SE03bzBoN0daWHRmLzkzZjhEOTU0SmYzdHBRR0x2Uis2SU1hOFB6L3ZPbmlELy96ZFAvcU14L2hkOTh5bGdYd3ZFK1g5ZmhEUzg1aTMrK281V0trSy9Bd3FyMWxDS1lvbHFnUk9tcEFvVi94ekt4OWJ1NUlmekFCQjFHSDlvT1BIWGtuc0dLajZidkJiZC84L01GZk13N0VsYjBTSGhiY1dQN0VSR2QwTUx6YXEwTWNwZ05DV1hucUI2dFlrSEFVNDNvdDR3UEMzQ3NoclVsNEFvSWlnNDFBckdFTVI1cjY5Z0hnbHhFQ2VLQ2xwQXBuY21rOEVpeEtzQVNOYmNwZXFONW5WVVBtc3RaMmpCckl2ZDl4L1Y2QVp5TDRGeWdDai9ja2RXNXp6anZCZ3JkaE9CdFF3S2pvWWRsRHByQ1YyUzBDbno1QWZodi90Ly9FWC8rcTY4UThBSGJKcTh4clo2L25rVllicmlvTWx0dHBIelBzZkMvQzBiV0cyUjI1ckZMUVVDYnl3bEorMWVLSE1wanAwQ0V6Q2JHdmdZZFRFRndWRlZoN3VuVG9Ia2hiRzR6RGRyNW1QRTlLZHozVEtyVURmTHNWVDlGaDByRmFRaXpEOFhuS3FYSGVZbWhTNG5idVlET1A5QktvUk5pemJsRDVqSFIzaDQya3htc1YwUXNUREcwQUVoV3liNTFXWDgyQ2xWVE1NWWVabk1oaGFUT0RjMGRqZlgzMFYzWEhlanQzZjNGQ1dzYjA1U3UrVElLbXR0UlpsUlZiWXpBYktNVEg0M3pvcmo2ODROeklXdEhCWkljZjBtaWsxTVI5U280djZQc0EwY2JxNnpxTnNPdG9tOFFaU3FKTzFoUnNLQ2lUd1luVWF0YVp4aXYxK290VXQ2bVllYk1XRE5mYkZoVFJndUdodmQ5bE1teE9Za1pyRkNZZjdBaG9BTEJ2Q0k5aEtSUnFuTXlia0pJQTBQSFhPZU9tYTByTHJqbWR2WVg1VjAwaDgxYzRvSmV0Um02ODVzOTVzYWl2RGxMUU1wakhDS2N1NTNFRFVpanhheVVpcHlKRnJZc2ZhWVNISHlIcndoRUtYSkhGOVhKOWdFUGViTFl6cXZaQ3dYRGpHNVFFWWRsV294QlVKWithdjBlcWhtUVZhd0lpVDVUMk5QL3ZqY2N3dG9QSzQwLzlmMURWTHVoYXcxbE5nU3lWaS81ZWJwdmVxVmtZcVZWYlIyd25XaCs5eDFIT1hEL2NzZS8rYmQvaGUrLzdLaTk0YTFXSEFkSThTanYvN2RQa0dmK0RiNitKcXhMd21VRkxrdjJ1S2VnT25tUGx5dFVIZVRzQWlGbFFZNHVKeHc4NWRVV3JrdGlLcXdJNnBEb2xMN09jOTZQRFFncjhpQXNraEdxQ0FpUGc4S2dNbXBHK0Z2SkttUFJWanRJelRuRDdtMEdQREM1RVpaTVpXV2g0b0tJKzR2aDZRclVFbUE5NDlPemhQRXhJejMzazQyWGpmbnphTVpiREJwUFFicVdEbFJJMVhVWGJyNE94RXZpWXp1UFdTM3VSNXp2UzZueTBOTTdpRXoxYXp0TUp0NGxudm9qcytCRWtaNCtlZzBuL25qeWQ1c2dtVU1BL3Z1Ly9vSmYvVC8vR3YvcWYvVlBrUENNUE9RSEozYXlYazB2SEJOMFNXc2NRM1lGTjlLZ3NLdDcyZG92ZFp3bnFkM0pXWUtjT2tHdlhuRFlHVldqWHRTOEtqUXNCU2FzZjQrOGRVSFRHa3lFVzFMS3prT2ZIUDNQUitoTWFPa0VJcXYrRW5uOUZIM3NZeWdjQTNkd0h2QXorUHlDd3UyZDlUbUtwS0pYZmNZYTdLSDk2OHpIM3lkVnYwMm5wa0lPSWFyRUhoMkpNYktCejZZVXdIbjl5TjR0MDloeWdLVTJ4Z2phLzJsUjdieWp5RTR2cHB2cEQ0VXlWb1AyV0xqcmZmcU1KS0loeTZnTEtha09ZVG9xWnRyRGFYRWs3SlJuNnJZM2w0eVA0ZjJrQ0U2TXlCVU5HY2s5dzdNd1J1cUNwdXVlNHpzTzBRMkdoRHJ5SFh4aVFvclRLMm10VXNYVU9nWHpPLzZ1SldyQjZOWFE2RWtWOHpyTXMzaEhQTmNFTWpTYUludSt1WWRVZU40cmVtajArTHZvL1dxWlhubHZ1cWNpd3Z5S2dJMWYxZzFheTBpcHpRdkRZT2R3aDVUeHNqQlZrYmFJMUROQ00rL0ZmT2pKRnNkdlRFYUl3Y3hjem5zU3loaEFHTkVZRUJJWHBJL2VQTVEwNWY4UVNtSUdyRkU0bVJGTDJBSWFFYmc0dmZFS1pCYTdNYmVzaUVucURrYmcrVEF6VjZiZXNSTXFhalZoOU85YXY2dmlXbkZFTXVENXNaV2VQZWdaMFFDWXdybDM1MGVtVVBHakFXMVdqbklHZFppRUVuWjBzUVRDT0JhLy8vcy80TXVQTDdpL3RmRk01YWd1bzVhYzhkVVQ4S3RQRzM3MTlRZDh5QW5iRm1hWHV4MEl1QUFXa0FQdk5XWnhBNlNnOExYK2M5bk9uZGpBMkV3QWxzeklrVWRYbWp5VmlPb3Jsd0JOYldVTlNVdXM0V0JCalNHZ1NQT3RCSkVJWW1WS0Z6d3RDWFk3QUhIdzI3cXcyR1p2RFBsMkFZQVluTU03QVJMbTB5aGRFanRVVWs3WWpEVU9RSDdJVElmU3htOXVXcG1YcGdDYzJhUTN4YU1IVVhyM29yRlpDVFhsRHVTMWk5YlZpejdUcVQzVFhPRkFPZDFEK3lsNklaUlNaOTRxNTRlam5nbkR3aVNjQWVjYWp3NHRVL25oRmhtSmFTemFQR0FZRWZzNzhOLzlkOS9qbi8yVGY0U1k3cmppZ25ReE9RYkp3WS9RbmMzK0hBcjFQS2VaREcyc0tqNFZoV2FNc01ab1dJaG5KTExvZFNpUDUrMG5vQms0ZERFTHBGYUVmcGZTN1J5N0pqRFFNKzIxRloxM1FVaFNZaTA4RUxETWFBam5TYzhqRVdDaVlqYWZVblU2elpvTUZBUmgvVTlvNnBtVW4vdGMxMmlTTHdwZko2MExDQ0w2akM4N2xhKzBhd1J5ajJqeTF0Y0ExRTZyOXpBUTBuZHgwZW9kRTJxRmRNNTBveGNoYjEvT21uWUNMTTU1RmJjSElCMWpoOVJzVXlFSTJjN09oWk04dEZhakl0YitMTWIzSEJvYU0rOFBoYkthUjBhYklqOENFSktsR3Zsd1ZPakVTRFluWDNmQWwwZ1lWa2JrSSthaHNCSXF3OU5xNGJJSzFKd0FZVStIOWNsNTFDY25vc25hVXZWN2E2TWE5NmdWVmdsVjZHUWtzd0J1MG1XS04xczVCbTdTWUNmUUk1dWhrR1lvUjhHNkpWVVZHNUpNYW9taVVibTg3eFZaaUVWVk9ZM2s1NHJ5a0FsVGExRUVHOUVUK2RBeEsyZzllNkxXaWh3Y2UxM0FyKzdGeE9Sd1BDTEhVVE5wQ0NJRk9HTzh1eFVuN3o0NVVVVHYxYTFCYlJ6WDlFbXRKdWhOWG9VcEIxZnBUZGl1bkZLVmQyZkFXVGdIVTVVNmxXK0dTUHpENXBaeXc0cVVaZnBna1ZDSWVoNTU1c3FoZTNBb0JzR1lhcXo0RllWQ1BkK3FrSm9zK2VGdEhDeU1PeXJRNmxoRFAzLzN5Ly9vbmY4UDJMdWh3YkFmRTJ4aGpjQTFCanl2R1gvMjZ5ZDhjODNJRnhEU2xkUHIrTXJidG5JZUVwOU5wM0FPYjF5ZjNiT2NTQjBaV0p6QVF0MEtUUStoY0NtbHpoakR1R3hBMjRrOXZTc3ZhSkF3aUVBL0ZMMHdSamUwVmpDb1lnVmkwanF3dGJIUDlrUys4THpMTW01QVRWbldXc2UyRVlWdXN3VXhGcUNxUHYxRHgrdExSNnlFaGYzNHpQR0l3SWhjbE5pd0ZPQ3o1dWZTQXU0NW9kZXE1MWRQandxQ1NxZGg1Ym5FdVhVZkVMMjYwNS9vblJ2QU9oZjNrWlM2SVVaRHpoSHowUHZnK1VmRkM1MGRTNi9leGVYNzAxcEVTdnBNN1pOSGZ1S2djMmNFNE12cksvNzF2L3NyZlBqMFAwRUtkNng1cGJFWHdIVjhMbkNidFgrVFV4NEx1eEFRMUVNVC9hZTNxbFNUU1NrN2VxVzNyTG91VTBlS0Q4N2NtUk1RTEZ6MGV4T2dWSjhoRVd1cVUySmFMcHJnblVFa1VFYjlncU54QnNqTFZFLzdramUwS3JtaUZObVozYXZiVGs1Mm14VENrNTFNZTdqcGZqb2RHd2ZhaDFLODdmRGVBUkhKVUlxZVlUc2x1N1FodkxVdm1WRjJPd0pxOXg1NjlhUWhqajg4dEUzNmE4b0xsWG8wSk5tV1JhbUpxdHZlZ0pOeGM2QzNobnV0eUVhZHNVWURGaG9Da3Y0RWZQRmlWVy9kL0pOSDBscnUvbXdkb1JjNUhDdDYzK0VWZHI2K2JYSnhNbG91K2xRRE9XV3BESFJ4UWVJbG9CMkNFRjFWbXhoWVNOSjdSV0lJaVZaRHlGT3h4aXQ2bTlSMzZQQUdlWFMyYWoxUU5GcWpSZDJkczF4SzVsUWVqVGpMUktvQmlSQ09GZG9tN1pqaGRKam1zcnVUbkN6Nk9iZXRxR1hzaXQ1dkJHa0JITDNwZktTME9KTFl4cG1WODJHbmlucm1RVjJjK1ozNk1XazRFNEZCOXFhRm5oMGcwcjJNU0JmWTI0TG1NWkdwVzYzeUVEYlB0WGVuSm9UM2pJWlRGWEJNV1Y1QXdqeUVhR1RHMUpYanJ0T0xzMGVxWlJrSzVBczNnTitwL2hsblRFc3BldGlNeWp4ckJCTGNyZ3g1MHJuQ3RZSEcxcUVzOVoyS0xtcFpFeTBxck9HWG4zN0d2L2x2L3pYZVh1OG9oUnNNYW50S2tRaGRYMzhDZnYwTVJEWC9YRE1HSzJET3hHTlBPV0o3VnZ2bXNsTGVpWDB1NVF0U2lMaCsrZ3FkUWt5S25rWVJzcDdMd1ppZzUwN29SbUVzKzAvY0F3bElHM2ZEeHRZVGxBUElobUFKM1ZhaVNna3JXb2FPak9lTVlGVVV1bUVZUTl2Z05DcW9TeEI0QlpDTWtySVVBMXJDRlJscmpLeXhleTZ3VjNsRlR4bHZ0NDduWGhDYUtCdEJOTGx3QWZjL0RFY1B1QStsM25GZkFrTHAyRVhIR3VRdHQ4Um9rQm05Ty9NOGpkYWdKRmVVWFI5a05ENjI4a2dCVURJajU0RGpLT1BmZVVudmFUMGRhRXFIMXRyUVhvNzhGNk1UQUtsUEgwb1ZTcUd3WEYva0hCVVFEL2tlZ0gvMzMvOGUvL20vK0FicnIzNkZlSHhCVm1vbzl1WUZVcG9oY1dKbmIzTkNNMEhUVm5UTERrTWJ3YU9WeXZtQ2kwZ1BoY2VacHRXNUpWTmcwdXY2TVVlQ2MxUzhTT3QzRmxBRlJlTThENXkwUjNVTkN4N1N0OWlWR3plQlBrR09SL2V3c0FyQk5JNzduNkQzTWYvNzJmdWZEcGpndlZWZGozQkE2dFlOUmIyblV0YTVFTXpobmRGQWJ2bkdld2s0dDVaSXVaRnJXR3Rpa3RlOGh4U2VRb2M0S0dacU9ld21BaktqRTlsTWZyc1VxTzR2TnJaNnNsWXNPV1E2ZFExZ3RYcGZ1NmQ5bEtKVzVJT0dNTHQxMUhuVUVQaWt5Z1ZReThrcGZnK3k3QVc2bU5DdkNtMU9vSHh1Z0VUeWZ4NnkvcHNoYjBLbUdhMU5RWUtzd1VSeFk4dEJ5TWF1c3pIZnczT2VBZVZieGRHNEFQMUd3MFFORXRpdWN0RFpWYVAyRFNCLzErdHJha1B0TzlhWTVLbWZZWkhhcVZpQUZ0UUJZZFpEeDRCZEZXS2I1OHQ4c3lqazF1UTVCVlM5TjIxd21EWmM4a1hyaFc5Sm9COUpYTTV4TVM5Rk5udnNUZXl0bldwS1QreG8wTzNJTzlJQms5V21pWnlWMC8wTXJTbSs1L2NjMkVHZkVWcWdkNXd0QzVLdy9LMFZyd3FoMDEzRSthdTVqTG8zSEVCWUpFaVRMSDBwYmhHdGRQZXdNb1J5OEE0b1JqU0ZyZnBUVzYveTJJV09aQlhXYkd6QSsvM0FkOSsvNE8yMW9aYU9zblBxRjUzMXd4WVFBdlBsejB2RWg2YzRtTkpTYnNoNUdlbVNMUkhnWTd0ZWlmUzNiTUIyR2NwMysrcHJidWlrZkRyT1hRQzY3K21hYWYzQzIxOTB3T1NYR2xjQmpCMGdqdW5jMFRXT2tWWEowWVczaElRNXFtQ29CZDJhZXp4OUFiS01jcXVPczRzMUh1Z1dVUUw3WnArUWdKdGhqdzBwQXhjTGlKZUFOd0Q5Q0hSTkx3bDU3U2czNEFYQXh3RGNNN0JhUXQwTkVSazFHbEFNaDNXWUtINkRoN1RkbTV2WlBsV3l5NEhTT2pyeHBYdHVVenZhUThEc3N5K0Y5enRkbkNuSTNnTzh3SlVreVhZRXJTeERvYnZucGw4ajlYTmhhTVp1bFhOU0c5N2VJdjdOdi80Si81di8rbHRzQzZsZTQxSWRObzlmbFpLUVVBbzU2ZzlabFd0U2pNSkJ0eWIwdFBINUN1c0pLVkhoRTh1aElUbEM0NFJWN3I0V09zeUt6dnVZYnBqSEdSZFdIT3BkQ29aN1dnRzhSOXJUcUFtS1NoRnFHTThvZ0JLaHVpRWY4N2sxVEVXSm1qK0tSSjk0MTJ2dW1PQ01rdWUvcVFSb2V2OWdYWHVBSGhiVFdVRTk5Z2lvN3Y4dE1uanFoRytaa2xCcGx1YjNEUFBtWUhVckJNMEpEODZNUXUyN3d2SVZhTEdUN1hQdldEWURLZzIrdE5DWjllY3pUNXo2R0xqenBpZ2tmVStsbTIwV1VnTFZ2eVN0OXY1QVYrdG9SVVQycDNJdWFQSjM1MlZWTHZXTXMvOGVjY3RaZW1SOWQrWE9BM0p1dkpmQWdVTHdDZVFnNEVBdnV3b0lHa0oveno2dkZ3R0tUSHptT1NoelFwZ3pMOGVPMWd6NTB2d3pudExUU2t3a214RTJPUmRGU0ZUZVIyMXVRUW95MWU5QlBlbVA5cWcyV0JET2VvL1JWWk0zaFlPZVFSQ0VaZlRDVGxieXh5MnFEYndqOXViYzdGcm9TaFc4Ynh5UklFVituR0pIc0pwVys3bGJ4cHBibUw2d0g0MVVja0JIeGM1Q29wQVg2SVJmd2d1dlp0V3ZXL0IwVUJiZDVidERIUEJ3Q05uNGlFVS9pWktFV1JBUXVxc0ZHb3ZsNWptbzQ4c1gvSWQvODk5anY5MVJXb2MxalQ1a1JNV0k3ZEx4NjZjd052M3pVOFQ2Z1NHdzVYbkYweEtRTHdIUHp5dkNjaDFLSGZrS3BDc05tcWR2eDhaV1N3SmJGczNKU2M1aEN5ZStpSGxWejIzaWVxbEdZNVNiUkpVdWk4YXdTVGltS1RxU0FaWloyT21WMDVwVFpHNGVHcXlpeS9YMkQzTDFCL001YjNWRkR4WExCb1hxR3BZRDZNd3RLcDFHVHRjUURuN3BMczI4QUI4QXZHajhyWFJnNi9nUUFuWXR1VlFDYmlvOFd3T3dTOEJQam13OHJKdm9ubGwzRWtWZjZWcC9qVXAzL0xUS0RvcVVPdTV2SGV1V1QrMmxja0xYQ05XMFB5eWkrTkE3YlY0eGI2YStmLzlvNFRVaWxTbENRRlU1MGQ0TS8vYmYvUkgvOHA5L2d4aC9nNC94amh4V2hGV2g0WWw3eVBLeUh0QUs2MnRZSXVOd3RWenJ5UHJlM0hQcWEyZm9XWW9wbWlKeGNrcHN2UExmWG0vb1MyOTJ0NmhmV1hUSVVaOFhYRzJCZjlkWkdDZWkyUVFwQ2JPcklIZzBZT0ljVExuUkZGdVg5MjFxdDMyb2xJSkhmRHNTNGFzejVXc0FvN3l4TkpobXpFVkRXdm52czdQVEJXRGp6ejRCcG9Ea0NySVAvSkVGdFZGSHVjSUJsRGQzZlRDSmY2cHh2THFNQk5VM05BSEZsbHF3b2lJb29pQWdmTlZtbUVSVFVyMTJSTXpCRGZFWVFYam5GaUNEamVGNE9aS3RWaVRna2FFd2UvNWdQcXptZUxaSFRvTVpZWGJkNUluT1JLc2t4WTVxRGRrS21qVUJnVVQ5blVVK01XUVNpeVRoTFh2SmZtWnhIRnU1bkoyc21iYlZhTDFJUEpkUzM5MFg3OGs3ak1GREp3WXF3K0FnK0xNYXQ1bHlUVzJHZmpoblNTRTZRNG9KQ1NxQmsxNU9jZExkeFVndm5RdUNrSjZOcFBlY0xEeHVIUDE0YU4va1VhTXhmSmZpM09ScGFJNUZCV0dpaXh3OWxOMTVtMGxVWUdPOG1sdmRMS0JvcmRMNlBHM0FjS3BGTUxxSmJtSENQWEpUS29SL2QvQ1dMaS9nVENIYXcrd25ub2l5S3RhYVFrbWhnd20zS3pBVnRlaHBvMCs3V3cvR04yNmhaZDRYNHJ5bkdjclROVlF3WlpnUWtJM0FNVmFMOG82Rzh2cUNQLzcrai9qdXgxZThIaFhsa0VOazA2aTVMQmc0NSt1eTRIZFBGM3o0S3VMREduRDVlTUduajh2dzNKKy92cExkS3FyZkhDc0NNdUw2VWNwY3h0Z2dYYm1nb1NrUGFTZWdIMlBWKzdycWFTWE1lZ0tXRGl0YXA1RkVSS2FVUUlDTUx1L1NFTGY4MG1CSGtxQ3E2SzRWNG9rck9xT0hJZ3p6VE5kODFqQTZWV3lRZDU4aU44ZmxtcjFhdHBTR2l4ZGhjVjIwbmVod1MyWXU3eGtBRGlFd0k1RnRzQU5IQk5iVTBMb0E4SUt5aDNJR2cvdHBEcSt0K1pYUlp5ZVZvZ2VjUUJwOG40TlF1RnJVTXhYa3pJSW1DMEJWM3ROVnZOZkltQ3FUNDBPRXlvL28veWFuUURobXNyMHFzSnVBV29BYk92NzlmL3lNLy9MNUV6NThqRENOVk9oa0E2UjN6bjNzRVNtaEVKWUt4Nk1JRGdydnFVUHVzU1RqQTJRZmF4YThVcHg3dGtvSktPS245bEtaSkgvNjZNNHRyRXIyK2R4SnJibXRDTlJLN0M3dlBmNlpVdUE2RUlDTlpERjdwdGtORTA3Uko5VkpXSE9sN2dHWFI0ZFFFWm1PbHFDV1FvV052WDgvdVpNdzI5Qm16UVcvbm9iaXpuQVFMams1Mmw5aG96RWNEOENDaXJVZDBsdkZrRXk5VlJWVVI2VU12YjVDNEZ1aENXTTlyWWpZRWJQY2lwcW90OGhsSWpIWlo5MFNqVExCRWl0ZDRhQTlQUCs3US9uMGdLeTZycXpQUndRc2k2Sjgxc1hTRmtTa3hNaEx6akVLd2pDTUlyRTB2TmhKOVJIUXRHRFZYKzNoSEcvZGNHV2VTQzhwYTl3QTVZOGVkMUp6bm5UMGd2bEl4R3p2d1pCVStZeThJVTNoSjJIZVJ3NFBWaEZXRGhacTh3cVJtVXRia0JPcldhVSswS3Bwb2dReWtMSXN3Y2dDTS9ZYnVVanVWSmpxRTIyd2R6VDBXZmZWb2FyTXFQQ2l2Tk11RDk4dHgyQ09hZDNGeDJpMXVDQnBPU0ZwNHh4SVNBbnl3YldnMHF5S1RLb0NOd1JVU3NHNWdRTFY5a3pHMFNwWEFPWEVhZ2IvRGhEY1NJa3BZNUUxMjNUaDNwdFhCR2MwbmN1TDgxVDBsYy9STVJYdDJRbk9GZWZaOWlJYkZzMlk3cWtocUFJK0dqUlh4cHFCZGtlM2lucS80KzNsanIvNysrK0hMZGNiUGRmV3BCeVUzNzFFSUNrMGw3L0tXSFBBaDA4ZmNMMHV3MXQ0L2pyUm80NkpCbDdjZ0xRaFhiNEd0bzNyWWZ4K2hjbnJkeUlLNjQ5Ums3Z2hPdEdROGRYSTRwQUQvY2RKNHp2N1RxMnl4OWNZNzlSWUFMVXo5Y1JJak9uSEZSVFI0c0ttVTZrQzJVQjRUYXNxSHUzQWVCdUhGOTdiZlVCNzJwWHJraVFXd0hWbG0xMXVEWmNub3NhOW9pT1pJUzRCYXdPcUZHMWZPSGVYRlhqdEFXc1BPT3lFYiszdFJBK0FwMHpkWUJKVENQUENoWFl6ODJmdnl1MVdSYlVXN2NYYUlLcmxOdFpuVHhINUtKN1JpN3dCQ2x2V2I3QWpxbE5abVh5YUphWUJIbVRXNU5sc2pEWXRCWlk3ZXVFQ0xnQ09WdkJ2LytvZjhDLy9zMDk0K1dYRng2OFVCay9TZzk3ekhSOXl4VEtyNkpSMHBpcm1mdXduaWZoNEpFVVNEbXNFaFJHdUEwYjBUQVprenBLNThWMFY5MGtSdTRVdTZ0TVZjaXE2cXYrSnBCZ0FnVDA5TWlVR3dTMzNaZ2dVWURQdDVveDJmcEdUNGQ2cFZLTnk0YVoxYis0S0NYV3RlVzFUV2s0MUtNak1rS1lFRzljbXNxR1JFRWFLY1VFOTZpT1d4bnNVMFROQWpaMUgyeDZSRk9kTTBkTm03dFp6QTFIcjFXc1NjUEF6Y1daemM1SzJkRHJhTThCV1ZGOEZ5Vis4OGtxT2VQSHk2emJEOEtkMnhheE9uek5iblRiSVdBZTFzYlZ6SWdPcTdjYXJBcjJWWktMUUJDdFVIc2JXbkRnRVBBUUJLQ0FEODhmUmdKbkFWeHFhQWEwM1pHUmtuM1FKdjNPUVJvWkVpTnFRd1laU2xJaDBIMW5nMW5xbkkvRGZYZk9CVlVBSXBqWHE0UC9UbTlRS1VYanE3RTkwZHlzTVZjcDlvamZCbGJZSlNqTEJRa2RtQmtONXA0enR1czZxYzFtVkpxQVRIZE5xRDZ5OFRZNDZkMGNMQVhHTjNGUW9KMHI0NUhsOWhzc21oM1UzY3k5Qm9LR083Q2FyY3lyVW9NMTd5cWRsWG1DUzhLdjNYUnBjMTU4SU5WMFYrUWd6WjJ6dGJEZ2x6dHdEMEVUM0g1UEZxaDdNMlo1RWc0RG9mUDFBcTIvb2JVZTU3NEJWL1BHUFArT25udys4dkIyNEh4Vkg3V2psSWVHQjV5dnc5VmNyL3VMUG52Qzdid08rL3ZBQjE2ZUV2Q3hVNXZGQ0xQU3dJY1NGQnQ2eUlXMGJtcFM1WVFWeVpvVjBwTmZIUVhPMGZVZmJFc3VQL3VZVnR3d0wreERXNFJWcURBVmVrWjI4QVFHc1ZsMjFpZmZJRnNwMitDYVhVSFcwcjk0anZjWGh5YW1ybzFUb0N5cDJIWnQ5R0gvYkN0Uml5Q3JXcXRwZDE4d2U0ZldDa1VQZmM4SmFPdnJheC9odWljOVFlRW9QRXlZcEU2TlNweEdxOVc0UGNNdENSUTFjVThseDdmMWNYdGVCeWNLdWN6VC9UVzlnK2dBcjlsQ3hwRXk5ak1UejY3MTFFNmlNb2RrVTRHVzI1M3FmY1NjZEozM2FzRHIzdjNYZzltTDQ2eis4NGF1dkRtL0xoSzBhZkJuMGljWlhEdE9UWERMYnJKclJZZUJoNXczRUM4VEhPZ0E5Q1JIWEdPaVVNcy91ZWNld3pQb1ZWNndOM2RPaE9pay9MZGhhS2thTFJVcGRmTjY2Qi81SDk2OVhFZTRJSU1oYlB1aFFORVhVSEpUN1hVSWRWWTRhSGlNQWRKeGsrRGJOY3ZMcnc5OHpPc0JYd0RCUEhkUm52eTU5eWxQSHJBK1BwTmRpd014TDhPcDVhOVVqbnJVMUFPYUlmT3ZZNzBCdEIvTEtGQWcvWEhVZHFOMDFTcTUxajFhZ2k5SFBFZUFNYmRaMWNHOTBKeFp5UTJHbUpKdm1PWHBCWDRLd1VvVXlPaDBqd1dvalMvWW1ZYmt2SElnOGNzdEFpb3o5SjVjNnltc2xDWGhWU3pxY1ljUUljVWVIcVRNSEtHbldYSDdYMnNoSHEwcDNDVjlIUzR2enlmVDlydnhSOUtLb0VLcUhuSHRWNEZhNTIzWGJVUGFHc05IejdqblNBMEtibTJXYUQvNkxQc0VmUEVlazU1SkJNRGRobXJqRmFwa1drRU9ZTEZNeHNyMnVtVkhabzhsVFVDMWdFUWlNankrODV6bGxodTU1RUdiWHhsVzBUK1dGblVrdWxnU1U4UThwOXFtUTUwTEtIWFlFVmE0blJ5UGlvZmN6dHV0SVdPWksvWXpFbFdEVDNqdjEybXNUUHBDdVpQZXlFUjBKYm9MWEJCTnRMZ1dHTVllaHNTcXdYdERiRi9SMmcrMkd1OTFRZjduanB4OS93T3VYZ3FPdzhPWW9hbjRBaUhDV0k5YVk4ZHR2TDBPeGYvcVFjSDJLQ0hIRitoU0orWjJpZ3hReEFaMWd5eE9DMkFVdEowVjR1QmswQm81VUlod0Y3UTJHSUxtV3pDbTZYS0hTYjFLdnRBUnBQK09JTEpKemhoaUZzR2VKTFhGZStIbFFrZUNZd3E5UHcySXFRU0dYTWJMaWFaYTRMWWpxK1UxTGhMV0dQRUtSRVU4WHcxdnZpQ1hTQTE0alNsRUJWU3BxT2pDcXN3VFVDVDg1SWgvMWtEb0pRSFMrY3ZpODZ0T3VPSExxbkdzS093R3grR1BNQkpNUTMyYktpODlyUm9HYjhvVWVjSkNDN1F5SGUrMFcxeStwYXIwUTFOV3FlT21kbmxlZE5vU3JOaGhxN2poNnhmL3J2LzA3L0pQZi9SYlhUNGE0c2dkNmtwSWtoOTJkMW91d0lsekJObDlBL1JHNldoR2xPWU5ORUxEVm1ITjFiQWZ2eEhicmVCSldCVmVvcW1GcE1EckJ3bmNYRDBBbjUzdU9oWm04eURRb1FQaFg1cmVkanZheE9qdys0cFJNUThJZUtXSzlNSEpoNWJ5djBEUExTSElaS0lPWTBWMXY1VTJJSjhWbFduZCt5U2g1UE9TYWlzYjgvb2lNUjVjNGFNa2xqbzNiRk5uYkhYTTQwRnFYVENYTmFVcjg3aEtEdG5KZ3JLanZYaVFZN0dSY2hLaDVjQzFBbzZEdXlIbmp2YmtlRW0rYnFWWGJGWk5nZUdPQ05WSmpueExTY0tMOWlZbnZEbDd2eXFFM3EyUVdTb1RxUkUvdXBmc0V5ZU9NbU5XclJlR21uRmxWcUx5RmxKMFgycW9vQURvWTRrcStLT0JNTlFtQkhwRVpDMVFJTWFWUEhrTGUydWNrZDB6bUhOUUhoWjBTMjZSbzFEYVJNVlRsR3RScUo2SURyMFJXaUJ2V2VHMUJSQ0lCaXdwYStnb0VtOFV0TVRGNklad2w5MUNRVG9oSjNzTU5WU1diMGhYd0JhMXZTM2hoOW1PZVlXcjEzdHQ5V2tCalJhcXVNNjNYS1dvZkN3MVREb2ppNGpiUDk1TkdNUXVXRmI2ZkFoZFZFNzBpSmt1VFFSczJ3VU5CVWQwSUhscHpTRVBNdXpCVDdxMHJIS1kySVQwalpzc1NjZmNIT014TjgxOEhtRTM3Y3NmMy8zREg5ei9zK0h3N2NEOGEvdmhDVHlHZXJPRGZmSlh4Rjc5WmNGa1RMamtqaDR6MUVpbDQ4K0pDTEFUZU4zSkUzeFp2bTVHUFJFR1dvaXR6dmtrenlrVERUeTA0ZlhycGVCUitVTmhaN3hWQ2R6cE83VHZqYjIwdW9tQ2lCTFlMTERRZzV1RXhXQ3duM0pFd1FWVmJjMEVCYTQ5S1VzeGJsZ3lYQzVHcXV2V3hoNCtEOTc0a2cvWE9xbTRqSTlsV00vclcyQmNPS2tmV2VhaTlTRG5qVmlSOFhZZ0MxdWJGOWVUNlp4UThNc0dORW1UN2lRdmJDMDVkZ3A4TlNoNnROZFJhUisxQ1VwaGVpd2pXbXBONnpCc1E2cUNOekRLdnpWQzJ3c3MwS0swNTdpa1JHME1mMkFaLys5MHJQdnphc0QxSjhWbUhKWVpGNVkzaE1RN1ZsTzlVZXEyL2FFK3ZpRGdCTFZuMnFCcGJQaVhSVENoL0tGZ2VTNlQxM2tGZ0JBT3RtZ09qelBPb3lUQTh6THQwUXN5ZWJlNWlSNGxPcjJwdVpMcUhITFdkNTIrblpwWGlQaldublFxR3A3eVlRdnRQT0ZhZGRSczhGMnUwNEpIWjVoUjkwd0x1NmhvaWJURFc2aGdjY1RnSVFmWjVSaDk1NnlRNVgwNWRRV2NkUkllMkdLR1ZVZHRnR0YxWFg2MlROeURJTUlqSitlRUJqYlhveERXS0tBZmZkeXZFNm9qeUJidzJxS0NnWWVrR0M4a2RuVlpkQnl2MXZkSUlpSmt5aDlTdUdqdUJLWFhxMzB6VUdaMGdVN0RuQkxVbkJaSFQ2NDZsVEUyTEZTMmhndm1aVFBBazcvMnVUT1A1OU5lcVhLNXhNTlg3eWRjT0RYeWxad2FSMnJkMkNpM3RTTHF2QUQ2RUs3QW1nV2FIRElqQ0xoSmtlWHlTRmlLeFNHNHNzQ2pHdkdvK29HdlVvenRBR3pnVGhvUVZpRktXV2hUMWpBK3NJaE9IMEpXbmlaNFF2VkFqRGVGM0hNMFhpMVltVXBBUWg0N21DYURKRkpVVTRrdERwS3BTM0FEajFMczFGekdGR3pvVkpBdllxTlNMdkxSbVdFS1djcTVjM3Q1ZVFxWHRCQVNhdStDODVZdURaVmhjNUNXZFlYcmQvOUJaejIxY09pWVg3Y216WmVxaDVUN3VzOXVPZm0rNHZRSS8vMVR3L2ZjLzRvY2Y5eEZ5LzFLcUZBblFNMEVlbHB5d3hvN25yekl1MTRSdnY4NjRYRGJtMVMrY0IzUlp5a25DYk4wUTBvZXhhWkx6UnpxSUd1K25uZTllaEJQSWdNbmpSdkhkWVhvT3grZEdnN2tBcnA0dmZ6eG1yako2M2xsaHZkWVFlNEl4c2tWRmp6YVZ1aXNBYno5OUFITUpLVE4xbHRLSWtKbWpBZ2FrMEpFQ3grN1ExMEpnNU1jNi9aMWc1RGlJd2NhelhUSmdGbEVxbzNGTENHTVA3d2JQVjBjSXc3enpwTTNnN0hUd1Y0WTdsOERBWVJ2WERBb2VUM0FuUDk3cE5ETWFnZnRlQmxzZXJFNHNHNWpyZ2RyWUhkQmxFRVJyTkc2RVhEYzlaZTJ2aVlWQTJOM2Q4Ti84Ni8rRWYvSlAvam0rK2JvQnkwUjBuM3YyREM3ZkpoUjFiR2p0UHVSQlJVVnZEUmtYcFJURHFURnFVeWpXRUQyc0hMSEdaMGpmdTZDWFloTWRzb2lUenRWdkN0TUxoRXEzMU5GNkFzek9wSzRzenZXSVhYUVZwdVEzb0ZZM3RSNnJZRThkT3c1QzFhQ3I2RWZtcnZiNDQ1OWN1Zk42YWk5TVdTSHJUa0V2VllzWWt4eVBva2dHT3hGMCtEd0pTZHhQM1pxS0NiV1dyRFBTL081R3ByRUJnamxoSVFlSU9vNEJpekRsTzUxUVJlT3JZdGE1dDgrSWw1Q09xQUVwSHc2YVJJTmxsN25ueDd5ZFJrQ1hNZ3BQQTRMajVIclI4V08rL2lSWHMvYTl0eTJsVmNWdnBGUDFqUmNmb094MHltUlVSS21qQlZxeVFZMzFPWnNYUzBtNW9GWlRXTlc0WmVpcHlWcVpObTIrSDJnNFVKSEVxUjcxZDRoWEc2ZlE4S2tuMjRsRlRCNmJXcThnUmRzanVxZDRTTnJTTGNBZDB4UXB0TE9weGFNd3J4Wko5Y2RWb3RVaW9UaDdOWk9xdlI4WThlVXBCVlRSN2FrcTFuSHczYnNXVXBBanpJVkhpRmRUT0RDTjhNNmkwS0hlVzVzODllYkJkdVZ5TUVsYnRMbTc5L0pyYmlZMTRJd0V5QkF5VXNPNlVDRG40S3AyZ2dqRG9qRGdGZWpxcHcxMkt0YUNlcXVqQzFkN2o5ZnBSMEl3MHhBL3BJRHg4cVdpbGxmY2J4My84TU1yL3ZEOUczNjVGZFR1ZGZ3aWtZakR5OHhQRVpla2M2cTdDd2h1cUFaazd4M3U4TlFnL3c3VFBlOEk3UUs4ajVOWVFZQTRvU090MSs3b2duYU9QYzNOMXAzb3l2dHl2ZFhLQVdtMFJxZ0laV1dheTZ4ZVpWUUxtQW1tT3BNbTlNTVFYQkJ6YUxXd205akJVdVlwQjd1aDZpK21rU3lQMmNZOXhDRGEzQURrS0hNTTJ1dlNIRG15b083dEhwZy9qcVNkckRaRldvQjdrZHFYYnZDNXNTTmNKMWl4Y1U0aGREbnoxYU9IcHYvNldCSlJMbWRnMzRFbDZhSVBNK0VYbTNaYVRCRFJvU3YwT2s3V1JId3lRVjlLTWVTeEJsL3dkNy8vUFg3NzYzK0c3WElBdUREcTkxQ0RGTFZlSnYvRnJNeXEvR3VvQUE1SFcwU0F3MUQzSHVHMEhqT21lNDdrVFdYV1RLMlBQcTVhNDhZS2YrTzRNYjJySXNDdThMT0pqdGhUaUE2NFBYdnJZMUxrMG9HOUtGZWpvbWpkSm9hQWQxWVFjbHZFSmpDdFUxa29QbW16YmxKVXRLalliUkhoVlhYV3hlQno3Y2F1ajhYamthQmp5dVRwNjczdjRKNzcwb3ZVaUpEWWEvTklaZktMVXpjWVRqVkIwWlJ5bmJ6MlVtZCtNREtzSEJUSFdqTjRDSnJjOENnS3oyWVdENmVPRFFJSzA3MmJZR0E5amFHVWJJNGhZdDBvVTVaTkFpUWtMNU5QQzcyZG1TNVYveDJBZFp0dEJqbnkxVU0yTWxabkdFbVZpMWprMVJSVmdZZXhrS3QxRkJNNm12RGZtSnJhcVN4eWRLKzVOY0RrTFZvb0F2YnE5R2pHSmhXQVM3ekFzV0djZnE2NmR5NVZPa05mYk0xVE81dEczNGhVMHBWbjY4R0UrclJqbGkzbW1WZWFtT2luUG4wUkpJU0FyTFk5bjhBb3J1Z1kzRW8yTC96UTRKcE42TU93Y0J3Skorb1JBQjFJT1NtMTBNVHUxT1pXalFzZ3F6ODZ6T0NrblFtSkJYaDBzaHVmSnphRW52VSt3MHlJU01nd0ovTlhTQ3Z3ZlVqNWtRM0RFWE9Fejk3N0hIdGIzT3ZvYW9XRE5iRnZNNVIyZnpQVUNueiszUEh2LzhOZjR3L2Z2ZUxuR3hXSGd0ekVGNUFndWx3WFZaNG1MRm1xaUtGQlJSVXlwendGNWIreksvNkljMlZsVnE1L0Zta0dMMkpSeno3eHVXbkk5TXBkZFE2RGQ1NFhKOFVPSE5MUXdvbFhLVEMwNWxqYUdqUXVLdllrTXd0bHZMeGhwV2RWNjZGV1AxY0drcCttOWtJemRFWWtLS0MwRnB0VmpGOEhHc0E1WXFSeUZJT0ErazNHcUYyM2dMNEh0QmlSZXNmS3lCQ2pQcDI0OXFzd3IydnZBcXZ5WjZmaUVFcWNxWUF6aURlZmpwQVEzWHl0Q0NQK1hZMUhBT2h3S0h3YXpGQnJtR3M5cU43SEsrMWtDTWVBNnVVTi9PeXVnaWlZcURCbGVhR0JZeUZzZ050QllmWlhmL05YK0pmLzRzK0JTOFNuS3lONEFkVmxRRHRNQ2svSWZiNlhIMnZHWWhTc01vSnpZbnVLY2FhZ3BnTVYzZ002TkJtRWRCak9rYkhZbzhaVlZmNW9maTUzTkRKOEhVZ2J3ZVlsMGR4UnliTnl2R09tS2J1NTZSSThHcVZVeER1SHk2US92QzIxOC9WMFQwclhZbzZYLzM3QzYrYkVkdWtwdkhVbDR4eWZxN0Npb3FIUktoTm9rYVJZOHB4aEQxRWVvVzYyNWlBM09CZG5lbWVSTTg1UndRNk1oT2tMTlg2T1U0S0VuTVgwZDZxZGFhMHlQTitodGVyNjF2SDZkVG9sWmFwa2lDbFhEalJlWUk3REZMTktoK2xIRzBFc1NWTG92QkFWQ1lwTWVTcnpxQ3FGU1J2cUJYVE14K2V1d1Q3VDJrY2NUbTdRdE4vVWIrdXh1Q24vMXBDUTFvV2ZkNzdlN3Q1T2ZsQ2NKcUhtdi9Nd3QxYUdWOUVHQ1lmdTRTWit4S3NUWFNJdUp6d2p0ZHIxSGJWVkxRYjFyQXNYMmQxc2lodC92d2dMUFF3WVFzZW5kdUZpV29RVG5WZWJ0TXRTRmdSdTB3VE05aWVCMnB3UXVwU0pHZ3ZWTEUzdk41Sm10cG0zRVlsY0pJZ1FyaUY0a1FMRDhjR0w3elJtNGp5V0FKdGM0U21oMFlyMzRxSXVJMHU2MjlIaEppcldiREhwR29mV0Z3ZkU2WFlmNGZiWG53SHJCVyszT3BUNTczK3BxS0NDcW5JcG1oUlMyb0F0UkR5dkMrSWFjRWtQUkpKUVd6dGlDd2d0d0JJazFOcmNqU0ZOZ2RJTHVuNGZ1aFNYOWthejRIdStIUlZZekVPanBpSVNRWWMvS0NNVGxlZURuQjczMytSTWRGRmw2bXNpeG9reHNHY2VCM3J0bkk4VHhnZHlRbWlPK2ljWmI3QmdzNzNPVVh6SU14QXJsSWFacG0zMGxodTExZ3k1UU9GMUljUXNqZnBFNVh6ZGdINFBPQnJYYlpZY2dBRWx1bmZ0Z3R4TUJwQmJZMmxFQVhJMjFCNVJ6VlJ0RHF4amp0VWxRSTBoTDFERXJVYTExdWx4eWp0a3RDeG9ITXhZR0JqNnlYVlBMT3AxcmpFVHo0Sk5sVm9NYWgxaTVPSmVDdjcrNzM3QWR6Ly9pTHo5ZHBDc1hITkF0eFc5MTFuL1lnKzRGYzVmajdDN0dBdGhtY29EemZXYmdHZ3hiUkhoSjNaUDlVeDVSYy9QMjFCbkVrQk9zRU5ZOUFrVlA3T24wL0dDZjk4alZyTmR4NlhScVIvY3ZDQTB0SE1JM1ZSY0tJQXN6LzZaRC92TWJyd3ZqZWhqajBkYktFdE5PT0pSMTVta1l6cjNsSzN6WkJPeE1ZanVtTEJrb25iTkRWYlpodmQ0YUJsNk41cWRQSGVSb2JBaUhNSGM0U09zYjRXT3gxdUlldFBhSXlwZWZIaHV1WkkrR1ROdXNFYk10V0dOS2M1T3lUbFBwNzNlWjB0eWhqUi9DSzdZSEJiZmx5VVQ3cjRTSWhyZk96Z0RmMXk1ZFVlVGt5S2NZYmZLVmk4UDQvdEhBY3lNOUhKQ2Nsb1ZPaFJsSnhvYUNzUDdVZUVjNndvTFlkNlB4eU1XZEk5cUNrdTRjZ0hQVnRuZ2k5MFZQODZvYTJEai9qalg3cUdRbU9sc3haUlZHS2huN3E0RkpYODZqczdlem1WZFRnVkt4RmZ2OVFCQ0dIOHpzeUhRK0RVS1JrMDJEUzVuMlhrRTAzQlRRRUxKcEZTTStNa2NPejRIU1ZaU1JQRStWRU5VNUNYNVltdU9UZDU4TnBvRDFJZ3h5L3ZzV3kxQVdNYWNDUEJIdmZsYU44NjJGajFQeHFGdWo0Vkw3V3lmTDJoMVE3VlgvUExUanYvMjMvNG5mUGZESVFqYk5Mc0JJa1BVbnpMd2RVcjQrQnpHRDdBaXI4SEJOalFWNklYOEJXNXhSN0FDSEJJUFZLYkNWRi9FVzVyZ2h5T2VIZlRRQXFUNmp2ZlVYK2poR0grcnRhSzdJSSt6L1d3YWNBN0U1S0FnYzZONmlMS0RkTGQ5R012R3ZVRVdNeExMU0xEQ3V5TGlkT09WVTU1eDV5bkFyRFpHMmhKeHE5WHl3Znc0QXZaQWhzUWFnRGg0MW9GNkFJczZJQzVMUjJtQmtUSUtSenFPeklkTGtmTkgrWWNaeEttRzRscEtmaDBtKzFiVzJxNFBLR1RoVDdNUWVyc1AwTjBhbFFGUkU1Q24vaEZhdGlxSzdTeUlwcDlzaGlMOTFnejQ1YlhqWC8rYmY0L2YvZlladFMvakhLbFh0SmJSemJmK1l4dWFLN0x6K3p1QTFlZEZhbHY5MEliR1FsTlA0N2dPY3ZPWDh1MnNoT09mR0JNNmM0cktld2o1Z1l2aXpOVC9xSnNjRGVta0RaTHFNdHhGZkwva3V6Z01JcDJoWVJCRDc2SGpIWXVhcHdTWE9VQkplZm1VdWZXYzR5T2YyTitFSnFqV3hPVGViWnBwVnNpSWI3dVdIRlEzb3NpR0k0TW5JSXFLVmZ3V0pnYTQyaHFHdXhLNUxnVnF4dm1leHRQRG9ZbVowVmk1NVZBS09Na29UY2grbnpGRmJERUNwVXJ4Vis4b0lpc29BQk93bHcrZXo2dU02WmlVckgrWFlaZzVKMVVDOHpiWWVxbGlJcDhOanhqeVZac3pXRWNiTzBHb1I1YTBGeFZlT2ZPR1d4clZ4MUJGZFU2bW5HS2UzZ1Zqc2pDd0dqa3NBU2habThZb0JwSm9RdU16cXdQVDZudmY4eWlaaWlQMDRBeHBNSkttT0dyU0JHaDlBR1N4ZnBWb0lSRi9IRUkwdm1ORWdsNjljV1lXYXRTbURpQWdSNkhNNmVnZTh1bm5NTFJ6dFoyN0I3cVUvU01sb1pPbjBJaW9EV3RLQ000aG43a2hBRmowZmsxeTNCdUZmK21OMVpVc2xOTm5DdWJSWnA3VzFIWUpLaFpERjQ1N09Ia2Jpc2JnaVF2RS9RaURPYXBWT1JjWU1oY2ZPdkcwYnp0cWU4UGYvT0VQK09Ybk45eUlFTVUyRWhWVjVnamtsYmprZVYxR0ZHSmQwMUEyMTAycG9hQ09adjQ0UGVSa0JBd1FNc3VaK2xFaGVsT1lUYVlHalVsUzVnYTJKamJnSVhRNDQ0V0oxd2tMbXREY1lGeW5ETWxTa01jZVBVYk9LS01vRXJXbUpzQlJWOTFJSXR4cmErZ25JN3E1Snk0RHovOW5VL0NtcFBEam1RbGt2bTRwNEZnSTVheDh2N1l0NUQwWWVncGpiZTJkVVFuTHdOTUt2QjRLdTZxOEFIcHRhcTlUNWJYR1QrbW1rSnpBeHJyZ2ZwUEpHNlFjSVdabFFIZUsxRWRzQlhPYlJWMHpnaTZHNkhEVjRpTUFwTWR3YXZlQ1JSY1RHdkx1N1VsN0lmVnNqZjlmYXRVZjhiLzlyeHVlbGh2dUltM0tRV3ZaVTN2cE5LS2NydGJpcVIrZmtUcnhSOCtpUmhyTTBqd2QydjlFb1F5ekd3YU80ekhsNkhSQTFOTG43YUs3N3pYV0ZDM3ZPakRzeENJSTdRSDk5cjJPNnBVZWQvQW9xWncxSDA1L2xoNjUzbW1ZSG81cEhoR1ovdXRHQ0ZTUFFybnJKOWh0ZXUzRU5zdnpBbTYraEVubzQ5NjFDSS9TNW9YZXRVZVNiQm1qS0JNR20rTk11ZERPVHZic2NpQjlyM1NFaHpYa2RBZ1lLbFBtRlRtMFFOUzArcUwwWjhSNXBsVFpMbDhaMjRtK1pJM05PNkh1b3FadDBEaWdQMGFjSGMyUFNVSzJNR1VIRjZEd1d1S3dXa0tXRUZiNGFrbEFWVEhWR2RJNnlrSkxTSzdvbTFxSktnaG9YNDJLczZQUUd4Z2g4NHl3VkM3RXRxRVh3dXFGUksrTy9ZRG0zUCtnSWFVSG8rZmtkWmxlZ1UxV0s0YmFINWF1cXhuVGYvV0ZjOWhkQ0haeklycjNqMFlwMFkrSXk4R3E5MVRsY1VDRGE4N2hIRHlMOUNoQVRHOWgrcnlXaDhnWFZLZ2poTFp3cGhWVklReGRZb2F3b3lGbUljVFpvNVc5S2tjV1VxSWlEOUhoV2VuZGFqUEptd3lPcnc3a0RBSmI1QlhId2M0QjVuV2pOcEdoU1FxbXRLSXBUUk00N3V6UlZZUUU0VUpCRXJVQUxYQkR0eDFOazlPYXJKeEtjb3hhRzByZDhmbVhWL3oxWC84ZTMvM2hCZnMrVXlvNlJLUURYTFVrTDVlSTYvT0dOVVI4dUJCOTZySWtMQkVxWUd1bzBZYkNkQW9YZXJrQ0Q0S25GdGl5Qmc4bFJ1Y1k2dDUvSHFJMFFDMFNwQjFyREk4ZTBqdHM4NVEwNUE1VzVBVnlucnZUU0RNTWlUNVRTaDZuOTZtZ2lHeUtLcmpxOXh5bHQzanE4R2VNWEFHdWNRSTZvWjk3R05XMUpRQk5GZkJDNXNTNkFFZUpDSW04K0l1UTBReUd0QUNwZFZqMVJndkNWMUlHVW9IYkxCMlVQSjZIblFDT0dITFhPQ2w4ckR5dTgwMzdJejVHc25wUXJ0d01pVmdVcW5kZ1cxTnBOQ3hhTlJqTUl5RitPQnp1NVBKdVBXRnBGUDE3N1BpN3YvMFpINTRETGcwNDlrYmpZMDB6anhzYTIyZWRhdHA3SlJ5YTE4Z2NLV2VuQ2NvNXE0MHJjejlvZmkwbFpBNlc0NjVIRCtNcUV1ZU83NFJwUmJ0UDlzblU1TjBsTHhiR0tXV0pjM3VwdC9rRWR5eDVOQjhYdmNyd2hCZEtscDVJSlI0V0x3YVU3RkxkMDRsb1JkN3J1YkZFVHp5OWJDY3A0WW8xbTdIdExtY2lKQnJkV2lBZTlqY1Y2WFlwd05naW9LeGhyK2VGUjNLdkNTUGdTVHBZbE1ra3dKNXdTdVhHMWNTeUZyREVpcGxUSWJJcGVwTXgxNTBXR0xQVnpVR1hrKzVqZGNBZEpVOVNSemJLakwwM1JqODU4NVJCeGhPWnVyUXlGVkNhQ0VTQVE3enkzcUo3WE9xRlZNRVo4eE1tYXpORTh3M3ZGZlUxb2lsSTNneXVzRENVZVJwS1k4MmtxY3hyR3BDZWhpVEZzRG9FWWZDY3lUbHFJSUdiT2hLVWorOVNvQXNuMUZKRG5DejNzcUFiWDFOWG5ybXJDTEY3bEFFUmoyR3V3L00wN0VNVU9FTmNvSlZCMnIyQXc2T3VNUnJNa2xNUTJxUXJVc3VldStDdStCVWU4ZzNpbThlSXlzVDhpU0llNkY3M01PT29wc1d1eDVTd25WWDVVWE5IaTdVNTFaNjhPdy9WR3F4eDRWb0RxM05Eb0hCUDRIM0lxZ3hwZ2NmZG9jS3N4SGFnRko0UU1qRUZSQ0FncFhNT0NTa3NyQXJjMmlWZzIzMzgrMi8vNCsveDh0TWJta3FuNStPNVpVcEVMaFg0WGRlQXl4S3hYUmVFRmNpTHhtYVc3aUZOZHJ3WlVwVHcwQkNmY05wbG1WdmxXR2d0WmhGSHBMUHlGanl2bVdJUXphY0ZXYW1IOHpGQk94NVRjUEk0M0FlZG1QZU5uaytLRE1meG40cnlTR0NjbERoYUZSbEhrOWVuc1MwSy96ZjRNYTgwRmZmYnJsQ3pHeVNpSlUyRzFZQks0MXFZSGR4RGFkRmFvblBtWXhxN0V4dDdxc3NmM28zMWppeEZVd3VqSjJRTk5GY2VmTkpIdEt3ZUhKdkJ6ZVBKSkxZOERxNm0wQ2FiaHp4OEdxa1JDY0dOZzhkd2RGTktLQjRkLzQvLzI3L0ZQL25uL3pVdWVRZFNSRVZGcm5LNFU5UUZxM3ZZd1hTUGxha0FHM3BlMStHMXRmQXFpVUhHRnhNOWVZWFpKY1ZsWU03Rk1tTytsY29ZaGw0TERWZU5tSXZlMEZYSGsvOUVoSzlQdWFvUWZRUHZNMmFoSFBybnpteU5mZlozTnp2M2VlaFY1enNUaXVoRHh0dHdQSGJKdzlsZTJGUlQ4QUNDRmIxckJSYjhYRDBVbjJZYTZOUm5IdVFPRlRGSkZsZ0djdEh6WkxRYVVFWk9hWmRNQWcvWG5OQThHbDlWVitGRkxMNG1HNjlsWndWKzN1ZGhwaGo4UHFFMVhyMEZENjBNMUVxa2dOeWwvYWN5MTVFQTljUEhScFRWVEFWaU1QY2tHR29OS2MwQWlrRGw4VEQ1YXQ0WEJGL09tZjJzZVVWVzVoL3JBZHU1c0owZldjc3paaUFub1d6bFJKQ2FweWNWb3ZSeGpxcHdtRm1abVpISXlkVUNsd1Z0R3JBa0FaTEZQYjFBdysvUDBxWFh2Y1hEVFFWN0xOWUlEbFhKNnZTUVNKTXF4YmFHZUE1eSsxa1FKNVJxeXZCMmp3bVpUZ0ZFcTFVZjdrTEd3em1FbG1oWittWU0wdis2RXFJUXpGUnhxVEFQaUludHhVS2lYRWNVTGlYWEJxRnNZdzhVaHNGN2hPbkJob0M0QVlzR3dPd0pGdDQ0enExN3ExczQxVkNjZ3NKSUtiRi9kSWxqZlZRa056cDBpTlZKOEp4TnJGUmhmSjVNZk5idysvLzBCd0IzZXQ0NWthbkpESWV6SEhWMVluQU1WbTA2VmZ2TFU5WWF6UzdrRmRWUlg3N0dFcjM3L0FTNUdyMzJNeVN3c1BpTi9zYm9OS2p1NGFjTW5mOFJTS1diOWljNGJ0UEQxbXR3VDBmS0tUNG01YnluK1pnRllkYTlqa0pBRTJlWlF1UFBtaFE5NUlGeTdzeTBvblNPa0lMVEN6dERzZkx1T1hjMEkxRkxIbUFXQVhaME5JR1dyRnIxQ3pBRVlvdUJ1UFdwSTllT3c3MGE4M1pNdzlTVGY1bzNaY3JRQkJINXdOQ2FmMjZhOSsvcWcxb3dwSzR6aEF3N054eUsveVp6M25qV1R1amgyaXRRSjR0WXpua3FFSjk5MmIwd3BBYjgzWTkzM0g4cTZKZUlYdTlBTWxSODRKN3B0QXByazdyc3pJbjNDamVZTlg4eTFtUjdzVHFlNzd0eXhPY0lZajUxajREUkxCdmVOS1IwRm9Rb1daaHRObVVMdXJsa1FtRm5IQUptY2Ezc1RqcnZxMGwvcmRBdlljMlFZdlU2QVFOZmRYZ3hjY3VpamZVV3RRN2xTVFJaay9jOVpWYlFlMlJoU21oZG8za1BlRXdMSEl1enl6dTM3blAyN25BWVN6czdQRnFLc3dNSkovWStBbTAxVEVVN09SZk1Qd016TDQ1K2J5bDJwVVp5UE92SUpKcGNrNU1vWDd5N1BOSTNUWFVkdW9PNDBabTJGVFUwUktXbDRuUm9uTEV0T0NXNlY3bXpJS29VWXdzYnNyeGpoVHhjRVozdW56Q3c4dVkzYlVBZ1lDSU81YnlnOUFQNVlGNzNLSU83YllUVTE1d0hjMHhjMVM0azBSbytmRURmWDBobGg0a1ZITm94US95WWNWZDFTbnIwS09hRUZqZFlXSFNUbWJueW9HcGxzVUpNckphdVFRb2V4Z09KbEpSTGpzZ2JrSG9DcWxlbTg0OXcvbklPTmlMcXNKWTZVbG9WZnRtY2EvZXdIVEU0SVlzbXNjRlFBU3l5d3czQWFlUDI0TUpIWHFQbVpmRnF6b0E0U1JpV2lScVdvQ0xBc1ZBbC9ITmdHTXFpUGllSTNnR3hPazFUTXlnQzN0SDczYUg5R2RrUVVFaURDdEs2V0R3WDVKd2VDMXpPRzcrQ1FyUlY5aXVYL3FqOGtGQWEwUGM3YW5uRDIzZC9penpJTkREV1RNWjRnNHlLYXBCcG4wNW9oZ2xqTlY1WHpsK2l0eDVCQ0VmZWQ5TEtYMFRaQ2VCK1E3NDh3eUxSdEZoTVZVL3RkOEc5V3g3a1UrN2R4SHRsTEFwTTNwNGxaWnE4UlRqS1lPNmhBSm5WMk80R3hPQ0NpUkVYSjhHWVA5MFRSZTdGVE90Zm4zZHZUUXJmekF1N1RKU1FhSFVvL0ZxYmd5TkI3Wk9QR055YzAyUmhHRFpyWWtGbFJjZHloSm1HUFlCYk55d3c3SGN5ZUNXMTNoMFZaNitTTUtQaVVQZkR1UjNPTFRjUTY2SCtPdWE4RHozUjNIaDJVY2cxNWExRGh1QVNXL09yUnpNeldBU3FtWmNPMU1GdGJXY2tNcUxQT1ZuSTlESjdESjdqdG52Ri8vQWYvd2EvL2QyLzBCZ0N5VVByVWRNVTVqTTRjVkNVSVdpbnNXWStHWTFDSnpGbElIcG5QY09FWVpWeXJPajZYUkI5THJEN2t1cFY1a3duTmJXM3Q0V01XZ0JyTy9KMlFZQTlJdXFkTFhRNzBNSFlOQ2xlVlNqclhyYmtRR01SbDN2a0FUNEhOc1BYM2xLWVkxUXZmWlhOd2RDOEx6L216bVdIVmQxM1FQVE9BS1drbG9CYXdnQzA2cjJNYzZ1amdRYXJhaXJDSXdFRjkyM2xISVRzWFZvYVY4cU4ycWo3bGlGOG9xZkVha2dJMVZUUmNUdzZLVXBOUU1ab3QvUCt0Rk10VGxCQlhGVGVuWkRSRnZWMGdRNHUwZ1ZWdFdjV3BBUFFVQVRCNmkyY1h0ZHR5TFh0eUVpQ3J4VEpRUUlQcjlDazhEcjB4ZFNBTmJJb0tlRUQ2VkJucVFibldaWHpTNGdvd3REZEZzalR5ZUloOTE0TlZkT3IzemRlV0NuWmZUdVEwckFjU09tRTFPTzBMZHFQT1Fvc3hCV2N6Nk5qMEFkUlZLckZMS292MW5kZHBnVWRpZjRrRUlZNGVkdXpGcnMzTFlzQnFHZmFPVzNGbUkrd0FZVExKYXhmQk5ZV1lLR282alFLR3BQNHlncDNzQURFalF4YXA2ckU5Z1VwdkhTRnV4Y2dUcjVnNnhIbUZiUDBlbzNGVjRRZ3JBdGlCcnJ3d0dGQ3owTWpheHVFbzM1VTFMaWlsVjJoSlJOc3BxcUo1YUdqZGdTdkpKL0xwcUloK1N5ZFVKamtuUlNUMWVES2FHcitkcnpoYi8rNy93ZWI4MEtsVVpVQ25pL2FHUHJ4aFNvT1ltekFod3VGVXhQdjh6SEFTaHFxdXRCbmg0aXVITW1GUERKdVVUbEdRQnptdXQ2NXI1eGVqVElFVWdacFlWOXdpekJGak54bU4rTnIzemptT1RFS0ZpZkZhWXcwRU9pV1ZGZFU4SmxzdnJmY0o5QWNDRi9keDlrL1lFMmhlOEtnV3BXbmRWUmFhcTRJalNHN0hHQURnclFpOW9SR0pVNGxtWUFzUnNZY083Q1Nmak4xcVBJOURxODhuZ2lETEJsQ1pYd3FCNkE0S0dEQWU1cVNRSzRHVWtWMnNRZUtIOXhKaUtMZ1RJZFJxSFhyNTNBZE5FUEdVRHRvU0h6dXlWL05IK1ZmMzZjNmZGMXdiTWloYlM2a3VFNzBuYi8rNjMvQXYvcFgvOW5BNzdDOUFGdmkwTFlrbU0vRzBSakdNamtaSW5aWU44NmRTemZXN0dqS0ovTmhUNEJFRmFXUlNRRTcxVERuRjBZa1FhenNJdkpXdUVPR3VUcHFITFZZa1luOUxxVStTODVUNUd1VGpRTXJNTEJkMCtUaUNnSmVPTzJQem5qQUhNVFpSamJUa0YxL2o1MUdtNGZlS3hCWHdHcVpSRTRLUjBmM2Z5a3JhY1RSZTBmM3VnRE5QWkh2dUUwZEFaUkdrUzFJU3VGNng4UmpCcERmQlEzVDdNVWpIc2FuWVVrS05FZU5Remd2d3VqL25MSXFxQUpmZXFTclJUZk1ZbFdhSVV3S3RwRFIrOEwxR2dQTVcrQWFEc25vYm1uUS9vYXdjc3gxWkRjdGRGcWM4eGNuZ2R6MkJzVDdFTjRWRzlDQkxUd2pCQmZibXRpSXhhbFdJbXdCTmhqMnFwaVhsR1RqTFNyM2xyeGxyYndhRWVnNldXbVM3by9yZ05qcGExb1loam5sRXdTTGdZWVY1azRWUTl1S01taEExYnMzUWtOcDVPcDV2RW1JQUxIRjRSWE1SVm41dmZ4b0lDRDBXVFZzYlZ4L2NqbG0wbHN1RytLUWVpWnBsSkh5elhOM0VSdk1LbUpha1JGUVJjZUkyRHduK3NpYUs2ckdBQmxhRldpWnpwSjV5WitIK0tza1ZiUXFJOFE1MmpUbUUvQmdRbk1wRDM0Y1RvckR2VzFlUUJjSEZuaEVYOElEb2xPT05CNVdHSTZSZTUvTVN0Szl1aWZnRE13ZnRlYjYvak8rL05XLzQrOHlzRnJHUFhkODg4SHc4MC84L3VFdFJscWRxV01OSUtRdW41b0pYa1QzZ0pjUUJtbFBTdUliOEpDU2xBWU1jaWRFdXltY2VjdnM4elR2K1pWZ0MvcWRLbWFwUEZVTTA5R1ZOZ3Jpc3U3eEJsTk8wSUphY2RUTEd4eVpqOTU3S0ViaGxaS1QyS2hMK2dUWmFmTFVkU1FXOXZIV1pnelRxcmtpVXlFTHFqeDI2MklMaENyTlk1VWhYRVVyek1oZkxrQlhqbGhVakNLVmlzT2V2QUFvcFdQSmhsYUJwdHp2MDJaNHV6UEZ0SXcyU1pNbjY4Q1EwTWg3OUtsSXVNNVFQcXZWRDlYalNGN0o2WmZST2lPazZrK1hvTWMwbXN3YytNU2pZenJrZGY3cHcyUTRlQlJJMTYvQjhQM1B4Nnd5amd0U1dJanJualEvdGFPSEJyT0crMzBIY0dESkhiMDJwR1ZHUUxWSENFM2FnNGRuMFZmT3VUb0pBQlVVUThWbFppcnNLNVFGbXlsSlQyaHBHT1l4OW5oQTZpU0xDaUV6MzIxM3hIVVQzMFIrUkdGcjZxMjNUZy9SWnRxb2hZRFdET3NpWEVWWlZMb1VDYVBFeGtZUEIxSjJrNXpFREFLYzBIeVlyais1Q2FnSEJONFE1WlZpd255aG54V3lTVm0ycUhrUDZIS0pUSjV3TWJhckdvcmZxOENOdkFEUDkyVTh0VURTNjJjcUtuVFlrT1V1bTlXdTdWMVNLb0p6SkZGdnNRMUN4V3ZGMU1raEFrZTErMkpaRVpBbTFLNTF0S0ZiYklJc2dYS0ZjWUFkUUhSREt1dUNaNWhYWVZhTENDSUcxTWJjSHRWckJucEdqRmRhV0ZJdU5rWkFZUVErb2cvWUZLenZNV3NUbE9rRmlxb1VCZjFadWlFUzdFR0ZNbHB2UFo3RE4xSnVFVDBSQkVhendvOUptZkdZL0h1Y29RVzlSNFlJU2JZNStwMTVDYStpbEVCbDVhNlpzSUFSSFhERmRSUDBleUc1SVViRVpVT096NU1vcHhZZ0hPaVdTTFRSZDRSUUdLMEllUm9QTS9EMFNPdnFJVWdUaEdTaU5hdWFna1dwaEdydVZIaCtTcFMwL0Y1emlzL1phNXlUYXFqTXZTeStpdlduZzJRZVRhMUdSMUVZMFlaRm1VUHpDbE5hNGNZb0lBN2tEbGhZRWFVVVJkeXZRM2p6VnREYmdmcmw3M0hmQzFKazUwV3ZodWNuNE9kZkRQRDJFbG5kRWNoYlJKWlhzWWFJYTFpQkloNTJlWEtRWnhBUzB3K3NoZXFQQ0Jzd2ZiYWc5MVUxRFFxMWE2S0Q4c0ZSRkloVm1NczVWaHozam9ZN3J0c0Z2VmNwbDh6eFk2R014NVFjZkd2VWc5UnpQb0lhRFZWNWNVVXVabHZQSkJGMmIraWh3TkFSMkRvOWRJMHZmN3B2Ym0rY0VXNlJFVmNueGVGdDFqZVBZakFmdU5CN3Yyd05SNGt5YUEwNEVwZDBwTDk3eVJGMU5mUURPQnBiNzY2Wm5ub3hVOVY2Zi9TTWZQVDVjeTZOMld1VXdOWThCVGZkQmJzYlBaeDhGcXpoekxXbXc3a1Z6TjFpVHgzOXFVUHBDQ21SQUNOd0VUMTBJUVBXMnZFZi8vb1YvOHYvK1NxTTVJSjdCellrblNQNDFOUkdEN2ZXZ2lVWXJJa0ZNcTlZOGdtNlZDMmpHZWRLU1NPQmpSUVBENGFOVzZ1TVJJaVFCNkdoN0l3T0xHdDJUbStIc0ZGMEJxazdNZFBhV2NTWUZnV1c1UVdpTjVTZDhvQTNwb2hIZ0NLTEhlMlE5NXhQRElwNlhqU3VjUjJ6ZXlNR0I1d3hnaE14dFdlVmMzZVdQUzRpRE9aSzNTVERWUWNTem1zNkQzbFEya3dOZEpNQzc5Qit1V2xlR2tydDhsSGFZOWhJZTZ0akhqMm9TRE9JNXo3Z25iem1jK1FFem9lTXhVQTU0cWh5elJLQU1vekFMazZCanVCcFlsVk1Ud3dVTjNvbVhrcVlEdmdESVZRRzJpTXB2d0ZwZFRCNGhzZ3FnN0twQndSWDRrbWhuTWQ5MDg0NHVacVNZcWV3K0t5cEVvcU8wWEZ0QnhLaVQyQzdGL1JzU0RHNWl2R3RKN3JLaUJVMkkxTUNma21DVGhiaFMyc0lLU0daRkhwbi9DQjNGcFRGMC8wdmlZeHJyVUc0MWlLVzZKbUdoNm1IV2c4ZFBQK25RNHR3VEdGY3ZmaERmK2Uxc0tMbmlsQURtdE1Zc1dMU3gwd1d0Nmt2blU2R2hFT2tSeGl5d1hwQmd2SkhwOUpNclhtTm0xRHM0cUsvZWU1ODVyeHFZMDVKOHpTcmt5bkN3SG1ueGFyTFhPS0d0N2JyMll3cG1JVUNGYnBDQW9VTWcwbDNlWTZiS3NRTmdPeG5PM0J2Qi9EalQvaityLzhBOUFOWkFDOE5ob2hqS005cUJlc3dsTlZFdGlaYzFqaTg3M1ROMlBJQzVJQWxjd1dTUDFKTWdFdDREL3ZzUUQwZWVZbGV0TVEwaXpiVDNMQ1FzZzZDSWpEU0x1YU0xZ3RSbXU4TkhUdDVzQk9Rc3NFR0FzdDZ1Z1lCSTJKb1VyYUZkUjBtb3dpbUNKU01wejRMZGFMck5mOXhEQU16QXNUMFZsQ3B2TmtkVUEydFRYZ2dkK0RkcTVnTE5JemlKNGZSVlc0YldEUm1DN01DWEtkcndCb0M2dEd4TGd4cmJ4cG43TUNCaEp3TjE5QkExaGRleTlUZmE3TlVlcHFyUVhPcmxORWpyN0YrZEpoWGgvY1R1THVVdEErTWYxRzVWSnZGNFdKejArR2hlaWx5aFZQZHlLQlM1eWM4bi80Zi9zUGY0Yi80bjM2TnlPbGxCMEdxUTBIczkwWlpaaDE3M1VsL0cvbzR6NVlFKzFzUHhIU0ZRVW8ra0t5azFrcEVUaEE1alFyWHRMTTBobFp4TktnSXNpSlVLV0x3M1BYb25wTlBDZ25KbmxMS2hSMGZSem1RUjhReUlDMGNuTkxxTUQ1YTZVNDF2VjYwK1lVN2I3MmpDSjgrTmY0dUJ2RTJHTThma0NiRmFJU1RJc1hXaEkxdWFNSkVPQXBVVUF1MVMwOTVBc2RMOFVVd1BYTFBHT2pocEdnODBzRlRERmxoeG5hMVdac3dnV2ttakdwME8rUmNRM01HYkhGbkV2bFVNM0ZIem5yL2dBOXc1bFl3b1VBdWJQRVRhNXhwcEN4R2t0RTA2bGdhU1ZIUmdNZTIxZWozNTFidzVKS2FsSGlETDV0Z0daMUswQlRDYWdFSUVxYUx0eGlaRnlFazVRVjkyZXZIekpSM2ZDOVJDMkE3cXlNN0M1MnF3bzJ0TjFYeEJ5cis1WUtJTFByTGk4cjZtUHVyUFFPdG9JZEZsZkhldUtwOHRjMHdaRk51amZGSXhDVk1sakdSZGtSVW40UnlNN0MxWDVPU1ZKd2hURzZYaHhNSlNLaHNBcTBKZDNKdk8zeGoxOFRwSGkxN2lOUFEzTXV5TnEzRDRLVEdLa1MwTU5FV2k3NGxyemVpbndxQkhBYlJoYk1iSU5ZZllBNXJZTDVHNFcvUDR6bkFqVTFmS2tTZ1duR0sySmlNYlRidFFFcGhPbFJKTjVaT3l5K01YWXZGR29vQnNlNG83VUQ3OGhPKys3dC9qZEoyMzBnWk5oVDVMMThLUHQ5ZVI5SFZZY0ZOcDBCb1I3NWZGR0NybmRPSklsQVk5MnFaaTFRL3ZFYzJjbVR2ZklyS0gzb2ZxRHhhTXBSSmE2S1A1MDFPWXdwSUVIYmRTeFNVY1NKY0tnRFBsOU5JcXVpMllHcm02aFg3SkRDUlNOSDY2Yk5JOTJUU210SWpwbmtSUHI3UmsxT3JHa2xabWlsdmZGcFBYTWQ2SkJueEMyQ0ZqN05jVnZKTTN3N2xXNm5RclhHTnJBc2Uyb1UrSDhSalBGYmdzbmUwUldOOWF6Z0NVYisyckcxbVluUHZHRkdkMnVsTTFBZTQ1cVRFaVowcmlCOUszRHNjK1ZHRnJYWkNTdVQ3MmRJSmhkeHRLdmIrcDVVNUh2THdnZWVYSUlYNjdXczNMTFhoOHkzank1Y0R2L3hrK00zdktzb3VBV01GKzA3WXozMW5xTjBBS1M3V0lHeEI5eG9EYXVGYXBlM1NuTU83bFlMbVhWTUpyZFd4WG9GVHJjdkFiYWlDQitVOGh4aUJhUXlLSFR6TWdyVkhubVdrbE9Xb3lhNnNodG9hbWhtdkQ0NXZwTXVscXUzS1RoOXI0M3pUYjU1QnJ6WnVuRzNKUEpqbWFWVDI3bUNrZFpHaXBrSGpVNUZFeWV6UkRrVlpabmhQNThqU1Mra1VsVzJxMjFFYU9FYk1UTjBUWW5pRERhZXdUWXJmR0pFbUZyeS9Qc0I3bUtKcFowUkpGZEc2YmpYWE1lS0pPQXZ5aHNJQ0lsUmo4V3hKWE84RVlwb29rYW1wRHFZN05yMUFhT2hVOXFwclduZDgvd3hiQ1l2WkV4eVRqSHZpeEtsclo4aGNiUnBXWjlZRzVGeFJqZlpSVHBuNWhTWmwzdTRBeWtOK3hSZ2lvQ2NqQU1aZUtYenFVWFVQSFpZQ1l1ZW1pcWhRYkFxNzh2VkprTFRWbXBhNHJIUnRkNXVGRk14UGpYdFVYMmFyZkpYMUpXaU1FU1pzTmlIWkNCUzJPbUdQYVpIU3dWd1JjYnluZC9MY3NPZGtZL1VRRC9yaHlFQmQ0QzY2Y3dHOXNFL2VMQ3RmcHB3dkVzeWZDMDdHYjVpQ2FWRVlKS2M4dlFxd1AvQVJPU09xdGFKN3NVVU8wYXVQRjdKeWFicmxoY0tJUjQvSWIwV21SR0lzbzhwVVFaM1pENjI1MWwwSThoVEVRemR1NnRncURBZHV0enYrK0ZmL0E3QTM2RFFldVdpOVlDOEZQL3pVOFAzUHpZMDFqMThWZzYyR2NDUjUyb24waERweURsZzJHcWlUQUNINFBERURrOTZST0JsZ1VvU0YvTWhnenRieHNUc09oVE9GYm9hS2VUUXNWTW5lRHRkUnZYQXh0QjJHVTJpZFN0Zy9PM0hrdWNtN1lOcWlqUmZkZ05aalUzOTVxVEJyTHZTNmRXY1E3SjN0TzBGZmN5R0JHWTVKSkdYeDF1eVlJM0tLU2pPWmszVGxrRnhoNWlERXY2ZUdsemNnTjZCdUFjOFZ1Q3RrSCsvQTJvQmpqV3JuNUxxNUFiQ202d0pZakNQb3ZYTk45NDFIUThTbjZQdzc4VUY3NW5VcVp5bHc2SWZuNUsrVlJtemR2WEpYNnNGOVBZVmkzeDl6SFAvNDNVL1k2eTg0am0rd1pNcTUyMzFIMlRPcUdVcXRhQTlNeUFZN0lqNWNUK2R4MThmWlNtRksyRGN6eWEweS9yWklmdTI3b1JSU1ROTzdaSEhsQkVXSlNrY21meDR4QVVrMlBGYUhXbGRhcUVyZVc4VlJLdGlwbTdFbVp6cW44K2JJbXpicGxaSFFnOTVUZGdpR2V2ZGlVMWxGNStOUktTVThIcWFhRDhQVUlTNEFJY2p4Z3BpRHAyRU55MFFlVDZ4cVQ4RmhlSWl3eUFKTWR6aHNtbmUram9LY01NY0dVY2ZWZTJyNjRKQzNRczMwbXBjRWZmR2hIWG9KRWNkc2RpYmFJN0k2cERKeUlqOThFcFo4N056SGNGblZFTVhmNUJnR2lvWm05SVJhQXBZRktBV3c0WkZrS2c3U2pUcGU4THBsVHB2VGdoYVp5M3lBWmhtcEhtamhTUUw5R0FzUjVoQ0dOQks2SUJtVngvTGxGWm0zbWNVb0FXWVJZZVVuYWdYVzZ6TDdUaDBMM21CUVgzQkl5alVVbkdMMDlFUlNrcWRiWVREMTE2czNWeDRENGdsdnBPdngyaGxRS1V4cytFNFBPd2FCdjRSRDBKK2F5RmxvejVQMDI3VFVHbWdkenRTRTkxZHltMVF4MHlXWXpkWFFrU2V6a2d3YWJ6dWFPeFVvMmplcUViREFOaHdaK1BveDFWTXhiNVAwNERoYnlSYUhwOWtNU2tmWVRDOUVMUTZvOVE2ckNuQ2J0d2o2SmhsVXRKbktCM3AydXdQTjhQSWYveDNzN1VYQ2djVjlLQVgzL1EzZmYxL3gwL2M3K3Q2OGtJcWJrbkdQWlVrcWh4UUpUbzRqU3JDa1JWZ0tFbVlVMk16ZldSR2tjR01LaEhNaWdhNldzMGh3am1COHIzeXpvN25DVmxoc25MSjZxa0h2SmhwV0NoSEhDS2ZMeUh4T3YwUFdBTnB4SUVLZjQxVTgvOHVLWnMwekl1OUZyWXpPbTF4bC9GcEROeGtoRlY2a2R4Nnkzazd2RlVhQkNYaTlHbXM1QzJES3VTNVg3cm11VVBXMkJ0d3JQN1BFZ0NMRDdiSlNTTWNES0NuZ0xuaGx1M2NjVjBXT2JrQzRCR3A2U0FBeWgrdXBqaFFYYndldGNJazFpLzhDVG9pT3hNZm52SExrUkY2aDhaVEZNb1d1SDdQOXkyQThzYWlKcHpZSi9VUjg0dDZsSEI0WlZTRTF2TngyL0xmL3pSK1EvMWNiMW1YRXBMRmRFdTZsb1NrY2JrSFlBZGJZNm5RaDY2UktyWlQyRUdQYnVVYmFtdmdBTkZXVis1SHRwQlcxcTlxN05hNFZIU1lEc0ZyaVdqemx6b01Id2VPWnJFaTFMV29Eakt5QnNOTGRzVXVNeWdnaGtVNEFLYkcxenFIY1RQRHowcnNPVk9vVW9ndTZxdExsQzBPejdmNFBuMWYzR0FPVjVSbWNUaHEyUHhhR0NueEd1eENVd3dSc1dWemhjdW1ZcDV3THpCRTZKNFBISTAydlI3WTYzNk8vVCtVMGx6NmlYUFVGdlo3Qzl1blVLWVRvSDFGS05FekRYN0RVZmtSQkZ5c0hNR2wxK2ROUjNUczNkT1JpTnl6aENiVkNsWWtGYUt3R3p2Wm9ScFVpSllrREtFRE9xM0tIYkVGTE1lTG9tVFQ5SWxMeExnc3ZXSkc1RS9UblBuczd5NjE2SjFNM2hiaVM4ZnlHVWJLL1drQjJxQmdSeUI4bmNvWkZybzE2ME04NnJqWFNVVHFaVUdSNG1FTEJRNWVhQU9WUVUwYUlGTkpjOTRSUmhkVUpTK204MHN6UGF6R2RsQW1WbHdTSnh3N09ZWXVKVkJhUXNDRXVDMm9yMEQ2WnZiYlQvS0U0RU1xZDA3WjJGUXN1UVJ1UXdpMnFkTE1yaDRVZ2FFbFZjemRkQzVHRUFROGN6RTJ0TWRDd1FpRXNSSTdGc2lJdUYyMW1MOVZ3ZXNnWmhqdFlhYXNlN29xS0wvL2gzK0YyLzBYc1NyTEVTOGY5T1BEOTl6Zjg4SDNCVDE4YWZuaGpCRzVEeG82SU5iTVNOTVdNanl2d1llMzQxWnFCMkxHc3drUGVNcFpsUVFoUjVnYVBFQmUyWUVrSWFDb2VlZjliUWFTSDZFSlZpbDljTFIzWklxb1FCaVdTWERpSUM5WVZTTU9za0E2ZDdUa1JlSVNjUGJmNUtYVWxwd3U5VHZlNm16RVYwQ1JnckxuM2pXb25ZSnJraGtIWDNQVVd6ZzQrWnFZdFlsQWpTTjRFUzdDZWNIMW1XUEYrcDRmN0RPQVZRT1Q5cUZZbDRiSnd2dStOcjdrQ3R3dHd1WE1kOXFlSTE5S0dzZnY1emVobE5rT0lIVW5GWnJJeFJNRTdrZTU2dDFPK1A5Sjc2Yk12Kzh5cm9veWtQN2xHWlg0ZjRiMlhEZm1lN3RtekVOaVFGUjVPTEpwaUhycGo3dTBXVVlQaER6LzhFVy8zMy9sMzI1MTU1SmsrZzRxeWpDSFdvK0gxcmVINXNyQnVBWDdRSUxOS3dwZ3FLbW5uMEFES1lXaW9ZNzkyd0d0ZnV2S24zVHJUa0lNeXQ2Q1dpSlFNR1NJZmlrRXlWMnRPL1BpaGM0OGdnQ2h6eHcxRkd6a3ZxekNQNDBTamRCVmNCZXV4SXRlR21rR25hcnF4N3FrVFJZMzkvQUY0UnliVno3VnpTb2xDZFM1eDRzWW5rNkhYNkZCNWk2aWQ2YzZJaGtuZ3J2Y2dRV0tpbG1Pb1FlaUphSndCVXFyTkUvTnVmT05kc1hLekptVmE2TGs3MHlobGFXa05LZTNvQXBiS1ZueTlRWWFlQVU2dUJLT0owWEo4aUZBRXQySTFING1McXFFNmQ0SEowY3JkWkVtZCtXVTdtL2t0aXFSRlBhdXd4OHJ4U2pjVHRXYmtUbzdtRUVuZzM1dXhGVUpIY050SG9xUXI3NGZPamRNYlEyQlJlVUVZV2hkQXdGN1J0Z1VYTGUvWWlJUkVwcVlnUkNGOXY0cHphVm5GdUJiOWx2bmFVY1VzdGF5UG04bFV5T1dOUWYxTWhUbHh6cGNzVDltYXBHS1NRSzNUcW5vNHM1dzQyTWs2TnVYR1pyZ1FTZUF5V2pRWk5uT2VnbnZ0K29URzlISGpTTHBGVVpyR1JGakEwQVVsaVlySytCK1ZtWHR2Vkl4TmlyYXByU0xuNlBrZTY3cm1RQmVEaXFaSW0rcGo1VXJMSVQrRmt6ZXJaa01EcXJIYTErNC80WDU4VVI2T3JvV1ZodjA0OE9NUGQveit1MWU4dmdDM3ZRc29JM0FPVkcrY3hsTVlJQ1M4TlFPL3VwRERmOHNKRjJMNkVFVnV5Y3oxQmY1a21Scm92SCtZNi9YWm5tYjJKOXFYd3ZETWN1TFk1OVpRRTlNZHRSTE1LOGJKSFIyN2loSjdFYloxZjFjMkNuL25QZkw5UFo2NFhqQ0x0a0JsN3UxTDNRbTRwa2NkTlJFV0U0S3BSVkhJZ1BCT0Rub1ZOWFNucVV4WkZLbVcwT1RGNUF3ME9aSFBpR2pSY0RzbVV1VytkRndDeVQ5eVNpaTFZemtTQ3U2NHQ0UmVnT2ZBOVFnWVB0OGJuaTNoeGFEV0hmZUtYVDVnQ3VyNTlDSUFBbHpKKysvZHJIY0xYamxnZnQzUDRlcnMvUlc2T2RoUWI0YWFXT2gxUHJvZzZvb01zOXlCNzc4SHZ2ejhNK3pUaG0zN0NrdlVXZXRVZTFZYmxUb01pd0ZIN1ZnTGtPT0dIZ1E0a2doZjJ4VnhTN2x4ek8yQVFlMngvWkR4YVRReXZhQ1dCUkJONFhORFZoRmxveU1USytmUzFwTnlNTFJnV2pRUlNXSGowbXlrdVNaNDE0SWV1Q1k4M1R6UjJ0d1ViWW9HaXAzelRHT3RQSDhmc3Nsd09OUTFqMzQyYUp5SmNkS3FLbzZwdlcvSllNMDM3ZVRDY0kzdHNLdG5mblJ4SS9ndlhIWkhwYjlpVWtTZ25tbTg1ZW0vei9uTVZlUHAweDZhL3N6VzYzcUNpazZZSFEvRm5WSG9lQndEVTlpcXJTcUNSWENPanhpcURIUUJVd25GcnlteW5jMFViUXNNRDVVRHlBdlFGWkJRZkVBVmtTcFVFWWV5b3J4TzVCSE8vYnlkUlJFcDB0dVgrZ1VVcW1sY1h1N2VHcUlFcUxpSngwMGFHZFN6RWVDK0hDd1dXemdnNUtVMzllcVpyRFZpY0JMVW9VK3kvalk1amhHN0JMTXpmSEN3SkZCaWl1NWxjMDZKNzB6ck5LTFVnaVY1VVljenhMMUhxSWhjMUN4a3FWbC9FekdEU1ppVHRFYVVma0ZxaGpsTUd3eGRMRTdwZ3AwMWp6ZzBMaUJibUNMMzYydXNKUlFqRXFvMUlFUUt3aHdZZmtxWkc2K1Y5empTYm5hVnFvVnpadEVuZzVWZ0c3UFRBMFdGOWNXUGdFU1h5Y2N0RE9BVm13bmMrb0lmLytQZm9BenZRRVU5akEzZ3h5OEh2dnZERzM3K3NRK1ByeGpUSmFFQk9VZHZIMDhYNERxS0ZCdXVUL1JpOGlYaEtjZWgxTTlXYmROaTd6bTdJZU1jRVNtZUdPeUNwNzI0VVFYU1kyQXFKY29rUFNxWHMzdkVFYm5YYVVCQzdYaDhKUlVqQ3FSQi9UdVRndGdGejZTNWZXaGJkQWtIMzVhMWUxdWwwMmpHaE5BTXdXRTNvZWRLVElVdzZTOFI2TjdRMUhwUlJZU1JXRmdvN0hSWjFvd1lxbk52NXg3SG5yOFY1dGlYSG9aeWZvb1JMWGZzTUxRWXNhOVBXTzQ3anBoeFB3cWVFTkF2d0UzRHRyaGJDQlNTT0hDdGRzTWFnSDJuVXZJeHBaZnRZeUR1SmlSaWlyc2haSEpFa3N0bXo1SStZTDJiellWZzlwNktWWCtiL1FaUUQ0dFBDNlBpeDRnbzVib2l4RHVBaFNIcW1LQkVPUFBJS0pQVnpPL0ZXRmZSV1JqYkxEQm5YSUZpVGZzQ1dBT2pNdUNhOU5MaUlnOFI2RGlzcXRVeVBuSnVTMG10UzV5WG5jK216amhSZGFKeFhaVnBvY2N1Tkx0d0hoL0syQ3FZNFJRTnNWK1ppc3RUWkZnekZaTXFOWVNLWkFzOVd1KzRtVldPaHFnOThOZzdkUGF5VlZjMEtXZlAzSERoTVFhakh6NmxWKzVSMmV1eWZzeGFwdTVSSDVHVlRONXhVSGsvWE1WUElybVBDR1E0SlRWbmtHTWFBcnR3aXU3K0VZZldwWUZxQW1hQmVRVDFXZWc3QXBSaUVRZC9HNFdDWkpuTHg5RmhZekd0cUMzZ2FUaWU4aUo2bS81RWp5Z1Nka3ArSzkwYVZObWQ2UkZ6ZzQxellrL29RNWxuOTBXOEphVUY3SVdvYzJHaGdHUmhoaU5qS1V4VFVZK0VFRzZJK1JuNzdZNGxSNjhjRHhLQ0ZpRWxiQUF5MnlwYUltaUxLN01WT01qYnZWeXBlZnp3Y2ZWbjlJMGJBaDU3dGgxWVg4bVlWbDJCQmc4MW42Z1NFYkRtQlZZREVLcG9ZVTNvYll4SXBKU1lTd3JhOEl4YXFDakhGTEhvcytJVEN1c0Zob2RNMEpsaEFpWS9WR3lHNk5YM2d0ZFdCNE9wb3JheVF0cHNnb0xubEtlVnFiRTJ4QUhzSTdZR0FCTjZkUkw3bUFQdlJLNXR3SUNTT3BIbCtnMnQzbkE3Q25QSVB1Y05uMTkzL00zZi9JZy8vclFMczkwM0QyVTk4UWdvOUJNcFV0YzE0eWxuYkNzQlRUNTlZR0ZKd0xzakowemF2bE8zazcvdk0wOGVrNlBvcVMrQmZlOGhldVFCeW4rWmxKeWxCUnB3RDZrQjRLdkRhZEY0YzhXdE1QNkVPcHVMY2RZUHFTcWRkdG5aZ1gxY3Y3d1BsYXpQcW1MNE5VUzJrcXNYMXZHWHlpdUdNTWEwZFluUkpJVFhHSEEwb2dLMUdwRlNWZkVsdVJYMjJyMjl2YWt5WVFrSDNnNFdCT2ZMZ2xUNGNQZWR0U2ZYUVVWcUZLNG1EM3l5bmxGTWQrNlJZUExJTldtT3ZnV3Q4M1QydktkUmJBL3BUcmVFM1dDZFBBblJQK2NrWTNiMisvdEpDY3VnVWV6ZDBNZHovdjAvSFBqSDJ5RURxbUFCMUYyeTBxdG15TjF6cmxVQVAyYUdCREdEbFdPSWtsMmV2WWZnaDdKV1R0WlVMTm82NmpBTWk4dUVHRER2ODdHbi94MXB6WFE1dzN4SXBRUjRYL05RRmJ4LytzejlVMFg4bysreTFjYWhQcVk4WkM3ZHhXM3NnT2FVUjlNdHlUUC8wNGNicWNHNXhuM1B6Qm9rSnhFK00zV29lTmdpSFQwNWxSbm5JenI4c3VpK0o0bEtJcC9BdzlFZmkzYzlFcUgzODZBejF0dU03clFpQTdvL2NvRUVxN0NRM1ZtZW9HK204UzhJdVhHZVUyQlk4QkQwci9aTzN2Y09NNUx0eDl4eEhCMWI1R1pDRmdjNnpvZytLaDhVMjAwT21WeXpRN2RFRGNMb2lhU0l0aWpGeGQ3TkptRjBsSTY2VjlSV3NiOFVvU3VCbnB4VnpZT0VwandGVkNrMjVuMGVLZjNOV1RBZGgzNVJhQ3k1VFhsZ1dRUFNLbHBEZWJKU1JrTE1ldWd1OXlpRWJNZmhNVmVUOVhVd2pBVXpaUGVhVlUwZDdaRm5XRjUzYjluSmFoTGFHSnRsVVU2Zk1YZzNpcUpnREdzekdYSUt1RmZJZ25NSzBZZHdjWXlaLzhnejU4MXZrbGxQdHF5UGlxQlMzbGNQQ2UzSWV5NEY4NlltVHB6NVpxTmUrQk5Od0M5ZEM5TTNHdHM3U25uRDMvK0gzNk1kZDZHWU5haWdBbi83dHovZ3A3Y0RWY1dLdFNmaUlCQ0dUblBGNjE4QXJHdkhwNVVScG04K0Jsd3ZBU2xIWEs3QVFyWTFSV3kwTmdSMEcxcW00RkhPdHc1aFZKQnpRby9KODhyS1RUblhkUlV2UDgxR24xaytwK2hqWTR3d1dZSG96QnVtM2wycEI3NmVWY1Q3Tm11SHlQWHRydG9IRk14NXlrQS9Icy9TWGVrVWVWRXVkS1pYRzFoclFCSWZLQklCWjY3SU9VbncwQ3RIWkpwbGZ5VThaN2NWVmV4MzJ4cVFZaU9RVEdRdWNHOGRZWTE0Z3FIa01ORGkxbVd1dldVSDFnemtyZU1qT3I1MDltQXI0aXd5Ukw3WlFNcElzMU8zeldQVytTUlQrMlB2c0h1SjdVOHBCN2NOdXRORysxOVZFWTl6OFphTWg2RjJmS3dBSXFaOTkrTUwvdUl2bnJYbkw2aWxJQytHRUE2VXZjTHJ3S1Z3amdEWUV0QnJRazBkdVRPSlZFdGo3M2MrazRRd3hMelg2YWxXc0xDeDllUjkrbzBCSk5HbWF1OUhzZWRseVFYbDQrbmZSblhiU2czSzJ6Nk9IVVZOUlNGbEZOdXhZRU9MUUlKQWJGcEJPWWcrMXpwVW83SWpoQXRyVVI0TGZwd0RPbnByLzBOTG9uZzR2TzZiZThqTW82QitTQlk5cG1Ma1VVZkh6RkFsZUo2RVlKMGViUkNGYmxlZGxOTEpaNXVHTGFmeUlNTE1aOC91RjJNYXlvOGVwS1ZtR2xScldiS1phYm5ldXJ5U0xLckRDaDBlQlYva21adlNHb290TUMyWkdtUmZVUDdsakZmVWgvMlFSelZtajJqMmloU2ZZWTJpZjEyazd2b05NVndBSk40a1JLRlpaQ0VzR1k4WlkrWktoSXdFeElPVGd3Q3pnTm9OYlFkcVBkQUsreVExRnlUd1o4MHlMVG8wT04rWW5jZ1lXa0V6UTg0YmxLYm5ZZ3ZudGl6bTg5WTBFWGVXbGEvT3BSemFHV3poakEvUHMvalFxc2UzRjdUYTBUeHNDZlR5QldsNUFvOVptQVpMZ0R3WmdCNlpOUzNFVWxrbzFTU01HdnZoZXkvcy96Y2FWRlNJc3FwendsTHBQY1hGUll6bmxreldQUDF5RmZFZ01RTEFCRDFWa0JTc1dYd01TNUU3M1kzTjk2RXc2QnpJdmhFbExhZ1FyU3UvbmlIRnpneTNDSFQ1blFOb3g0NGYvdTRYN0s4LytoaUd4a0tnUDM1bitPSEhPL1k3VUp0NGxVdHd0elFnQ0YwdDBtdXBEVy8zaEs4V3R2UEV1T0Y2V1p4djNNRmpSQWdSODZyMGprS2hTckJHdnZEOE0xVERzVnpKTUtaSXBqWXNOV0F4TDZIMjlJTVRRY3o0SGsvdVhqY1ZhYVRrZFNkWmg4TGdVd0RxbWZsNUdPS1cyYXFIckVwckUwSVlSRVNodFp3dVhNdkhuV0hPcU1pWVNHelFaeDZxRlJtZ0ZsV0FSbHpzdEFKbW1aR0swb0dMV3RhYWlnUXJ2ZnFjaGFVQTRyQ25DTHlWQ0t3ZG9aS1kvKzJJdzBCZGMwYzYrbXh4aE9kSEhaM05iYWhTWEk0eVYza0dEZmNveTF5T2xPcnluQ1h3RFgveWlKbzM0eHNwaXVueHpWVlE5ZUVacXVjbmt6d3lPaWsvdkJEK3RoMkdHZ3BKbUZxallKdU5kKzQvNW1KNDZRWHJoeFZKaUpnSWhxTld0S1BBam9TMDZNTENJNmZlVGVydU1WYTdXL1ZsbHBCaENZaGt6UFM4OFV6bFpNcW1PTWZNZXAyR3JtVFNYZ3BhUFlhc3VjUU1zNG91YkFBNEhCVDNZR25RSEVic1J4VlFGeU1POHJSOE1IMHFSZWZiRWFXYytqbWo3a1p2alBLYTN4OFQ0V1I2d1hLNHFKcXJBTVFxdWlscUdVV3hYVHF3OEZxemhiSE5ob2pJV29HOEFiMXhIYjJQZGt5a0NIZ0VMdlNBMkRPNk5UcEEwWDFleEhWQnRvNmJjdlk5NkZWMUs3QW14eXhqWGt5akdvemdXaUxaaVdWQVl1cTI2WnpXY1dMdTQ3emZHL3FhVVdwRHh3dSsvcFR3OHVXS3Arc1VUam0rT1NISWpoWGJGcEJiUW41YWNFa3N2bExibVVMSXdGRU94d2FPZHZlcTJsYVdZZDIzeXMzYjJmS0lrRm00RmUzd0VFWVRUM0ZUcGFKWmhkVWQ5WjZ3ZlFoSXNLa3dOUTdubFRQTDY4MHJIaWRibS9FMWVJZVowT0hhcVI4WXd2SGVFUm9OQ2JzZmFKM1ZoVWJnYXNUVWtKNFM3ZStZYWEwdGR5QmNLQndWdmh6TG8wWml5Uml2NmZrK3ZXOWpIblRJRHp4YnN1ZWpBaXdMTTZBaU1sd2VLOUFLQmZqUkVJZVpuUmx4elFsSmhZUWhKUldhS1hocHg2TWxDb1pVS3doTTB5TWoxZ2RXUkZMUmFlTWx5VmMrWXhTMmVmSjk0RDN3SGdWNC9mazcyQ0gySWJYbjdLOFYzMzMzZ3Iyem1NU0lWT2dFSFYxZWVXK0MzNVJVTm5GS3J4ZUNSRHhkT3E1WDE0cHVraFVPbUdnbGFUM3pLZGsvSFdHS0JGVGttTnl5RnoweTRnWWVYalJIY2s5SE45T3JnRTdvLzFDSk1qZGFaaTVjdmYwQ3hubUVRL1VqNmhyd2lKT0gvaDIyZFhoa2FiWlRacEdXR0lXTUJkMlRTSS9FWlNDU0hMNjJia2c5K1ZoT2lLazQrUmxpbXUxRmx0Qml4elVDOTZpSXdHRkNxd1NnME9KekNuaTlTNzltWURIMUZQY082WCtveW9lUW95VUEzcDVVaCtkcEZwbWVpSUtEN0V3cmRTTC9xWHJZTkRaOXVxUUJzTDBvc3N0bmV0dzdla0xuVTFkMDdMMXhaZk5iSVlqdVdiRFBFRlkzY1dBU3l1ME5mL2daV0s4QnF5dUtRQ05YVEg5bWZSaUJxM1hVU0FPa1Z2bHA1YVpvR1lUekhZQkdoVWZGeTl4eU0xTEpWaS9rbStBNUxTUkN2L1NNM0NSZ2d0WktYQUdSSEVtdzRYMENvaGtMaHRIaHJWaFpxSmlsVjZ5VmMyK3RqVlJaclFhVHh4cTFsdS9samhndmlMbE55RzdseGIwOXl5bFN4Y0EzbEJuM2VzZUczcFgyZkEvODQvZnNCWGZDRVJEalk3QTVYNnBJdEwwaXB2d1E0a2IxZkRwVE9vOGxLck1UM1pwRDE1cHh4Q2RRbmVNYWNFMXd1dWpMQk8xeVJxWTFDUXB3ZHFZL3lkT2hLM2t6VVpVTXlmeTd0MDJTeUNXYUNEOExTN2RKd2NxMjNSWVRzRGJramdVR1VoN1d3L0RsUzhlblR5OTR1d0ZQNjRWSWJRNmFUeEtWKy80TUxNQmlCZmNSbGxPZ3p3NFd0QldGQ0dXcG9WT0I3NVZLc0t1VXROYU9laHhlRVpweElKK3NsdUlKUkJYcDdXL0Ewd1dYNitLOWQwQjBHcjZjTmc4dk1pd1M2T2xIRm5USVFaZVFQN3hnTHZtWXQybUdkU0YxWWFkRmFaVkt5RzdveFJ6TW9iYWRDdUp6UXM1NVVIY2lmYURBRkZpL2NqcVRwYWgzNUFqdnhROHhqMFZuL1RHZkJXU2lBbUZERHdxN2lNWlF2SFd5dGxsTWRzd2lHRmNlRHJrWVdMMHNaaU1YdkpSbU0yKzg1T2diTkVibWFBQ0dya01HcnVBNEV4c2RDbzNSNjB0RW9XTGhtWWR4Tlp5TjEvMkh2LzRENnZIMkFDaXh2eGwrZnJ2aGh4OHJiaStLN0pqNnNWMW9NWjFSckdKQmdsRjNvU1J1ck90VEd2Mi9PV1ZFRVBWdFhhSnZ0dUNJZFN2Q2toUmlYYW1zNUFrRXJjTkNrSTB4Qm43VUFFc2M2MGpqVUNPc0RZcmdGYkVkNFF5c083SDBUNHhPVmlkeHd6eGNxY3orZFFrMkFUUkR0WituNkVuMGRCVmxXT0t2VGIzd2VZUEpTd0dTVXd5am5xVEpBcUJrcE9XeDV4dTFNaW94V3FFWUJ1K056OUpTeHpVeEExTXVMUHlLRlVpUmh2aFJBcDZ2Q2Z2Qmd0VWxkQlFKdkJ5OWZvbEdpVTNRbTFKVXdUMmI1T1ZwU3FESHhFNldBeUFQMk94a0Vaa0c3MEdFSUtFMXRPaEZFZytWMTliZCtaZkJuYjJ0dHJVS0hVNFdvNnVvVGtGNVlIU1lZRnp2aHdvVlcrTkRubUZXUlovYlNrT1JQRmcrWEhDWVFSMTZIdlE2ckNFT1k1YWRQdFk3bHRCZ1BXR3ZkZUlKcEs3dEtaeUNidWlqb0xDaUJHTTMwQnExanBrR3FpRWdjZTI2OTJ0RGpoRm0yV1JNaG1GTUdJMWJHZU5seUIvNHpOUTJBV0hNMkpJb2dCTU5tQXR2eVdWWmZEQXZRQXR5K29MdWtidkhVVmJQaDFEa05CTnFKYldvL0hPRG9pS2luSWJPRDRYSm82ZisrTnZtd3RhdmR5NVF0UUtQT283L3pibVVQTkY3K0NtRnozTHFLVy9ka1lKbTZDMUl0NWpFL1B2OVA5RldnOWQ0OEx5dGQvNWVOK0RvZ2lDa2NBcUdiRkVGR1Fob1d1aGQrWmY5dUNPbkpPOGtvTGFHSFlrQUtTM2lweDh1K09ZWndLZG5ubHE1bDVSNUxqNmd3WTZBZXpuMHNMNjNOSDBHQ0NydktNQ0JodXNXOFBaMmtCNTBNU3p5RXZsQndzVml0SHZVaDBHcGJWeGMrZjZtQ3ZtTXhIWXpMM2FvemlQYmtmZ3F1OEFnb0VlMFhuaXRacERaUEl5Uk90Q1RLcytpSGtDVWhnb1J2cURqRWdOYVdMRU82L01LeEYzWTllcUxkK1V5aTNlQ0dLcDZtSVFDUzVvRmFxRjNrckZRZGdwZ0kya1RKYVhNbDlraU50ZlpMSWFxV3NBNW50cEdHajBaVzRCWWtKS2hnY284cFlpNktFcVEwanhuWXVHR2pQY2hlRVRtNHBFY0hSUHVzUmEwYW5qNy9OMHdIQ1VsVlRCVThkMTNRTEVDZzZHMG1kY3pFTkdyaGdSVGk5OXVZZFI1UkxFUzV4dzh4TDV0dlA2NlJncjRIcm1CQ05LSHRsV2t0a3o0WVVzb1lKSGkybWdsbE03V2tHemI1TzZPcXlNZW11RWhCeDdGb1g3dXJmVkNsd0FJYklqR2JpVkxtWEhkZSt0aVhCWnBjcDBUeXJ0MjFheVljbzJsZWRnMmhYTWsveDBwYVpqVm5ER3U4akFNTVZCQjlvVjdNVllxakpRRkpSbE83Vjg1STlYS0tJbThwbGFweUlJOHdKQTdVT0RGRTBPR0hVelozUS9GRldMQXNnU2tObk9UQzh5TDhhSU1GOVRKMG1MYUJ5WkY3VzFuWFp6aDhtQU44QkVuNGgxVGRqSHZNcHJDSThXbEYxSHh1dm8vMTBlb1oxUXdUVFRjSUJhK3ZudDdhbWxqQ25GNTlIZmRpSVBFbGp6U1VpcEs3RUpkQk83NzRRWjh4dGlrZWlhSURLbU9lcU1qQURtc0lzeWJLWnphMVFHaXRWUVB3N29VSkFoM3dGc3psVklCaGpFMnkrU21NaStsb1ZSUEVVaVp1K0U5aDI5RUNRemxPR2g4aVpockVVUnRhVVVnVlBRMnFjOFNNQjBhTDVobEFkMGpvWTVidWI3M2hCWWF1YmU3aUU1cWVTeHViY2JYYUt3OVNzTUJNQlVFUzhIT2JOakRFVVJOMnp5NjRyUDVtREtKaklCRlBQYXBwNFRKc21ZY0x5Y044bk1tNlpkdzl0d2VibWl1UDJHQStnU29HMjNvQVc5cjlhTUpHVEtQTUZBenJDa0pBQ1doZEEyL1g1Qmg5TDBGTk1la3pxaTQ0M01FOXVNekxtdkRjYWozZkE5YUVCa2gwaDFzVFZ6UEptaFZTRmVXTW5KUHRXaGhHM09qdlIzSVlEektRc1RscWVPK0JLUXZPOTRBZlB5NHlOU0hRbkZBRmF1VjlZblZIbXBHWEFyNXlmdnVqajFiMWd4ZUZWUWo3eE9DRTYxdkNDRHJXMUp1cWU0RnZlN0tiMVFWSUpvTDc5NExhczJqWWo5QkVMVUxzTFRyWkwzMXlZeWVsMlpBUUs5bnFlT3owTjNkN2NIcFo4VUNGUnlKejQxaW1LNFFmVEU1WTczRjJiK01ob3hBancwcnc5ZERxRFZkL29LTVEyNVVoaDlCa0trVEtFVVF1OHpmV2FsUzZyUG1BUUNPNHhjZ2RPWHFaYncwNEhqRG1QOXlkTlNIcE9pOG5uVjZ3VTJDZHErZ1VrZ1J5MHBoa0ZKMm9WRXFjZlphNmw3S2NJaGgvbm9CREFxUDE0U1lBdkdjcWVURXpwTlBlQWsyOHZPaEp2VFVvVVQwaEhmc2lpR3JDRmtENFNHNjRNRDJqUXhzNDNrU2dzSnZJV1V2ZGpKd1BFV09xQ0dlVm5Ecm5MTlR0Z245MUhJV2djbTNuNkRJZzZJelhYR2NvRlU0YWg0Q1l1WGVySkRSN0c1THBWSGRLMkxyc0JpUnNsRUpIQ2N3bHlTL3EzSzlLVjA1b2oxRk5aVFZESG5nZGh0aUlmeXZBN2czNlU1MGVjaFQwTVYwd3VlV3dOWWhSTUJJeFZqTlpVcnFEZkEwa0F0OXJ5SG9adERWM09PSzBMeHl2Q1RZVFNibE9kcHJ6bnAxUHJhY1IrdGFiUmNLM3ZkcldHQXU5NTFRd3Z1U3hyMS8rQkFkNWE2aXdvb1I3alYybEJOblF3QkJiRXpHV3hHQnFIVkNxY1ZGaGlzYVNnMUlPWG5iV0VWRktFRE9YZDYzcEhvdkJGMGF3Q1NnTXBmR1c3WVZIV3hMVzlJajczY0hSbVMxZHZQSUZxZUg2b3JMVlo3a0dTblRwOUFlQTFLYWl4aTBYOURQYmJncVhEU1lCVS9wNlJ6U2Zra29vMmQ3Z0xERnZwd2NWNWRHanJ3WWZkaDVBRmpmNUJ3QTNFTmVneEJBU09ka2t1TkdNQm9ueWp2VEV3djR4eHE2a0JuQm9tcU5FYjhyY0RTcCtZcTRkR1NsbC9vU01jU05EQjRWWmpxS2F4UEwzandDTWk5cUtBRklRNWdIMUxjSWZBUTZwUGtyczdYTUtRVzNicXQxWklhUWhHcHFPQnFVM0NXY0xGcGdSTThxb3NndVdqTkhVRHQyd1V2ZXh0WFVvZDZkdDBUd3pyaElpTFYyb080SmRya2pJZ3VUVUpXTk5MVzlUY0JTUnV5RkZJL1kwYVR4NElQUWdNVFhwTjYrVnUvWUR5N3NXb3A2NzFWMVhBOW54R0lCMnVQNW1nWDBlc09OQmNqWW9KRmFGNmZQOUZ4b0VHUWdnaU8zaFJuN1FZL1Y0VVo0ZXB2Nm5XRWxobCtNeW02YUZYQXFCcG5BaE5SRWZsU1V6cDE5S2t6S0M0RkJla2Rhcmxqa05TNkpGYmo4b2ltdk5yR2NkVmJ2VWdpTzZmNllqL3psNVRNRlpVb01EL2FHZXdGZTlnTS92aHJlQmlFRW4xY1B3RDU2QjlUckQreEM5eDd4N1VaSTBwQ0JEeDgzcWtIMmVub2hVRGVoKzduRHNXaytMb2c1dUtEWlN3ZkVnSWErWThjbWo3ekR5ajQyYXQrUzJpWVRlcytLS0xvV2xZeDVxS1BDbEFvTHNveVBlT2lES1RxZXFhWk0xNDlvYUZJa25yZVk3R2hCWlVEQnZFME95ak9HNk5GTmo1U0Zyb0kxTEFwUmU3aDZyRFVUU1pCYVJiaXMxVkE4blpPQ3JuNWNFK2dGaEdhV0ZLRkJsZHpVOS9JU3NWakgzaUtxdGVrUGRhNyt4Vm5NZU1qVDlsN2tQTjR6WG9FNDQ3Qm1HYXNYdVFLWExIS25hbUxMMW5ycDV2U2FwL3luRzRZVC90RE9Ta3R6b1BJdlZzS3ptREZoUXI4Q25ucTZ0em9Ba1lEVnIrV24weTgrLzN5RDFjYnhMUTF2UjBlK0c3WU5PcWhjRWFEbWl6aXhwMEc1d3k3Wm9NOWxlcUtYU1hzc0E0WHJHTE9UcDFzaytFbGpXb2lGdHlJK0Vaa1A0OVZNSGNib1RHbVRrOStnVjBPZDNSZlQ2elpQRTgxdWpzZ2FqR2phSXFHaHA0ak1DOHdHakdHc2FENW5nbVBLUjBVbkE5OFNtOFBuTkVCYWs1Njg4OHdETU02dDBZRmhORzN5NTA2WHRac1hDSVpIbjl4dGoyVVJZWjVhTEFISmFGKzhaSW5UOEx1eWJnY054RklQUlI1WFJqWUUzUXRDUkRObFVEcGIvZzJpaFhPbVRJNURURERkK0ttamVlSkRtSFh2aDNacVI4dDRlUTM0Y08wT21ZcDA5aDdGQ05NTTk3NVRjQXpvdk1iUU1zSndoaTlMd3JKbEZMZC9xcjR2eFZzZzVUVHp3ck1sSWFCV2hiZGFIM3pUYStob3NlTyszNEJmQ0VuNDRkTUg0WlUzcExDaStiV2FMOGdIRXBhbS9MZHBnZFVHTEFtdDM0ZUhXdXhBM1E4K2t6VzB6cHdjcTI5NS8wbkNva2ZWSG9RQXJTRFJ0L0pTZSszWVlLaTR3WkN4TEt1M01yblJQaXhrWUFtTHcvUmFML0trWit1R2lYcTA5UU5kNFIwWk1peGtVbkZZZE1YZXBwQ1VpNEdKNmlTT0FucTFjUVZhcjZTcUhZaEhYUVFmQkxZSk1Ua3NyYTU3aHJDZExTamRXRVRJRmlaTnRTelMxUEhseTRzVXoybmpOdUMxcll4blZLQld4NVlXVnJ5aFlOR21PM04vUHFKTVBZV3MwamR5MGRPL0ZabElDb3dXNFlLY2x3bUdrMVhVRjdwWDIyNEE5cm9peG9nbEpGUXhvb1VsSXB0TEFLNzFwcnpmdU53Wjk2cnhNU1dZdkpYSTI2RlVBZ3NLMllsVFFhV1JvUTA2dnR2RVpOZVVibXF3bUx4d2lFSzUra1QzL3BocldSZDVxS0s0REFtVENrOUpaTjVBOGNnRHJNS0NsSU1VYThqd2M3ZGFrQ1I4WXpMa2tJWGxMOC9NelB2bWErRTZPTU1JM2szWURVNlhJYXlFMUxHeTJ4WlZnRDlRcURWWmxLSXpQcWRWN05VWnNiUTNBUk1zYnhUQWlZMTl2SWpWVHZ1NHd3bHhacDVWOFlFK3ZVT0JLK3Q5Umovem15VE9Ld1NRa3BGdysyVkg3eCtHVVZvNlpZTmtKdTVIOWRSWTZQUzB5eHV3bzZLV0tGaldhU2pIVEFOT1g1YzNkNHdRZXlzTDBwSW56bmt4SkFXSzZIOU9pbVRyRVFrTWZ3ZXY2SmNYalFhcmxCV2xsNkZNb3JkcVRXVmJtcm50R1I1Qy9rQ1QwMmV0a2ZxMDlZRUhvVzRBM29sa21qZDZkdGJwU0F6dzNQcUhZMnpnZkt5RWhaQVpVVTNUUjAvV3dYbWkxajh2S2lNMGg4bGk1MUF0Y245a0dOTy9Da2dobzRYaVhVbWFENUZwVFlSTzlIcjJqQ2tIZUJreG9JbGdqTmdoL0ttQVdWUTA5a0FYWXVZa0g2VlRsNUs4OGNENWl5bERtWFRKaS9jOS9xb0RGZTlCdnUxMWNQTWlaeHltTXJxbmdoWEF5NWVPNTQrYmRIZ1pBNnVHV3k1c0VjemZBZVRXaVRSWEdjYlliOEJ4cmZnWTZoQ3RLYW1TRWVCTjl6U21aeVdmSWxXOUxPTGdCdFFzMEtrSWlNMlFDbG1oN3J2aGdvS1h6ei9qNmRQWFFEWlgzd2ltZ1Q2QXRBSSszc01pNG1JSzk5bWJXNkEyTVVQZDcyU3U2Z1JiNlJaaFl1eHA1VUFVQXBsYUl4NnBGNDJxallaRFJVTEdIUlZaTTVCRFZFRlc4ajVQZytUMHdtSXB3b1V1cEZkdEV5a0k4WUxRSTNzclk0YnBNUkdUUFA2N3duT0h4azV1b3JmWXhKTXBtUmllZGp0RVZJVXdMdHhsQTl4VFNzeURDUll4UUlMQmhjMDVGNlRhQTZSSFdGcjBZWjJDb0NKUzJIa0k1ZHNCM0g3dWVMc0Q5NnFRdXRZdjEvc2tvNGxodGhmbDFISEplRUJhV2g1Z1ZCTnkxc01sS25sNlFJYlVqTGw3ZVpSaGdZZk5DZ0s2Q25TS2Ivck1Oa3g1QXdtZFhPMURpRVducmpReDBIblgyUmh6SjRpWmE4U1IrZUF0YlhNOERkVkV4Q0pwR0lRR2hsYjBkSTFmY1F5YktHL2hnV3lRaFphTllsZDBqMnBwZSt4YTcvNjdCRmNKQVRDVGQrU3RPeHJoMk1iK05aNWMrZlhNdDZxRTk5NWVxWG85bWl0VG0yRHEvc3A4dnpqWGMxRG9kMEV0WlNJWFdaRHN5MWpYNEo3cGdtWGtwMXM4VmIxM2VZNVNvT3FjY1VPbGg0ZDJLYWVaUFI4Qkx0alZEejdkc1JtZ0prd3lJTHRMaUpMNzRYZUMrNXVQSXN6NDl4UWJYdCtBcDZlRjlSNk5iVmZyOGtTTWR0QTR1ZDlrMUlXWndvaDBBYW44RHRFTVBXVkhjNVNuNnJuNEVDdGFpNnIvbVdoS1IyVTdicFdDeXZGQXNZQWxSZzhNVVM1QU9YaERiWlNOdDlxSGNSZEQwTGthTVF5Y0JaUnpFRWNiM3hRVktlaStoTUttaUlrYVoxUlN5dlk2aHVLVEwxY1V2dWc0cHlXYm45Ly9GRFhQNkZTUXNic09jREltQjJweUJJZjNsTHFDUTQ3STZLZ3JGSTJ1WGxmZ2lLcmRWenZYUUJQYm5NMmdQbnFRb2FVaVNSV0lwd0VtVTlHYWNFeUNVVzVZWlZwRnNqY2hvZGtaZytxUkJqdXpDSkFXYjB0QXl4MjNMNFJuWEJaQnBZcURHN0VKc1BvQzlKa3ZqRDJnVklZc0JVUVBPYmxBYXZpNEVkRkwwMGh4YjgwcFJkY1lVUUtjZDNZZUU2VzMzQm5PU3BHZ05FL1BPKzYzRGRzQUhtR2xLY0lCMDRaeGgrQ2dUSzNyaXR5cmlDd09CR3B4QkNiVUtWZnJqbDd2c05wUUMzQTdHbkljSVNnT3JIWnNVTklRMlVuTGRMRlRDallZYWkwOEx5dDFoNVYrUWRUa0o3Vzh5QXF1ZDhRV3VWdVA1b0pLMXBtb0NaVXp4MVFTemRGY0xraUEzMUEza2NMdzZncEZEeEY1QW9WeGYzc1dIc2tMN3IzS28yUi82dVEwcTFTMmxnRFlWRmJuSE9qNGJqNXpocUcvSFFnZWh3eHVhYmVXOEJrLzQxNDZTbjJBUE9NY2ptY2hMU01ObDhjOWV4czA3QWx4QWF3bkhBMVl2VmMyamFoRDJsYmt1QUNySTZ2d2VSZmQrTXlkb0VWUmQvcG1mZ3dGcjhtM2o0KzN0MEdOZWU2VDN6eEJZZkxFOWhnb1RSSzZqODJFSFZXNDZwRm5XRzkzaEZBOG5IN3V2YlYrTnE3NDRsU2hrZFhwdldwZDlnbnhPbnZpL2Qveit1eHgxaFIwRDZ2eVlBaFZuWnNVOERaMXN0bnBUQVk0Z3hHTGJrbjVXYnFJUDRLVEMvbmhlUDNwMFV1TE5Eb1RLcFZ1QXJvWjYyMTZwYmVwcUhFSlhVaDJyUEMyb0dwbEQ2YytJSFdkQmZpZlZPaFFsVDBRZlQwSFg2TG1ycXoxZ21KNmZybnlFdnJ5ZzFZRUhLcGJFTVExT201SHgzVlZDRmpldEh0bHBJdGdmM3JUUlZHeDM2L0RRWXFyTVIyTXpqYTNOV0h6aXU0NFpHTU56RzduOVlZV05uU0wzdXRUYWtNaGlCTXBjNUVlWkJtczBTTkZRbzJOZVdsVE8zRnR5bTkzank3MXhzK1l1ajV5Z01OeHMzQnZHWFBZdXU3QmdZM3NIVmlWd3NMamI1UTVyTmRUVk5BY1dFWno0K2llN25YUEFsWDF2WnRTRXllMnlnbWtLSFNCbkdVQU9kQ1ErRGJVc1hSVTJIQ2F6STJySlBBZlk4MkNNRVpNZUN5bWF3U1BKS0FIalovMnI1cldjOGllYWdveDBmRU5lVUxTK245bmRBbkdLMGVsd2pJYVA4d2lDK1ZXSW5DL1V3RWNyeFhMcHhVeHFSQnJvVEsvdjN4QmpVL1lraXJPaXlqM1JoNDBzWi9hQWxKZThHbWJDYVVFVWxpU0hxTWh4NDQ5QjN4OEp2UGE2eTI2WjBmQUROcE9oeGt5OHh4RW1qc2kxclVOSy9qblh6N2owMWRmQVpzMnhORVF3bzRlSTFyWnNWMDNFS0w0SUVWb1BZRFluQVNGMHN1dzMzZllVZEM1aGxYZzBKQ2FjamJXRVpGVWpBQXMvRGFPQ2g0WkFBckhqZjlBc0RDRThaS0pYalFPQjRhSVFPd3N1aksyMmFUSXlBVWN4RlZRbGtzVUVFa2UxYTdGTWxwVmp5VjR3eXpLU0NNU1VFMGdJU2tpNVpXTEpFVjU2eGtobUZkVFNyYTdicHM5bG56dUhDVE9jdURtbEtFR0xDcDRXNEJZa1VKMmdlbHNlS1dNeU1iOVZnRVpjVlhnSkxlOTROZ1A5TmVPejdmNmp1UGFRUnNjRXRLYzdjNlJaLzJJa1FyRFlXOFhGbFFsNWV2aVNnUTNSTUxLeGJRZ0VLSlBMVGVBQ1JmTVBIeXVrSG1jZHNaaDhxNVZaeEdyNWgzd3ZMS0w0K0JDMFl0bmZLeXhLdlFwWWdnWWRLaUlyQ01JV2N0cUVYYzZwWHRsbTQvYWNaU3psaTUyRUxPb0NiVlR3RTRmNnQ3SEt3MklkaHAwcFpNY3dua0t2QTVYT1A3NzJrVGtZcnp1dVdoM3FObXgzYWJuYTJweHFvN1FSUy9sakd0K2lIaWtpMFA3dWwwZ0V4RTNNWXdKbkorZExYeGdYZmlrR0pWejd2NFE1NWZ3dnVmYzcvR0JIejJlSUVST1BCRDZrNjVKVUptY21jTXZ4YkF1WWtFZ1NwM0dTOFEzbFVIZnd4aWg3QWJjam9wMUNld01pdmFJRlY0YXV3dTZPWkZXeW8wS0hjbFRtRllQeEhobElTaWhpbjFQV3hDcUlPNmlJVGJzQlRBanhISU1FU3Myd21PZlZtTzNNcFRTaGc1clNVV3VrSUsweVRXdFdNemJqWkhTOVB5RWFBRk5yR2NwTHR6TElhbktSNFF6M2dVd094YUV5aWx3SEpWMUJMR0JWcHBVRGdwalRjWitSVlRSY0lPcS9tSGp1U2k3cGFRaG5vNVJXNVFrd2ROTWtVV1NjTTFDdU1nYWh5NWFVOGwrR0pDOHcyUUcyYzZsR1NhaHF1RW1oa1BmV1hoZVBEbnFTSlJlMDlUUGJYUXlvZ1pvVDBaSnhTR2VZNCtvN1NBbmZtc2pDc3JtWjFtYTNxc3BEUFg5Qmp3OVhZWmlyc1A3TGpBRGZucnJzdUJmVWJhQUZHN0N3czJzWEpmbGdRYmM3ZzN0QWh3aFlBc1V1b3MyWGF4QWlVQ09HbUFBejhGd0s1UUt5bGxMWWk1ak1yR2JXbE82ZXhCaHIvank4Z1hYNGFsdHFHVlhyNTRHN1V2QjluelZZOTVWSGFyQlY4Q2t0Z0xiV1V6SHFpSzJqSVNVeDRMWTk3Y1JGbnJDQjlGaDlpRll1aWNCTTNIS2MvQ1pMZzFZeGpnR3BHdEV3NFlTanRFYkhNT1pLSUdlVWpORGJNclBJRkRKV09mQ0tncnpSUU9TbGtHVWRRYlRKU1dRU2E3aFlmWW00VFNoVUU1SGgxdThqNTA5NGZ4SjVuZENvcEhnL0I1Tm04UUFVbm5RT3JmSjFIVFlnYjRmdUwxK25rVTBVVVY4S2VHMUxmaGhmdHl4NW1OUVg2MVEvM3BldFBHMVlRNUQzelFJYURUQW1wRWxheFNmWExUcHpmR1VtOWlLUWx3azZjcDRrYm55eUlCMkJxakhLWklST2l1SGU1U3diSlEwQzVDREFmMDBpdWFHQVYvTnBvTWM5c2VpbXk2SjROTjRxTEN6QW8zRm1Ld0xVUVNnSlhRMkFqdG5jM1J1eUVRdkxMNm5HakhNQ3pBVTJucjMyb2NadHB5NStHNFRvOTFhRTF1aDh0V21nbFlwL3RJaHo1enJ1UXAzb3ZhT294bHE2NTUvblY2dDdBcUhsalpHb3pxTmh2djlQb3l5a0ZaR0NLZG1kZGhqU1pSeFRYcXF6dk5QK1pDakFLSVNFTTJqVU1GclN2eFhydFE5amFhZ2ZIOVU2cFB6VzhxU2Irc0lvWC84U0dLVmpFZ3YxdDBwakRFSk1lS3dPdERZc0c1QVo4R3dZVUVXaUkrQWNJY00yZEY4QWFiQTlPV1NIOE9aQ1luY0dKa0VXMWdaOFc2KzNqcXNncDRoR01JdjFadXlSRXQ2d01JVmRuUVVkUU0wTzA0TWdWZVhEMis3MGZ2c3hwaWZESTB1Q05sajM0VXcyaEFXRUt2RXZVdW5HVmJIa1lvdmszQU9RbmR5cldJWnVYY0VqUjNNRkVxWHJncFM4R2d6Y3VMc3hTem84eXlleTNzVzBUWHJKdzRLelhNMHdKenNpQ2tBZDNoMlJBby82WStpN1pRY0t0c04xOVo4ZkdwVDVFcjAwS1VZN0dRNG81dmZ5K1d5VW1FN3hGTWNqcHVodWJIUGRSOWgybXRIS1pOQ053UFFsc0FhSi9KNHhvYnJjMFphWnVpaDlZeGlsVjVXMTdxdUNybElXQnlsc3ZvWGxYa2lBKzRBbm50MHZ0bGlnbW4wTUVqMThDYkJTdzcwaFliRS9jNXdFRkJRQ210cExwY0ZlV21vTGRLYlFVSnNiUUE3clAwK2NtbkxrcngxNEE2eWlzV3NiTExRc3N5dFBGRlFIdDFEc2dDRUJGZUg4cTZGRkljbEZTL3dybWxNSEMyeGhVTyt0RGlVVGVrTEs2ZER3SnB0Y0NCLzlWVkVCTytaSG5MMDRqVmppSmlHVWxlWXo0VENyZ0tvamo1K2h5aEl3RUFtcWl5RnJyb0tWMDVXdWRIU1NOYXJVaFNKODRhb05rVVQ5b0NSbkNNR2ZadGdNVXRhRWFJRVhNcm90YkpxbFQxN0lpYWhZbkhIUnhzSlJxK2gxNEwyOWdvZU5PRDJ3RUUwN0NodnhZVmU2MVFlVzNmMkgxakkyZ0FrSlFpTGsrWW9nYVBRZXNvT1VNR056TEhxYUVONUIzVVg1RUVyZXpDeVlNZFlFTkZBUzEwOTUzSm5BRysvNGJWaXBBc2Njd05hUkZ3RHNIYllnZkhxNEJNUU43SjVlSnRLeFQ4eVVhMG1iMHYxcXZaZ1lxZXp5bG9RbUF5Y0NpdDlsaVMxaWNMUlc1UndMREl5aVQ0bGl1VHBCVWdnb1JVaWJaM2JKZWN4VzRma2FiYksvTDlKRWU2N1VZaU4vVkg1dnJMNzVWQ1l2N1JPNURkalVXazlEQTFHaFc4TU94YmxFMUhwclhNcUlvQjVqalVPQTVrQ1BDV0dTRVBFc21YNmhyMmgzYWUzYmFydmdZK3hrZUZSNHhzZDduV21UWlJEOS9tT3pnYkdFS20xNEtRZWFxL3ppdVpqdjJOYnIraDI4M1JhNFVjZUt0MkxHV3d2U2hVQTlkaXhYSkpzNzNCQ0JteFNEbUphaUl6ZXJRNEhlMDRWd1YzWlZsWHRibkhDNUFLUzJheHhLUTB3dGx4UjdnUW01VjVoV016dkZvYWJqMkZ0SFRsUlRyOTlGdjJ4RE5CaXdKTE4yZEthTVpTLzlvNHd1YzVuRjg4WnAwK01adDF6MmRXRDZBYkprWjZvL0JRR1FpMGFmME9NaG00SFUxMEIydU1CK3A4bXY4a1o4ZWlMazRESkhZRlRvUFNvZjdrVm9IYmZPM28xanBzWEhBS3RHYnVCT3FTOG0rU3E2emRuc0J4NnQzRXRkYy9UenIzWEtuQy83N2hlTm5pMll4Z0dGVVVHOTRKOGJtd2VFYzdXS3ZhOTR2YjJpaHhqbitEOU9XQmxSZk5BM2xwVDhxSUNIc3gvVlRNMjlZdDFxSHJSY1ozTVJpRWh5MG00dndBWEFIVUQ4cW0ydGJmcEVhUWNKOTNtY2xFWWEwVnJPNXBtb3RhR2xEcFNUdGhBYi9Hb0VTa1U0QTdFUzJPL3NnbWRyUlIxRFcxall1cHJINEFhTVRIODNFdkgwZTlqSUpNalJrWGt3T3BvV2V3d09RWkx6czVuM21Ca0c0SXd2WGR1d0o0WHR0aWt4Z0lIQURVdDJCYkQ1NWMzZlAxVkptRkhESkFMQnF0dFRKaVpHT2NDQ09xQ1RPTkRHM05TMWV5SVdKRkRRMFRTMkhYdzdwSVhUTlVzZkRITEFHYmFzSWt3eEpxV2tpcmtSV3dnUWNKMVVTSHEwTlljOUNJaVNxRkRJVHJDelZMSVRPNXphNFZlYzIybzFtRHRnTGtYcWx4OGl6Z2daVDVkSGJRVVpmQW9wMStBZTJmZjl6SUdxR0hGTXNMcWNTanlJQXRXWVUwQVVuOUlBbmZQdVkyeENxa0owS1VneEtwQWJWVklEZlR1Zyt5SlRscGIvZ09pam9YZU5uNk92aGpIM3JXMGVkdlJXYWxvZXppQ1h4ZW9VcDllQ2VlcFZmUldKdGQvSXpCUFB3aVlFaFVXTk1YL2JGZFBlVnljQ0dqaXBRdFRYUWhiMWp5azYvY3J4d1JXQzE5UEFGRG1qcjN5MXNYUXFscDkzQnNYNVBOUTB2eHNnekcvTFlWdFBlQXcxZHJvQW4zZWdoUU9BSEROOU13NjZaWGRJWW82blJrRkp4cVo3WFZXWnVNVXFYSVhMQ0tKK1V6RUtvcGF6WFhUR3UrVENyMDdDaUo2T1BXaXkwaUwwNXVIRU1KZTMzYjg4WHZEYi8vczNGOHorOTNWNWsyRlNrcGRLbUV6cEJBSFVBdldqRlduUGRyK1FNQjBCaTZVZ1NpNDFPRGRBQVVCbVlGWFh0dHorcWJPSVhQY3l1cUtnWE1UeE83aWx5QTh0OWRmWkdtK1d1Z05Id1ZZTXBYdVhpTTJDZmVqMXRIYTJicE9oK3BReWJyeU9TZzhGWGZNQktWWjVGSVlaVXNwZk01eTNBV094S2hTQ3NvMXdTYnl4cG1KRGRCOEJUZWFJNkRVSnZTZGlRQ29vTnBFQ1IxNzJBQ3RlVmc5UlN3TzF3K2w3RWd4aTYyeU1rckJ2Y0dvVktNSDNpMmc5YWg5UmUvZmdCUE1xL0xxNDV4Tk5WU0d0MlBTSkpmSUdvQXRFNEw0ZmpTOHZ0NWh0YUllWXBCYk01QXl4UEdka1hOZ1FuNlJaellkV1huaGV0TURham5sMkhxREZhSzU1Y3RDUmIwazFHYllEVWozT0M3U2EzTmhWcnVBWTFSNDB5SENBM2toT1NVS0N4VmFXRE9FZTBQS0dTbFZYRFlXSDFsdFFOc0FCS0piSWFOVWhqcFQyM0YwNXEzeXdaYUtQVFMzcXZxNEI4ZkZaUjVsN2ZpVVArTHQ3WTZLSW1BQUVhcGdDdWJqWmpEMUdlMm9XRlRvaDZKd2d5eC9TeGVnVlUxeVJSYTRpUFdLKzM3SHNVdDVvUUpMeFBYNndaVjVESmlHVldkb0lDejFvWHNyVDEvQTgwdkJLMDRjU2VkMDc1MHRGdWd6NUI1VkJlNlFzYW9XWDBrODB0eURtSlNjVWZNQzRob0xUa2Q1MlFxK29tTGZENUpPVktQWFhXU2RObmFGdjQzemVEQlZWYTdpQ0Voc204bzlvV2xYeXNiR3BMVHZUaU1ySXhFbXozSnZDVnNpcUV2b3FrU0h4czkydnZibW9TN1V1eURjVkVXY1FYeGxMRURQRklKSnBwMExvNDVlRmM0TGRheFBiKzJiTHBvcnBDZzZTZXU4RjRhOXRjNUxaU0VRdlpMaHhkWDdIVEF4aDBGdFg2VnB6b1VldUFOWkEySkxSbHhrQ0lyK0tuUUtDSzcxK01BTGorNVk2L3FPSzNYUEw5ZHhTWVBWN3NiRVVYaWYrNkY5MVBpNW94bU9lOEhlV1BSbGVsYWoxaFJ3aS9MTXAveTdQY0JzVXFHL0w0UkVsR0VsQkp0eHJDdEtyYkJrQ0NMZGVUaGM5MnJkSXM3VEpuaEhpWlBiYU04RmNWby94aTBVK3A3TWVhcXpXUEh5VnZINmRzZnowd1ZKSUZwb2pHeVVja001T0xaVlVSSkV3NWZYSFpjbDR2a3lvSkJ3ajJmMlEwRVZMRkVkUWhGSlJWTVJrOEs0OVZrZ3RiZUNkVjl3NU9qUVk5MDROMjk3VTQ3Y25FRXhSRElVYmlseGZqUXdqV0ZqK3ROcG15bUdicmpkTzJxN29SeENpVXRBWDYrNGJpS1FxUjMzMnczcCtWa3RzTHVEK2tTVGdlVHNacnA1bVJqUm5WZFcwYWU4S0JRdm5RQW8ydEk4bis2RmRFR0dRNSs5MlRyNDNaeFI1VXpvQXhNcm9sR0ZxaENQRFRKc1JmUFVuQ0ZMZGl5d3h1dURQUGFQVFQ4V3FNd0JsMnM2TmFqUFZhNE1kc3N3SU1tQzVkdnRHQXltNjJxaldMZ2ZEWGZKYWl4cFhMOHROTnh2YnplVXR4MjFHZE04UzJJYldkUlFlYkxRMjZrNFdJYU92UnB1aGFEYzZzYWVpc0lpU2ltejdlaGVnZHpSVXNkaDVENlBTOEtsY05xa1QxbThSZVBzWEZvSmI3aUtHUmtOTlNiMHRnK0ZmbURIazJYQzBKUU9xTmR5disxSWw2Q1FWd2NQa2J6c3lxUG02aHpLaEFSbGFLMkpUN2lHampTRUtOQWd6N0YxWG5ma2Z3MGhMU0tnTVJ4bzQ5bWJOWDRtTnpwcXpaRFJXSWpXRnh3ZzcvZkxMNytnZmZVVm5tSWVYdGo5S1BqeGw1dWVXMWpVaFpOMTNkWlIwTlpQYlJtbTBFdXloTFNKNVFyWjJ4cUlEeDlwS1hZcGRVVGxINVBuZjJCbHRsS2M4UVdhU0Z3V0ZzRXRQYU16djNRV2FSSjJhcEVwbWJDWktqQk5RZVYvR1VpMTR4OSsvejM2Y2NDc1l4OEZRMkY0cFM4dmNZelA4dlNNZkx4UVAyR0c3YUlLNEJoMVl6aVg3a3R5YnZxdTRxcGpiOENsSXRRRmRxNHpDWkZyemFSd3F0elBaRUNxQ3VNQkFWSmszbEpXb05ZV1hnTTdsWDNhYU9pa0RWMVJEYmt3RTFVc0ZaZ2RTR0hSdkRqUjBlUndoa084U2lsUlFac1oybUVBV2Jkb05CNTNGbGMxL1cxMGZiQXFma0x1a2g3VGxvb1lpUmhsRnJ6ZXYwZUZjWlh2YkZSZkUvY2R3aThYYnJRYmZjYkMwRm9vUUd2aCtKakZVYXV3SDZ3d0wvdWtnTnlIc0NmSzJQMGc0Y2R0NzdqZkRxaUJXQjc1STRTSGQ5TklpWGRUT1A4b3lNdmk1a2VLTkNBejZiZjV1eENCYXdadURjZWlOYU5WSzZHdXFGUDJjSFZTSzJQS3hHWVBwVXFCelRxQ0RuVUJ2Y3V6VDJSR2dRQUZJUGNLNjI4QW51RU0wTzFRTWVXQit0YmM0S3dIdVNxT0VyQ3RBbTVXaGVXV0hmLzNmYzJBa3pYa2xFVnRuVlRXRlpnWHB4VTJycmYwQktzMnNCZHFZM0diZ1hOc0ZIK0lqZDgxMjJCbzJHOXRmSGE3TE5qdjV0R0xCUk9WN0xhM3dXRlJCb29jMitscUEvTHd4TlV6amo0Y3QrTjJSOHpyMk85YkZsdWZuV0NTbTBlcm1NcXlCbDhXa1RVanJGdFc2MmFBaHNBRDVjby85OGtaSGhQL3JYU2d5S005amRxSkQ2dFVGSFZZQ0FzVXB1RStZWFVpckI5K0hSVUNzcURaSTFsTlo1N2hlQ2hOWk5aVU1DbzQ5ZWwwT1ZaS3IyTEoxTDFvNFE5ZGNyL1Q0WGs5aW9mNVF4RitnREcxVm52RmJZeHBHMm5kL05NdnYrRDYvSXhQejZSanpBaHNYK3VaZnRZZFdMZE9TL3UxNEswMHYybGc4YnhuUkdVNHh4b1MrOGFKMEhhak5YRzlaTmpDbnZYcDJiQmk5cHk5MnhLRjAxR2J2QVRDa1VZd0ZBMjFFSlJXRUk0RFMzNEdxcUVvRTEzcWdqUzhFVC92ZzlkYTlqWTJ4R0thWkMxdWNhRWhqM3lOcXFxcmxIOUthSldWMDY1TUFKZ0oyem8wWVpCUGZIaTB3SnptZGJaMTNZc0JxOEcrdktLOE5yeUNOTExsYlZxVDYwWDlscmVBTFFsNVBndFRDeFVwcm1OOHlUY2p3aXJSZWpxVTBzeFpuZk5yVWtnUVM5MkthSlVXZWU4d0VwZXJPcnFRaWkrdUE1a1BjU09rNy9uUVJuT2dFbVRFTVE0YmdCdkRXd1lVNVpxcXNmQ3c3QWVzckxqZkcvckI3MzY4QUwrc0VVRmVIaUM4L1ZhVUNKNk9tR3dJZVJWczRUSGxobThsNEdOYzFHNGZ2R0xVcXFHc0Vka3FFQ2ZDa3NrcnBzcW1FZWJHa3hHajNranZTcHo5MkFaYVlNZ3JoVXRLbXBmSG84dmJEYmxKM1RyeHVvdm5tYWVyeEQxQVJidFhZWU1mYUR0VEZxM1VvY1RmWGlxYXdNN1RVWFdmbmNKUTdXeUlEYkZDblE4WVF0bWk0MkhPcXR6UWhnQ1RDT0xPYVVIS1VibEJSN3Fpb0xCS3I3bzFDcHRtUUxsVkhHeERFOEFJcE1RQ1NrOG91ekdYWEU0WU5xWTd0MVB6bmNncXpoREcwbEx1cVZrN0VMQXlsZFVUa29Pd3k1TTd1ZEZyRENkZStJVG1Rb29lS1Z1WGlESHZUR1BWbFR3alZjMlFVNEJtQksxNUVhNmpRaUlSM1l3UzYvRW9MZW5kUW55THUzRHU5Yk0zNGZHM2p0YTRmc3ZJT1ZjNktEMHFaUmtSbGd6WkhpUWQ0a1F5aGFQUHRLcklRWEFRMHlHempOWURxdW92eEU5M2dsYWw4b3RTUXNCOS9IdS9WNmZsYlQzeHZaTzVOT3hsSHluSGZGMklWaG1oQ1JNNm9YTGZ0VlhjdndDb043UnZQckxIeGd6Wlc4WFV4dHo1cmpzNjRqbGJWZlVqa2hJVlBvYllabjBLNUd3cjN4MHphNlFXUkJ5b1NGaGhYdndxWnpHUkdDdUU2K3g2aUJuc29UWUMwSFNvazZQSjRLL0RLSWdpQmpOR1RTWDFOZkxqb3lhOEFlWENJWmE2Tm5WWTBEeEc5SGRwZ3NsRWVpdGw2TlRiN1k2ZWdjdDZRU21HeTJYbnlMeXhWcU1mYmV6Ri9OT1hqdGY3Szc1OEFYNzNteXN1MkxCWUhGQ0dTSFVJcjZOR2xHWjRLL1ZNWDZlSE5mR1RCd2t5aDUxMDNWS3Q0TGdIMUxyaTB5ZlJTVDZnK003akdCdHBCYXg2N2p5bzlXRmRtRmRUd1FvRkYzdXRuVFFpaG9LTmZRWVBRcU5XVXFQVzFraERWd0tMb3hDUXVRbm83OGdTVGZGY05aNFl5cXdrZ0pIUXdXRXFEcEkzMERzVXRuRm5sOVhwU3llc2JrMTRlNzJoTGp0K2JyL2d5eHVJN2QzVDJMRHJrbEZhWUM0cWRMeDhhV2hQR1Jjc0xFanBRSW9OWElrYVgyU1l2UEFZYVJXM3RyUGt3NFNwM2dNd3pyR0lTOXdQOXpnQ2FHbHFyeURuSUNJSXRYcDRBcTlQTXBCWlZNUndyaVZFaG5ROS8zTVljSHQ1SGNyZzdhMmltcUhZb2FwK0NnRjZYQ3R5T25DSXZPWkVmOEFvUnlaUURZWFlZMWZtbHhmRGQ3OVUvT05uaGhaWkRiajU5NUV6VnRrMVhyd0NJT3czaHFyMU44bjBxVzJ1b2o4Rk5MNVJ6cjJILy9nUFIzQktBQ1NVMVlvUSsreXJWeVd3RHBXK0dzUHIvYWpEV0xDam8rNDMxRnZGOFZieFZnRXJCMHF2WTlPeVB0VFpqYWlqRnU2SE5HQWlFMkpuZEtHOVBkUkZqZGJKdld0aEp2Tk83OHhRQytRUE9mcGZxdzNOS25QM0FNb1FHamFHdHh3RnBiUWhHOHlYaGZiRHdibTl0Y0JLZHc0cG8xNE5ma1NmUS8rdVIrWjZURGdkMmx1SDRHVFQ4UGFzR1RJSlI1eHFNbDJmVGxpVGdUSWhCdXo3NFlJU3lzRWlNTmZwTlFkaWZ3dmdXS3BpR2tXR0l3K253blRxWUtGMElndXlOVnIwa0w5aGh6VTROU2tqSGdIVnFzWTZZd09QYW9ad0FFbHptMWtISVlZNnRuSGxHR1N3S2VLUXVzUGMyZ2sxRGNLS0NsVlF6RVI3OHozN3ZpQ1RMaGpYZ0xhWEE2SEl3UFhEK28wUERLQVdycjhBTUZxNkdxRDZwdG94MHAvdGZtZXQwZmUvNE9ORi9XY3BjMjl3SzFBV3Q0WTg2Y3RVY0R2MzQ5UTgrakZYSVI2eEF5cGhwU3hCYmdHUitVREVTOFJOTlVERE9rS09YK21zTXd6ZjF3UWNFYm1UbmM2aTBPQmFGZVYwcDBQUmd4QVZvMGR6YXBtODhtWVQxOEFNa25rSElnUVBiTE9XQk1rZndyczlQQSt2YmlxcndGczlZQUVvTittWVdsSGZDbXExa2ZiS1g5NDR2cVR6M1BHYnJ3TGl1aUxYUWtHZUR3ZUlPbFBBdWZrc3p4UTJnU29TRWl4M3hJN1JKNzcyZ0xlQXdhSjJ2M1ZzRjBNZkxWN0ppVUNLWUtSakV6Q0pKaXJKWSs4SjJKd2JyWWxLV1J5YWljcURSUWtiYnJjZDhHd0xsUk5iTkl4NWp5QWJiUlg3bWp3NUZIb3NselZpM2RKVUdaVzVKRVpuTy92dFF4alBjRzhTZ0o0eEpYd3FTVGFGM2Q2Z2ZNbys2R2I3clkzd1kyMFJtOWpNbGlYaUFMQVlaRGdWNExMZ3VGMlpzMUVsVmwweWdtVmNETU9yenB2VGNZaWtBMm9kcWNPcmljcTd0UkFSTXRTeUZjZmZldTk2cnNOVGlURXJ0NFlrUlpBZm5YTHJpdEVTQ2MrS1k1VVFQWXhVZmNyVkF2V05nREd2aDJHdkIvcEI4SVZYZW05c3RVa2RUd3V3UjNaSFZFRHRNSkt3bzFEbW9uaStoRlVna3R1MUFQMDU0RTRjM2VFNXBIMGJHQVZoV1ZSL1VMbWM5b1lBdGZvcEZkUGJnU0w3dXFxZHhQR2ZkaW1ZSmFDbDFmdnh3eWFsZnVraWhraXVSQlNxOWxhNkJsVTRwRVNRSE1sSUxxYkdoWDlVZWxHdmQ3U1hmUlM2MUwzaDViaU5lOXgvTk54bFJJV3FwRVNlaEJreEFjdEdReWNPRHk2UHZaVXBKTHhpOXY1YXRFb1Y3RmYzUXBIbUFvY2Z1OHpiKzcyaTdteWpaQXNsYVpCYk05eHV6U2xlbXdGTkQyWXFvcnV4YlkxcHFWdkg0Y2JpM040bWQ4NlZrVUtqRmlTck85Y0tBdWhSZDQ2LzdRZEN6aU1NWC9aRGthb2dZaHNaKy9ENkMzR3FSNWl4YjkzWVN5eldDUE0ydTY1eGlremlhcFZBL2MyUkhwWEpvM0k0YWRhUXBNQzlWRjY3RXpIcEJWVXcwbnNEOFRtaVRDbWQvMnk3MUU3V3lXMWpkQ0EzRlU4cWxSVWVRdThhTXpTR2lxbEkrVXd4b0ZUS2d0UUMvMFoxN1MyQzFxbndveUNmSFR2Q2xTcWpFcGNRSEVudTgrZTNZY2gxSDNNUk9VY2dFeXVETUxWQmtLZldFZFF4VW5yRW5oZnl4YStFQmdmbEU5Tm4zbEltQ2xUK2tYdDR3cXQ0aUszamxLMkIvM2prSzQzNzU0OGJBMHFmeENVaXhXZUVKVXJwTDR5cUJiVm5iQXQ1S2U1QklpZkIzQTFWQVRSZGNhZEg3YjdxMktaWDVUeWMyZkZnR2Y1QTA3by9wWVRnK1BuM280NUlkU2xjcnk3ZG8vWUZGSVdwSFllNlZYS3hJSXdHREU4SC9VQmVJNTZmRnFJTG9RSk5VSUFwVFBZaXNISjVyNng2N3lkeTRWcFpYTFRrR1pvK0tpc0RyYTg0Q3A5cDNZZ2t4T2NObzlXc05SV1M5S2hRbDRsRUpaL3FFZW5SRXEvWjRFY0FTaU1BUDZ0VTRXMFZESGxFTkp2Y3RVY2pnbFNZd0k3anc1UjdLNUtzNDFMTStXMnJzSTNOSW80bVMyem10c1E4TlNzcWU1MzU2VGNMYU1yN1ZSTmd2MVZZclVqWUVFQkd1eFFhM3RCUTcyOG8rQVh0S1dDL1BDTWs0Skt2eU51R2RyMGdwMDA1WHZYdmpoQlhRVk9lQjVBQUR5dnl5UDJuMmNjTWdNTmtYam1hWWxEVVBzOE5qVXlRNkVyb1VLS0hWc0R1UUxqSTQ0MWFiU28wdEloV0F2YkRSb3FtU1hoNFljN1IwQXB3TXlMa3RkRi9HWkJMUUxHQUtGck1pdUFXdXpXaUlTRkN3a0pGWEpGcmk5ajU3RTdJTVE1aG4xWGtkTzRmTmtpQnRJT2VaK3VBRU9mMlhSV3pjL2NvVjBzbXFKekNZS0hhZWdVMllOMFZDREFLbnF6OEg0dWcxWHJtdmRJUndkVFJyUjVXN01kUVRxMDFsTmM3MnBjNzduZkQ2LzArd3Rsdm53dnVsY3h4YnpmemFCVkpRZ0p5REFTOVdGaXlBb1VjbDYwaFp6MzBFVndNd1NLV0NDeTVld0dTT1hpT3dkSUNqRDcrUnFOVjdZd2VMajlZQTlHc0FkMTg3WnVEbkRlVUkxS0pTemtlOTQ2UkxLaXo0bnQ2OHgxUm50V1ovdDEvaU1XdHp5akhIb0R0c3FFMUtyRXo1V1FTR05LNlhEd3lZU2FGMWN4YmljNkhZN2NUWFU2R0MzOHZVcGNaSlF3QlBmV1RsM2dTck01YXZDTUtKZEhyUVVyQmJlYzROZG5ESXMzRnNqQUNsWmN6M2JBRDdqdnlKTXhRREhpNktKcm1GaGpueVlueUxPaFJ3aFNLam5vWUJZd1RaWURUMCt3V0NIQmxScWVxTzdBS2phRjhpczZCN1hOTjRYaW9lRGJPTG9TSlk5Q1k5KzR3S1ZNTUl6RThMY2pEZ3c5WWtqK3JISzJwNktiWEhSNWJ5V3crVjRxUnlqdDBWNlI4TG42Y29YV2RVdmVYMG9xVXJsaldWU1pBSUFoUk5NcTZWc2IrVkNaV3hDNEhUUFRPZnJoY01YWjJ0T0JyQ0oycDJpb0RYRGR3Q3FuUFY2WGxuQW9iZnQwaStmUWVPTVJORjZVTUxnRG9zdWVxZ3VTUnhubmpGdjhVR2w3ZkZzUU1YQ0d5Z3hVY1BLay9GV2dwYis2MmcxaWFQTk9zS2thR3ZvNmg2SVg5bXpQYm9aTEkybVBDY2NBUDlXYjdlMklDT3pTMjU0Nlp2emVFVTJXbXFWQnZFVVVlR3Z1TDdkeklIeGpCeStrY0FaMlZsbDllNDJqbHUyd1ROZW5RbS92T3F0VU9lSE8vZXdlcG9XTWh1UDhhZ1JhR1pYL2NESWZHck5vcEhYQ1hRRmc2VXF2T3RGWjNvTFFkZXdMYXZtTGQ3cVJzdjI3SStRbnQ2Mjl4dVJMSFBlVStoRUNmM2lFRldpUlVidHd5Tjh2WTZQSSsxSXVaTkZlU2wwaVp2WlVoWkJJbFNQU29VRnJBOTY5anpuTjhaVEZNV0laUW9JNDlVRHNOdmJzWnZ2LzlDNzdzRmNmYmJTaWRHcWxnN3JiajlXYWpxS29kTkFpVGNwamRLUlBwQVpBdHpxdWJLYnhscmhTR1dHQkhVSmd1by9hSWV1L0FsVDM2d1lDZFlBeXM4UmliaElhRlVuUXdFVWhVQTI1M2VUQldQRCs2TGlzK1BPZlJrbFAySnp4L0tFaXJJYS9hWEczRURhV3NHM29Odm02YXJOcVFFM2ZKSWJqU3ZhQVZRN3ZkMGI0Y3VMMDF2TDdjOGZtWE1yejBYNzVVdEtQakpwU3dVdVBZaTQ1aXZRWmNEeW5HaTVBWUV4RHZIZXZGaDR3QkFITmtjdmJzOStZNTRlZlZVQ0lyNzQxcE5BOGwyMENBVkd0YTQvNENQUzgraTlyUUR0cU84dUxIbG9OSjlkUk83NFpOTmNYdks4WVpMNTNOc1ZPWkwwT1paQUJOOExNTDhzSVFaSXI1Z2R3alRvU3Y4ZmVZYUZBUWhwTk1WNTJ0WWxMQVV1N3Z2YVNBRTNkMmVFQWlWRUVqWDlHbDlPTmNJMFBwYjdqZEt0WXJuL0k0Q3Q3dVZNWUFGVzNBckhsYlU4RFR0Z2piUVhJSXdPMEllRnBVelM2TXlYQVk5a1dGcXhHNERHODYwV0N1RCtpUzJqL3hoTVRYbllER1psTTRqZnlnWjVJRFVudFQrM0NrMmVGVUZUVEVoWXhISnNaUVVBWWtNbENPaEUyWVRSWEZ2ZWxNM2F1RGE4Y2pGRUUvbXZTWjBwTUhYZ0xDd2pIb05hS0hwc2pJNUFSUCtuNkFXN1dJMDIwbm9GWVFXbWJjRU5JRktjblQxTU9OZjBKMU40Q2lHSGYwcnMrbGpOQUt3cEJ6bWJnVzAwaVlWVEphRERrRUFYcE5scHZ6RVVTRExkaS9CODUvVS9xbGlhZGVCRGdQeEZSOEoxanZMZU1wUEtISFFjN0M1b2NXRExZQjRjWVBmL3lxSVZRSXFZdkdZQzRCYVVuajVQZkNzRGtucDNzWUwyamg2MEY0bzFRWlp6QTZWYUhPbzdlbUhHUDNzQ2d0NzhRY2FnaUk2akhtSWZLUUhyU1orZE5ONTFWL2IyMEJHbXIydVZZeC9TelU0cjc0RWFjYkdjSWdLVGhheE5JeXFnWEhuYi9mU0V5QUtGWTFlUDVjQ3A1aEcwc3I3VXJsNHUrOW9aaVRFdkJaamVIY0NRN1NOR0VLNTFRV1VkeVdPK3d1OUxSV3NLMkZOUU5mQXcwWDVIVkZ6cVNuN0hZZUFCVVpIUTBoRzZ2NTFhSTJjNWxzTzBxOXM0Q3FoaE9NSnJ3dm5VVmtGUmlrTnNhcTV4aFk3ZXdnTEZxSTFuQ3JkWUFDM1NqL1NZM2FETDAwN09YQTdUaG1MelBZOHBVamtHa2dJMFZHTTNKZTJIZTVSbGF0ZTJpQmNMMFdGcFNZY1lzUnBTYTgzS3NFZThFVEZzUUxOeFh6cGF6V3BtZWxJV3IwbGt1dmVMc0J2Um5YdGtGQUVtMjhvdS80QTRDdnY3N2dtMi82dU5iWFgxK0J6enZTUi9DYXBjT0NsRk9hQ21GV3dwczRsQVd4Vm5iWXJhRzhGdHhMb1RML3FZd3E0dSsvUDFCS1Jla2d5cHBCUjBhSHNlNWlEM2hSeTE1OEFkYVZzQUJMcnFQb2tJZEwwakVYQ0N1OWNTM2UzV0dMTzdaTS9nWm5yZFllaFkzSEJIYURnWVdLcFV6MVd3OVZuMGVEaWJLMWxxRGVXVkZYaWlBRmRxcWJLWjJTd1U1aDBSQVZNZ2ZpdG1CSjdDaEFLSWhSQUNPOXdhd0M1cGk4NHNJUEhzS09JYUhoWUxvZ1JScHpLbXpwNUt2Vy9VMnFUMmZpYnQ2VzZyZ09Vc015SHFiMmIzTHBRNmNnTHBVMVEvRllFSUpRd3JnR3BDamtSSVNJNWJyaWFRMHpUZGJkVXhwMU1QdCtSZDlNUnFLeEhtR0hoeksrL25yQkpYa1B0VnBIS1kxRi9uRXVrTmRhOTVZeEtVUi9WY2krb1RZWitoM0lPaitQbVdaZFVrQVJlTTZpdjRYQUhIR0tqb1BxNUR4NVJQOUlYbUhXaDhHNkxJdW53UTBCMFpGZjNBTm5xa29PV2x6WndWUjZVOFNPNlZRMDZSdVlmczU3TDVMVFAyeWlxRjVjdndRY3JNb1BTWlgxaWdaSDhwTjAyNEJ0QjNhVnRhWXJvQWc3TEkreFluRm1SbHdiMnIyUHpwWVdLbUlHTnFhdkZDV0tZclBXT3BNeFVPbWQ4dm0xL21ydmVMMGRkQnFwWUp5WXlvOXVrS3ZGTG9SVmJkbldBd282ZzBRN3ZhTDlxTGkwUkVWdnloaTlFdStGSkFjMk5yUkVNV3JwWTRLVkZrQjFaNHE1WkFTSEQwTUY4WGlYdFpHVktVbmc2YnZUTkJDZG5IQzdRK2hJWHQwSlg4QU1iM3FZd2dFb1F0VE9iazRnb3Z5ZlFxNDdpOXRLZDg1b3JYc0tOcGFJR082bElnb2cvNzdUOHpUdVRQVWV1cTBpU2tuZU1LTVVuVlhlUjhCZTJmNm0vZUJWa1NnY3c5SU9KRldib2pSVlRsYkI3a1pBZkx5eEJMd2NPL0w2R1JYQWhvam5qNzhTaDdIR21UcmR3NlVCQ3pyVVBvRXpucmpDNjhFZWl4Tzloek41S0hJdW9pWmJha1pwakFxZk9YRXo5dGpXaHM5ZmJsNnhYa3VDR2RHbGFxVndFcEFIUkw2R3hUcnVmQVFhWFQwby9KVXdpdTFYeFgxeVVPRVBRWjZyaHV6bkYrV09FdkhsZTk4ZG1jMGZ6TkZESTE1ZVRlSFZBMitIUUZVQWxOMVFqTUxmK3M2eDEzcjg0eC92K1BKNXgyOSs5MkZFRnI3OXpSTXVTQWhYMHZueW9PR0NRQUZKSmFCOVpFUGJBYVdnSGdlT3Q0WmU3dGkvbEtITTMvYUdmL2h1aHhYRHJUWWNZaUkwSVVtbFhFWEhxdHlvYXBkVEJuSFFqNENuRDFIUW9OQjhNZXJBK29ZWC9Id0Q3bGc0Umdoc1Uwem4wdUxkUGRTSldScTlTbHVRcEd6TktnRU5xbFJlemxEcWsrcFVZV050eFhEdXg5ZGVuYUZVK2ZKQTdFT1pMOWNOS1VUVm1lUUI0bEVxNlZKWnFTM2pGTWZZQS9mN0RQTTEvb0VNWUE2b1YzRzczMFhYSEFDQkpFM2dtc240cUtTWkhCVytqeTVVNlRERU0vaVJIdnp6cmVBVGVMNmpWSzg3QUFCT0hvbGpMc3J0UTlkRmExVEVXcU52OXp1NmtjcTMxT0t6MHpvN2lYNzhxZU9iRHhucnFvamd1VmhaZVFCSFN4RithUldudmtkRzRnSnJFemxUZjFMWFdFUTk0QlM4eDUyc1krVXdsSEtDQlY0bEJMMFllREtBOWVNWU5WbmlNa1UvalYvTUdXRldkeXVYemRkSkNwQUllaE9UbEdCRTdCdUE0MFFUclZZNGFhU2d0alFubElwUGlHRUY0dVFBYmxaMFRrT1BHOGR2eWpxdFVHS0pMTXNGdHR6QjR3cXJoajZpV1d6VGpxNnhHdGFOakYxdmgwbldteUxKd1lITFlzZ3dYUUZ6aDAyaEtnTzRtUnhtdzVSaklYbVVLTWpneVcyV091WFpqVXBCdWx2QUtqN2lHRlhGb3VHem1oQ2JZZDhabGo1cWxiV2FKZ2dLTDZ0V3BZQkZDL2ljR0Z0V1ZUWEdCYTJ4RDc2ak13ZUd3dWN5VVZSS0haOGYzWkYyekR0QnRhQ0YxWXdJTTBocENKNVMvcmdLd2NUSldzRkRrS0o5V290UHFva3JGYUJmQ3lscjVWMFZkdFR3OFB3UjJFb0FZa1Z2RWNXTFloTDJVb2FpaTRQYmQzVSs2VGJwNnBGVTdCY1lhT0ZKQmNaUlFDVVdVa09KQ2N0UmNmdjhHZkVHL0E0Qnkvb3JMSGxsa0RNazMyMXpEU1J1c3g3UTFIZXNmSmp6c2VrM2lwSTRGb0NFSGJUS3Irajk1aUV4TTdobnNqYzRqT3doMTJSTlFIc2JLeG5STGpEYzZlVlpHUE5TVzBBVGNscU9zcm9oam5tbE5tRk4wUmhqSlhadFhvRGJRc0RyVzBmWk1qNi8yU2dtK2hHZDFYWmZERDluZVVTSUV2d1J0WUFZNDNaZ2QwKzJJeS9HV3BHVEIyOUZZV1YweEZqVTZyVGd1eis4NE5PbkRVRER0NzhCVnJBdm1KMUFwaDFJK05hUURsZ1ZwM1k1Z001b1Jia1YySEhINjB2RGw4OEZiL3NOLy9BZHUwbjJOOFBQZHhZVWF1MENoaEZ5dm1iVkZpUlovUzc4ZUFqTVdVSVRzTHJqZW9sNFZTcGgyamJTMElmaGg5ZUtMN2NxUTQ1WDNDNXBJSDZWYXNpSmUrYTRCOXhMd0NXVE5DSkdHdmtFZXFRSW5SUzdNdFllREVpQ21JVGoxSmRrWjhyY01GdVE4b0kxcmF6ZG1XS2VpSXFPZ2MwSzdGcnphQUh0ZlFJbitlRnRRVW9uYUN4Tm5DN2tTQW96eHlySTNwZ0RyRTZHT2gyT1JvYWMvZGVNRWlTRUMvRHo5dzJYZnlSOHFjT25oRjVhNE0rMkJLeHI4T2prNlZBYU1wQVFLd0lISnBqUFhxdmZ3d1VGUDcxMmZOTUR0dTFwUkRMbEJPTitrL0FCeVpXd21IZW56QXIzS0NVQ2wyOG16enIyQkJPdjdpRmRacVVQQlgrb3BhcElmSzYxbzFhdGo0TzFVYTAzN3hqYTBIQll3MnFNWnJSTVE0Wm9iQ2VRR1QxNzYwSHlTZXdzWWVIN0VGelg4RkM2RmVVRUdWczlkY0NPcUF2VGh6R2Z3dm9nVm9mNEVSSWpqVElzSnRBTXRZK29ySHRHd0EwSXhmVlpHeUQxNXVuTVRlaG9XdFp6dmRNWVZHUTI0N0pkWWExajd5cldOZUhpeTNCL3ZSVVdtcG9DSGM3b3ArcklpSWUwRFZKd2l2TmNxeEZsS3hGdHpQUUR2VVk1TlRCU3g2V1VWT0JXMGJwdUVueWx2b2dQNFp5akp3ejdUR0dEbklFb3F6bEMrVGd0akJLRE5nYkwvU1dIcC9EbXRMNFRYTy83emFFZVFJTE9HSlQ3NlpnUXNzeWRLdFRiRVJPUW05T0prbnhqdUl4a3FPcGFYUHZSMExxeGFuMUFOZko2MHpnMXRKRHdCS1l2WUliOTFsRmJ3YjV6d2xJMmRDa1hCaEVhV2k5WTBkRVNrTTdzZ1RKY3pHeFkrOFdrWk5CZ1MrRGMxcC94K3orc3lOY25QRithTU0wckdoRzhOQmNOTVI0d0xPamp4NjBpR2xUQ1lBWjlQY2R4NStmVWhrTFVLd2Q2YVRLS21qRzN1amRUdUY5TVRKclRvd0d2Ung4TWVNM29NUlBxSVRwWkFja1F1UDZlSS9DNkF2SG9hTk51UjQ1ZFNsKzQ1TllSblpIRXhpWllsb3JMVHhtOUp1Q2E4Q0ZXNUVvNFRETldYR3RCU2JuYlhFZC9ZbDNwdlFycHhCd215a3NkeUZjRHZudkROMzkyUmJ3RkZwMjBkSEpWTzRVeGN4L29WbGdjZUJ3RC9hM3VodnViNGZVT2ZQY2o4RmFBNzM3QmlIcnRoZmdQMVJobWZrcUdBdEVzcHVTQ25kWjZITWJNOVpMdzFkZFBXRmZmS2NOcnY5MG9sVjl2T0IrcUYybkRTQy9sR0hONWFQbmhUcVk3SmJDUkF0Y0ZXaDNvZTFBN1RWQ1A2bk0xTEVzWVlkcGt3VEc3K3lOdHZncFdPOWJNTmUzeW1VcGFVTGdCWmQveEJtQmRzOXJWc2tLN2lRVnJBcDZxWGZ1NW45Sk1SayswVk1NMmNDV3lPTXNWZ2tWUjI1RFIwR0piT1lWdkZNNUR6T2daS0NyaW5ZUk9PdVRSdW5jbFlwbmRxTWlYNU56ZjN0STQ4NlFkcmFqZ0xNeHErYmtDK1F4VjlSTVdQRy90V0FIN3dmRHN5OUlSUXNFbFp4aFlxOVBLRFFqZzJsa1dwQ3FkWUtiaVF1RXdtTG1DQTdTSFQ5RnI2MG1RdFJWN2F5eVl2Qm5LUVd6OUZJRWlYUGRXazdBT0VsT29LQXk1RjFOd1lrY2FVWXRNL2FGY2ZXdnBsT2FoOXhEVWdobkN3bjhIZU9wVy85YjVJNUF5cnljdnVDdEViSm5meVEvTWVrTCtjMjhlZ3lRbnhRV2RiR3dlUFRCUjNMcDBYNitNbkZiT004QTBwa01IOXhYMHBUSVFEaG8xQmdCQ0ZWd1RsbldadFdDTkxjODFSc2RSVUZyV1FhN01pWmNDSUtkWjJZaFo5NlJYczR3TWROOXdiU2IzaVJKMElSQkoyeUVaWnpQSEpzYmkwQjJ1VlNIUWVLS2tDNEE1ZHpEekhjaHFqZUxSYTBHVlpGckNJaXNwd3Zra0FGUlZUQzVXVVpPTXRaWTVTRkw2M1RjQmhLOHJ5NmRHMUZiUkJ1Slc5MHBwMHRXVFRTMTZhRkozRG9Zb3R4b1JzLzRHb2wvZG02aGtJREFINHRYNjBlNFlRZ2k3RFcrc2FIdmVYaWtWMW1YRm1paFZXOGhDaDYxQXlMRERnTXZKU05GcjZ4U1FkT3FaSnNoSHg3M1g0UUszMTE5d2Uva2FXdzRNTnh0azBadk9VM1FkVnU1YVQwRDN5SXJUdndZdHpodzQzcDdDU0R3ZnZaOEFDOHVNbG9pU00zYmZrcko4KzZTTURDVFE2VTBzZFQyNmZlbWN4b0gwaEdzaTlPT1hES1RKekRYbUlmY0cwK1lYbTU4QThOZ2k5Zm1McXJkclFMMEJud0Vzcmk1TXE5c0dMSEVPVVZESFU2SC82bmRmZ1VlRkhld1UrUEw5eXI3NW96azN1ZFdPTjRXbXd4OEEvQ1BnNjNaRlNZYmxCZ1QxcjJ0QXZHQkV5b1lSbDJOSEszMmtjVzQzd25XK21lRzdYNWpuZnkwMkZIcHBIVkhHMThBZ3kwQXRkY0IwTHNtRzRQbnozMjc0aTM4VWdmUTFjTWw0dXFRUmFTalFPc0FuN0FlTHhjcFI4Y3ZuTXViODVjWHczWStmd2FNNTVhTzZFUWhZMGZRUU1ZOGlQRFNHa0pmVVVIZWEvem4yNFhHK0hvYm55Sm9IcHNha3pqdjhvSUF4dGFnRzVNQUsrOVRaVk9VRlViWEMrbzMweGZrREFCcEJyUmE4Zkg1REIwa3hKdU5aYzYrOE5aTU1FdnNVSnROWkJiZ095MFNDaTBac0IyOG55c1NuaUpuWTc0bWl3U3ZpZzUxNTZTZXZlN1UralA0VWQ3emNyL2h3Q1ZoU2RQWXRzWE9LcUNPdzlvRW41cms5M0s3YldRTE0rUHRTN0tTTUlIUkxNYW9KZ0dUdG0rL2ZIcURQdWJ5ZXFUWTl1RDNVQkhTTmtlWTdpK0V4N05oU0dJV1I5ZDRIbHNUYnJiS1Z0d3YwcWtWWWozSVUyNUM5b1JjcDhSbUJPS3doajNxb0hic3RKTVFLa2t1VDZWczFEOWtORDc1R3piV1VlVXlPREFjWFZRRzlkRWMvUkEySWk1NUhCTHhkeXIzM2hiaitJVGh5WmdwSjBRQS9ITmt2NkgydFVKcXh5SEpJUEFjQUpPcURROFJrRVpGV1lnOU1MU1ZIYXhRN25FMXd0Y0FDMHFNNWk1K1RBYW1RVlFWK1Nqdm1oaTJ5OEM2SDduT2R1d2pxOWFBZW9tMENDdUEyRTVSZU5KaUZjMUdJOHViRVFYZk42bnpMWkZoS2U0QmRGTUpCblMxT0h1WVMzTDNvRDY5cUhabGhIVnJ0ZTA3SUJoYUNxRkJ1VnJkM0ladHlBQ0lENVFLMFNHZ1NyRlhXV3dyVmViQlR6RjZGdWtCWVNyMWk3MUhKS0lJODdDWmlDZldvSEVkRHlzdkUwMFliQ3ZQK2hWWk1mU3RNRHJ0NUg0SFFUaHpURGFXVDgvcm96QVZ0Mkh6VDlSWmNFTVZNdzJpSFBIelFZN1lqd0hESDk5Ly9QRHl6SHRJb1hJd29haCtNU0RsUEZMbVF2SlV0UVBqOWFYV2pSVXhhRGw3am1BTzVJeFNUdndwVUtjZkdIbjMzWHBxRVU5VkRmdi9IbjRlQzJ0dWJabm1tVGU0VkFsOGd3RVpZZ2JTUHNBTTJzeEVKTWhpalBVZEdKWDA1NyswNGk5UHFKQ0dmZitGbXlSSERtSHNWdjhVLytoYkFNL0FoUmx4MklGODJmUE9yaUtjUHp3Z2hqVHprY1VDTVNUS01HdkQ4RzVLMXZQeGdvNWd2dG91akJsazEzUGNkUC8wOWNBbWY4YnUvK0lxWUNMMDlJdlo1OGRHa1Q3VzcxdlJ1Z3d2NzkzK28rUHhGTUxZRlZPYTc0ZENHVGN3SHlWTmx1OXEzWDBmODQ3OTR3dVhEVjdnOEFXdktReUQ4LzNWc0NjOW9XR0pHUk1CUGpWZ05WT2JkMDIxQndEQVI4SFJXNkZvUGF2OWNsNEJicUNPZGx0VEtCS0VZSmhrWFNNUElZaXBqQVhMUFNBYkVWdDBBRW1JRXJGWFlyWktuNFhSNHAzYy9vMDUydDB1QzE4eUkxcFdWY0Z6czU3aDVVekNUYTVZR2VnWnlCYkE4aktOeW1VM3ZHNVpBUWU1SFlPSFhraHc2Vjl0SHI5WjlqNkh4bjgwV0hDWDRNOGp0eExKbWZXa2lweXdMaGxFMmhiM1l6VkxEL2dhRTU0NWZ2cnhJQkNjZ3NuM1hETXJUUDdDNGFyOVd5YzZJRUV3eTF3UVlRd3FWZlFmZVFvS1ZBL2QyNE11TnN5UEJpTlFOMGNlcVk3TGVDL004Nk5venJPRnpWWTQ2T25CU2lqNEczdmR2eFIwTU9sbzIreUc2d29STVVWSStCUGE5dUduUTFXRUZFeUlrMzBzT1NuT1IvRVZQQkdzRmEyNW5BM0FXY3c0STRoYzBhMVRtNXBFVElZNU02TlpqYjJpdDhqbGQxcy8wSlYxblNDNDJkRGxKVG9FbXJKV1Vnemd2NXZyS0NiaGNBVUNwMG1JeTBBTGxYa1hIeXNqdUxCS0pDd0lpOCtnRENjamtaV1MwcHJ3WnhCU3M4SWhBTjNUTXpUWnFUWHNXOEFGRDd2QldqNDRlTXVrVmtRQUxRcVNDYis2OVZrZDJ5anBqMlFQV2xWWHRhVTBBNVlTdjlsSk5UR3dOUjZGbnpjS2M1a1ZqTFpqVEV6WmR6TzNVNGg2L3B5NXE2OWozTG5JVjhoMi9IUTNwYUpJVFhSU0R3UVZoRjVad2J6cHppNmlCa3dKNFFUME02WUVwS0FYaFhMOVBLd1NHQ05sem5zbTUyeU5zNy9qaDh5LzRaL1hQc0t5S2tLUUlOQzdlUmlJSldaK3JUaGRsNVRaYTFmeUs2T2Y5a2dwNUJaR1NWQ3B6a3Vsek13ai9Hd29WS2Zuam5rSjlPM0RVTzJDc3ZlamcrTnlyUEJMOWVKQkVpZDgxVTJnVlkxbHBqeW9VUWNBQ2MyQ0d0RVZjRWhXaGpEYjhJaFM2Zm10eVRnTCs5a2ZnTHdFY3o4Q3ZuemNzMXdYQXhSLzIvemZkdDJMdmQzcWRSdWphRmhyMkdQQnlpL2h0NitQZithWVdmZFdQVU1yT2NHdHZiU2lyL1RCNjUzYzIrZHlQRGl1R3ZkbFlxN2VtdktjUTRhNExCdFBjcDZjVnYvdjZBMzc3cXl1ZW5pNWVSam9Qd2xMKy8zVm9uYTJaQUVmYkVYQ2s2bXhqM3FVQ0hmNHVUdFM2RkhEWkV1V0QvcjJHdVg1YmhsSjRIYkd4Wm1XTi9Nd3JFbktnQVRQUGJ5ZVdlbGRBL213MmpKMmc5eXBPU2dwUFdrSmF5VWJWR3ZkdFNqSzdkV2FFMlg2YWphMnN6TDNTMDh1UkRvQTRNRlZkMytmMWVHMTV1V0hLZ016Q1N1U0lRTWRmMWVKSnQyOWkwSk1xRWZlQmgrZUQ2cHFRSGpqeVU2SkhCb0IxQ0ozS3JmY0QreTBCVjBieVhLM0docGlTUE1QSWx0WHVlazNwUW9rS2V5Q2RrdlpubVA5MmY4T0xMR1ByMVZOeFMrall0d1gzTjFKYWEvdWhCV2Y2OE4veHZJcHVvaUNrZ05ZS25RQkw0OW1OK283SWlTRWp0SjJNWjlqUVpTQlBvaW54RXZnNm9SeUw5TGo1RndINXNHQmprV2RQK2NkdkJmU2UxWE5lQVJpQnd2cGM2TVVxMEN2aGpnOVdnZ3JHRERDb1hzYThITXRzcG1JZStqQ05mQlJRVjloUjZ0amYxUXdDM3FVUjRpa3FGUVpueUVPUGVMb0ViQnVmZytOR3c3TWR6WnRvOHJCQ1pGMGZLV0JiMmFPc05nckhuczFyR2hiVHNrU3NTMEpLYXVQenNIby8wY0RweVlUQ2xrTkRLOFRDcGpXaWtEb2hiWlE3cWJ6dVdXaFVaYVdVejBVbEgzV3pUSXNxQVk4WVhVM3dpZ0ZkWVE3RVJHOXRMbEtQSGxpbmw5SFhnRmdnaldiVFRxelVTdVVZYUJVd3U0OHh1U3RIWnEzN1FxT2dGcVo4TTBjUU9sTWV4c2d4TW0ySXRoZWtiUm1Rbk9zS3BKU1F0Qlh5QWh3N0dLYlBQRmRweGoxdXJBdTR5MHVNb2RHajlEQzlVaHdyamE3WjY3bWl4UXhZb3BkUGxqbnlhNGNESnFVVFJsMkJqUkNVc2FTUzVGNnNPaWR5VWQzZFU2VitNN2ZrV0pHOW8xc1JydldCNDlad3IyUmxPcHAzNlkxbml1YVY1NnhEa0hJUnlvZFhHRStUS3hJbUUyM3d6N2ZJdjBhaEpYMnBRTDExRmZjRWJCTENQNzVHL05uenhPT2ZCL09SdDUzR3loKytlM25vRjExb2JpbGtla0hvZDhiNmJVekFlUG5oaHdVZlBuekduLy9aSitYZDVqem94bDBRSHZ1T0lzS0c0K2o0L1UvQTU4L0tUMVlhU1crRmdtTFdOQkFYNGRNemxmbHZ2bzNZTHRsUGZydzJmRWJGenk4SHZ0d2IvdmJ2UG8rNmdwOStvc0YwMzJjYm0yQWc4UHljY0gxYTBFcEIzVE5oY0JQd2hJZzNSS3d0NHFnQkYyNW5Sa0o4R3dVOG1Kd2R1SFRnYVlranJQclZjOEpDSTk5YmJPNkZYU0pMVjU4Nm81RzRMZ2szdytqWERoN0JjZldDYUhYa3dBT3lwK0dDcUoxanpxeTNNWmVndmd2ODZFWlpKZHBQVTBGWWo0Wm9pZ2hFY1pCcG5pdExTcHh5SGpsaWNLR1JyOEp6cDlOd2gyQjQ0M2k5YkhHQzR5UldRRGVXSXRDSmlDYUV2TzdldVE0SmZXaU5kZTc3NlZZanFnakxsT3BxaW1LV0V0RVNRL24wbnRXKzFqb1ZqNmxDSGdsbVhnekt3c0xlWkdDTGZLa0hIQWZYNnN2TGdkWTFOb0NBWW1hSzltakU4OC9yZXdNeFBWcnExQTJNcHZwOHNScDlvaVJvYm5RR3E0YXc3R2hIUUZnMkVhcFZ3RTN4cGp1WjQ4a25VNUZ6SzRTaXRvS1VHK0t5U25GSzhYTk4wOXRWRFliWnJMZXlVbEVOU0syaGkvZEJhcGZqWU9MUjk2WEdpSUFmWkt6U21QS2ZyUnZIWHpJQWNzQ0UxZU9ldkJrQnBFSUVucVhNUDMxOEJpSkdGR0RmQzZvMU5ERmRkZ055NzdRdTA4QzFqUXk5WlM5U2tOTkZacU1sMFROT01TQnJ2cnFBK3lXNFpwZ3B6RFl0U1VKNjg0aFM2RkVLTkFLRlJCRmRaazVqa2h4MmR0MUlpQVN6Nk5XdzdQUW9Ebnh3M0FsUUwrdU1jSGpOVU1WVUpoUXczaGRBRXBlWWtPWGlCNkhQbVhJU1hwK3dxREJOK1p0ZUptay9naXdsTHlXY2gvL1dRNE0wTWlMZzhKYllDNVo4d2ZNRzBURkNsWkVCZFdFWXVaaElXcmlhdGRDaC9TMGgxUmJralhVRlVRVTRvVktRenA2R1BKUjBpMGszbnBDa3NXQUwwQStmTzJ0dHpGTk1DcmRTNkdqUzVaVkpnVllwWjRrcVNoaDFBZVNuRmVVSDRHMC9jQndWZHhINjdLMWluNkY3OFVXQldOZUhFWkZQT0FnaHEzY3prR3EzVzRERklFNTRoVkJhSHdZcFdrUGRGZkkzT0IwaXF0YklzZURuSGZnYWhoOXZiL2poaHljVXZBN08vbW9OLy82dmZzYkxMdXRmWUZ4cmFyaGl3My8xTDY4SU1TTWwrR0ZHQ2xZckNmZlhURUtmSlN2V0xPcFhremN3Smt4QzhlaDRPeXB1alNHOFdtMThsOTBOTEYwOEpENjNHUEgxYzhTbkR5dis0dGRYZkh3S0tKd3FLcngxeDMyblYxaDd3eC8rcmxDWi8xanc0L2NkYjBxSHZGWUFLOFhuaG9EMWpTbWliNzZhUXRnb0g1MGRLdWZJcUZ6cWJDUHRCdVhWV1p5SE9nVFFWMnZBcDA5WFBGOGlucmVBTlcvWUFyQmVPNDZid0VvaVlYNWZkOE1GOExVVHBPaVF1QXFjeWV4eE42a0NPL0Y5WlVWV0xESWFhK1c0c2VqRktaMFhCZ2Q1ZVAxTWdsV21FQ1ZNemdiWG84R1hFbExWNXdJOVl5c05qOGVwMXFNa3RXblllSTFVQUpRdHh1dDN5eTVqT29zc21TTE1ranRIZ1E2MTJRcVRJd2RYcWJITG5aVVJrcnFNK3hTOVVISUNrQWpsMGp4ODdHQStQUEhNVmNmQUltVXE4eHZlOW9yV3pXVWNEeGNCeExRb3dNdVhBL25iRFVGY0F5MVNTSzE1em1IVXE0cHBQYlNQeFpBVDlRcHZSOCtwakN6OG5pY1FUSERBN2U0ZWRtOEtadnNuUEczay9QVTUyd05lZXAvZXZJaVl4TTVwQmlzVE9FeUY0UVNMYVEyOVZFd3RRSG1KUk9kUFg1cUlpRll4QTY3aTNkZFBWNnVGVlJ0NEhvcVhpN0kyU05kbWJGdkN4K2ZWTVhqV05RMm11eSt2TnBSN3R3WXpkVFRrUE5FU2lnR3JCdENQVUNka25sb3Y2R09mbzYyVDhZWnZwQXdjWkRjaUpYMUhnOTBLTGUvUEw5VURLQWxBQmx0RzNLUTFRWU9GaEdWaGxTc05EVi9RNnJIVVlIWFBCVFBBRnVHYnRyWWlnVVEyTkN3TjRkaXhacUV5SVhLQjlBN1RVN2Fxb2h2cVgxU1BScHc5TUsxd2g3dy93ZnkxT2xwd0VEcnh0YU9VRFd6a3l6SjRKSUVveE13cXkyc3lwNmRzYUNQbkZPSzBUZUVSallialhoelNObWtTV2pRRWxVRDJrRlVoR1NXdmtrTlJkdHVwekwyL25CdmRGMm9JTGxTSSszNXpRNnNwbXVPeUVNV1ppaEw2SU9QNWV5TjdtOXBtc0FQQ3BzNm9VVDRaOFE2RUxLWWlQT0d0dDRPYnVTd1JQVlJhOE1Xd3B1Z2JIT2xFOWRNbUFiRkJYa0VBWGlxUVgrNkkyUEVXTjN4NFduSDU4SXI3UzhQM1AvMk03MzRzZURtQS9iWGp0YlBpMUxSYXY3M2U4WC81disvNDl0dUEvK0tmZjQwY0V4WVdxZ2lpRkhqZEMvWlI2VTNCaWtUS1lQU0FXTmhSTWY0bkw2THNIZC8vVVBIVDU0NUs4MXg2aCtIMUxHamVEMHZBVng4U2Z2ZlZCaVQ0UFhXODRyZ240QTVnNDNxNzFZTFNQdVB6VHpiT2YxT08rN1h4R3pqNkdJczlaK3gzWUVYQTc5ODZRbXhJR1dNZm1JZWsrVnhHKzlxRnFnbnpMU1lDQUgzTUN6NTlYUER0eHcyWE5lRHJqNFF5dlVpQzJRVjR1d2U4M3JvcnFadlphR2x0c1hNSEovUGlLSFpkekRSQWpodUFFMHh6WUV1UkFHRkV0TkdSRk91ZkIvdDBVNnVrdVV3WkNRUVlpaXJRN2Yxd2FJSlpWRWZoU0F6NzZEVmkyaHpqbXEwMTM3TUVEY2xPZmhMaCtXL1A5MGM1RGI1V215Y3RsUUlWRkNzRVA5c2lxdnJTWjhSU09PdEp2UEtJZ3ZFbFFNa0NIdFhuaWlpZmh3eUVVaHB5VHNoTDB6Zyt5SGwzV0pBNlUwbWxveFZEVlJqYXRVa01TSkRuMlRvTzJCamp6ejhGZlBWcFFaY1RrSHJHZ1lETDh0QTZTQVhXWnAxQkpoaVQwd3dueWFsSkpLVWEzY1lZZ1N0b1o5U2ZIUWtURFduaWRVRWdSSVlNdXhXa0xjcHJGdHRoTTRiNWVVSjFMNGxoemNoNVFjZU56a3B2NUlBQTl6SDNNMC9sb1hjNm0xV0JXbFAxdS9hRFhoMGp3RHB1ZDJNdFd6cmtQSFpFT1dmYkJWaVd6QlJwT05XV0lyZ09NcU5jeVRGSnlITXJpUUNxaWFwUHYwMTVvdlg0Z0srSVFkNmJLS3VtY2R1OU9qcHAwYStKRUtVNXNqTDFDRFo2YmVOU1VLR2pFOFl2cnBIWERsVk9mRUFBYU1YeFBrUjgwUWNkYWt3Tkp0Q1kvU2llWTBGUFFuNWlpMFpwRGQzN3NJRVltYXUrUm43RkMzbHNJUXBRQi9aM1VNTFZqSGpCOVB3MDBVS0NHdTlaWXByR0JoZisrTG9nS1hUaVV0dWE2ak1pMWdWWU1BUVRsWG5VUkdWR1RFb2plRVlkRHkzMUwveDhvV0UvRkNrKzhpbFZkUndVaE1BaWtGWlpzRUwweTFmMGRsUCt6NUJWVVZyUnVBaG5NN2d6TWlIQ29UV2pxcmt0MUFtcVlnSldRUnNwbkkrZkZueDVxUk5SUVBkZE96ZEpLd1ZKTnNSOU41aHNsbFlsUkhPQXFWOGRWUkxMYktSelhrckRKb0NGVFY1ZWYrckFheFBaZ28zUWIrd045UTdzS2VEbForRERwNnFpR0hybVAvOWNjQXltTTFKYm1nQXlUT0FvUDkwQzhqV090cTkvKzUvZThKLy8weWVVQ0N4Z2pqS0hnSVNLbDU4T0xEbmpHaEt3Q0JXcEIyQXg4cklmb2hTdGpWN0tDRFh2cUJVY2owS0ZzY2JnTFNyZi9tckQ3ejRteEFWWW94RnM2Y0UzVFBpd1JXQUQ5aDk0VHlnRnFLWTJzRGpacVNMWEo0cVE5bElDYWhtRlRiVkdSQkNVSmk1OXFJZ2d3NHptTFJWS1RXVC8rcGdqRWpaODlYWEVwdzhiZnZ0TndCSXl2djRXV0lMWXJvcmhkZ0FmcnVSSDZMczU0MWlwMVo4am9lTXBBbTlLdnNwNVJxZVFsOWU1b29zcTFsb1VxQWRVTHp4a3gvaFJtNkdNSjVQNFl6U3VXMVUxYy9NUVRCOTdRNVNXbmhkbnIzVE9HYTJXOS9qdkQrOG5nRTJXN0xQaDRWNjNDR2tKNGZrckJ3N3hIMFBHcGxHdUw3MVBBQ0htV2ZYY1loelVhOHhoUW50NGNaNHVoVE13UzBPckVDTW1ZRWFjL25pRTRlSGxKU0xFTGk4NFBPQ1M1aVdNZnVseVZQZUYwVzNDNlM0c21sdDdRaDRHV2tHNFpyeDhLZlFaRnVDU3VjTU9aRDYvQXI4aENBSzZFb08rdHlCNUQ2UVpYWkFDWTVML0dqb09SSmhWQktOeGh5aDB5NmpQTndwMTZ2UXphMk1VdEc2ZzNObmJrTWRLN2lseUJxOFpNRWQwUEI1YW9kRWF4NkM4d2FweTlwU0ExREdTN3c0NWYzS013bnNzZGpXK3ZieXg3RngwcVFpQnlseUlxYml1aE5hK01uZk9wL0UydDRqTHV1TExMM2RZSmYxd1hsaWhLSmhBQ3RFOUFwdk12YXliVEozNWN3K0RzVGhDZVdwVG1IN2VkbGpZdXh4R1gzUkU0b2tVWnBuSzBYYUIvNHB2dUFSRDZoclUyVngrUmhqaUpxQWt4bEVOT0JUQ1FNZnQzaWlRZ3ZobVExTE9KUW9xTkRpZ1J1NFJWUDJDaW1RZG1ab0tEYTFHbE40YzNJVlR3TWlEVzRucU16N1ZsRWhSR2tLZ1VsUTZRM2JUUktNaUoxUlFKR2toNFFiai9pSk5vR1E3R3NQVjNacE13SVM3K0x4TlpyK1dsVnZaekNFcE42UnJBVXBhcXJmUjdPWTkrMkZZRERzc1h3QTBJWThKaldsUnU0WFJDSkNRVXV0RmdlbDNEUnFIN28yc1kwTis4KzBUL3ZpZEtEZWJ4SU5iNndGcFJQc3p1dnVHc21TelpGOU1mRVZDN2V4LzlSUmo3Q2dBUGlMZ0tiT3RJelZoMlVzWVJqVFJuVmJnQnRpVEFkaHcrUkR4NjZGOEZuejVla0g1aDRKRDRlaEQ5NGc1YnJ4bUJRNDc4T1BQRzM3OWRjS1NGc1JJN0lUdGtwRXVrZDdkRW9tRVJRT1UwYUJJdGkvSi94RW03NTNLL0lTa2lqVXZlSG9LWG5meDV4OGpyczhMdGhpR0hvZ2d3VXJJQWM4TDhOdC9kTUd5ckFDZXNEeS80YzkrOVlRZmYvNE9xSGY4ZHV2NFErOVlhdVQ2RGhtWnlJc095b0hzU28vWFhBZ3V0YU1peEVVUXhnd0JMc0lkUk1SUTZMLzZOdUszdjE3eDlZYzhlbXlmMWpBVXpxYnF5ajNiRUZKdnV3MWlrZHRPVUpXMzRoMDFya1JUVWkyT2lYelhuY2pHUXNtVWNMQXdUdUhoS1RUblFlUEtFRVJ2bktTaktrRnlHbEVmZTArUXJnQXlRNnpudzR1NGFsWGFUdmtCUCtaOXozOC9ndXV0STRJZ3ZJWlp3eU5qTWJoOVZUcDk5U0psb0NjVWRnYnZQVnBHem9iV0UrYVJrSk1KRGp0S0Z1UUJsMXpyWGFrSUlqT3FUNThLeU1CQ3pOcHh2UTdRRmFZQzQ4bjdDMmtZZFhISlNLMmd0Z2dadnpTcVNoOTB6elp6NDJPc2poU1ExUnB4SDZGNzRPT0hMTlJPdmdCdzhDdUpSS1lLdzVRSjhuYVlxbVdMenhqUFdqSXNtRnNHRWpXcTExclFFbzFQZ25TazhST1J1TGdVTXhKU25KZ2o1ZDFXT1VKZDUzVHdoRVlzYXRiODg5OENqd3F0YzI0QWRWVEZxWithVi9Rcndwd3dVZDhuTEV4ZWgzZUxHazZSRWpjb2dSUlhSTzJCN2xqOFFnK0NRVzY0c3A4N01pQ2hHcHkzQjlVU0ZnUGlKUExnNHJnRDZkSVJBeCtvTzRNTUorVHl2S0tEZmJVcGczQ2RRUkNZRGJEa3FTWFVXdjI4U01vMUFpTmtsenpwVEl2Wm9JMHdnQ0s4UnBYZWdrSlB4NzJQS3VGdVhRQU1odXUxaklVelNaYTRjWklYaVFWSng1VTc2M1FZL0xwdVdCVk5rbU9xWFNBU2pnRGJ0V204OUlBZU9BL2w1d21mNWYyVUtRRkp6YWRteC9CMlRLRVdiOTJ4SWk4TEtKVTVRWUduS1ZSSndibXVDcEg0ZkdsaDE0N0NGK1F0MGV2cUJpUzJ5VlVRdWN6dXY2RDFBN0E3WW5oQ1dLNlNUUlhSSWpvT1lwcGJCV0RDMGk2bmluNFpJSHIrSkNTekpVV3M2NHJMcGFJV1dyWE1TUVVVNDhacmhUbFd1KzJvZ01Lc1NiU1hTWjRWMTBYdGtOYzRZWDYzRlBEMTg0YXZ2dzM0ZHN2NDhjY0RQM3ovR1VjUGFFVnNZNkdORVAvMk1lTWYvK09NUC8vMkEzNzlxNHpySmVBM1gzVjg5YzJ2Z1Bvai92NGZPckFWWUFlK2tQa0J6U0srdVFac2c1NlUrZTM2Y2dCZlh4QVhWaDlmUGdiazlFUWU4ZzRIUU1GeUVUKzZqRW9YS0J1QU4vejRXY1dHV2xmcnN1RHBLZUtTU1hqeDZRSmNQMXh4V1JOaW9KZThQQUhQVHdHLys4MVgrUHJQdnhtS05nN1BBMFB4djd3ODQzLzVuOS93ci8vMWdTK3ZBWCtSbWJyNC9raXdKV1BEREV2dUZ0RWtyQytKUUNjcmVHeFJScEVHKzFQSytPcER4UE1WK1BYWEd6NStBbUpZUjJmRjh6V01TTWczMzJTQThMbURXV3RiZ3lMVkFiZmVjTjJBbHpjSzZKUXpraFhQZDRkT1pWdzVyK2RNbWVOTnJKYkg2NzBWQVZyWkhOUEk5MUdrRjYrdkw2Y1FxR0hmUllFSzhIdng1R0hyNkE2OUtZWS95aVdoRldxUEtjLzczbFB2U3ZVVkMzZ3BGUjk3eEJQOVpDa0pWdDJIdERHS1JlTmIzUmwxdEp0YTVaNDRRa0FyTzZaL2R3eEZ1Z1I2dG1ZcXRvc0dxNG53dVZaeEhORmJybnJuNnhSWlhram4vZTAzVkd3cllZdXBUTE9NWnlxenFLaGo2UTE5WExjNVFNM0JRcVR4c3hwd2xHTmM2TElGYjR3SVBXSXZEVnRjWU9oeWJ0U0d0emRjdHU1NEU2S0Nla1Nuakk0N1A0Mk5ycWhnZkNSSEdUc3pWUFNrYUF2UDVQVVluaHBVL1U4M3piTlZRVFN2bElXMTBTSnBGVm90RG5oa3BkTTdsNElOMFJVRWYzaHFYd3V1b0dOOGNQaGE2Mno1UFJvYWtwdzNYbTFKQzRDS25EUHJxUmFpVzZiRjJOK3UvTC9JdkhWU1hqdkR1cHJmSTZwMXBFTExwNFFvb1F6RU9KWG4vUTZrMkxDdXVuL2R4RmNmcjl6NDhtSnI3NUJrd01vSTA1akVqUGNJWFczaWF3dXJmUjRCZmppQmdjZ0xBQnhpLzRrdzNIZUIyemhrWUVMdExCSnJJSENFV1VTTEZRMFZJQkNDck9lRWFPN0VVNVZ6RHZXUXluSENkUDhaUFhHUklFTndvcHpBMXRpU0VyV1Nvc0xUUEtzV3BOR0VLejBJOXJhZzJJSkZtNmoxT083UGVrVnRIZFladUdvTlNpTVVnRjB4d21LUCtHZS9XUUM3SWNSbjczZWRLeWl5aUFiSEhGblQ5bTRWL2ZpQ1lqczNYamJFVkdGdndQb010c1hJN2E2bG9JdW1yOTN2akRRNGR5WFlSdFBVM2lOWEpLL0EwL2FFZi95WEIvN2R2MHRBQVE0akxMQ3BvT1orRkdSS05XUktFL0Ywa1FDaHRURmpYdnptc1NDTjZEZlBDVjkvbS9IYnI1N3cyOThBejljTGZ2ZG4yeWc4KzlmL3cwOEt5Qzc0TC81RnhyY2ZQK0NycjY3NHphOEpQOHh1Z0k3ZnBCMy9pLy8xMTJqLzU1L3h3d3R3QzhDbUxvbXZGaTdOakl6MHpNZjk5bmQ1WUJCOC9EV04vOHY2Z1MxYllhN2RIaTlBRUpKVnowQlc5Ynd4RXMvVVpzUVdGZndEMU5VUW1LWjZqaVBVZHRsSVo3eWxnbVVEcnQ5OHhOZGZmY0RIYno4Z2JnbWhWNDVkTWxnSm85ZitYLzJYZjRhWGx4Zjh6ZDhBZUdQKzg1OWNJa0Z2NUkzdmIwRmRHVHVRZ0srKzN2RDExVjJvV1RDVkFyNzl1T0RqbHZIdE4xOWp2WUFncjltUVZ1Q3lzUUkzYzUyTDNNTUFVRjZzT2FKdmJUQ0lHYWhJSTRXeHR4SDAzU01FeWlXTDZoYnlubEc1RHBYcWVRZlNQeUlVaTd5Z3ZPUWhKNTZmUCtMbGx4ZlAvTGR5QUNVTkFRbDBoejdOS2NHY0F0clFBVi9EWFIwODhzcjRTb1A4c2RJZHlsV3ZLa1JLNitneFRpVmg3WURGTUZJNnMrNkhyOUdaeHBJQWxCU3BNZ0hjdU1IY21hcFI3WUJhM0dZTnpaRVlWWU9oMW1uUU43MkhScE1YVnA3ZW1FdStXOFZLNzk0OW43dTNrRjdSNDl1UUU5TXlZRzFJNWlTZSt3b0lhYm9IUkRSY1Z0WXdicGpPb3FuQWprOFpScm9OUzVqbmtRd1VOcnBRUWlzVkwwUkFaVjdrcU92eTFhSUphVTc3VDZtNDJKTWlncE1JakNOMXAwZmVUUXA0bjFYOGZmS3F3M2RuVXRRMU0rUWZqTCtYMFpPUTBjQlViVVgzY0w2SzgraVVjZno1ZmhCOHFIWFNPaGxJSTFBcTAzWThUa1pmYWV3OERzbEJpT3JPdEdKS0hWYXAwSm43amQyRGJoUGxTMTVXbmlRa0tnUHdSYkVzRWR0NlVYaWJONUJUUTZzbTRaWVZKalJrdndLUDZHZWk4RmdURlRCNmVhZlV6U2NKQVBOQXlNN2UxaDZxVGZtd01IanVHZW9INTl2Z1ZxaHdhRFVKYkZ2b0h2S0lEQVVYRmpldEpsQVhjeDRGdjZYYmJwNFBaV3VEcnpkLzM2c040NmZuQ0doUkp5NVpoY1JNOTZMbkVIakI3YTJnMjRKU0lHUzZBbE5CU013cnJqa01EL2o2WVZHYXBIcmJZSkFWQ0NSdHRxaW9TMVgvYWdYc0RXMS94ZHRQWDBhZXZRQllMazk0K2dDWXJZSXVUUkt2QjZ6ZWlPWHZsaUZSakF4UWxYYW5GMDc2UWJVYWtYNFVvYUNQQXJtS1pxQ2l0cm1CdTR1Rm1kWUpPU04wd2plV0xxOVIvTW81WXlqYkQwL0FiNy9hOE9lL0RmaXdSUHoyZjlMeCtmVUpyejgxL08vK3ExODVyL0tXQXo1Ky9ZUnZ2bDZRSS9EaG94Ukw3d2h2SGY4SXdPZC8vZ0hwRHkvNDRmVVlHK2ZqMHdKZzVsaSsvcER3bXljZ1hqdis4Vjljc0Q2dHlMZ05wWjQzbmk4Uk4xOUNlaUU0VXlvZTBqUVhYYXlhWHBkSXI0T1JMa2ZLZW9wcGVPelBUd25YNjRybjY0YjB2T0RUeHcwZnYxMFJOKzR0RU1URHZlbTBCTFIrd2Yvc2Yvb1h1S3gvajcvNlQ0bzQ1Z0RFelJWMi80cnU2emUvV3ZIMGZNV0tERitCaGV0RXhDVDQxYTh5THZrYmZQdnRNaWcvMHlyODhwV0N6ZmVoS2E0ejlQUUZEUWVPbTdsQXZWeUEvUWpJZ2VMdkNBa0pqWnVsWmdmNnFFMUtRQVplcEtMMmFOZWRFTHJ1SlpzN0YxRmRNc0MySkx6bXQvRXM1V2dFYkVHaHM1MFdyR3dqcGRCdHBuTzV4a2Jza3docUxrdlpFa3FMUFhyMkdFQkJJWnRYS3hzYWFselFCK3BmSTVlOVZyQ243Z0I2MmlvQ252MWpRcllFWmxUdjlDV3pLZlhRMmtpTDFxRU05Sm5wblVvdXp1dTNKb1Z2a2Zua2ZzZHhWMkZ3WHNibDM5N0lLWkZIenpqQnJNaXhNU3ZOMVhnT0Myd1ZadkZhRzJ2eFRVQkU2MUxHL2gvc2M1YklFWUxnbE5UcjBYRXNBWW5qclZTZElpS29kR0lNREhHN0hjZm5NaTlCVkMyWE8zVkdIUldrekxHYzhpRW1wMEVnQVlkSnVUVTBvMk00bTF2alkzc21DZVBSTGFPSDZnNWtGRU5LcUFFdE5ZZHk3VEljUlhZa0EyWFVlakdhUTR1TTBWYkxXRktlT1B2ejJpNGZxTkNDNXE4NGQwRk1KTlBKczBla3p3ZnVHcGdzZ1JkNEV6eE1TcFVlN2lKbEhhQ0tUWG14dXl2dXlqWU5qemg0NWhnOThCWFI1RlRPU2tPMHltdm14U3RBYXkzb1ZUbHdWRDJmQXoyNEY1ekNKRlF3WjJEUVZQWkt1TkwwUEx6SHBQM2Jna0gxRlRJTHBQUnpkMmkvSUthRmNoZ09HTXFlWVdSUjR3UzJRRVV0M3VObW5lOWJwMlZkTlh5eXJwRHBtUW5JZ2Q4TjNxdE94SzdTY2I4ZEE1WHVmamVzYTJkZUtVZGNBem14Ly9HZkpmejVYLzVuV0JBVTNtVWVzdFdDeXZnOCsyenZCM0NaRnE2MUwzajcrUXZ1djd6Z2w1ZUNkbTk0c3p0U1BQQ1hmd2xjc0NEbEt4Qko5bisvLzR4eXV5Tms5WUZtMzFvTWFjVk14Qy9RY0NneDRSS0FOK1hIQUNwd3JmVWhQSlpCL1hjQmpvWllEMkJHUUtZUjJWbk5uaVZNYWcvSXFSTXlOTEhZNWRkZkU2bjQ4dkVKS1VaOGt3MFgzSERVZFBLR2dLOC9KVHhkTXE3WGdHVkpzeHNqUi9UbksvNFgvNXVQK1BUM0dULzhjQVBFeGY1aDZYQ21FeXo0N1RmY2NGOTlXa2VZRkxoaXNuY0dwT2VJa0o0SllpRjhhSUxIcmVvZEI2SVN1RS9QYVJoMDl4WjlZNjR4WTdzU3ZqV21EZHNXQjNCSGVnNzQ5REhqY2trUFJYSFRETytlOWwrMmdIL3l6ei9oMDFkQVhuK1JnZ2EySlNPR1BNWngyN3JmejE0Z1Ruc0tpdkNrZk95Q2tYdis4UEVyUEYxWHJBc1FVMEpLOGxDaVBDSE9tdk5IdE9PUlJXcFhCQWJPMWFRanliQTNyM2VVUHRNUFFQS01BRDlhYzdoUHJTdTEzcXF0WnBVUllEbmc0L01uZkhuOWpGQWo0RXhqOU1DUGxxYm5Pbk5yZk9zdFVjRWQ2T0FnT2hydEx1V200SzRwaWxmdUVjZUtvZGpSbzV3QW15bTRLR2RIcWowbHRmT08zN09UZ3hTNUQvWDZMdGhkbmNrZzFnNmsvRWhRS045cFdRbHFJK1MvK001Uk1tTWZldXQ1dkVmcVo0UTZldnM2VWxvUUE4bWZFZ3habGJFcGt6MHVKdVp6UTRxTS9EVkdmOS9zZ211enNaWnkwaGllYUZsTDcxam9iSWttTzZQSCtHZ3NWYThDMUh4RW51TU1hdVZ5WHlNeVMrSDFvcm5YUENMbyt3cUhhNEtvS0xHZ1d4WEdmWnBkUzZHdzdpb0xMTjZjeEVxT2NIWC8wOWVhR2JIdXhlR3hGME1yaGlZYXdnS2dGYktad3JxaUN3SXhnMkhwY1Q2REFVMk9OVHMxZmYvVHFRQzBSbHRISjU2Mkh0eUdsNUFXV2FJZUZaa0wwWG9uRzlIS205WWtzUERuWGlTZzZLRmNya2tLZ0FQVXJGUFEyUjNxNDBEcENVRWJ5SHJtNThQSWVyTmdKdEthYlB2aEFCRlY3RkE0RmFTa2xRTWtlRDYzOUtKeTUxaFdyTG1BelJjbUZOcU1UcXhuYm9Da2MzSG44YnVDSzN3dGRWUW5mbmhpa2QxUjFZWW1DNndGY2RpQkJWK1Q5V1dLamIwMkZDUnY1ZnZsdHVQcmxUM1Z1YlB3NGI2emJhMjFpTnV0bzlRZDZCbkxGaEVxa0w1ZThSZS92ZUEzZi9ibmFydVQ4T2hDQ3V2TWN6Tml6dXBQM0hjM2lOcnRqdHN2Ti96eTB4MC9mZjZDMWh2ZTdnM0w5b3EzLy9DRzU2OTJQRDFmOE0zWEg5RDNocjNmWVBYT1lzS3dvcE1SNmd5aTRzSXh5TVF6Sm55RWZWeHdsTXFRRnhGeWhOTi9ReERtTTYwMzlaUjJZQmZVWmw3RVpKWVdMTXF2clRscVRhMklxZUd5TGNnNXFyQXdBRjlkRVY5MkNkcUE1NDhZK2NKMW8yN09hL2Y3M3JZTlpzQlh2enJ3TDlkZjR5OS9kZUQxN1EzMVRZUVZhbzFacjNHRThTNlpuakEzdXJIb0xqRU5rc1ovbUE3aFlaNEdDZzY2WmtqeUVwNC9kS1E3K2NxM0FPUXQ0Qm96NGlYajZUa2lYeUtXUzhTbTA5Vm1TSHREVG04QXNoUFVlUEdlZGUrMCtPcmpKL3hYLytVVHJMeng3NDB5NzE2QWUrbG8yaVpNNURCMDJGcWlrb2xHQUpxbkRkZkxRdU5yU1FqSjk0UUtQU1V1SVlDTDFDa0U5WXd1dkFQN25DSEV5RzFMdU44Nmdod0hzK2xQSWtDNXlBazNlOVFxcEVuUTJJa0p5OEpmQkZwbERsVUxnNDQyRFB3bEN3djhqTTNkbFE5MkpXbVA0RFFoNlBsT3lzWFAzZW1KMVliTUVLVERrdW9mSlBkWTlmVTFJdXdtaW1NOHJJdEE2MFFJYVlIajBPVGRpV0kxSVNFdnlmUExwZFJweERtL3R4RjFyZGVIb3IzV09aamgwVy9uajRCbkFCc3BneGlEMXBScUVRU2piSnJDRmdPUzhFUXdjZGFIVW8reDY3eENqUk94TGdxSVNTR3pSSjFWa0JwQ1Z3ZEw2UjByNTl5M0RQcnFFS3hTYWt5VHhNQTJ0QUNZaDViUGFVYitYcXlXUHZkYVhOS08weUhKeTRLNkgwckRMZ2lQZVgxUEdhaVdTOUZONkRDblJvN0lhTGdqajZyOC9sQWwzeXlpQ2xmQWdGSG9mQ3VTZWFMakxjZUJ2SzRjS1I0cTRwNXRiaDFWZmVkbktGKzFrODRRaGNlL2xZZWkwRk9hU3dvK0lpblVGRXl1dTlzRTV4QjZSb3FWRmwwS2VQNGdRYVp3VnFLbXBIVVo0WVZTM1NxT0llc1g1bXpDTW5yd2dnUjBTaFNXRzFibUQwWlVSanpCb1R1djhYbHpLcnZpV05wYXI1dzRXZDArQWdJbWFZYkpXU3NSVStvZGRoais4S001LzNacEhjdnFseFJ3am5oNGg5QkpNRElLTWIrTTZYWEVuTm42bFNMdXdmQ2tkcjVRRGJXUlJlbTRIMmpWVUdyRTBTcjdTRU5ET2JaUm1QVG4zM3pBYjcvOWRnalpTQzFCMUtkV21NZHBSY2pBZ20rSlFpdXEzTVF2bnd2ZVh1NjR2MzdHNit1TlJTOWdtMUhaQzQ3OUZaKzNiOUhiRjF5Mko1U3FrTGt0dzR0SFhyQjBCNndXeVl4Mm5lZWNpTFArOTMvL2hpKzNYZnptRXpvdDk0Q2VsaEZ1SzJlRXFhNVdSQk1vUm14RG1WK2dMb0M1bS9EcHd3eUtUM2RLY0trZms2K0g2eHF4WFdRYzRweGJmQVMrV0tMQnRnamdDYTk0UTNreC92NUNoTExya3JHdUVGOC9YME1zREpmbkMySzhBaWVFTkRWWFRTRXI1ZHZVcisvM0tyemNOVTFTb0hzMWZKaDNLeUQxQUVzQjJDWDBZZEtJelRkOVJLWkJtdk1vTkQzNklxQW5DcUlVREpjY3lBeW1QSi91ZzFHTGVGclhLbG9OaTNwWmg2Smo3aTVrc1l5WnhGK2Q4UUllTE9hYjNxOWtpaEpPbWdKVkd2TWY0d1c4VkVNVXNZV1lHcEhaaHoyRnMzdmNvU2NSbmZEenZWRXByZXZLM3ZKbVZId3UwK1RSeVhxbnpyQUpsS1hmSVppOEp0WFc2SHZaa25yQWdXaUNBKzAybE1GK3ZJM1FkVmcrSU1kSUYwaTRBZ1lucmRaNEIyenJpdHFTdk9LRHlRWUc0OXc3REZBNkp1VkhJaFVmYTU4ZXhPUVY0SngzcXpTNDJZSXpsSEtwQVRHS3pLWlZBYXR3REZZRVI2cHpwamcwcFZvZFdvUzk4QXVqSXpFRjN3L1IyTVVSQWV6VzhIWURycGZWMTRRQWhaVElBeTR5Sm12MGhUNlVzVXhwcmFPVjhpeUxSQ1ZJbzZrN0toaHA4c0xFZmtQVXUrN1VxQkVOVWQrMThaclVCYUUxNnpVcEZsaWZFanFMNEdERnZUTERZNlRKdFQxMjhORGNXWUFKb3RlWVJpRk9malVhS3RWd1dwQnVwRTNPZW1VMW9qQUlZaWYvaFRiSlVYYVhOZVhZa2NmaUQ3eG9tb3VEV09rSTUwMmowSkR3MnlNOTJiVElDZ1FQZHB0VjUzQmVFd1ZvQ2dsUjRaWWVqZUFzVmp5VXp6N21qQ2hyUHFSMXNxaTVhOHQrK0liTzBHUlNvTThTa0JyYXdXckZTc0I2QjZKSWp0Z0RobEZhVXFndmVSWGpvdUkvOXlReVZMQUFGUFRodWY3aGV4dFZxazRrazhiV1pOR1BtZHE3SXFxS0tpcXhUZEZHYU55cCtWeW9RV3hXUFRIQ2NidnpENHBraVpqbXdQMDFEZXZaOWo3QzE4OW9RQWFlZjdVaGJxUlpOTkNLcmJYQVNrT0pGZjBZL0QxQW9pRHl3cEtqNGZiYThQclRDNzc4L0lidmYzeUZvVWhZVWNEdmV3YjJEc1B2c1N4L2ptOCtBZmRXQ1hSeUJjaWtjcUFQaXd2S3RSdmJQeFRXU21LN3VkMi80QisrMjlGVVdBTUpUb1BLSlpiTy9WVWJWTXVPMGpUR1lvV0tqVjBCQllZRlVvb3lIZ2RKV2xKTlJDam9jZkVpeTJnTjBXdTgyTnU3TEtaNWtGQ0FsSW9VdytNeG1laGlTTjdHaWRSUENrL1YrSG5CZGdVa0lmeWM4Y0cxazRlUlZTQThuaUNncngydHkvc0JWRDNmZFQ4UmNLcEhJQ1dCZmV3VlM4bWp6YXdMRGhORnZsb3hlb3RtaWk0dUJHeFJ4Q2xuZ3hYQ3F2YWo0N0NpbE1JVVZHR0FXc1RoR2VZMWpzSXpidzRKM2ZHTmFQd2FnbEozeWFCV3lkbDJtRE9Rb3czQmEwUW9nazM2WEhrWVVwaDI2cDdKcElxbFRrdFNoa0I4aDJEZk9xUzA0YkNubEZrQjErdGx5TGhhSys3Myt3U0ZldWpmN3Q1KzlhZFI0S1pIRitpSmV4eHErTTJSNDRCUVJ4NzBFcDlJR3ozdEFTcjdNMkZQOS9UbUVNeG1VaVRUOVJJWmxwRWIzVXkvTzZpRXU3bk00clBTaTc4OFJiWDBSUm5HUUxYc0hBdE56N29zYXMxckJudlhIdHhiUXNnT3ZzSWZMZTBVbzZoREpkc2xzMktFeTRLaTNuM1dIeGNjaFMxc2x6VmhXUmlKbkc3NEJKMnlIbWR1TzZ4RTljc0JjUkNBUmJLa2hhalVXNElKVUt4YmM1clJSU3hrOGYxTWRzOTVhQzdDU2UwSHJJcVVIREV6c29tR0JrT3lPZ3gyTTQyZkNqU0ZQVEtKZC9xRWZlMW5yYTVDUFg1S1A2Mmh0T3FySzBVU0dvV2NYVTkwSSsxMFdCUFNtYWxRNXc5cUZmUTBERFBFa1phZ0NBYnlRb3pvbkJPV3hmVzVSODNjdHpFRDlVMUFTQjNYWXNERzBFNHhDamxOUEtEOENzNWVVVE5DWGg0MlRzNnhxcWcxSVlhRDhKUTVzNE9hK1d4Nm9qSGlzbDFRMm81V1o1VW5aSzMyemdYSHBuL20wM1AwM2hmbSszSmluaEZFOE9IQkVJYXBkejZpaWhHSnRIK0hHZloyb0l6Y0IxdkRXbzBzM3BGTzg0aUdjamtUOWpVQ2xXRXBDWTZKRTU0VzVBdlh4REZvS1dWZitySGlFTjcrMFJ2V2U4SWVDajRnNDBPK0tLZDRZTC9mVkVkV2VZblcwZnBuSkFwSUQyRzJudkQyeXh2dSs0RmZmajd3eThzTEFBa1N3SDlLYmRoM0xyOS8rSWNmVU1wSDVsWXJZTmVQK1BSMXgvMis0c042emxnRm1Hc0VLbzk5UC9BM2YvUDlFRW81OFZMT1BsWFpwaFREQWtRYjFjZEhwMkt2MnFnZUREV1Ntb1JDYTN3aG56Q2pnMXZDSlZ5dzVZVG9PQnZxQXFnYllqOFl0c3lhYWNWazBYY1pUeEhIM1FhUmp4M0FsNS92T0c0Rjk1MnRkZ0JHRlhlM05rTmZvbTFGaXNoNWFOOHh2eE1FTkV0S0NiYXptNFNLMFZ0ckVvQmVJOXlRdytJNDZ5azR3TkE3MUhSSWFSa3NkSVMxSWg0UnlCdzNheDBlNzBWQXVRR2xrL0swOXlxcEVsRkx4Y3RyUjdNRGIzdnhmSFpLV2NRcWNTanpaVTE0K25ERk5uaWNxYmhDb29jVFVzSWFSUllVSm9ScW9xUVJYalVCTDdZRTNEanRGTUxXc0wrWlNIVkVqY0VmS2xiUXdPblZ4dG9KblJYT09TYUV4S0xHbU1qZ3lPdklhNmVROVBENzFOQ0tnbHdYZWJhdVZPVU5KYmF2Q1d2OGZiZU5maDUvWnc0cEt2d0hPaTdwRlBGTWx0Q1l4aE1ESk8rMWNkUmd5cFZuSkhwd05NeEZvT0xGWGFLa2QvSjRjbWw0MjNBZDdhRnhpYmlzMGROZE1hakJNdy9TQU43bjJTanh0RUpBVUpRbTZIY3A2M1BlQTIyek04Q01nRFNwT1VhRW1Fcm1lbzRzQks1REtRWFVZOGVuRDFkRkpSTEh1M1NVa2ZyS2FJMXBFNmVRTmNBV1FTWjdmcDJlZG85cHJBZHZPK3VHcmloVjFueUlMTWY1K21lWVhiSzk2M2RkaG1uM2xqYlNDdmFEejh3Q1NMRzJWYTRyZzhaUkMxcXBtK3BzZ2E0ckozdWc1SEE1U0hSMjMxbTdBS1VkMHNKOTU4US9YU0JFNGlud1hOMURVa2lIMW5DS0NYbUdBV1h4eG95OEVNWlFBNm1KWk9oVFVRc25QS2gyNElnZE1ZdndBd2FBRTcxbWdrd3NLVE5NMStjUVE0aXVGV0FWZlgwSDYwL0lVaCtjYlF2SU9jMDh1U2tBRk5YUW55Tnd2T3NuRFVCTzNvSGpTbFNndjJnNWoxZDZIZjFVWE5TSUk2NVFZTGsxZlA5amdOWGtRUHl0UnhvWlEyc2tuNWlZTXBaWW9jZ1RXcDNWanN3aWVLNTlIRlVNVHpHenY3K2lqUngxRUx4aWlSR0hBZVVJbzg4ZW1SWDVob3FmNzNlc3JlR2FFajYvM3ZIeEV0MWVJT3RRazZmR21TeXREY1YxUHd5ZmZ6encrZlVGcGFneWZYSS9xR2NYbzI5WHhMWUFYdkRwaVV4YWI3Y3ZBRDdpNjE5MzNGK0I1NmVPRmdMS3pyRmhMcCs1M3IvNzI4L1ltdzFpaFZRYmxxWEJqaTdtT09XWmJyY3gvcjFSUXBhdXpXRk8xc09KM0Vra2t4UFFsd0tMSzM3ZEM1NjNqMWl2Q2ZFU2tETGNtazBoc1dkU1FDVVp6UXN2Nnc0Y3ZWUHZvV0YvTy9EMlppaTNPdEFIclZZMEdrS09rbGNPWUZua3lhVThvbFByZFZXQm0wQXdrbWdRcTlKQVVXTmFEQ2c3Nmw1aDNVYitMRnJIMHdXRGtqSkRZY1lCelVrYXpweUI2OXFRRmp0bkUvem95cWNIaFFLc1ZJR2gwUGhCNDJYUkErclJaeVNpR1Y3dUZhMFdDUTBBaVVLY21CNWhlSG5MbHZIeHd4VkxYaFIyRjFMa1FDM0w2dEdtOXhhOUZZdnpHcWpZVmVjaW5BdmwyTzB3dG9tZHFUNlVHRHVSakQ3MDhHN1hEU0ZtMWhFNFIzNkN0WVlXazZhSTc4L0ZjdERyMDlPSys4N0NybkswY2U5dGhEMnJHMndVc0R4ZVgxOGx4T1dSU2tIS2RFZnp1cTR3NVkyQmRNZ0xPMngrL0NuaTE5ODBoQ1dnUjBIbGRMd2pZVWxvZENSNERqb1dJcnhSUmJvY0UwUFV4bmhrMWNzSlRFZXRqSUs2aUoxdUlqSldvUzlXcEc0bktoU3V0UllOcFRSL0hyUG02S0N0VW9ZMG9WdkdYcEFoVGdXUVFNUjZVaHpwblIxbGhYczZBaTh2TjN6MTZZSmFnSmlhZ0pvNmx0elFMQ04xTVdNaXNtMnJLVm9ab2lQaUJUa05pRnJYMU9oMGtJWDlRNU9xeVJIVm1tcUZLVmRrai9KNFI4UFJUc1hnRFFhbGdXTVhqNFU3NExJQi9QbWtJNXlabDBZSnVrZGwxTS9Mei9NdmFDUDZ1bXUrZWZLWTRxZ0JRbGdFRXVQVFNMeDhUMnYyaDBLODRQTkZReXdEbnR0MU5LNFVBeFZaQWRhbHV3WHVUZkg5a1dVb2Q0T0Y1QWh4b1NXc21leEl5L1ZSQU8yRjlKa05HSFNrcmRKU1paMEVGVCtHbDlCUlRIamRRbmF5M2hEVmhBOG9mSURLSjZpR29uQkVPeFBTVy9mZXc3eUVzYUI3eXNnaHdxYXpQREdoUTVQRkxVbzY2M2dycEVYc3NtWkNId3VHdVhVRHRpZ1BOVVVzVWNEUFdoVFNDZDRiQ3JDeVc1R3BvVURhU05kbWJJallnZ3NzaG5nekY5dXRHbG8zdk5XQSsydkFyN0dOUWpsR05iZ1lmNjRNYzErU1lWRjduS2x2ejRaSFZISGYzL0RsU3g4VzR0dXREaktCa0xTQUhyRHBIMmt6WDc4VWxHSzRiaGdvWnZYdEM3N3FYdzh3bXRZMklBWlVLWS9VQTFvbCtjamYvc012cXQ2UHhDVithcmpmcFhTY2hHQkJ6RkdKR3E2UHNKdURPUkNsaSt0MFdhZXdDemdROWd0aVdoRVZtcjNHRmVzSERHWFVkb3k1cXVXbVIxcG9QUjNNaVQycWpvY0lrbDQxbFprVi9kc1drZGFNNWJKZ3U2YkJwVzRaWHNFZjRxbjRVVENab3QyZ2dLbkZLOXlaZytmK3VsWVdTUXJNQlFpQ3Uxd0o5aEtHb2pjRUpJYmtzNUtZTkVUZFF1OElHak5lMndCUi8zS1huSTkxQ2RodFFXc1V6b1R6WlJIczA4Y0xQbnk0am9yNFplT2lTQ215T2g0S2YwZDZwQTdjRFJOMlFIZmoyRnRXK3N3RjN0KzRGb3Rzbk5Za1Q5MnBmY0Q5cHFCN2Zockd4aGJaRjdna1F5a0ZNTFVaTmI2cUlwNFkyTWtWTFY4dGpoYkFvSnd4QUg4dVI1UGo2N2tOWC84eFBqdDVMUFRKZnRiTHZtNUNmRnhQdDZQZ0doZFVvVnMxLzN5am5MSkdKNkc5UTZHRG1uOWlKd1cxR1EyTFRNaHR3Y1lxUldOWUpRN0QyUlFLUEFjYUMyWmJzK0dBOVFaR2s3b3NSRVFaVHF5SWQwTTZNbHkveS9oQ1NESWlxUkNUbm5XbUIrQzFGNTRXampQVjlMYmZ2YW85VkxsQWthaUtIUkZteEY5Z3ZBTXpCVFJ6eXhQc3l5SUZ2YzE4TDJjbWNIdzhiRTZqelZybFdkSktQYU8yWW9mOU1mWHoxd0lUUW1aLzZBdlVqSGNhTDYyWXZzK3hhcGhkSWhPTUlwL29janVPOFZKcFJKOFcydlBUWlJaZlJxN0NjcEJ6SUFUSTRHeG9WV2xFOE9nYWkzVENVY2dwQndnL0EzbWxaNmoxN3FOa2NYcnhDSGgva0hqRUltb3huS2tKY280bjlLRW1TOFVvM2lyREx1UzUzbUFkUkpVQ0p6VndpSng4cFJ4VkliSkRtUE9Odk9uSzJCOUM3MkgvdlNsSG9pb1I1VmdrNUFpZnVtWEUwaEF5RktKVy9iMytuUk5mK2VLVi9Yd1haNWZma3Nvd05vYXN5UXFrSWFJSlNVaVl1eE5JdE1xWkMzTVRXT3VvdnhTMEQ1RmhWeFhORkVZdTJmL2RSdThvbFlZVzBCLys4RDErOTd1dnNLN0x5TEduQ0Z4eThvVU5kQmlUaThNai9QeHk0UFppd3l1L0hRVGptWEpKTFRPSjF0NEdZQmR3ekgxdnpwOTgzQU1BRzByOWp6OTh3VzkvL1hHMDA1MUpYZHJvaHkzNDhSL0t1SzlUUG9tOEFMbkNoQkhkR3RudlVpQjZ5OUVPV0UvQ3RLNG9vak1FaWhESWlIZU1GZGd1RkVUYnN1SnBpM2pPRWNzRzV0aHJnaVY2ajQ0bFZmcXdnRzNOd0c2QStON2VIVFRNaUdQUHRqamxqNWNyaGpMLzl0ZWZTQ2Vjd215YmJLWjFSaEdCY2lCZ1JZUjdFSXFFVnhVNVpZMTV3TGJFMFI0SFJOWkdYQmJFSEtqTVBxYUJpNzdtaFBYS2E0WWNCR3JTa05NNnhocUdVK0hTK3lPQUR0b00yK1U3Z1VodU5ibnMyWjR1ZVA1d3dZZFB6TGVIckwrbDRKbEcxckUrNXB4N2orNlpFNlNEVXJaWEY4UU1xL2VLU3BVMkJKWThLcDFqVWswMlFQbktvUHdnMGREYWFraVFzczk1NEZac3dDZ1lYUTI0SFFkcWJTZVA1VVJ0NnFCWElFWjUzYW44a25MMWV0WXBLcC94OXZZRktZV2h6Rk1hYmpBTkJqbzhMaGtTMitZOEVoYlRoaERKQ2JBMkEvWTJaS3NzWm8vVzBSZ3hOQWl6blZxTSt6OUM1UEVxY3VSMU5iK3VLZEdzc21zakZ2OTk3MEMwUUZtdUVDNU04eDZ1NkpQYnlYRWZGSVQzRUwwVnVhWjRULzlMY3FwSWxKdGh2QzlyOXU0V0tuV21tUjRPNC9kZVgzZGNybGM2TlRHZ2xFandvY1dRbmhOMUh3TDJ0R0RUNUtreHdxTWdhR1FYUXdpVEJodHV3SGwrdVhkR0pNektrTVBjaWpzaU1Vbll0aXBMMDhTbjNocmwwdmx3VDl1TE9ZVXBBVU0vRS9ZOUlBZjZicHhPc0hWQlFWZWtUSU1rTHh2eCtSVVNoN0VRMk5ENFhPNlVCMFg3T2t5ZEVEcjRYb285Sjk0bklUcnpObENmRkZGWHdWckVHaVBacFZLYVZLWGd3SWJFQlAvYjN2QVUyS2NZUTU2OWV6MmlJaUVqb2xSRFI0RlZodVpieUY2UnZBN3dlZVd3ckltM2w4UWFMVGZSc1ZaNXJrMlFqdDF4ZUEyeUlyMGpWcVQwTUN5b2dvTU5tb2lFL1ExWXIwQW85TUpTVmdDcmdzOWtpeEQzRzZ3RTlPZ1Y4YTdwbCtSTVFYU3FtRHZpSWNzWkljTmtnWWVnS3M0bUZMS1FpRzdYdVlqdUwrd2xYR0ZZQThQV1J3bjQvQ0l4N1dBbGJQWDQ4bElBL0lLOGZFSXRuNUVYNERkZmZ4d3RUaVVrRlVnZFkzUCsrUDBOdFRLczl1Vnp4WDZZODVLSFlSbnozQklUcHhCamdwQnNzQjhVMXNVNjF0ZUlQOE9DNDBOQnZMeGlpUjlKVENOYXRlKy8yL0g3My84TnNsVG1tb0ZhTXZONVF5RVJWYWthMnptdjROSDBVMlI4Z2RrWUlYaXBYNVZ5amVGQ1ZZTS9QU1hrRkhHNXhBRzRnN1FnWVVFTEhiMnNuTFcxNGJLeExubHNxNTVodHpvOCtZK1hLNDZ2RDlUYkRhZ3V3eml2MTIzMG02ZW5QRHowTFdkZzFVUWZEb0U4UTRISTRnWlMxK3VwblNabU1uNzFlZ0NJTEU3cndSR2gxdEhleWZYenZISU8xa3ZHNVpxcFhOYUlzRVQxQWkveVJxbm1iS1F6TGtCdUF5OEF5Z212OGxaaHM3Y3pmV0JoM3FmNEVWaUI5Zm1LSEZma05aMXorMFNnT2xGK3BYNFMxbElCMWd5OUZCclUxV0E3ODhUOEhnMnovVmFHRVdlTmk2NjN6aFk1alhVWEtzNGNlUmZNbEVIYk9wNGppN3MydG9xSEkzSnNNNldwR3dRaEtFOE01NU5nTFVGVis1U09xSlpDNStoT2FZUjk3ZVJ3cFhIOUlEa1NZYUtzbEk4Zzd3eFltbzFVMmUwQXRxeHk3akxEODBJOGRvT2ZOcjhxeFAyWTRDMHBzeDRwT3gvR1pIck1PWThpc3dESlpsME9laFk1S2k0Ymc4Sy96dFhqbDVJamxYUnZPYUpYSXpKWm02blhadVJUTDVIT1Z6ZXhMcU1QWEFORk90MERiakhPWXJ4U1IxU3c5UnV1SzFrbEF6YTg3UUhyeHFLUzY3VWhLNkphdzhjSEl6UUNZa1lMSjlLaGNDNDUxMXB5SmF1SVJHVVJvWEVPZStRWTdjWnJWV3RLTTk1aEUydFlNTnpFb2dobWlKa1hTRzJGQlRvTDU1Nzl5ZmNhZkMzTjFCZ0gzZGQxWEJFN25URENvamNjeDRHMEVFVE11aUlLZ3RBdU5XRmxDN1FUdExDRVRSWDdPakltVmkyUnU2cGExa1NhM3F6akVJWjRaTWlKQ25oUTQrMStHdUlVQTVlRkQ5V0tjb0xCMEVxQzlDK3FSUmprZjJzU0JCL3JMR2w5TW12aktEYUtuWHIzNFprNUJnbkt3bHpZbVdmUSt4YnJVWERYUUM2aVYxUndEcmMzS3VFOUFkc1NIS2QySWJrREZXb0RkcmJDYUhDNWNUYXdKMzdKQ2N1RmZaRkt0ZkhvYkQ5akRsMDh2NXFoWmdIM3NlRDFyTDJMeUNiQ2ZqbVFMeG1mbmcyMUdUN2ZEZFZJK1VxMnNZNllNSlQvNWNNTlAvMEV3SDVBc1JzeUw0djQ3UlVmV2g0cnBmU0N6OS9mV1lCU1NBNXk5STU3clNnMUtJMlFzQWIxM00vSXp4aXZvNWluN1ZwdDJPdUJmQlNrRmZoNFdmRGx3d3FNTVN5eXdzc1Ezci8vN2p1R0lKZnVTYWlVRFZicHFWZStGMEdQNFJkVVdDUXRxc3d6TkNnWHJGQ1dVenpHRHZVd1lyMXl2dEdlRUs5Q0ZBc1hVUXN5ZDJzclA1TzJDM0l3SURhMWxGU0VKNkR2ckp0WTY0cit0cUliSXlKQWdNbERpMnRHekVuZENqTzRHUmF5YThRVXFiamx5VDdXVldtZVRXMHFPcGJNTU4wV0V2cWkvUFhDZVZCN3FIcW9FejNrSlpKdTk3SzZzY09DSm5sR0d4QXVEWEh2V0s5WFNBTEE5QjgvY3NSMnZYamRXUFJpZUtXT3ZKaWlrTTg3Y1I3TUlFRUt2VmVuU3J2REd0dk9iUHp1RkRabU1aQ1VuanpMQVo4WllDWE9Hek94cy9tOWNwdy9mdndhT2E5NFhqUGl5TjhWNzlQZUcrc2NpaFVzY1huSGhpWWg0VGsxT2lVRW1scndkRmx3cXpmQUpCejlDRTZocXNJcEZ1Ykd6amxKZ2ZqMUthSzA0a1dUeXlXeHl3YVJrYzZUNDVQbFJVSzFMVUlkZVkrWGlZaFRsMDNVWjk4Zm5WME1PZGxwVGlQbVY2WHNpV1ZOUjZXcTdiQ1R2VDdIQlEwSHoxWDF5Tk1HY0c4ZE9YblVCRUZqb1JialRQaHRFbFBGT2xKbS9aNUk0T1VXQmVtZzRWTVE4UG5sRForR0lYcEZLSURWSGR0cWVMbURMSVByd3BSTkE3SVkycVlWWktJZ0JwcTNDUjVDd1p2T1lRa0JzU21lMmpjQWhWNjRZdVBKT3FNaXJPbG15a1lkTmZNSTg3K3pPdDVmY2txb3plUzB3Z0dLOU9pby9aU2FscUtIZ3hBMUdXL0pjUW1JVGQvUVN6emwxbFdBcWcrVXBrSS9qd2Fkb2x1QndFSjVoRHVWcjg1MVIyWGZJL3RMTFE0UDhmbktJb1VJaGdhSXg4eFdBaDNlUy9wbTdPTU5sNHBvWWNBOHJtQTR2SVVnUzdZNmZ5czl4RDdZZjlaTFFEMkF2TElTZVUzMGNrcUZjeTl4c1hvWWcweWFad25TNGNjY1pvVXVwTkQ1OGM1NzZoUkVyNjlzNDRBdEtCbllsbzY5R3NxZ3QxVGJsMUdBQkRJOXlYcnpiZWhodUNpTDdINFRUajM2RU41TlNJWXBzOG9aWVhMaGw2WjJKQU5XcXpETXYrbXMvcHdHNE8ydFk2OFZXN1poU0RXMTRsUjh4dGRiUTAvUEZDaTMrNERlYkZiSlE3MjM0YUZVeHhWbUJXNFBaN2lKU0NzMkdGSm9xR3FYdXBkajlFVmZKSUR1cmNJVVJVaDhVT3kzaHZMU1lIYm5HSmVUY05lN2RRbDRCZHRZckRFM1JPVnBVaXhLdFZSenBhVitXTVJONGVBTmVGNkYyVjhidXlJVzVlcDdnSUUvUVhJK2pncHlhdndRQVVINEljWUd1M2FFM2hEdU4rQkRHaW1nSm1tWkJqYWxXUGJ5TXFNdnA5VUZGYzkwV1pySTBLUWw1KzhPL2FhSVVrSVlCc1dHWlJOU1FndERPTVRVV1J5cHlFOU9FZGZyaG0wVkV0Y2FzVjRXeE1UVVNFTkVGdVJtN2NMQkQwQzlVZ2JudEtKdlY2NmpWZG5WQVJxeklqVklUcjZ4alZJNFJGSGgzb0JETTdZUDRhaDRPeXdVYlQ0YWNKTjlUOGEyY24rbGNCNUxMVTRRY3E5OXRDTHVVaHJHZWlSMk5xQTUyNk1oUENwajZ3T0E0OUp2SG5vOVZNejI1ZjZHTFY5UWNrRnZRQ2s3WUFIRy9jRHVCdVhJU3FzaTNnQktPNGprS1A1MzRhdTVJWERaTW1wVmdTTWU0VWFYbFRTdDNiVU5JMXpobW1iZitpa3RFUmRWa2dzRlVvZlhXa3pQbk1aY3p1b1NrZ0dRRW44UXpqVEpySzhoc0pKNThGODM2UVZrWkROVUZYOXBWQ0NuSTJabkJ1TjkrM1NHc3lKejlrSzBwcFFCMTMwSHNBVXlUcVpNbVJLTHUxN242aTR2NERxT2poeDN4SFVGQ3NQZGEwMjRIeFg1dnVERDRKRElKSXVTMFRjVFBTb2d0REt4WWF6QllPS3VYK2dZUVpHSXRxTVJhdHNQNjAyZ3ZCRzlLTW83MFFHOXhjMkx3dlhxdE9CZ2pVdkFCYjIvd285SW1ZTWhDeGlHc1htTzk4eDhjcHE3NXVtYytwekdBSm81dmZtREF0YzRhQkY1RzJOT0pHRWxkYk0zdThFMzFOTTFJNlpWMm1jR3RoR1o5OU5uUGI4Y21xSkx4eVRmN3oybzJwV0VtNlp3M1B1Yy9OR1NHSU1Db2tWVXN2WHcwaUhDQXVSWndjTmNoTkNUeW5ZTDNhMVg1aGhid1paRnc2ZWtSS3NFa05sdmdHbEJIeWtNTUpjUHp4dktTalM0VWhRdVYrUW5KZTJYekp3RnM2RTZaS1RVZ2RYYlVKditoakFVOWdJV3VWaGw1Q0F1cTE4YjFxbndZMk8xS1pJUTVONzRyQVlIMkZXZHdPZ2Zyc2V3Qk1iMUZnQmZmZzc0ZmR6eDRVUEhSVEc0VnRnR1p0WmdwRFpEcTRRalZYWjZoTzI2Q1BEbE5ZZ0drTkdEdlRNRnZWZW9nS3JqeXhmZ3g4OFZ2MGtWcTZnRDMyNEhmdm41WjdScTJMdmhYa0FZU0ZyRldsakU5RDVxQkk0RnhhcXZJenNaWXZOUU1TS3JYVmdjZVFEN0JnQ05lWHA3QS9CQlphZHZDSDBEbGdWdElCbG1NZ2tremI5dkt2WDlLMkxUTGdHcEZaSHRrejQyUEYrYy9NR0xtZ09OUkY0ckFGMUtHOVhEeEhrK2dWUDA5bmlDWUdJTEZkZk1raENxaVZkZHlpVUQ2eWJHdVpRUkF3ZzRnMGh1N0J6NGZrbEV5cE1zbWpBcGhKMWxUdWpKQzh5UWdad1cwZlUxcFAwakVKamlDcmtoZGhJTGRTTWhFRG94SHV3d011Nk43MVY1NTlDYTU1Q1ozbHQxMlNnMksvTTJSQWtsM0dxWVBjdjNndVk4Q042d3kwTEwwcEJpSGV2K0xYYXNnZDBKdDNMRDlla0RQdWFQNm5sK3pJQlA0VS92T0JvVnRxRVBCYmFrSzBMZWgvQmZVeEpySStZTmhvd1B6ODk0ZTN2MWlHQXo4bC83dktaTTFMNHNnVHVoNktheWNXZUN5bmtpYXhORjhZTGtQQmg1NGVkU0lEb2IwVEhGOVIwOEtxUmozbThBb3crZ0FjTno1ZVFLbVFHWGdMVHdjejJTSmJJT3c2c0l6S2FlbkFlY0NvWlZkRldEd2w4WnJWVWFHSnJiZ280Y0c0N0M5cnNkQnRkL2R1ZXpZMEZFOHZzcHJXTXREWDFWalZNMWxFd0NxTkkySURRUjczY3ZYdE1ZdzZ6NERFY3ZUNmxnaFdyekthU0FJemFBTlliTWxXc25lMW53TmZ2K2NKVDQwSU9ITFBsWVN1TVlkV0RMRndRN2lDSFFUUkZrVm9xSSs5NE5KTGZ4SWtTUDZsSkZScHB3OVFFbjVXSG5TWmhGaGs3NDBsamMyWXk0OEswQkpuMlRaSlZyN2FpWE4rRjVXeDAwb3BrUXVsVDRVdmZxWGd4UzBNUXJ6S0tXbVgwQnRoQmd4WmwyeGlLcWpXRnZMVklmNUtXMVVlQVMyb1FVdG16b2hjSzh1NDhueTZlUlR0Vk1EOCtZcGNJZTVqMkFXOVRFdWhGRzhQd21EN0hiNHRCOTFvSVFoSURTS1lpT1JrSVlWN09PZTYraXR4SkhOWENmZU1DNlh1V2dudWxYcmVCZVZPQldEbWVvQzZvOFhTQmF3M0ozQXczQXJMQlVHWG8xS25tdGRjODVYMnJENzM4NjhPZjlnRjJ2aUREczk1Mkx1Qk9xOHI0SDNLck9IUk5DYTJqSXlGUmJCQUhLOFB3andNM0tQSlJodndOdGovajRkS0RlS3U1UHpXbjhmdmx5UjdHQ2UydU1OM1lKZjVpM0V6MWZhTHlsSEJpMjhKeWlvU3Z5a1pGUlEwTlBnZmx1RXo1M1VMNXdOZldWWDJDMURxTWhIb2J3MUJHU2ROblFnaEU5WlZSa1dzUVNLTlF1bVlDbklZNjF3OUlQUW1lbU1kK0w1bEY3RlNhTHV2TmVlMGJ2M2xpUHNFYWtMbXBCOVpSN1VEazRvSTRFcjJvQUxobG1VV1JiUERjUWtEYXVNOG93UVdpNjQwU2pnRkovUTA4SmFCZkExZ2xjaEpYSWJpR0xGcHBLWnpwZkJ1QU9HOFpKbEJDUjhndWluanloU0FZaWpLa2dxVDgwM1ZvTk5OZ0t0WldaaFBiUmNCT0wydjB1RkRaR3Vid1ZaOWE5cUpOQmdDQ1doVStRV05Vdk10VXhKODBPa2Z0MEhQdU51MjBaclhYOHJNWDMxZGRvWGRqWHNtS1BWQjlvTnpyOGtNYWR2ZXBCQ3ZxOThBOUNlS3VSUnJNZ1BsRk5YcmQ3ZDgzNUNORE53YmxpRHBOWUkwdXBSd0ZlSlpQZ24rbkY2YUFIdi82eVpIbmRFYnlrSEtEdVNJVnlMR1VRcDBUNUdZUGJCUFR1VGtDeVRSZE5QaFNDQjZaaVlkdGkxSnFPak5JMVUydWpaRXFmbGQ3QnprQW1ZVnk3WVZXNmo4KzlXeC83N240RVBHTnh1RlZ6UXlrcVBlMjV5emtQZmNybDhKZzkwUkdaQ3NERVdGOEVQYXRqK3VEdmtRZkN1eDRZSDJudFkxRUhHaktqQnNZeElkUVhsZm5SK2l6UW0rZWY4NmpYTkNQNmJ1UUZDUkdBM255VHRRSzJPUXBNek5BcWkraHkxQmZqUTdzRmxmYlJLemJyYUh2R25qcXRQcmQ4elFjMlZnQmFMRTVlajBUTzYwckkxdDJrMEp0Sk1Eb3dKQVc3RU1IQ3VhQWc4U0ZxcDFCblQrM01vWWdhSFYyVk5TMW1ySWw5eHJSMm9ubzlWKzk0YlhzbDkzWXpsQXFvZ3BwanBNWGM3dzI3Y28xeTF0QzZCajhTNHpxSTFDT0paamJGakdwTkcwZEZkdGE4UmFJclh6eGtZUzE0T3pvUWJYQjU1NlZKSnpEVW5TWGNjUFkwZUhVeE9qR2t2d1VRTkNjeGxkUlhhQU5IL1B6YThQWjJ3OU1GRWdZQlJtQVpGOFRkaUtZWEZ5RkFoU2swNUdISWNHSXR4ZjFnblFVSmh4TGUxSEwwNWFYaDlWV0M4cWpZaHlBZlNEbG94VEdQOWFLRFFrMjFGQ1l2Sk1tQ3BWVWM3UTdqa3FLU2llcjVGcll4S3U4TkJobVhOekhLRlpnSnk5bFdJSkEwb2ZmRlc3eUFKckFkWWE5SC9YU3lWdlZzN2lsMnJNS0xydWlobk5idjdybEM3anNsd1VOQTNGVEFLR2hqbEk1ZXFsY0RyeHZRbW96VUpLalNEc2RKWDBKblJNR0JPcnJXZnBOZ2xsV3dKU0ViYmFLNmpUeHZYN0NFd1liaEFpR0VJSzhsY2Mxamc2RkNoMlNvV01EYWJHRzBJZkMxV1V4VjdEQXE4UW9TQVRXQkl4MUFkVVVhK1YxRXhTdllvL3Y1M25EMDZIMjd5RUM5SHpnZzdBZ0p1N1Jkc1dTcVhhZitUSFFjUG56NEFBQzRQajBOTHpPbEJUb1U5V0xCbmZVaUNPRlQvMjUwcUI3eGVrdVlkeUZNbmhUQzlmcUUyKzJtMWliQ3lSNzNndXFLZy9OZzRqY3Z4V0NFODBOY21jWUxTVVdNMGhESXVyNk9JSVVlWW5kR3l2ak8zSmhGYlJEd1N3WWp2OG56V1NhR09OWHE2SEZ0S3NNL2ZhQzFwamtWaTZTaXFwNzM0L25HVCtnWnNNcnJUV2dEcnQwV01RSmN5ZWpoQ3ZQRFlzWkt5NFNoOEVhamxDWmhuc1d3NW43M1EzckJyTS9LZWNtdTkvblYyYk5kM1psekloOEFwWFFzUzVJQmFtaW04L2M0L2gyVEcybFM3byt2NlBEclNWWExPRFNuMlhXRHhUL3EvWSt1WHp4RlExR0VHQWhNUldPTXFiWGFERkp0bUJNM0hkUnVCUG94YXpqMml2dCtRem5xV09jNWhJaDFZVTloakZSR1dtNE1OZWRaT2Rpc2NjWTVVN1QrMVhjWElBcENRRGtBUTdrbjJHVmhUbk5ZRS9ES2M1UHoyb2ZDUzNvWWJyYW9LazdqQ3BBd2srZHNETG4xaXJtaWVwb2NzN0xJTnlIUGRDM1M0Y1RzSWtVcGM4SkRNSDZmNDg3Y2NxZmk3WVV0Y1lHenJaWVZhTU1ZYWdIcTZBSE5pSlhkazhTNENHTTgxL1hLZVdCdHZ3cjRHbTVsUHRzZDVBdGVvc0FuS2xqVnI5bFhwYnVlcjdtbGJLVmpENFlXbytlczhqN1dwNWpkS3ZhY3ZBVlAyTlpvQTFRa3FJaUo4d3ZmRFBMKzBHWHNHRnBuNkh3dkhkWXFVOW1WUXFteHJoLzMzWlFXc0lGaGZmOXNEaFc1Ry9mWEdnRTdxRUR2bFhtL1pRWDYvV1JLQjY2VHMyVWMwd1cxM0ZVVGN3QjlRNFlSdnJYSEliUkxZWFQ0dUFQYnNxTjFCY3pxRGd2UUhHeFUwckNIM21qVVdWbWZ3Z1dHZllZcExicE5yalNUV29ncXpHZ2dCQStsQzJkOFcyQ2RUR1hLVXVuYmQxZ21mU2NTQzluU1FxYmxPRGM3d1NGaVF0UmV5QnRmZXhJT3VXNHBlRjV0QlNBeW1LWWl4NzRvelJYT2NLWHZVYVk4clNiU2IwWVdvKzhOb2R6dDBPQzdOeFJNMkhZbWVNb21STVZpS0JJUng5NXhPMmdJN2tmSFh1akZ2akhWcGIwUUtWTnFkZlp6Q3ZmcHVjb3o1a1RkNmFQdllNajFjdGtVTWc3eUpaeFFaTWl5TmhZYzEvRGh4bFJBRGlMdDZFbnpWcHpSc2J2M0ZCMUQvZW41R2NmQklybUEyZU8rcEZWcnZJNW5POXFPWmtZbnhBeXRSZUNiclBZNG9hd2xLUG94dlR4NWxoTHFKbENZb0NpdnZqZGVnNVQ1d25SZm1vQVdabFBCUmFISXpYYXp4akdvRE1WN0gvemdMcDl0ZnVad3B1eEN3RWkzVVZaTXBTWVpNTVd2SW15Y3JIdnB5TFhMMjJ5NnYwclJ2V1dnTW1RZGw0SlFWNlN0NFRDeXQrMDE0bWtWbm45WGdGNWhiQnZ5MzB0T3VXeTkrbDJGMHJxeDBFMDgrb2VpbkEvcENZRlBkYS83YWowaXVseWdnajVIVjBJLzF5ODRHNXBEcm5MazVXZ0c2UTZtcEp6SzJ2UmQxenVRTTVnWk9WbGlnaWFQREtaRmtLN1JkWVhvYStsWVdEZW1VbHRCcmViWHo1ZHJRZ3d6Ujd4a1Z0aW1SRzVXV2tpeVJtcWw1V3dLeWNxclprR2xhRzlVWGR4RFpMSE9yU0JlbGtFNEFCZzkxU1pMclFia3BTSmR4amJ6amU3RUNOQ2hlMmhFNVpPSEpDTkNGbDlpcFp5SGh3N3VIYTgyTHBYdEtrY0JJS1dZTXB3N3VUSGNwN1k1ZWJNZEtBaFloVnVmNVJXcERtcm1DVnZqWnNHS21DSGp4enlEYWpacFlvNFNKYnpnbnVhaDg0VUhQNWJXZDNYTEQ1eEVycHJ4aFJoT3JWSXFTM3ZkZ1d0dncrc05EYkFTUmxIVlpRSDJIdEh2RWNjT05KMExhdE5MQ3JraUJMUkIwRklITWwwN0t1ckI4YkZoblRjYURSWlF2eFMwYnpqSTJ1cTR2MVRpZ3JmdXZmTkFnT1N1OEFrQTdJd01yU3VRUWg1akFLZC9qUkQ2eVRSeVZUNGFaMU1yaXB5dVdvay8zNnlnM0FJVzdPalIwQ0VXckZhWUI3WW5KQzRUSFpFQ3JDMElXQlJwdkxKRHZCMHo5SGEyT1NoRWlYTmRHRVVLN1FCU2dnVlNBeU5FU1BUUDJlenVPakxrek41bDBmWDJ4NHNrbkJSSDFDbzMzL0E5T0c4VlEvKzBXTGkzdWxKaUxjSU84cFVIQzRqTDdOV0ZnK3JjMEtjZzR3bVVUb0FWcGlOTUZqSWlGWjQ4eDJwdFBIOFRXMWNwbkFkQ0dJT0szUWhuL0hhWGdnQlE3aG5BOUVCS0I5NlVrdE9PUmc0QklWM2tqWXJSTGNLUENQTEgzKzg3UFVzZHk3S29wU3l6WWpwbDNFZXZyd1pWM205YTAvZ2JCdWFHSWFTVlVUNDdWRndhNXVhVzRGMVhZT2NpeFpvdXNHNXVXRzBoNHcxbENuZGZOUW43SG5DNXNsdEJCYlRpekE5c2hkUTlLSjdNYU5GUmZaNjZsTU00RkxtYWduSCtMUVMrbXJFS09xbG13UTRuOEdDRUpHY29BNHQ5M3dXeTAxMEJTVnU3SXEvU1FiVlVZRGZrSmNoZ29LemZ5MVJVOG1ncG5qZ1RoSFNPQkpLSzVRMGZQenlOcU4yeXJaU0hGYml1RTA5L3IyVVUzMTVBWnJmSkNCeGNmcHlVb3N0RlZEcVdwUUpMVG02d3RsNjA5Z3l0R3RQQ2pYRGxrQkhWazhFUndPd00ydEs5R0hjZXdkTS9QVUNSeFFXb2hYQyt6VEVWSktuMFdoalJjamJhSVN0RUlTMUREWUdwTjZibm83RDFLVGFhTUZZd2k4bFpBM0dYeDk1b1dPZlpoM2xleUZDbzJ5WVByZERPaUpaYXNZUTgzcnVnbXoyZkxqQkxBSlA4ZmxadmdmS1o2Y2JwRW1FRnd6cm5BWTVVTXVYd0JheE56Q0s1cmxKK0tWYTJKTWxpN09OOHpIOVBGYXIyb3B6VXg2bGNWQUp1ZDFwQVZUbWhOcTdIYStSbmVYRjRsMVFSR3QycWtBT3d3Rk05ak1talZZMm5UdWhrOTNBWkE1Tzg3eWtNQzdmVWpwb0I4NURIeEFOdWtiMi9uUE9vWE03VUdiZURWSFFoR0xIR1M4YlR3akVxY3JnYVR1eDNaa0xqeTJpMXN5SitLSE1NWkxxalVBRjVMazAzZmxQT0ZjRlU0VjVtVGpRdGpzNEV5UHBEUlZSZi9yYlFtL3VZQW40QnNEWkRjWUlVMDI0c3d4ODc3K1NLdzYxcndQQnk3S2c5b1ExMk9wQUZyRFlFd2dob2JTOUFyT2p0RGIxZk5mYk1MM2NzNHF4ZXdLTWh5SnVDQzFKK3hUZHpNSVpmbFdjMmJHelBpb0FoOHB5VEUxU3lXZk5jQ01BaXFqbEVFMnFlMWtGM3o1c3ZvbXFaWFAvaTBmY1YxS2JueEdGTG1IQmtVZDRGRndiWFo5SG5EbUp5aDRyZ1RIQTAzTWtmeHVMQWJqYjd1cXM4QmFPaXNFNEJkaFFhekZVaCtMSWJqdElHa2RGUit4RDZ0MkxZTllmSEVFQThEN01SdlA2RUt3M0kxOEZQeTdhZFNDVnQxcEF1UlB2VGJHSGZpNVI1ZGdZMUdrckp6YkY3MlpIcXBBZ1RHSlhhQ0NzaUltb1ZLRTBIcXRvR1crdWtKYzRMKy9uWEZUcTBQZ3puSTRXc3RyMERVYmxQUDRKaFdZbFV0MmhOemFOSitRRHhtTXFxY0h3RXh0VzlEN2tOVDRyN05DOHlNRjFQQkFyN3NSOTNPVUlkcEx1b281SzhvdzdqcHpVcU9ad1ZJOUw0bnlrS20xb1k4OU9GTWxmcU12VkZkbG52S1NkbER1YzlkU2xsOFpqZjlnUFhiUjBnVjE5OVhBQkw2QlBEblYxU3J3ZnNJanl5UkVnajgwYkdkR3I3cTN3eHlReUxZejRWWkVlS0ZBSjhLb2l6SGtJOWJEQlB2V25kejZyQWVjaEpETUdONi9INTRpM0pEVUk5Y1huaGhjVmhRaGZIQmNQQVhnTFJSWE9NZ21yVnpLbXl0UGxsNWVtRDg5eVYrclJ6SjRMcUtnSVdoRmpFaHo2OE9VMEFmL1FmZm5oNk1sMEtEUXkxbXJncDVHVjRYaXF3RnpIRWpIeTlNSitJZ0xvQTFvTW9FNWxyUW1KRXdIckFsZ09TZ3pZczZLRXF0NjQ4ZXpLWUJWZ0ZyR1Vwa2dDTGdMWEE5cWNlK2REV0JCVFA3Mm8vaVhOYmdoS0NxUzBOeXpVQ29FSXZvREozT1RuejEvek9uK1poNGdtelFqZ2VvYVRDWStTQm1QYTJSUlN6eVRLcTNzVTZVT0E0cGpVUUh6bldqbmJLb0ZsUEtMVWc1Sm5vamdUZkVibEhRa1BqSmh3Q2pPZU92ZVBlQXhhY1dSQkY2UWlHSGtPSFY3YnZkOE85MHJHdE5lRFcxTUtDeW5Vd2EyMDRCK0JoUjBVZEZmd05lZDNJRUlWS0V5ZDJ0Ui9xaUlHODlUMGdWNkFpWVkwTmg2bi9YTXhzQ1pvdkduaXVCZllZY1RsNFcweExkTFFOYkVXazBVWnJOaFErNDNFd2ZJMER3SUtJUENCblc1TmxySkJUUjVNQm9wQ0M5a2VJVG5LanRoMkhTMWFob3FNS1NoS3RSQlE3TVJ6MEtDSmJkRWVKNHhxbk5HYzZsZ3lHQ1JqQzJyUldXNHRVWFAzc2JXWkZ3OFRIcjM0OFM2d3FSb3dTUm9acWxUZ01VeHJveE5DZWI0anlDRU9zeXBuTDdlL21MWGxVNW9LN2JFcWhEZUZERnI5cVVCVTZsVXJybk1zMkRNMlp2cXVWVWF4Ym04RGo2bUlRY0FpTmxhWVI3RjBlME0wSUZ1VEFEaHd6bGdZd0loUkh4WDRheEVCbXBxNktxNU1RU2JxUnVqTUFwUlVWa1oxcGtJRmxEVWdwczdpeVU1SEdUamwzbHYyblJBNzNiVnc1cGdvdHJFdkNsclpSVjdGSWpzQ2dOZFg0SmttK25QaWJMcU9Ldm81blNEQkdIbEpFaXBNcXVaWTI4QW1FWUlzRUZURWZSY1dBbkNNejlUZHJER281WEprelJ4Mjg1VTc5OTZLOGlJQzg1V2FydzBqYlllTDhDQUpJOHA3eGN4Mk9qTUVad0xXQkh3QThSZURsWHZBaGQ5enZOUG92SzdEVWpMSXp3aHBmS3NJSGtSWDFpT2FzZzk0VzVqSzJsSW9lYWFDMFZrZ2Y2N0hRNElXRjBRSWFWSFZ0TkZSN1UvU1kra0dIM3ovbFFoREVzWnpDVmpsT2dWQzIrbHh4K3VnL2ZVaE9SRU9JSXZIeFZNcFUwbEJIbUpVeVhybUo4WUN4MzVVdUMwb3ptWFd0MVZqSEJ6d1VsRmlrdGk3cXZWV2Zxd2tUV1BsdWhaQ29oTjBHNEp3eUg3UVN1NXVIbEVDYlQ3b0lMUXpnT2JaVithRkVSQ1R2TzFUTVBCbUkrOTQ4SU1MY20xaVNCRUNGdlJEaWRiczQ2ZnRzbFFvSklUZmFvTXRLSTJwTGdoUmxTS1BLNU5RQzBLQjFaMCtMWVhxcStqTUMwVlVKeEtHb2dFMnZ6SE1xcGZGOVJHUklIRHk4OWtuc1Q1N0REYXFRYlhtRSs4cFJhTWdjVXZOclZJNVk4SnF4S1dmWTBjdzhqRyt0d1lRK242cUNnVEtHMEFqeGVyd0ZwS1dveFU3MUJzcUh5dG9UQzEwUWt4NDlvdjFHbDRMR0JBWW5iMjBkT1loOXJtZmtKUktYQWdkS2RRSVBiMitxaFlyWXFnbmRxczZVaEk2c1ZCQ01GYzhNejNGdS8rNlB3SysvNmZqNGdmM1A3SnRVTkduMmwzb3JTbHd5UVpLUytKSERpZzVvckN0cXFvaVFnb0VZeG1qOHNFQndueExMenNoVUp1RDNyS3BsdHFhSWlHcERzQU5BWmpxZ25TZ2l4QXRnd1o4V01xeXBsR1UwcFNQaldBTFdCdlJNUHpPV0tCSEhNYXU3ZUE1d0FQZUNmcEhYMnlHQUVWWGFXNEdrUGF4VmhHNjhmcjhEcnN4UDBWUmpDc1dLdklmeEJ5clFhb0dnUmFOd0VyaTNMaVhmY1h1MXdVT3dWekNLb2toVkc1REN6THY3RElsQXFDR040c3FrVkZCK0FKL3E0SkNHd1ZSb2o1M2lEa1c5cFlCMXU2QTI4MzFhU3hTa0pqM2lveXRsb05iT09JVW1oV0h0cU1lZE1ra3R1bDBVdWd6VUpLNlprWmZOeEZ3WUdBK0dLTHJwY2tqNTVCMmhYcDF5MXAwRlZTcVhDcXdoTWJBRFhXQXFSKzZOdFNNYTg4c0VLOUkrdXBQdndFWVJIeit2cmNTMDEwRkQxZVZWNHZyUDJmaFpvaFl5UW9NRUcraURsRkZveEFUNS8rWG9EYk5mWFQ5Ky8wTklCclJBMEkxWDYzZ09CYmViMnRMdWhvRlkwZ3RDcUhxR0ZVREZreWlKTVptTDBmcVVuN1hTQWZPUXF0Zk5VaWx3UFB2a0hBMGNGOUhadW9ISG96dU1hM2ZRYjg2cktqREd1Q1R0TjFWbDZ3YzZaRXhnQm5ISThkWW5aNEJTbmx6TVJxVjhndGJ0cFNoSDN4K0FlU0lXbWhUOE1zUURyb3lOb0YvRFFFRmlqbmhaRXRhRk9Nbmp5Q3RTVU9FUmR1Umw5WTJXdkZwVCtmY3cvak5DSGZsNkpRdFBBNzN4VmliT2J2QjJCUldYaE9FcGVVUXJCcWRNTmRTSmtkMGFhcS9Jb0tUdUd2UXVqT3g3bVdRc3VEZkFDTUdZTEF5S3pSdUE1NVVFK0NGbkJYSXE3bThzTGhCNi9KeVNLYmVIVUxwa0trRk9GSE9OU1RpOGNoQjRCUFVvRnNJVGNzUHlXYXBnL2Zya1QvQ0NENW9PTXRoQjVVNEFqa2ZBaCtBcGpranZRVENNa3JHbkkvb3pPT1dtd21ETENCY1RpemxvRVZ2eFBKeW5XQ3FIVVFVVC9GdzZLZHZYeXRjbE5yYTAxWTZ5VTNsT3dCM2l4QjhHZVlWNWhBOGJDbUFMbHFXZ2w0UWFqSW90WittYUNqK3lQQnVsTkJBcnNjaUZlWDhmZEsrUmJGd3MxSkp3bEUyOUpDUXZQT21JSTV5YkVLUXdRdXowZUdCSUN5WjEwOFNvWnZHSjhyMU91OW5oWTZwYzM0QnZURW1FSjhaWDFLaTJzaks5T25tOERoc2JPdDhMTWJFcFpJNGVHUWJWK2EzSW8xNGl3WGo2RHBMcXkxT05EV25MYUFmRGNhb1UwdjA1SEE0Nm9mcmVGYzFKdE1uck1EWU53MlJNVzJ2eVpJektncktNN3czYWkzeS9VOGFweG9GZXZsa2p3TkZob3h1aVNmTjBMNjZLaUY3RmZ5YjNVTis5dkpLVU1yYkxwcWhKZDZLUU8xU01xYjV5NTdwSnlmbkZOVzNZUnI1Wjk3d20xRUladzdtZFZlK3BHU29LY3N4QUY4MnlwL2hrYkF5V1NnUHE0bnRaaFl0ajdhM3JobVhaa0tTc3ZPVTNNRDJ3SlpBUFczR2UyZExlSFFZMEtDVGVCVlErbzZvMHNpOUxIdGZvMFpEYndvTFczUkJXR1hRT0lmSUlUYW9xY3AyempRaERSa1JOek9tbUhIRi9zL0czV2lodjhtS0k2bnBLYVVHV1k3Y21qSlNWMWFaMXJ1aUJ1RDFpeWdSTVdoTmxjSUJxTFF6dDdjRGxTbWE0bXdMblgvcUt3dzZzTWVPeWJpb1VOSTJKdG1takhQY3N2a2RQSnVhb0JJOVVxMXBCZTNHTFhOVElxbzh5UDVlZElrRjJxcUkxYjRIcDdybDFNMTFIcTlYbk9jeU9oQk1NdEhuQkh2VmtpRXdQRnltOERuaE5oK2N5b2pwSHdNNkVBaDY5UUEwVUFhUTVqV0dRWFh6N01VdWRMUTlGYWVzRkEvSVF6bEFEdEVxUFdyaDFLTEVqbzByb1gvMzdFL08yTzZZNTRJM3ZvcFNMWHMxSjFwcUtrUHpyS2paZzhyK2c0ZHpVVmZlR2w2TjVGWFdjYUMvZU1KTk5QTG9aeUtOS1ZBcFV2ZUhGT08zbzBVSC81aUVMR25FWUZIYXkraE9ZUzFvb1pYeVJUWXc2UVNTQ2hBZEZSbzNuRFBtcURVZkZ4d2lvZk1ZdVpjS1R2anRFUzluYk5HN29uUlBSTDBVQlRZaFJMN0M5Um1Fa3RyaFk1Y0t0Q1RGTG9mVHNITUpFUHRKU1pnNWZiWEJsQUo4Y1ZMcE1VOXdieWs0d25oaHVXQmEybVpXbVJ6UUZ3VG9yL2N2UmNGY1ZWWkJmYVdQUml5cEJXTnBtRlpUWEN3ZExBclNwU3ZqbmU0SDFCVWVWSUZhYVpvSG5rRGl1SVRoREdVUHZRUmJ1TWRaZWlxUytqRUhDZU9tQWVWV3JpNFN1M04wajhLYnFKM0llQWk1dVVibHllZU9XTUdKRDY0Wnl2NE51dkpnR0Ixb0tFTmNub042QnZBRzJJMGJ0TjRma1hTZTVWSFdzQzdYTjVSRm16akVvUEVqQkNpdFFRek1za0ZmY2VvWFZBN0UxNXhtRHIzcUpJVW9Ua3ExVW8rSXVEUDh5SW1ZNGlnelZDclRHdW85YnNmRitNSHRWQWl5VjFxamswZkMyeThOdlh1WW5Ubk9RaklpL0FIYkNDMHNoS2sxRTFyUHRlZ0dRUkZ0TElXWTYyOU9hWFhCYlM3REFzSFEzdmxvL1hHRURZTUZnVW1nOFI1UVFCQ1B0clowRVRsRmVFem5BR0dGem5JaG1CZldvVVBBTVhjWkVCcUV1WTNCUjUwZVNsbFBHaTNzcUoyeGhIV0YyTkNGY0ppSWp0dGhHaEN6bk5KSERROVRTTU9Sa1RIdFNXOEdjcFN0Z3Z5bXQ1R0F4Z1lvNmNvM0dDODk0SEcyY1h5dGUrVjJodno2dHVMMGRTS0Y3cURrc3hscXEwQkFjZ25FZVNxQklFYm5jWTdUeWFJT1V5QVlhYWNVNm9yb1o1UWE4UW1QYktpNGpoNzNnUHRKeGRWeGlqVmxLWHRER2hic3loY0RYOUI3cU9GSEpDNUhRK0NXWVZUb3pScjBrWGVFaHR4RDR5c1BmU2M2YXVrQkVBTnljaE5vZG9xYm9ZNlVvcGVFazNTZUJDRE9EamZNUVc2SFU1bk1MUkxSa1dGSnk0OURveVBLemI0ckNIQ3lReTBqSW41NFRudGFFYldVSWtpMWE2MWdjQm5qeGoxZWI2MkVQS1pwb2hLaDhXa2dTQVlBQ3ViN0I5aXRLZldVaGwwRzVFaU1HK3VJNStoRk9qcUZSRU9lS0MxWlNxRGJCUEE1NFVMWis5WGYyejZGZWFDMmRlV2lnVFY0Q3pMQkVFSk0rU1dCM29TUkYwSHVBTmdTZEhGMmhJMm9nYitoWXpDWnBBaVFFcGN3Umc0Zml1ekxVQnVWYlN4ZkVaWmpoUTlCcmo1WlVHVSt1NzJRUmtERW5PbEZ2ZjNzRXdUQ3ZiNWc5S3ViOThpbEk2QWtocmZYQVZnN2w2Yk43YXV5b2h0Q2dtakhuM2tEaUVLWjQreXo2Vk4veHk2dmhLNFh0OXMrM0lmQ1AxbUU3KytQTkpyN0J1clNCYUZSYUhiemozVmo5YkxZTEsxdFJpbmRKdU9EVXg1cmY1QzF1WkhYckVFNUFneFUra1ErRGlacFZvZlVjRkIxQlF1MnNkcTA5RTlCWkxWdTFGcXhTNmo1TG5hRmhLelJNemRmQUpJSElJUklNWnIwU1dBUGtyS2ZjVjFHUzhvQWRsRGo3SVNDakZyMGZOK1JOQW5lZGxiSU5JbUNaeUZVUndpVXZXZ2VKVWJDUUY4L0ZTL1M4bzRXVklXQk5BRXNkY0poVUdSOWRsZTZOSHJ5QVpGaWNWZTBNc0RKYlBRRWNSZnRJT2NCNjc3ZzFJOXlydGJIL215cTJkbE4rRm9hZy96SUtLdmx2NU1pT2laNVFDa2xwRW04RVVPaVYvN0RLcU5kK3Z6bElGTDNDRENDTkZyZkxCWGg3STZtSzlpYTZTNU1NbVl4c1NhcGxBdXZvNkZFRmpha0x0NTNQMnJ3T0tkR3cxM0ZacWNVL1hESlNUcml1L0NGMlBGTWxSMk1vMnV2M3UySEx6TStXbzRpUmtBSGJnSVFsMGh2UFVjeGZTZVFpa0JMeWdCWi9nSUNhcGZpcUZGVEN3TEsvRDVSSkF6TjFEWmN0KzlwRWdOK2ptU0ViOFBIRGh0SUw2aDVaajNMSW1JM0p5ZGNqTnl0c1lZcVdYSm5nYXpRc3lFSklJNjlCendZcndCNWw4QzhCOWN1QmZybmdhY3RvRmxBT0ZnQ1hnMzM5SldRcVU4OXBHN2RBWmlRcXE3OGJvVE1hVVpTZWFGWDZYUVZ0Y216UVQrMXFua3BWQzEvdmxJSEtKY2kva1RMdWpPZzBSdk5NUXdGTE9HcWprZG9tbGdNQzNFM3lxRndYTlhlWDRsZFluOFBLNkUwSVp3SlpFZnJVZ3NNYXltZ0hQVWFFWTAwTnd4NWI4cXk0bnJDQzB4S3NSNWZpbGNleGRMU2RDejlFMXNyYm9oeEFhNGc5b3IwV0FMY0JuMHJhMHlSUlc4Y2t2ZDZBeThydzB2WFMwRlJWR21QRDdlMk90Rnl3NWtwdm9WWVlLcXpPKzJ1Z2xiY1hWcWFYdmFodm1EQmhzanRPeXE5U2FNYWtmSU41VzRFbDVWMVRHUEs0M2dPNFhhTVdnU0FIV3dmVmovSzU2QlBUcUdIMmhBb1ZxRFZXK082RkF1S2NNMU42ZEJ4RnlTYzBKZVFYcUk5WVhyb1pXcVczSHVhOHFOK01mUTIxMFpJckVFVmZTamdEUzlWZVJYTUp2NDhLSUJtOXR0cDRPbmd2TUNaSmhhSUhVdWpNcHd0cDhaZlBOMWxsbGVtT2UyY28vYllncEx0UXlvRGVWM2xxQUVEaGpza2p6VXB6ZW11Nlg3WWpXaTFDZm8zamg1ZWZSQmJIT2s0eVNHcCtjNVh1M0EyUk9YMFJQQ3lUcDNtSms3eERYcmNCZ3VYc0h1RTFVVmVhMFFPdDVRN1BoMmdHb3FDRXJWVWFzME53SmxTRnZYdFZPSy9jaHpnT1JZeFdJUTBqTlNCNEVaNzFCdHNWZzFneWRqTnNUd25SdWFGWms2THFiUmh2RW5UdE9SK1JvWDFXMjZlRktxc0JrU1lUbGI0amlQRW5RQjVHaDNxUFBWNUp4VjVVSU5xbDJDVlVqdEpQM2ptdzN6cHFheWdqek50eDdHeDliRzVuY2g4QWhwZFRsd3NpbVN5S2hLZWNidjdlc2FyQ2d3RmI5anZTOWl3dkNhaWVObUR4VzBmRGZqOWdSa2hUNndmd0p1QWp0c3NJaTV0S01mcDZ5dWdMRmZ4ZUNvV3ZlOU9USnJlcmprZUh0dzR1UzBXNUtiOGZFZ1JMZ0J4V1BGK3UrUGlrL1hjeWhsYUpuc25lcW5YdW5XeGhHTDM3SFlnNVlzM1p3VGxUMm9BSVBLLzd2QmNWUzlxMFJqMnYzb3pnV3pwd2ZXb0NCMkxYekhFWWFWNkJNWGRBb2pmczNRbEFzb3FXYUZ6Z3d2U1J1MVBDSlY4VGtTQVZoTks4TGNyZ0FrdWk3b2hEdm1kQkxhY2hvMkFzRkwzZjcxaVdDNVlqbzYzS3FlL1J1M3lBRHN0bi9IMFZQcXVLZk1rbXc1Vi9JQVN3ZVNveHdHWktSYTNTdDZPNENneVQ3VTVyTUU4NUFSbHlsZU5uaDhGVTAyQ1dCOWFKbHFhVE1YVXY2TXRhenU3aHE0Nm91bGVQUUoxVGpjYjdxZ2lTZGQxUmpRUGpCYWphbDFHR1FVUitmdG9Ra3g0QmVWakNyU2VCUWpXOHZSVWNsV0hQMnczcTJkYWV5QXpYdjJWZUpLNEtiNDZGVnRCYWtaZTJvRm1keWd0SlRCQXIrdWhkbGd3QjRVNmZsNFR0VXJIVHdQWGlCVzBDZVIrUTdTZCszckJRSHlLNk1BcUFDNFdzWWpzRXpCL0l1bWEvdVJjdnhFdEM3a0M5TjNDY05mRFJlTnNTcWoxRzl1MkhvRmFtb1VTbytIZkRXd1ZRMk81UmJkNC9jSDRmTVhmNXlWcGZuTFhLQlYzb3B3anNlTlZZUm9LUndBS1dtSldIVTI1ZEtzR21GNkMwaHRJQkNRaTE0MGlWK2ZRWWNXZWwrbGlZMWhocXI0Y2g1SWhxaGpYSW15b1Z1ZVd6a1BMMzdjUWxUMGZ5UUIyODdBM2RWRFI1MEdzbENRWEpmMnBnMmlHaW9ZTDkvWXhPRktBWDlKQkdHTkxSSkkrQTJ4MkRaN2xaUWlzcmxnOVJWbTVBaUZTZ2laNk50OUtFWUdwVllhRkpET3l6ajkwejFXaEdoaWJ6bkxsQUt5aEVSSzBaWkF3c0NHVWI3R3RxQ1BCOFdTc2FrSE91QllscEpWNEptbWoyOEphQ01Ca1ozU09IbmtXL2xLTG51VUpVY1V3T2FGSUdFbHU4WXFMcEVFMm9iMnBGb3dOY0ZBWFVPbGRmYjY4cytVSnhRMVhoVXBKenlJSEh5NHVuWTRaU3FBM1lDMytIRm1IMW9QY3UrR09GSnVWcFFQZm80UmsrNzRBZmZzVHhOSnQ1N2R2OVZmc2pjaHk5eXB6N3oyd0N5V0JneDk4SjFicXRlRHpDK2YzNC9vb0Z3RFAyKytzNC83WTZ3dzhzbVJBUmo0Y1FySTZoY0Z1elU1MEo2eldldHVoSW13N1Jxazk5aUh3TklRTXBVRWxnOTN1cVpjVjFMWU5CNzhQekZTbDBLZlFHSGxlQnNaaStJbDZGblU2QXpIT0hGeTNHdm1sZW55MVlmYVJRaXQvMTA3cEtubWVZemZGNXZXWDBma1BYM042TFNGRmczRmNLRjErRm0yN295SnRMT2U0WHltU2Y4azRaSW9STjdxY2xYN0RFaFdpY3lkWHIyRXRoa3lIZXUxZUpXek1wMndwSUJvZmthRzh6Y2lmSHlsRmZKa29PalFWZk5kcEhCR3lTRGpBSEc2cTd5YWl2QUl3cHh6ZDFDQ2hhM0JDOUF5SnJEcEFxVW9TY1hJSXNNVmd3TjN5dDhJaEhTQTM3RFlRQ0RsbTZUYkx4YUdpSEl0aXRVYzhSSkY0UEh0UHd4TXdLckFJL3YzV1VvWmdNUjUzS3hnTThEZGdha0ZVWWRWVUIwTExzaURFcEh4QVFVV0JOd0RFVDZjZERsM3lXaW1OWG1OeUF2WFVuS0ZpVGgzTzBzYm01aFMwdXhqWGw1cUJleW5lRVRiWDF3WkxFampiellGL3p5bjE1djNGRDZCUjg2WUxSdDBsZFhFWFJCeFdWUkh5OEJ1Uk00V01BSjZpU1RlaXRGSWEwcHAvczZkOEoySTkzYVFJdXZObzdrandQSGE2RVEyU0xFSkdlTW5MbWJGaHBzMFlCalVBOVE1RXhCRFZoRXlkb1F1MmkrOHQ5YlA1dDZVaGRZVGVJQkNRRmFlZmlXYkhXWkdBMFE4SEIzNzNTb3FhaTBFZmxucFZXWnVpNmRyUjcwNWhHendHM01CQWhGSG5vQkRFb1RHdHdGWjBxenNNYzFYc2ZsZ1h1K3pJOGpkZlhRQy9nU3VIVng0YlhKdlA2S25JcU85eFA3NGlDa2pVc1FBMkl5eGxDdUtPekRvRjN3dkFQaTVpaWVtTjFYNDRRRmVDNU9iRTdVWW5Sc3lmVDJzN0N0TlRoN1NuZGpPbW1RQ01xYldsYWNOYVU2SkV5VnpqT3JUMUFiR0lIV2wybUVCUEpEbHBEVGNLQjdrMXpKZmEwUnMrZ1U1bXpZSzdwUWM2b1l6ME9ZVklGNnZQNUZhcno2Q2hWU3YwdXF0NkQ2SUVIZ0wycW9seUd3b0ZJbXYzZ2ZlaStKeHE2dC9KWjZJakJScDk1YmZvOU5OWW42STZjRjFjS0RRVXBaVDR6bzB3U29CMXZienZtSVRhMkJDQ3NDR0ZIYUJFOGJDanlwcmtHR2NhODJsaW9KSW9tcklQbHJSU29IdzhzM3UwclhrWTc3QnZ3N1lXM3JwdE1OTUlFdnBMQVVoZWVzd1lEMmdJZWRUaFo2WnJ4MVljUHc0T09TaUdHSkVYVmhOWnA4U0h3ZnQwb2N4dXFWNkY3V2lHdmt1UUxrQXZ5TUdFMnZKWWR3SU5od0hVdXdwZXZ2dXF3bHRET0RvcXhTNkFjZHh6RlhISG52SHFrNEp4RDI5SjdNcDFJbWEydXAzV05wQXhXZEU4Ny83R2FQa0VLR09Lb1ovNlphVlQrTFdYcWhKQVRTbUVmdjVWM1NKRXd3S2JDYmtWN2VDaW96dldSd2R5MWFYMDE4Nks0THN6amRnZysxMEhBQ0RmY1RFQk00QkdLRFVkc3lZSTFGeVdzREpaWnMyT1NYWFEreEVOUkFYV0FXRHRHMmtlMUxTNTM4c3U5NFhrTERHUGFMaEI0OWdnZWQrQldPeXNiVGQ0V2doU3dBQXc2K2ZmdUIyU2hNbXlhTTR2bU5HUXFSa2plY3kvMFFSZ08zcnlaeGptTUZySjQyclgzZHNwSklmcUE5VTZQTVhwYkdUejM0T2d1VTZtTE9DRWgwdklTbFd1Y1NUbkxXS004VExDQTdQazU0N2JiTUVqaWtxZUQ3eWZWZXVodExLaWpzTUwyOWxZcC9PT00wazRxNVBPYW1xOGhkQldvR1N5UkZsU2dFMmNyV1VVd2lWSDZwbk9uNURraXQ1SnFSMXY3eUFzZjFaQ0Z2T1ZnRE5LYjFvQTFCZXlsZThQRlc2RlIxeW5nQko4clVnM3g4ZFpLZHJwa1ZISXBHcHBnTjAzUGVHaGRURUpKNGRrM2gvYVV0NXpnSlpzTEZVM3JUV2pQcXY3UExPekRHWkMxWWlpUTIxSFF5Z1ZtVW9vNkptcFA1cWFOMFVrck9MWmljR3RSNjdUem95cnVnanJIbVlTSkNFb05QRkxEeFZuNWF1UjFid2l6b2xOVjRYT0JBc0c4N2NZcGZIbUdlZS9STXZiRGNJa1JMUmhDSml1QjU1a2ZETFV5cEZ5UGlvRGdGVWpadmQyazJ3UklGVnZiemkrcnlFU0lCRHI1YWNFNVhuYzY1ZThTVTBLT1hjRDVPMXJGN1c0NERubUdVTXFpc2xETnhPVmROWit3U1MrcC82T0IzMlUrR1Y2enc2TjZZV1RnOVBsNHBhU3VBWEZiTjlPeklTSGxQRERaUFFyU0NNWjh1KzBBeEw2VzRkNTRUTXM0K2UxMkFGWmtxTkZBYkVhMk9zc003MWQwZWV4djVHcXZobnJINUtzK2dMLzVtd1BiNVk0LysvV3FkZEpJRE9ZcGJVT3hSOWFHNXVCVHpPUThieCtRMTRTMEpDMHI4OC9UZTNuUEhSMzhKWFFXSEJ0Sk41QWtGNXR4M0pLcHJnZ0JYeTBYbERZQmdnK1p3bm1SU2gzSzFOdVYzVUdJbHd4ZzR4d1hYWGdXLzNGTVUwRkVIWjhUQ2dheTluTWVlcU02OTNDU2tvNlRzVTZvZWlTd1Vlckk2eGhNNnpnNFFKS2hOZVhsUmZsNkhGU2k4ZFR4b2YreS9ibDA2UlhvSnpydVFvUE9yKzZXRG9YY200eGdWRmliNVlTMWRJUTA2eEI0ZUNhY1ZMRkp0VHBMUUROMUF6UmRXMFp5RXA5SmptSHNxNDZxT3FnVFZVeWMwZHRzUjhjTEFuSUl1RzdBWFJXdDk5M05aU3J4VG1IYThYQlE2VEFNcVVHUFN1cytVUERKUXlqS00rcXhDQy9wR01JQjdMbGxoNVFzK3FOaVNSRWg5c0VTdGk3VGNuVHJBTUtpSnF5ZkNpSWNSbFpkWkZ3UUlzWkQ3WWw1em1EWUlVOUhQZmlCaFJVeVNCSTl3V0luWHp1ZWpJU3U1d09WZWFGQTBhU0xadSs4K0NWSDNZMmRoQXV6RXRaR09NVXhtanMwY2ZRb29oNUtsOVp6QWRiYzJHSyt5QWdTMDRQeWZCRHlrc3NPMHJuMjdxZ0c4dEt5d3o1V3E2Z1cwVkJFK3NGSWpTUEhGVlpxSzJZQU5QT2NOYlRSd2lTdklPNjc2VnJzVlZiaHg2bVA4d2lJamV1aEJXN3VicXdOaUFRNWgzVVNLbnpNOEh0NVBXejB0WDc4dXFQSFI3a21JdnI1ejM1aWJkSTZmVSszRkZKVi8zeEI3TjIzdm1JaEo5Uy9hU1FadWhjZ2hTRE5hd21oTFVBMFJIcE1iUE5jZ0ZvbGoxT25zQ1FRelBnK1JIVnB2TUlRNG5ZWVE2RmlFQXNON3NhRXFNaURCZlMxcXY5OWNaSENlV2NFWjZGSUVsSWNOSWhpVXdUbnlLeEpXVU1GY1IxN1piMUdiUkNmUGNSUHpyQXREd0d4S0V3UEdIWVZyeGJ1R2UvRExiUE9nL1N4TWh3VzR0bDdkSzIyb3ZlRndCcldVZHJNbmQ5M2N0NmI1NmtnWTdlaEhVQ3RuNUhUSnBtMUEwRk9nWHZmdTNaNkpBL0ROZVA2dk9IMVJkNkVVZ1FxVkIzS2ZMbGUySm5SQ2xKNHdtMS9RemxVZERwSWpDS0tkUlJVL1BESFgvRGx5NHJyY3NHdm53K3NWMExiRWg1MlI5NDJBcXBNWDQ0a1BzczIyb2pmM243QjllbUNyeTRiU0dwWkVWUkkzS3hNa3AzT2dWVE9SdFA2V095bDB3dml1MU9ibnF6dUdKdmVrbHFXVUxWTlVWeWd0S2xzMTdqaXNJSWxMN0tURy9veWUrRXpaUk1SLzhLR0hLOEFEa1FwWFNsc0dUWktreUY2QVNBUFo5TWt3aHJsb0Voa3VwQUJvOWJzTVpFbXoxRlFmWlorSSt0QmxzVVpCYVVYOGl5VnBMeDA3N29WR3V2ZHo2ZndlaStvUlVhNWRTR0VLdFdzOFFpUS9NcnJkRGJpSXpxWkRDeW45VFpGRE13NE4rc2FzYTVCb2pOVGhseno2Q282c0hyWUlwY1lzY2h1dWxXb3g1SmgrTjdEeU1ubEk2T0V4bjVyYitlZzhFb1JxSUlzN0l1bkpLWmNKTW9NK1oxODAzVENTL3IwNFpIUG5OMzE5RFpVemhZYUJlQlJPdGExVC9yQUhIRllCUHJCU1UxK2JZTGtjUEpsUnpqakIxS09zQm9SOG9FSmlDNmpSQjlOZWZZdUl0RmlzOG84MjVJamIwaWEvUkRIYjJzTis5RzlXanVNM3Nza1hIa1ZRdWg2eXNzS3dwVURsNmFoOEJDaTAvTjZpRFVQTEhmZFo5QzRKeW82ZElaNUR3dnlscWJuL254WnA1ZHIzUkd3clBkWndCSUlqbEdGbjg4Qm10RU9jNTNZY0NybHdhNHl6YTBKbmMzNHpLSllWRWpySlBRaHRMNUFSWnVYN0grem96SmZqalNlcSs2NzV4NzNiZ3diVzhTWFNxeHV3dHBXMU1wMktTc0h2ZTVlRWZveXJmbGVFSkE1WVZGWFM0V2ZDK1NFWjYyaG1LZWlCRU5tUVo4Yk10Z1J3bFVycGc2RmJlSGtRWHB4ZVJyWE54UW5nK2plT3FqMlM4OTJ1NUtXMTFlUVk1UmlqZTYvS2VUdlZSOHd3Tk9ZVFdRZk5RQlptVHh0Q2pqdlNvSFp3ZjFMUTRYbkRQcTdzS0hkWUxPT2FuMUFDdGZhUGVYVzNDc1VQV21IVXp4V1Vhb2VCcnpSMGNXNWtaUlN1U0pZVUhGaWRLK3NkTzRaQkQyaDNJOGx6MXh6emdHeHJIeGVFSmExdGNOYjZOQ2JWN25IbUxDdUMycXBkQjRjQjBCVnpqcHFENGk5am5WVlh4dE1UMnFkcjYwVnRoTHlvUEwyc2FpVW5VRVkvQzFSc1NoanRVUDMxTzc0dzVlSVpJdlRuK2EyQTBvRk1JMGRYUkcvN1hkOHVrVEU3WUowSExodkd5N3lJTlRWQ0FqUXFMbDU1TnJiZFh6clJUYUNsREhJZFNxbjBxTkkzWGY3dTRoMFRrQ3JqaFcrU083SEhISHB4SFRvNHBGSFZuamFqTElKSGRFOWNiWjNrbWhDS1FNNGJUQ05kbEN1YXlRWUhSR3ZBYnp0OXoyVnJHZUh6b1M0Y3BTaTF6QlI0eWExcnA3N2h0MVpFMWlRSzNvYXRObHcvd3lVVHRBeWdONTdoS2xFKzN4dFlTWUFJc1hxS0wxamJXWHdEMkFCTG1saDRiSXdBYnhjWk10QU05U0RxeTluRmtWWFg5UEJzUnhnNUNheFdpUkRLdkpZWStLNHJiVlA5S0UyKy9HV0xjSU96VEpNK2svWnZKRzdvWmRXN2cwWEV0WnI0M2dvVHdVN3luM0lJSmp4UE1IZlBiUmtCYzhwV0FxSTh2Sml5bE1aOEtyb2ppZzNQQnRXRWp1WGdRS0dGY1ExajhDNk1Kbk5HeUdnVFQxMDFUR3lLa0NvQlRtTEhLS3lWYXN0UVBaUW96WUx3Um9JbW9DTWxBcmVqb0tuZGZGMisySWR3WklvTHFzVUlwKzMwVm4zTVVrQmo4cGM3N3ZTQ01sVERKSEFKZGtRSnd5aXFwSUpsOHFNSitlVm5rekJaZVFHd1VQaHpWSTdJczFMOXFkcTR5Q1JIejNZTVdGTmU1TlhxNXkvYmpEcHBQY1FrVHYwYk9ONTJIWm9mbEdoOGpHbmhGZ1lXanFnS0U5R2tOY1p1U2xwNFh0WFpBUEFWcWhOcEFFUTY5dHgzTkgyaExlY3NLeUdmZ213d0Q3MXRndjJGUXJ0TVhyQUxKNTRCMW8wMFZ3eVJkRnhvR09IYzdKWlIycVVDekhmMFhFQmxNYUFXSTlDWmpHZU13R3FUN2RIK05FaDdBQ0ZvdHRSM01QdGNackU0UjVSY0VkTVFwWWNjYnFza0dkUWtSajlKN0hQMG9BS3JFQUxLdVFLSnB6NmZnY0ttK2Vpd3V1ME13VXVaT1pzVG1hTmtSb3paUTRtcTFXNUExVjV3cU13MzI0RnhPTlgvcTgyZzFYRElUSWEwL1VHc3k1ejlWcVZFbjlqWDY1NGFnNmZxQ2hDRkVMV21RcDdHYkttdFpQSDA4VGIwSnIzNlhRVDkzZU1RN2tmdGM0dWhOYUI1SnpVcmdhMHVKblNFUENMOWVMRmNFQUJ3b0x0Y2tVWU1pVVJ1dlFTdUxmbDZVVkxXSjY0djE5K1lkTnRXeHFPbUdBLy82U2lLdURURmhWKzNhUVlERmFqaDJkLzdoMjR2K0xicjU0QmZNWjlXUkJEUWR3alVtemFqeDF1MlVWR0I3UmhIZWlIU2w2bGNLRk5rS280cGVraHg2YnJsYWpOaGlYUWF6MDZJekc3V29YdjJJRzRZQkZFYUdLbVQva0UxWDRyT2dmSENxSW4yNHd5eHh0eXlTLytweWxTRzk5cmZIeWVPRmZKcTgvcE9lbGtMbXRzMHBqNnVRWHhKRWpzUWgvU0hhN1dwZnlGbWZENldwMysrM2loamxoU1F3aGUvK0dzYk1ZUlJvb1E2bVBGSWthOXkzVjk3SFF3UlpiUGRrVmcwWERiTzRwU0swZHAxS1hldmd1RW5vWnhjWHViRk5WWjRVRllOMWtKNWdnNUp1ODVadUFDVFdEVDNpa21BSm5IUTR0QWxnZlpnMklTUUFrMmphc3FoKzA5bGFQTVJmZGJsRzhVWm5SZElsWld1MUlNSkZZemg4SG93Mkk2NGIvNzRoRTU2MlFVV3pRWTFGWFR0VmxrNG5YdjZOU0RzdFVvS1ZhUWFIOElIcXVnQnFKNWhYN0N4aDVWb2dFaFpoVzdBR3NBOWw3RXVnTmRSNExVazNSNjlnNUJFbnBxd1ErRnZienRMYStRdDZQQjVQZ0tKSWYzYnFXaHlXS3dDTnhiUXdvbndnTlZlSnU2Q1pxWlFHM1V4OCtPZE1tRDRueWhyV3Y4ekx6NEpvMWFqSVlpUUJOZzFmMFJ4YTBVMGxubVlBZ2hVZkNZMmtPbTUwOWdqWlJna2cxM0EzQndnS3RRNEFpQXhaNzY3OStBUDkvSmUveFdHdGJhVU96QTBsYjB5RFpDUk9YUmd4U0ZiNmlLSHZpM1BHUFR2SEF6UjQwTEovUXdjbnRJeXlMeEowTzQ0d2xtQ1lBTUxXT2FvMXBraFRsMDMyV3NhKzZsaWdsclhCclJ2UllLbllTb1NuUkJqVFlXRWNsQmRrOWZFNHFndm41elZTa3ZxSlAzZjk2QThvdnVuWTNKVm03UVJnV3RLWlJlam9vNnZIVWJQN1V6REZsYVJTbkEzcW5NbStscUFQdlBhMGZYNTAxS004c2JQbVFLS21reERmb1VKMmdTMGloNFd6TnpqUUVMT2dvTkZYMTNQM2JFWURBNzBGcFZZUmJsVndrQk9IYnN4NEUxTCtpdG9EVzFOR21MZTdRdmJSeEhUMmtKWkFkMWhrVkhkWEZDQzd0UUt4ZHNINTRHUjdvT1J2QVdJVVdDc3JVQ3JDSzNoSno0TzdPT2JVMzR4VElDU1AyN0pORk45d2xGMjQrT25ndy8vUHlGTU5reDRkdGZYMFlVWXhGYlRwQUNSUVAvWGNnYllCVHczdDFTWXNCRlh0VVN3ekNLczhMTzFTQlo2RHRSNlR0R0RtS3JqR3pzczNPaWpQcURRbWJPREZpWVJDd201NlYxNHVzVHdVOGViR1JMVjQ1OTJtNGdTMmZrZTRjMmJYWlFsZ3BoYzBZdGJVSm1uNzhUSWEwdUpZNHdQOWVkWThQYnZRckI2dG1xYkJCR0JSeisrSDQzR3FCRjZHeTFrTGx0WEtvT2g3ZlhKanlTamhRVzRlMG5wRlIxUDJwMTluc2tFQkJFazl4TUxad3R1QjVwS0xBR1FaeGtxQUVWR2p4R21nZXAycVpxQjBPdTFwRlZrVnc5OEV3UHZkUU9peDI1aWlVdG1JTzFTTXlQeFJmbGhTNXJscWNaMEtPOHdtNEl0dEJqT0IxUlFCSTAwR1FKc3NEQzhja2wzblJUcy9yVWpCWlpYZ0w3cnlOd013ZXYxQTlidVhMUy9zd1Jpd1pUL0RBUDBZQ2NaQVgyN3NxK0IvWklzajNYRkZKTzAxZUlRSWJvQWtQQVV3YmVBRmhScURpSnlMNHhZcEY3QTFIVlQ0VVByb1FCYytkQTNrV1l5aDJZcjkzQ2hQSk1pWXVuR1FsUVNuOG8yRXFkU21HMnlxa1hQQ205Z2dnU2k5VUpKeWxNQUR2YnVJYlRPYndTVXozSjFWdnJubEtZT09UaElwQWhvSFdId1ZYTlFVRGFJckF5cjdrUklRTzlGTjM0S1IrdGZ1VnE1cXh6c1JvT0NZSlhCRHdmaGw4T3c2NVFkVU5DTGRuNSswWHNLUDZBS2NURDJ1aFo1SUlReVlibEJCRGhBQkpkenFBaUcxUVBaMDdxVXhtS1BhNkRJejNuTE1OdkFYcGhVRDRrYXVnR3RsUzFDanRVb2R4RUNPTEFRWVoyTktLWWJheURlTW9OYVlsSUticzM2VjZNTWFxQktLVXBUZUJ6NVZDUmpUMERWbUdISWZRbWo2U2RlcXh0dk5waHNHSmk1S3BERnBUS2Y5OXVEY2RoZzE1M3Z3UFYxS3N2aGQ1NmRNZWdqbFRJeERKb0ZpYW5jUkI5N1Nuc2U5NlZjcURSRzIyNVZYNVZGZlVyc0k0MG5qbVF0OVlaTWZtQWRVRTh0ZTZWU25yVW1TNElEMFdreFFqdkdzemhVV1ZXWjZaa0lzR0o0aEl4cFJGd2Y3dWpZMGZBaHBnaXo1Rk5pa29ZSG95N0l6OFpTbWMrcHd1YUZhbnc5cThyakpPcE5SWlJGYlpIQVdLZ0ozL1B3T3ZmMW1ITVg2L0xITHdaMnRhMTdRRlVxR3JJWCtDSDA4K3ViSUVqRm5qZEVJV1gwR0VrWEtwdjBQQ0xUVmZBTFdqNDZxdUExSWhVRmhJY2pyZmFpV2VUOGwwaGJDR2VRVUJjdFo5d09acCtud2dFRlVHYTRtMHVqNWwyNWozd1ZXMVg3VjFlVUs2Uno4U1pVdHNhbEFiai9GZmpQQm1BblhERktTcm5maFNVQ3FJZlZrUGRxMGVnbHpkZUpXZEdyTGRzQThUSUdYTzZrYUhOOVNzTmNEcEoyalBWR2UrMExocGU3Z0JBWlo0WFlHR1UyK200RFl5UVdXdDBlRHRyditiUjRjaG1SK204YkxWaGlkSXRURzRjVldJZW9xYUF0WGQ2V2pJRyt6cDdEb0Z6VXIyY3NMZ1RDeTJjbVN3NGZlSWErV1pkTWd4VG1hK0Uydkh5NXVNK3ZFb0txS3JRZnA3OHpXY3lhaDFDY1loUTl5NzhLLzQ1VSsrNkZsNGpDVDJCcWFOcjNQTlpJeGNzRlZvR2ppRThqUDNwRFNTK3FNM2JaR2dXY0JISmx0TDVKczUwbTkza0NMSUFnbjRYVjc0UEtUMFVja05GS0JXbkl5VnNZMk1FRkNPRGp6azluNWE3Z1Vlek1ZKzlDWUtRUUM2dXJKVnBtWkVBdlRtblVPN05adUVnM2doWEdaZHhQZVZlK0Z4YkhIblBKU1FjRXNkTENLaXFGSnY5N01SWHI5eFdVTWFad3I0SkFNYUF2Um05U2R0aGx0a3lVanFPbTJFTlJ1akxZRXFuU0FCa0NaRWdPTmhZeGdoTC9HdGdxNi9QMEdYWk15N3V5MHlZaWtLcVdwRVhVVXpXZ3FDRUkwb1FsekVGU0QyVW0rM0VJVThHcUVxQW4ra050Um9XQ2IxR2RHMms4UnlSbExDSW9pdHVUcm9TeDMxNTZPd0J4QUpWYVp0RHRlVWV2dlNMd2pTT0psQ2RibzFZN0pXZnJiVU53WEVjekt1ejJNMVFLK2VrVm9idGp5YVk0NmJBc2JmKytyK2c3UStCcGFFWGc1VWRFUnZXSlVyY01GKytwSUNnZnZEY2w2RndsN2ppcUJHUTkydG1BeDQzSlFyWGJmc2dpdFZaQkFmai9idHhDcWJ6dGxXUkpEZndmUm1lZDdsNDdrRThCU1JFRkJtSGhuWGJFWkRGRjU0UlVKbTdWbkszdG9hM1BXUGRPUCs4MGdUMk1rQktwc0VnRnEyaXVaUXBzL2VPSlFCNUtjaHR4WDZmN1dONWlWaFg4L29oMlgwSW9IdzJBUlNFVURYZFJrWGZBbDU3WjBGV3plTktJYmJUdmpkV3dRK1pIS1FETXRSTWhCKy9YL0hUMHZETlYwL1lybkhDci9vd253a0Y1OXkzTnZreWNnUjZIdVlEaEhoRjdWVXJXei8zSFNuUmdXTlhSSnRjSUtMQ1B1T1BXSXRUUm9mK1NBRFVLVXRxNjR3OE5Sb0M5MXZIclVITXhoWFVnRHdQRVJRamppcDY0RHJEM0RYeEFXTWpPbDliMmZYMTRhdUVUZEhNUEtOQkUxQXBUamxxTGt0VmpBeWcyd0pUdExWMDZ0Vlk0UndMcjErQVZocCsrWHpndnBPU09DK25YS3Jlb2g0TUw2cndsazNyNnB2alFhQjVONndsNVIzQlN3SStaT21KZXRPbWsrQ0VZVmt2RXVQZFVjRFFUUkI1MFRXSGVCck9hREJUOWZZRHQxdEZPNW9UeCtjQ3hJVlRkenNxcm9DSUF6cEt5RVE0ZTJ2WXJna0dJMWV0QWRFbm5qY2VPaFhkQXJBbFQwWno5OXhMeDlvWk5rN0VTS2NpRGg1MlFHMVZ3b0ZDQXd3WXluUHB5QTY4VWwyNXUyZUNQb1JCaW1Rc201SEE3dVp1UUlQMWlJZzVkd2VUUDdKNEU4TzBpWDVLQ0liRGtpdzhUT0NkbUIydnZLT1NLRUc5cm41bUNlUWh4Z0kzRlF0NkEvZ2taZWJlL1B5dXd6bS9ES2ZSZ1RSOUxnb1h1UmxLU0lBODlMZ3NZc0hTV2xRZXpMUW9hdy9zMzBaREZYRE96M2RnMy9NNDM5dGJ4M1ZyYUVlQTVTWkxlMEVQaGQ1d1NrNytJY1F4S3AvWVpycW5GT2IvaWliK2ZWN1BGQUxKMEZqbTBWckV3N2orMVdxQ1dOQnhWN3Ftb3RjcXFsLzRmSkFBTUF6WTNWNEQvRGlDdzhHbUFCQjNNOGdBakVDL00vK3VFaDNrQkJObVF1cnN3ZllKa1FLUHBxS2dIaEdzeVZPUU1xL21ZSEptRWRaRy9wRFkrMGZIL2RhR2dOa1B3Q0RqUnZVU0RFTGFXQnV0Y0EzVnp2VnVEVjVzYWVhRmFTeStjNXpxZ0JidW94TDk2Zm9CV0dYd3RvNlZiVE5rb3NwY2MxTGtPQjB5eG9GcWhRQTRVcjB4dlNOUFVFcGl6VUZzZnBzYjNUbEhsT05PV052R0dndkxBWXVuL0lMNjM3TThxK3JwZ0ZLZzN6V21lbkpnTUtLeC91TFlsU0xwajBWZCs4NEU4Q3pLTlJ5aWdwNGFxYU1QSkxhR3RSNUk0bXNJV2c5VjZ5Wm5lblh6TUM4VTdJR3NlT2ZEbWk4MkZzaEdQUEpxeUtCNVE0QXhUZVZFTDBzdXlNdUIvWGlWZ28zNDl0c05NWWo4eUNGN1JVUkZEQkVQZHdkQnNNUVdvSTJLVUEyM1VJWnpGN3JxdFJvTDF0QlltYS9ZaTN3c25xZDF0cmtlRmhCbklhOXpucGRPYkpYUE4zWWtGV3RnY0ZMcEF5NzY4Vm5tOUdkRTlhaDlmUDR3UXpOK3Z0VEpKUHJod25UTDZ6MGlSQnV0YWIvK1hjR1dFcHBTQkI0Z0RGMUdEbVdjRVFsT0JYQU5yMjl3dm5WRmxmRmFBMUptMitWOUoyblBUejkwSFBmcXZDSFpzWjBucksyS0pyamhkVkVQMlZqamd3QmUwYzRjWWM3WTR2UWE2UVNwT2NZS0loaCtkQktSVmp5c0RzaTdFbEIrTzVnanc2b0pUYXR2TkhMeHFrQXBBUVVSRnFPN3FWVTQ3RUh1NU92QlNNRjFDZDdydUY3NmdJSU15NG1xVUVkVHJ2Rm8zTGl3N2xZNUsvL0JlMU9ZcnBLdlFUa3hMaEsxcEFsOWpJUFJ3ZDliWTlWM1BFVUZWdEZqR3R6QzlLS2NPTHVTc0dnUkxJdXJGRnByWHVJcGdoRFUwL3dZZlZ0TnlxTDgzVXk1aXJrclpHSVdHNXhtMUV0UGxOOXA0OWs2VEpMQ1R6QXpvL3FGRktUYTFrb0xvdldEeGpIS2NhVHg1bkJKam93cFJxV1pMeU9kWXpPMTVEUllVYkVMZ2ppYzAxQytyeVhpOVJXNDVvcVhsMENEcUFURUpRQkpDSG5raWRkWFRYSlNQNHJIUlRDcXd2VnEvRjdyUTBCWDhVcGpDVmo3WlJpcE1WNlZPMndJTWd4N1BkU2pVWmlpOHBDM0ZKay9uNG9xcFdlV0xhcDFrTmdHS1FEN0svRGhZMFJZTnJWWUJ1YlN3emtaekxZNFdHQytYTWhTMHh2RlpDbTBybnZodWl5dG9SOG1wVHA3dW1zeDkwb0kzeHJRTEdFWG1aRzNsUm14QmFweXc3dDFGRFBjUkxRancyWDJrRnRBREZTVXppTDVUdis4SGE5NERoOWdsWkNrdHU4eWpJR3pydEx2MU5wSjNQVG1melNQc2JLNExqNzYzQ2J2c2VaeERSSTNxVDB6UldtNkxxd0E2Qm9SQzBYU1JDRnpITzRGS1FOdHRMSWxHaktXeDZuOFEvMFUzUnFVczl4LzYzSjdBSXVNbG1jL3V3K091WU4zU1BFaHBoSEJ5RDJwQTYyVFJPcmdlMnRzL2R6cktlcmk4TFZVRUFBVnhMSmtKVVNqeGxZNklabUluU0FGeHNHTEtkQ0F1UjM0REVPVXJQemxsMldNOTI5Ly9RR1g1eFd4eFNIall6clZ5aGpUWVdiZGdiT1M0MlhRQ2RndGVvUXlPOE1aQkhBUnRXSDAydWxlY01iTUM5dXNpWitpQVM5dkRXYXFhYmdEVFp6NzF2aFRVc0FTRFF0a3hLbU4yc0F4TzBvWklmZFNvWWhuYy9TMnoyOUFUSUZaeEZaUkVYSDhZY2Z2ZmhOSElmSVpzbm9lUEE4QnhReTNWNTY3bFk1N3FiREh5VWZNR0E3czU1Y2J2cnlXc1FpSzd4OFNGVEhQZXhBdHE4enZPcTV5WXdoUURmeGFqZG9jQWVSeW5aSzRVYmVVaE1LQ0NOMS84Y3B3aFVpZE9qWGt6QXQ1a3o1RGRmc05zQnp4NFdsRnlqTXkwS284OGpaejJkMzRDdU5DNzVWZ0tTWVAvYTBBYTIrSVlyOTV1Z1Nna2p4azJTQnFVTzg5cE9KcXVxWWdjWllVNlFHckVLNXhEQWlpM3lPcVFtOHBpYndleWVrYjUrRWVvUVBVMkZDMHZMQ0p0Q0RSL1JTOVo4TzZaYXhlQkxWaEY3Rk1yUTA1SmtkVDJyYUkzVEtpbmZObmVBQmJ5VW50NG5JVFltZi9lUkNMMHBLRTIzL0dOVGJtNjJOaTMvdFJoU2h1WndHWmdSaGtlTTJDdTV5U3dCMmc0aHZOZmM4NDJ1RmtNdHVuRDZqMy9ZR1ZDUXRneHc2elNWbllUQnUzQTdrQ3h5cjVVcWxRYW8rNDE0NWNTS0pSNHNDSFpxWHVOamRJQlB3MU9CdWl3QnVVSmxISGhsaVJ5cmgyZHlPYi9mbFowWld3ZE1Sd3FOeThJYWJDZHJWYXdLT2kxb3FpaWxXVFlqK1h2NTgzWDdQQWdyTFE4R1JGRzVvRmIrekZWNlY3OGw0Nkw0U0RGUmJMOVExZSt0c1BoRmxZNUtUK1ZqdnFYaEFzS29jSEFxUlVCa3pLVGlGNTI4VUIwTTByNDZ0eGp4VXdCRjhidy9CTnJGTDcrRnhrNzdvWnVmWU5yaXl5dkU5RDl6RDNzcTJEYmhSYVA1MmpSUkljNWFmTURFOVBUKzg5YzV5UEtFTlEwVEZDTnV0c1BJaGFDTEFDWGd4WENKSGpIa05HV21TOHRZQzZKdlRTeHY1dUJEQVM3R2dYaFdmQnVpenZVZEM4UmdGb0FzT0tjQURHTGd6NXBLNFBaMmxqVVptMU5oVTV2REdINjZzWmxoekhuQmJMWTJ6elFhaVBKSkl6eUNFN0dwd2tpOGZFejJpdEtjSkk3UHM4S0tHejBraG5ibTk1bFlYNDZHSjVRc3o5L2RqajVjVVF6UER5OGpQeUUvRHJiNTZRNGpJQnR0Y0VPeXBTcEpPUkUrOVRVQ0tVOTRYM29vQWU3cWQ3RDVnNDdxKzNNczRYVkl5MExWbmpSM2xUekxDWEE2VXk0dEViZVFWS2JVUXROQ01Ca3BBK1RaWFVtNHhOZE5QNTZKSGZxN0ZBdEFtWkUveDNpZ0ZKdGtiTUJGbm90ZUh2L3I3aHczUEhiMytkWVRVaW9iTlF2SGZzcFE3cTU3Yzc4L1BIa1VUaEcvRDZkdTRLWW85OU5lRDJwdUs4SWkyTzRFWFFHZkFIMTBJUnhhUkZaR0YycnozQWpiTCtqdnRiZ1E4bzdwOFZIbXVaNnV3Y2Z6M2YzbVNYWFJBZE5TeTZKK1BSL1dvRWxZZ3JJcWk4UkxBa0FvL2cvZTRzTWxNMU1xRk5aZDF4MFpVS0wvNnBqUVVWbDBIV2NVNE9hK0hLVHVVSmh1WEwzRndUY25UcmlBbENMZW9Pb3JNa0dVVklEeTJoWnhrcW9hRjZEaThDbitUOWFsdktRVlg2VzhiSDV5dXUyalQzMG5GL0VaZHVaRWcxZVEwQ2hXQ0lrM0ZNS1dPaFJSbFNqMUxHY3haZ1JHNmFZWGdnS085MVBnS1VPb2hCcVZpZlluOUFiemRMQVd0ZXZXWUNYZ0ViM3VHK0s3ZjkrV1VRazNRb1pTQzYweUs4eDFPQmdSakM0aFJNQ1BpcEJOamRjTnM3UGw0cTZwRnczTVBJamFjYmxlUzZaYlVGSGVyN1R4NzVKRXJVQVloVW9kQk5CVlI0WXFJUE5TK3VYWkRXeG5EZ2RrRG1IY2NUTzdpamxZdkhHMm9wYUsyaVZVTmhEcDM4Q0tsaFFjQkNIbmlCdGhUVTByM3Q4NmNmNzNqKzNRMFhmRUJYeHdKaTFONHluNmdJNkxxTHR2bnUrU0o1NXh6clByMzJVb3J6NVVPb2RWVWVTK3RkbGQwZGgzV1VBeWhOM3JnQjFSU0czRHVLRVR5R25QOFVtbWlpR28xS282RmpVa1FIQjBiaWlnUXVsd1ZJbHdlTW45SVBhRnFRTDVjSHIzemJOcHdQdGQ0eFRSRGk5T2lYaEtlbnErL0YrOHMremd0aFJHUVZnUUVRakcxRnQrcmVhMHlkTlR3NUlTMFp0NWVLR2t3T0NPZTRsQ0xvd3FqOHE1ZnpqSEZiTDRuR2d5SjlpWnRVTFpwSnVkcUNtZ0xaNDJyVCtNVDN4WUw2dnRndVQ0V2V0V3ZmVnFLd21XU1RXaVJWT3lNVU5lYTh6dUFybEtPMkVJa3dFRVh2bkorYlF1MkV3Vi9oaHp2K3JYSithMFE5Z0grNHY0NGk1c3YxTW1SdUtKRkdDVHJxRWthOVZBcnEvQTlSYUpMZERiNXFFLy9tdGxmQk5jOG9jZGpiT0lmQXpoUkY3V1B0dFZiR2ZCNDdJNm1IQ0lWcUkvSmNhOUdyM21QU09lVnh3VHNwMmtCdFBFd0Z3K2o4YmdGQ1ZOUkxEcWFYZW1YZ2tHMk4xNHJTRE45OHRZSlpPV0t3MzRvTnZwVFNnVnBNaWh3MGppdmhuN3VkMlJLNU4xMGtlajl6SE0rUmtSVlc1N3llUHNBUHhkQzVBTlRhQXVWQW1sbzcxaURyTndWa0NWZ3ZneEZEa3d0eXo5TktlMEdEa0lISjYwaUwxanI1bFhzS0l5VDFIQ3RNcGZBR20xWEtDOXhLQ2FZQ0laY0dqM21xTHRpK0VyZ0FZZ1J1TWtqaTV0M3RFbjVBaEFtcm5kV2pKaDdoeGN6dk9kQzdGQi91TkFoQTRoUUtCVFBwQmY0QUpsUThLSlF1Wll6K2dQZWU0NElvaEtUVE1ZUm5zek9pVkpPUmxmMFp4VnQrOWxhNHlQc0FnR0N4V29pT1ZSMUJJV0xRc1NnS2pxNzJtOVBSVDNDTW9pZnRUZU1PVUVCWkc0SVBJZkE1elNNU0QrSFZ0QzZJcFNDdkM3YW5GZFlDSzAwVmt0K0dxYnl4OWE1VWQ2VXJWS1JWR21Mck9KN3pzSEEvSHgxUGI0YmJKV0hMQmZlM2hIVWpubnl3Qk56dVdKWXI0bHJSOXdRUUc0R1YyZTF3WkxSR0VuNXlKcDhScDB4Q1RuQ3dTMlArSTdTS1FiRExna3ZSa0ZYaUxCOXYyTCs4b2V4MVZJaVh3L0Q2VWs1UmtJQjdQRm5KeGRDTDRWNjZ3MkNtMkhGNzNjRStscXdkcG5oeHpLaXhUbkFLWnhNTXpOTUg0MzEzUXpLanNsQnBlbVdMb0VmUHJIU1VVdEZMcHpleWMrMGVsTFRzS2UvUjdhb0dGdkVVMFJ6dlphWmFEclduVnVYVm9aVE8xQkFDd1FscHJ0SEVsSUpuUUlQcUsvWTYxa2pkQzVCb3RKWlNFSVdaa0ZLQ0RnRnZHT0ZnellzSEh2ck5MeDgyaEplQVF5UW9ob1lvd1JpRFBPZ2duSGNzREtGbklJVnRDT3IwMVJEbVkzeHFWWmNHR3N5Q0FwVzhweGpiUUxCYk1tdWNhekhLQlk5Y1J1UjVoMEwyQTJKZXZmZmRKOVc3ZitaUnFraVREckFnVHJVdEthbi9Ya2VmYjZpNFJQZXFNZEdyQTA2eHU4SGRyOFowRGhVdFBkT3Azd2xqV3luVklTTkJmMWFVQ0tnbHNzMnh2T0cySkNRc1dCZWgxUldnWDRpcEVnTjFoRkY5b0hTakRHSEluQVhReGR4NDhBcjZCdHkwbjJLdVRMR2hZMmVWbTVSaVE3RkEvbjNKeGpKVFh5eUI2MkJkRktwL3BoMFJSeXNvcmJzaGEzWEs4OUJVWUJxQzQvRW5aUDc5VUoxUFMrTlpxaDFDK29Ob3dSdStmS2tzaEtzZ1Zyc1IycmZ5RjlLV3ZsejhFUDRLU3BVaDNpc3l2M0xPdlZQYXVtWWhqcXozK2ttWDRXaUUzR3VwSXhnNWV4c2hpZEJESjVLUUJqS2tLTENRTUc2U0hNZXN1blQxM3dQTXlFZTlsKzVNT29mTW5YUW5YKzlSVHRDRjdIS0dPWWJDNU5TdXhsY3BxeFBQdG5tTlNYUG96b3JRdExpeUdHMWFrekVUY1ZrN2xqUTMzZDU0N3lheDJpWGhJV2pWWVBDam1rM01hN05UY1pzNVZHNk0rcTdHT1NnWEZLS0hyUm55Tkg0ZVd3ZUtYSEF0eDNsZVlOa0NpVzZrR0lQYTFYSklvcWtVV1ltNzFsNE00VUEyVWVoRjFlQ2VQMjJkcmtRT3ZQZmRGRzVkUXVjVWFPeGRkRStuRExFcngxVWJMSGEwdll5MVVjc0IzQkppek56VWVxQmdDVWQ1NHprVHh3VEhsQ1pNYmxRWUFUMEdzdGE5WFVjSTY5UEc2djdqUm1PcExvYVFHbUxZMGNNRk1lM29SbFRFbExOVGhEWlVDSjZVbzJTT0wrQnJvN1Urdm1NN1lDc1F5NEdRRmhhekpVTnZkV3owdHIvaC92S0cyNjNnNWN1T2w4OFZ0L3NOMzMvZlhHQ0lZUW41U1VwcDVNKzB3MUh4NFRuQXNPTDVYbFhQWUw2cWUySmhXK1lzeTVpVkllV2hVbktjNjc0bHNBdjMzMUdZNTFWQjNMRVhDbXdWM3JURGNHL2M5L3N4SGJLaktmeFlESGN2U3ZYbUtmUW9YbTFvbnhpL1J4V2xscitRV01FY2crQ0xLU1BVTVNOa3VBUzdWYTU1VnhJRTFEbU9nd2EzUEZSbjg0b0ppcnE2TTZFd3ZVZDE5dnVCbysrTXdoZ1ZCVHNnS3RZMVk5OFBrZHJzaUJlZ0tYKytYT1gxVzJTdW00azJ4L3EvWFBNSVY5L3ZOeGFDOVN0NGUwa3pkRkJGVnB0RktEbUtuSlBzWXQ2Um56TmE1WDExcGNpZ0dwNm9RbUpWeUxQLy9wRDhpQUhaZ0xTSUNjMlA1T3k0d0RUNGc0eTVHSmhtZUVTcGRIUEFpMW90bUpqVURLYUpUVEVLTTJHMjNXcXlYS0VTbUFWalRZWFlVQ3VqVWt0UFRJTm5qdEVrQVBFYUliOG5jMGRGNXg5aDhrQzYxNURSd0xISkp4ejROV3VQOVF3bytsc0h0b0tRRFJWU3p6SnFWaFY2WXV3WG9OUXk5Z0s5WmhOUWo2RVdUNThLYjczalFFUGF4WTIrWnRpaE5zbWxZOThEOW0zcWlzUGF5TW5mZHNNOFNMWE51V0t2VTQrVFpUT2FxM1lGandOU0J3M0pGcEJMMFlRYUFGa0dhSnBtVmliNHBPYlFVUUZIMWdwT0ZNRTZ4V3BkMk4zeW9SU0FYRVRXRWJ0YU1Ub0FCNGJCQ1NpRnpFUGFKRzdSOXdOb0c2M0duSnpaeWtGTkFycHk0TUcvU3RHWUdUck9xNVNmUzJUbE1FV2ZXb251MVdKSFF2YUNzTmlCM0lQVFpFS29lRGt4dkJpcERCVStsNUJxSFRtRDUyNjA4blJwUi9wUnpKQXZJam93eDFtZWtlWGU0S1F6OTF0REVrWmdyMEFLR1Qxb05tWW4zUU0vY1Z5bWRaOWlFbmdHVU1DdzlyazBqdE92azBFYkNBSVc2ZkIyTWYvS0xGL3dFRHdGSjQvdTkrV0NWYWNPZk0wYzUyVk54R2hlbDBtWElNcldVaHQrZVgwbFhyUFd5WWU4NFNYZnNLbzRzTno1TjhTTVd5TDRUTDAzdkYwU1hrb2JBdis0ZDZ4WGhyN3FJdFJtRkNxK0dJV011QU5SbGp6TWFaMU1SQzVCK2lrQ0NqdDMxTmNLcEIxeHVRTEJzTHdWOUUxNzZLam9xSGo3NldVWUdaKy91K1BsdGVFZi9sQ0hsZjRQMyswZUhYRUNpemRnVWNWanFXcHBxeEJzNVlHM0wwQnRGYkd0M0grcmJyTUtoaGdWOEFnUXc0aWgyM2hWMG50Nmd1QURXVmN1L0RCR2tseVpFMUd0REFjK2tFR3Rkd2ZFS1pWaDNiMDA3RlVMMXJFZzZPV3dvZHZReTRtNnQxZXREZUdzUS9EREZ1Z2phZC9GbkpDVXg3MDhYZEZxd3ZuUXVGR2VFRmlCaXBVS2paZVdTOU9NdFNhMTF2R1RjNGFWSFNqVHo2c3RxUDI3NDM0M0t2MTZERTIrSWlOSmNaYWordDZ0dytPVU1UQVVReDJFTDYyZTgvcUo5WlBMQVNTdG54RmFyU1ROeVE2Unpmb1VUSkViQmJMVGF0TjRhYmNLeE1wR3YzS2Npa0R4NTJTQkZVdUZoRWxCQmFYYTBRNTVHcytRcDNSTlQ2aDdKcmtIUDJZNmpwM1VEQUs1WDY1T2pPelpTNzJJNExEcE01U1JvUm1zSk5TbERNWDUxaktPWnZqNk9hcUQ2akdFWC9YbGZkZGFEa3JvTnZId3QrcHphWkh0bzNIY2E4TlJFbUlRYnAwZ08vclJZT3IweUxwYWxqSUhIOS9EOTdmYVVLM2hUdTljRG95ZVpYb3V6bHJhcEVMN3JicjhpRTN0am0yaXd0MzJNazY0VzFOemxlU3NnaHk5eThBeDFvZEV5Smd6T21WaTBIaW9oOGprM3AxOEdmTHlTVlRmSWkraW1iUnpkYTZMZUhyV2xneWxCUnlGZDNDNVJDa3dVSDNFT0wwdW1MY2EwTnJrZWRDSnNGUktGcjFsSFhuS2tKbm5McFZLTDRWcExXWkVDSFVaODhiOFFja3MySVFjbFZnRFNTaEhLRFNuUGtKNXMwK3hJc1FNV0VhT0trdzVNS2hGbzBFQS8yRllUeDU0TmppNHFubDByMG1JVHFVWm80d0R2bGM0bFRTRHRSN29Fb1F4TkZoM0xsOTZWT3Axak1xcnBiekFldVZHbDNGU1F4MnZ1b2t6TXh6UHJaeHJUZ3dkZFFTMytIT1N4d1NvMktKTEk5c00zYnZTTDJpSVFNWFlTRXVNTW9BRUtxT2ZpWWhXd0VQRzFRa1JydXdOSlVRc2hjUTlSQ2ZnZFB6eWNodUxKT25uYWFQbitlRjZGY0RKbmNRUU1MUzNPd3dMZnI0QVR6QTg3UWRlM2xaOFdza09WNnNCZDBOTWhQWnBxRklBQmtzVWFJL1lSNU1Hc291L09CbVVSaW1vaGIybS9ic2JnQTk0cmdINENJUWIyM3pLMjMwQWpoeTNIVDkrZjhQbm55dSsvNlhnci81K0h4cnhoNzBDVlVidHNnSzFJejZ4a3dHQmF5eFNudU9wUmFCMC9LTy9aSzkyWHhvc2t6V0xmZTdrbEE1UnhrVDMxQm5uamhzWDBlYjdiczJwR3QzZ2FpWkZWcm5tcXFFTVlLQ01nOHZQUTQ3c05Hd0N4ekUwalUzVFB1anRRR3RONTFSYUxwSXZIQzJna3NpQ0xaZXVTTmgrcFZRMUNYams3WVcwc0tjYjhIUHBVRkd1MXA1U1ZFRzQ3K1pGZEgzZ2FPK0ZITmE5SGh3SGdLOUdzQ05sRm9obDN6VVhMd1V4QjZ5WFJTUlRHRlRNZVZud2NjbW9aY0h0WHBBc0tJMUVUZ2V1OTBrN0czcFVSOFloMmNRMUVOQ1FVa2JxZEtKWW1WNGZGQ2s3VUJkSFhFTUlIZzA3WDJpM2dpMHV6ay9SSEZpSVBmZ0tXWGpZTjJqY29MbXd3SDFobEZtUHJYVnhRaDhGSTZwYjZKaVJQdFV0b1ZkazNnODdnNXlrNTUyQkh6cXNBa2N3T1hFZFA5ZUFiV3RJeTN5dXR0OG9yMGRrc0tvcmhNdjNhSnkzY21ndExLUytydGlIa2RTYVFFRDF2SnBTNFFKMEloUW1PbVByRWtjTjFGTmtDcTQxWXJCWUJXNE5zSnBjRjFMTE5zUUdPU2lBSi9XZGdBc29CcWxkTVNsV0I3VlJvWENBby9LS29icXl3TldSRWkyQ3NpY0c2aERybW0vVHhidFh3T2RtVWhpc1doMC9VQlh4a1FQV3F0aHJBSWsrME0vblFIQmtxdVFWcjJnN3VsMjllRGV5N2N3dmFpVUlPSWJJUjdVSEJIQmlyTGJScW5iRUFLc0xieExSZ1FBQXd3cElqUzhxR2dvenRDWWF4T05veUU3Q1lJNmE1bmkxMWtpbzBBd0IyWi9sN1RVaDUwcFBadU4xT29BZlhoY3NJWTRKWGhGd1VCMVM4SVRId2hLY0MySmN3V3ZTWEZua0VVTGVOb1laVzB1Q0JmVVFQZWNsQkxUYWtScHpramtidkZSaHZyRGFQZE9UcDZuREJZcHdUcDVKVDR2UkpTT2lwekEvRXVabjBPbVpxYk9CR01LcS9qMzVlVzZZU1BtNDE1bFRudTBtT2FQV1NqN3ErNXV3OWluY0w5dUt0S3lNYWh3TWl6WnIrUHl5Syt5dHFsZFpDY3V5TVhVUnlrZ3Q5UHRreEt0V2h1RGM5NHA3enJpVWdwOWZnVzgvQWVrSXVNU0dlRXRVM2tHODhZNFVPZnRWWmE0amFVMDFzSGl1Ulc2NnI3ODEvUEhIZ3Y2bFl0ODZmdm51QmZZeDRxaytZV1JsQnh4cXdmNjI0L2ZmM2ZIalR6dnV0NEsvK3dmRER3TTNvWTdVMGUzbzQ1eklFdEo3UUl4R0lZT09UejFnV3p2c0tTTGhJcHlCTWl6MDNETVZ0dGN0cUVMYllWem1tbE9UdUljOWV6TlY4Uk5VbzUxYTFjckI3eC9GVU16WWgxM2hoMU5PbTFFWmFMK0ZGSmcvMzltbDhHWG5PZWZCUGU5SGtMbXFmTGlpUlVKWVZNRmhqTDVmS0p6RldrWGVVVkZrdWkzQWRFMmMrNndKamUxUUZablpPZElraVd0NGYxQzUxNnFjdG03VzRraEhwTVFXcnZ0dHVxNzd2YzB4bjU2NTRMUzFQOUtDQ1NxOUNxcFQzNG1uTnE2VTlXdFZ5a0tRb3ltZUNtd2Z3M0h6ZlNIT09reXRMTUNXc3dOb05SWHlvaE5mUHdrY0J2Nkl3UXN1dVpsVjhLekZJYVhrM3F2QjJBSkhUMTR0dDZib2llbWE0T3NqUXdlZHBWaFZRVEJ6OWRZUzltSlliUHJvUnpYSkZSWGFnZW1CRG9oenY3cXRnZ0trMVd2QVp2dHVBeUR5dzlxTjdJQ1ZiSlBLaUdCTndBZDFYYUVxZ2hjeTJTcGFjcWNXaXFhWUY5TXdCSjk2UXRHaWg0ODU5V2NPRVpYQzlBUlVvK1ZuQVpWcWZZS3hCWVBGaUp3SWRSWC9STHVVSTQ2ZUVQOXlyOExzYnZKTXJmdXlVOUVBVXVtanlLQTQreGEvUTRSekk3QUtTKzZZbTBOQ3VSVnNTOEsyUnBqV2g2d2JXcHNSQXAvTFdHQyszeTBreE55d1drTE45Z0ROYU9xWnZGa2Izc2wyRmQ1NVNJakt3NWtsOWRJblRmejVGT3d0RFFxdHgwU3llQVFwSW9CYzBaVTVPRmlHV2VWU3N3TTJ3bnRLSDJ0Vm1xcklwL0Rxd3RFT3pPOTFzdVBVeHRDK1FoTUl5UWhta1ppT1dCYVM4TE1vcDZFVXFKTGJ2UFdFTFRLOHRsVVRHNXhoRXJwbnQ0QVg3VlJHZkI0VnZ6TDBNTFlEdU1XK0Z4b1J4YmpnR2xuYnZOSzVXeGliSVJFRXhIZHBrekpKNEhtRXZpZ2xydWlGc2NqRHpGRDJmYXkxbHR2SVZTNXJ4QkpYVjh5MzZvQVJqNnNYUWpJVDZ0eDJlVUlldmI3czFjNGI4RGF1Mi9GV0RVOGdXY2JySzdERURGc2JTbXVJaGNLemJ4dHlDQXhOYS8rTHpFN2dGUkZxK1o2OTh6a0FhY1hYMzE2eDk4OW9yNGE5M1ZGL3p2aFNDalpCRDMzNXhmRFQ1eHUrKzZuZ2w5ZUM3MzlvK0h3ck9IWld1LzZ3ZDlLUHdwQ1dpcWFjOFJhQ2EySExBVjlMTE5WUHJJMW9rR1FTME00a0ZlbW5tZ29qSUVpVjBqcTNxTjEzb20zVk9sNmI1eVNOWFBjZ05yc0pTS05ab0pkaUl0alpGWkZySFhzSmJpekV4SEJsaXd2TXlqUWdkVjAvT3Nld2w1bmY3bzVlb0tyc1dpQWljTTRITkE4aG84V0tsRlNOelhuelk3NFBhSzE0ajY5WXhIalBsY1FsNlNodWxPUWxzenNtWmFFZU5rRVZONC81cHBYRVMzM2MrRHE4dDY0MnAwckJMb1BjK1JhSW1TR3ZmYmtFcEtFSUV2YzFyaW8ydzZrVk0waFJVZGhIYldDK0pIZXFsdHpQUld3K2VyVlAxUWdaSkVjSVdEMHNIZ0RUbWtIekZyaitIaE4xZHVMbzN4RklQRjh6eldrMFJUV0lEWkszaEZZTWFaRXc5TVNsdWxpbWtLUWl0cUJvVkdXNkl5UzZhYmtqN01COXlLcnlEcW9aZ01zc0dYVTF5a21aOXFKZnhWTm1tZHdTeGsxK0dIdTlyVk9ZVjNTaGs5cHdZa0psZXlveFJmak16azJmTWlxYVEzNGpGZXFIUGFDQThya1VHVFVJYUdCNm9ZcnlXUjFVV21mbnFDZjBiQ2NhWEpzUTNhMnBkZ0dSMFI5RlV4M1FUWlNiV1pqY2dGeDZaL0dQVXlIY2hjZmRqSXMzcDRnRVFsQ1M1VEFwaksxQ0g0R2I3cVZpV1ZmVVkwZE9LemQ0RWUvM0NEY3ZrRUNpWmJJWVFvTjdmdEVpb0tHUllsTmVKNlAxVHNVcnBaaTBhRnRrTHIxTjJsTzk2M3BHdldweFdlL2VOd3lJangzeVJLUkFBQnNrQ2xwRTFEdTArc2dFNS9qQ1ZMb2VhaHJYa3BmYnVsZmVBbW1rRmdCNC8yY3B6R0VHV1hzNEJ4TU16cG51cUU0YSs5YWl1TFZ0ZURTV0kwcGxqamNuZXZmclJoamJXYlNrdGZLSSs2M3hkVVh0bmtrSTNkTXJXZU9jMGhuNDluem00QXB3MnpZK1gyZC9LOVFpMVFmNFJ5U1MxTUQvWDNEVFdtNVdxUHdsaEwwdmQrV2N1QUhUb0o3b0JDQ3h2N29uN0lUTVJoWHAwTzBnQmVIZE90TFJjQTBOK3owTStGemdocjRrNUNEUFFYMHhUUC9HMlE2WkdGNExNVFBKazRHUGx3V0lYK0VIdk9MK3k0SFh0bzhMdDF0SHFYZjg4RXNiei9yN0h3MXZyeFUvRjBNN2dNOUhISDJzOTMwU0lMV0RHUElWcGlVTEpDTkhla1ZDdWlROFAybVVoNEdaWWYwVkhjOVFFenBtRWN5SityU2FGRG05N1g3ZlVhM0tPM0FoSldZMERCUzRybmFoMG1tVWRzMnhOZkdCSTB5Y2Y5TktVblNQNmxGSGU4ZW9DT2JtRDJQUmJPa0NJWEpsOHdqbjdzSmZxR1hCcVZTVHdFODYrL2wxK24xdmVIcktrSzJIbkRjQWloYW14TmE2UHJveCtHT0dQRDZYY0Q0NktzY0lwbkkrSFdaSXNXdXNDc0tJRnExWUZ1RHQ3WGFHNFhEMnJCaFB6blFMYU15aCs5SE5tSXBzWVAwQ2RlRDhUREtZeVFmSUFhV3BiVlFIUlZlVVZ4ZVJzWkFqd0dTd2RodXlGOHVLSUMvYmNnUWF1ZVFYQzhPUllCb3lVSUczN2pqcGVqZGxEcmlYcFZEUVlJQ2l1dnV1YUZlMUlYZm1NZm5GcGFma3RJREtPa0xqS2xsWTRSMDhabzFSaDU0VWdVeE9MZHRxUVJ3Z1FKMU9EajFaVmFxclcwZ2hhY1BoZFVCTk9COW1sVGwwRldQbTBPbVlhbmh2UjRQMWlzTXE3ZzRRWG9HYytDNFl3aGlIUlpYaVRKOVVSRWRxYTZkNU1sVFJKbnNMN3BtSXpBdWF6emlHcnZDc09jbHM2NElWVDZCeWQrdEF5SVhLWlU2WjBPUzlXWnpZNHNZTjM5VERYZENWMTB3ZUVoT292THhBRUg4NUFPVXdYQlpJRWNNcnUwTThMZW93SnhyVzFiYlJWWWROOEJkQjVTa25xS3ZXQXhaWEJPdEkyZFM3ek1LaGFzMXoxRnFmQXR3dzVlcU1BNkEvVjlYL0pZWU50RGxsN0lCQUswc3dDbnR4ZEorSFA1d3JhdldNS1JrdDJQdEVsbXVWa0k1OTBvLzZZalByc3hjWUpvSEFlNDR4dUpKdlpleFJoYmFnVy9ENzhRVlIyNG1KeUFSTGUvSUFtNm5kUi8yd0UydmVwSmdWbWhlYWt2WCsySk1hbllTWTEyTjFQbzBOUlJSME9EaExhM3lXV2xsZ21WdER4VTRBQ09VN1RZSktmb0xmc2hDZUlIV043clVJOExSSjA5aFZBUlBWM05BTXVOK2JpSHJxWUp1eW82SEpDTzJWNUQwQlZjVlBDWWg2bGpRRU5EMnJ1QXpCaXJxT0szNzl6WWI4dk9FUGYvVWo5bDkySEovdjR6bC8rS25pNWZYQTk5ODEvRmlJMm5VVTRQTnV1SldPcHIzVXZNWHhRRkpSWmZlcG5OajlIOWFJRDg4WEFBZnF2cUpkS3RNMHR6Zms5ZkpRRkdPTjZGV3hOdjNiME52QnZ1ekdNZFI4OEZVYTQzNnI2cVdHUXZEVVJ2b1ltY3VLYTFzbkFlb055aEFtMURZQm1VeGhRR3VCTFZDTmpHdzlocEZHU25FQkFsU3dSUUdvMVFzVHdNbXMwQ1pyNER5dWdOMDhuSHU1c0dXeGxBcWdjUDFMV04vdSs1ai9vek15SlNPQkZlSXhFbVhNZDQxZ2hsTUdvaUdhK2Q3Z3ZjemNXUmY0eWYxMjRQWDFEWmZMaWo5OVRNeDhORmxybUNIaFZrOGM1ZGJBREdkd3l0QXp3bDhERllFVllWN1E4RlFyYjFkOWp6NmZpRlFUMHdNWmtXdytmcTZVaXFZYXYyVURvdEdBNWNwelpjTjIxdTc3bDA1T01uWTB2UU9mS2lKZldaWkNmWFNLMU9oL0FLSkFpbGNQTVZ0dlVsNUFJNENLN28zSWtKUjdCRWRDWElGRzFzWmFHUjBxQlFOUUpsbEFiWEtFSXJzUDBMV201VHcybzRGeUhHTEN2QmdzSkZnTmFJdkVJNUlnbTY5US9JT1JaaEVVd1NwUjRsSVk3V2YxVUIxRzcyN2trUCtCenh5bE82UFVmUDlUTU5JdWhzODY2MTFxdFJHOVVnYldISDJsUy9NWXJ4cDhFczNOS0NuUXNSbG8wZm1Oc0hmY2xVSk1Dc0ZpRWtINDBjbVhuTmVzSEhweXpsa2JSUlZka0twT01LUTJEeFVyR0hpemZualZ1ZDRib2luN2hzN1FUMCs0WEJwYVowOHA0cW13Qk15enFmSkZTdFY0VCtxL1YrSk15dFpVWFU5K2pRVUp4cEQ2WTVVb1hXaWVXNklZUFpFZHFSOFNwdTY5eU9qUlFoUHBoMitnazcrYlp2amt4T2xiVVd1R3k3Z0FSVWxJME1DNTA3bVZyNWtzYVhBZ21uTmk5R2dNR1ZidXc3UGlGdlZzb3NiUXVCdE1FelkvYjdCcE5BSHVuWitQNE0yVVliWkpTaG5FbEdCSFFUZTJFVTRQZVdGMHFNU2hrRU5tQ0QxbU54cjh2aUxNUTYrbGtlNzNFMllSVE4wYkRoeklHMUdaMWxXR1JXbW9ZTXRodVBUeFNzRVByaUV5U2ZGNldiMzJXOFExQW4veHozNk4rbGZmRDRYKyt0cFJXc0dQUHhyZXlvR3F5Tlp0SjhKVU0wTnBYUkh3b0RFMDlwcUxZbkdKQVpjQlY1enc2VVBDOHhQSlNMampSUzFiR213WXpIZEFiV0s5SE9oSElmSWJQWE1LWTJ0NmRmcEl6Nm5XeXM0VW9XbWlqaEJxUld1UmU5U0d4MDZ5RytOKzYrNHZKQ1RWdUVRVmhIWXo3NXN3NFZjWDBkL1diaFNtTURJVTlvUTQ4WVBuMnBjeGFHYitVK3NFR0FuaGNJd0hPaEFKd0U1bDVzQXlEUkY4TDFaTHJCRzRhYTFjTHhjRXRiaXAyUmh4V1VqRmF2NEV3NXMzYTRqTE9xTUd5aXYvOHZNTGJyZWJDdTd1Q01KNldFY1VKd0FoZTZyeFF2bDNOcjVWamU4NWZUb1JwYUVPcnpYSmIxSFBkR29UQmxicHlUcHk1RUhuNUJ6Tk01RTdYKzFlVXVMZGRZZEtxV0dLWE43Zk90UkVJOVpNYjIxVDk1TFJTZExhaGVvdVBLZmRwVlI0YlgrTkVxbG11ZytHam5CVUlyT0ZKYkVBTHNyYlZJVG85YzVpWVFoUXB0Ym0raVNtUXErY1hQbGF2emFJb1ZKZWdDUGdzckU0TGlXU3pvaWh6REgyUyttYXh6QndQYTZoNDFZN0xnaW9qYmp2OTMwUzQ0VEhtZzBSUWZIN01LVlhtTlAzSTRFR2EzQWsvSVFRbWhUOUk5OUZsMDRDSGdIT2pxTVFCOFVVOWNYNThLQ3haSUJIUjF3elNQc3o5SkFqbFhrSFQwYlBDa2c1ZVE1OFZwTE9ncnU4TEZ6SU9vS3BkeGM4TXB1NjFZL1p1SUNFd0dYTmRJY3FYRnFVVityQno2V0Y0dmVkMStoV2JaTGliajBqcW5mYWo2NDhlcGZYQnlwQktTZlYvVHU3amlaL1duVUpRUEdGMmptWHhwK1VUb3BkMTRVV2NKSXVCRFN0S2NPcW9ZMGxPVEhzZFkrUElSZ1pMeEQ2R3hwVW1CTThhZmcrY3A2WE1FaEprUFJzU1RRd1RlMDFmaUZ0ekJwOGtmbGQ2ak9UKzl1bUZ6WFdCblBYZnVqamw4dGxoT1FDODd2amZSRS85WjgrSnJWTU80b2lNSE5KeXBEMVVQOERiSUlNUkd2bVBmeXdDRU9sVjVZd0lHQmZiNlNIdEJaUUVwQ3NJeFFneG9aakQ5Z3VrZUhPQ3VMN1czOXNtd3pDSGk4QXRxRHc1SVdwb0NjQTJQSFAvOWx2QVFCZi9ydWYxT2xSVU9RSnYzVGczcXBhdGdqeEZWcGk1anRLaUFaR29yWVU4SEhsL1A3NlE4U3ZQaVU4WHhmODQ3OU11R3lhNUIzc2RUK0N5R1FhcXQyWWhxak80VTZxM0ZMa0tmY3pwQzRGcklsaFN3QVhKcU5IZGJFSzczWGxHNmU4TVVWQkZEK1ROMCt2TitXQVd1TklweFh4Wnp1RnZJbGZYNHc5RmhxNlpkb3B6dndXL1I1TEtXNndzZTk2UVU2VEVLWFVnaVV2ZUg3YTBHekZ2cjhCYUY2MUR1L1RucVJJSVhmMEloODVKamhxZGN3UGhubnlUaEx5MlNQRkdTVlFHbkRiRWtDNlhxVUJnUFFBdVY2RnlBdmNpdU00NndSVDhjbWRPanRxMmovUjB3eUM0emdieHVQNjA0Zlg2MndWOWZZMGhDQndJa09wR21FQmdzM0NLbU42dFFwYlByR1NlMGw1ekdPdndqTHd0R0o4VjdnZ2d6cFRWM0FjNGZVUnlUSEhNaXdRbHoycGNoOW9hbDNzUkdOakRZZm1Va3BTN2tMdndmVk9FSEdIRmlWeVp1UW9hcDZXS0hrZGtrczFHaW1KdjZyTmIvMHdRemgySkd3eWtybGVQMy8rQ2NlQmtUcmU5NEl0WWVna2M4R3JOVk1vWS9OQ21WbXI5RmlqaEsvZ1FYamJqcGdvKzcyNDNNSlpuOCtJZHBnT1N1aEpjMHVZV2MyRGlvVFpPcDFyQWEzeDFwMXhxbXBETkowSVNVbDNJeXNSMjhXRkRlcnQ0QjB5d1p3UnpDTGp3eTBGbFB1T1JVVklFd3Uyejk1T3FDcDFnaEFxdnpMUDMxbDFLYXZhSEI3VTZzaVN6QkJoVDhPcmFqT3F3WVU0N3JIUTVCdTNaakR6VUp3RVFRV015allneklVcTJzcms3U0x1VVV2QlppQlU5Y1ZLSGFKNUNKTWhkUTNSYmxpM0NDdW1kQWZEMVV1T2VIODBMYXdjZ21SVmM5enFHSktuRkppVGp1cWhqY2hiWUZGYlBSNEVnWVNWeHA5eGpYYnlqdGFjY0ZSdEVwVVdHb3hpSjhacFFLaDJvaURRcXhZNjNkc2JlWk1uNU9hQ25CV3UxYjluNzN4eVE2aEdqSHgydVZNSjRGUU1wWFhMU3RJUVozWHVQUHljaHdIZmZ3SFdyenVlUmtnNERrdjd1SGFFMGhCVHgzMEhMcXpiNEFLN0U0a3RiZ25WUkpKeTZZalZZRWRDdklCSFQreXBYdFNER3pYLzJ3cEV3ei85cDcvRkIxdndiLzc5SC9EamQzY3NnaHRPclNLbENrTkVNM1pmaE5TVlpzQVFFdHRHUk1LdjFvQnRpZmpOcHdVZm5oWjgrcGp4WjMrMklNWFZLWUVQcTlocWhpV2gyZlVJcTVoRmNQb3hPNlRZVDlaMmlNcXgwanNuSGdNRkRJcHBIUFAwNXIxdW1la29EL0pKRFVFQ1Z0U296a1VRc3lIV2lNdzJQSDA2SXY1L0tQdlRYbG15YkVzVUdxc3pkOS83bklqSXpOdlVyYW9IajFiMEVvSXYvUC9QQ0FrUUlCNjhCcXE3OTJZVEVlZnM3VzVtcXdIbUdGTlRwc2lxSnl4eXAvdnh4dHhzTmJNZGM4emlxWktNYnNJb0RGZStUNzRFS1cyVmYxR0pELzNHNS9ORG9MaUo0OXlCejI0cHFObzRSMkh4QzRzUUJHc0VLalZCWVZKOERpTllEdjF6VjhKSkthcE13bzlTS21vdGRsMXJmYUQ0R1BrZXJtSzlCR1BIMTJQSTZBKzB2eGdoVlpMbHBhUzhaNndoT3U0Z2dicTNCS1NRSDZKTGpwSzJLNm1qWUpOeHhMdUJtdTNkNVpSam1ZQXo3UmVQMFh2TlQzUzJjS255K24wL1JRdG9SWGlpTFBxS2M2MktTQ3pNeGxUcjZ6UkF2OHFDZ1JYZDdGVXp6Z2dYbHU2eE9IUGowbHhQVHVjNThPcU51Z1BUdlBWYStEbEJ2azNmQmFDTTA5L0haQitDTWVtTTlCUEhUbkF3eVY2NDk5SlpDSmhrbUZuc2tnY3JnWVQycjJhbmVvb0QxeU5GbjVUbFk1ZVppcHN6UXVqVWI3Yk8rRy92eWpDbUM5RFFsVnF6OWVPek84MGlGanZJeUxvTlB1Nm9rNG9RSzdCOElibUFpTEE1YjRyV2llcEpld2V3ZHVSTTVaZVdoOVFZY3RmR0ZVVjFJRVZYQ29vOStDK3ZMa3NsQllxYVQ5Qjc1UFQ0SWRmbzlKbmFvcWU2a3VmUkZmS1NnbllxMTdLSUdIZTYyakJDczM2YlI0UzlIZVEyUEJjdUwyZ1lZR1RmcjV0NjlHR1JEbkNZQW5pU2YwTVNJektXRk1KbGVsVGtCRmEyNjNNZEhPMWtNcjJoYUNVVzFuOGczdm02QStZRzZRTUR3NkphRUgwdm9naXNIejFySmlMWkxVaEIzRk1yRE0zTmFTSEozeDYvMWNaYkMrTnBqS3hJQnpTdkhYMVdoZU82YmNENys5MjZrclc2c1ZmelBweFRHN05wTFpBR1Y1dDFnVDE0dVBHUEk2TVdXckJkNUVpWUUzVUQ4QklTK1cxaE13dTNxanhyc3N4bVZYclp5RGJTaVNsMzRGSHcrNy81Z3YrSjdQSC81My81cStXQzN3aTB4U2VtOWdwTG56QUwzak9NOU9aUmdVZE4rSG9ISHZkaW9Mc2ZmeXo0K3NQZHdzTzFjcE1mbndzVkF6c3lGakVmck0vV0hxUWxEb1hiRjRycks4OW5RbW1WRldzSlhyWEFyN09GS1o5Zmo1VEVUaWJFcnBhSXhMalcrd3lhRVhXUnUrY0ZzWndyZTVydDN0V3FnL1B0MzhrWFQxaUtPMmd3dlZjdHdlSVpwWktjeUkzaDBhTXNxcnZ3UnhCdFlBcFkxaERBdmxpVmFJeVJLMVNLQ0hPcnJNeFRTU1dUS1d6ZkQxejM5UVRUbUx6dXVaanlrT2ZQb3JXODRjREFyV1JlSTVaWUt2bWJ0MUpRTnpMZ0pRcDhlblpqQkxockxWVHVEeUx1RmRzT2VLR0VmVkR1VUhuVmdaeXV5TzM0OTBMSTJBaTV5OUZYeDBnWGRTTGFrb09XSmVmTEtoNlZVUzhDd09NNU9nUVlZK2xmQnN6QWhuK0hWNlRVU1NRaFJ3OThGbkVtTHJQbHJHbVBsOEwrOG5Rd09lYXZNNUZDZWc1RnA1dnhVYXhCVUtDWStKanE2Qy96bkt0eEdUUTgzcnMxU2RsUXNDZDNPUGtZSk9iY1o4bGI1Z2FqSVIyYk5EVy9NRlk3TDdNZUsxSG1nbWtEQjFNSEdWaXlkZTFqckNNK002ZCtQVHo5S3FKM3RrWlV2bThJcjNwYmlRdXJ1a0pUL2pYbjBHRjZraWp4OWVNSUwveWNGOFl5Ty91cXlKSFBNY0dUZUFKcE0zSzBWdzlwUkdZb3dzQ0l4UlJvWFNxcFhJck5aVmlkUURabUppSkowM0swZ0s1N1FPeHhsVDNiS3p6OERsZWowWk05OEdjUlMzQmdZOVU0ZDZVdXZGL3VzbkZjWFJQVlV0UVYrdEI2VFhlaVhUb2NTQ0t0UFBLMVFiNjMxcXkxaEZjZ0ZlTlRIODBXQmtFemZjQ2VMWTF0dUxhL0tSZFdFRlVXaGhzdk03d3pqY2JyRXZIVGczVVRDMkY0MVFuUkczNnJ6Y2JBQVRNaGdLSnozblRCcEdoTnJYZlV5dWN3Z09hQmhnMzdjU0JQNWtrcjhldDRxeTRnVXRpeDNsNTZMQUxsYXJJVXhWcnFkWEl3MUhxY0UzVnY1SWxPTW1UbmhpVlFVVWtWTXc4Z2ViK0NhZDUvL1FwODNXLzR6LzV3eC9ucnd1M3hLLzdObnp2NlMvblZ0TkFYcXlaU1lsbm5sb0cza3UyOXIxOXYrUDJYYksvLzduY1Y5eS9FZkR3ZVhJTWR5eHBGM0JMUnlqM1dJOGY3QkFZaTdDNFZoQzZjU09Bd1pDUXUzM2RBRWZIUmtISzNCOWVEK3ROWXFvc2VaNjJJelRDTksrOUdJaHlGK2VSenFhRVNYNTlRYUYrSzFsZFdhem1VNklxY2VFSldUMzJRSWE3b042VElCbmgrOXFNbkJlOVduYlNERjM4Y0IyWmU1S2svVG1BRHRrVlVzbS9IdE54MWQyWGlMSlFDbm8yRDE3K0lETC9kR203M20wV05YTDQxeHc3MEhXc1phVlFnOWh0WkltNm9Fdks2VVJGbWJTMFNTalJNQ3BZTVI1U0NzZGhmSUxwaE9GVnVWc1ZNU0VvT0Y1TmFKY0pjQklmbDRBbndYWllTUy94QzJsN2xxL3hEcEV3ZHdFaWRzM1VHaHhiTnhqQUVFSGdqR1RrclN0b0FsRkdwS3RhbGJiK3ZTMHhpam9KRlRjcHN5dTdUWEdoZU9MNmxkc3hjNkMzM2hCZjVTN2dlTVVqb2xRdFMwUjZRYzNua1pUMGo4dFpvTFBYRm1ua01YT1ZZa1BLVVJhSERLcDZDc2tqWnlnR2cwVjBiUDV0YlZBZE5iK3M3UXZhdTRXTXZFSE1uY1pjUFRIZERSdTE5UlN2cCt4TDE4K2tXQit1UVU0RVdWelpyb20wMlBETElZbXBEaVZ5V1JQemhFb3FSOG85U0xZZzV6ajF6cE90M1duVTBjNzFZanNtVDZHd2FRNkVmM041NmNPeVFPTU4xVnR1cjBmbE55Rk0rRjlKSnZUODBJcDFLdjFUUDRZc2RpM1Z3QW5JQm9JTWtKVDZoUXkwalphR21oWlVkK2NqUUF3R3ZQRDhpWDY2TDh4eVl3bmJ5Z01KME1jcFVoclFWUWVtZTd6Nld0YTZGUUJTblFxdUpicmNzL1BCYTNFc0xCZ0tHb01rMEZkNUpDc0pzbjBPa1dxUFVwVWhnQUd5Z29QcEkwZDFxSTRmNUpRc3hnUGRMWE9Wa3RZNDBIWktNTkhsZk5RTlpLWmtyaXA1ZTlBdjRDNEN2UFdPQ2dqYU8rUDF1a2lLeEphbWlKbWd3WW90YkNZQkxzOHNjU1BYd1hMQWhKTFAzanFZVXM4ZmNwZ0h1ZnZ5Yk4vejAzSUYvckFaVStkUFBMM3c3SzQ0MUtSVFRaZ0s4V1owdzhPWHJIZThiOFBXTEFhak1TNiszbXp4V01UQ21nWXBsQkM2eisvNExzTmc0cm5IV0J2Ym56SVZkcDVhd0gxRUhLNi84V2lhbWM4aWZWOTRVRXBRcnhieWNjMktjTExNazZITmdQNGRhaTBvT2FLKzJ6SHd5VTRzdW9BUTB6QXlUcHBJdkpXcmIxc3d6SDZNRmw3aXRPYzE1QnZKVW82Sk9RN2JWeFJRUHhVcEU3ODVETmRGeC8rUHp4TEpBWGtXOUp6UXgxU2xBR0FETzdJbE5SZjZpeEUwRU9GV3l3V3JiR1RGWlE2V28zYjB2Sk8zOXJWYWx6TUF3clZpTjZtYkdMcHU1bElwVTJKdTlIeU1hbjRUUkhTMVlQZGQrSzhDUldmY2RhQVI3UDB2cHU5YzRRV0FZMWpKbDB3MVRJdVEzSGFab2l0eG9WSHIySU5Ya2F5enkwalAyVkUwVk0wNGhGSHZJYmI3TU9SMDJ2eDByUTJXOTJWSjdZeEpzU2Y3M0VjYWRUcnpNSUtGaGtlSGxaMHY3V0U3WWxoQkJhUmtQbEUraStRNERkSWxzaW9lK2w1TXdJVkgzanhVVDRKcll1NU1DUmVlWVYwZXA2cjZqcXlCbC9XUXRPMFAySGtpT01yd3hJRGtNbkQ1aUV6aGxFTFVCUmE4R0lMYk8randIZ3Z0aDhiZGJvVFZSV2NLbEszQXJKZHBpRkFuakszTU5FRkI5Ty9vaXYzRG01b2xCWXkyaUd1Y0hsVnBZRFo3SlNyTEI1OFg3ejVxRVZqTTk0Y0VGMStkUWpuMWpYczQ4azRaaXRjUVJOaDVDK3M0VkhodzNiQmJxUGNPS3FwNzgzYmUzaHBaam9UTXF6Y1V4OXNoRTAvSmlONmdUN3VFbkRDR21zK2NTcnQzSkVNandmTmt2S1djMW9wdHNQZ0VxOGx5QW1wcTFuRHl0MXpzVjljRE9PZkIwNmh3K1luN2w3bVVIOGw2QzcrcHdCd0k1RlZZblFHSFZmWnBWU01HdDhzVTh1U25uRE9haTFSZG1KcWFCZEphS2x3cjVtdUVJMk02Tk9KMytrRjVGMXpWdFpxQVlTdFR1L1hhN2k0clNqY0NKdVJQNWpRcmNYa0x1ZmlYQ2pxRXIxZXc2a3RwQWI5TitONWxkb2s1d2ZiR1F6bEJoRk9JTkU3a2thczJ5NlY0WXd2UURhVkNwWStKeEIzNy9TRmkvZStDMjdmaDZLL2kyaXdQZWtOT2VhaWdtdkIrM2hHMUx1RmtPdlZpNVVVRkdodlpmMTBNRGt1WjR6Z2l5enBOUEpobE5HWFZvQzhYNXU4czFpcEtpdFNZQWpnMVN0MGREQmlPajhTM3N5eFIwK0dwem9SVjYrRVBocVk2RkpNN3A0Y1pva2hDc0NjaW5DM1RmSlRibjZqREJGRWJMemw5Z3FIRnI2enFqWTJMSlpBZ3JidXhOcUQ5L3VZSk94SDRZVFVHQVRvTlMxOFZyZFQvaTJ0aEZWUnBPNWF4TmRQYU9IdVZ3emdiSDBQdmNrVUxKVzE2N0h5enZXdTdxeVBodTkrYTRXK2ZqVjlta0ZQTWNtUG5FT2NSMGFjWk1HRmxKTWFkUVBzSC9PbnVXeDBpWmtpVDRBMHNkS05PQStMSzVDZHZtVHBUbGxRYkNCMStaZTJoME1Xb1hKYkZaeG1Ha3lTNHBzeVc1NFNEYTZBK0pBR3QyWW1TNDN5Tzg3dDVaTW05YlNJd3NKNkVxckkwV2pJTGl1dWZCOWF5RVVLUk93QUhQVmR6L3JucWdXbmJ2UldDN29KS2RjN2dENXQ1NXdiR2lRMmFYVVhlckNidlIvQVpBbVZ2QWRXVTFmYlFTUzZvbkNtb0R6bkVGRG10S2pZZGVuRUk0cXlERVEvbDhET3E4MWJFNnU5blY3dVVIS2J6ak9xWTYzeENkRGdMUHlCS1c2Y0hsRzlmRUpiUmFGdFlRb0lQZDFTZ3daMWE5ZEVhZ1BnUm9JL1JjdlhvWGNwRnk5WjZ1VGoyMnZHYlZxUVU1c0F4dE9VeVdBeEdoK2M0SWdZdDhJVWFMTFk1RHJVUUQ4NjBwVTE2WjF1T01JY2J6ZVFCdkc3YWN5Q1ExRWc3UFcvcFhDZEtndGRzVjhZRFNGQTRNaW9ZM0Z3T0pTenNzYjlpR3o1ZTRSd1BibFVZVndjVHo5WW14aHU2ZDN6MG1iVHB2cHhxVnpkeEV1U1lmc2ppZ0JiNkNGU09ieHdGNUlBSElheWlxelU2WHV1YmhnVGt5ZVlrMmxwdmEwenQ1RXBVK1BTY2RoaUFObUFKVXFqSlh3T3JXbDVHRU96ajIzY2NiYzNyLzhnRWZyWkhVb09LZ2x3cVFhTWYreTVHanlybm9Pa1VuNmZCNTFha3VUTnd3Y0dhQ3JoS2xMQW9nejZBNXdJQ2JyWitvcGRzbS9QSEhqRFV6WG05MzVGOEdmc0RDaDdWUTlWV1ZxYnd6c0cyODExWUwwd3V5aEZmcG1KWFc5ekVXaWtVK2hpRjFzZk0rbnZNVUlkQ2k0V3FZRkliUDJ6YXhsWmlZS2NHbElEbXVSOEs5TFR6cHBZVUJQWWFJbGpMR2xOOFhacFFyUUNBdmx0N05nbG1UR1pnemhSTHBERnF6QndGcTVQNFUyYklWa1NjK3ZqOVpLdHF5SStTUkM0M2F1cVhmWkluR2pEazVhd0plM2Rlc2g2R2pGRFNLWDFXQ3puMTV5d1d0S0YrWmkzTDJZamc4ZHh3empOczFYVGwyTTJoYUkxZ3VtK0ZhV2NaYlh4YmlCellCL0doOHRIcGpxZ2tkemtIUzY0bVVlb3pyNUxqdGZVY3FneVd6QjlEcXJ1eWdjdEk1aFdKUHZsL2tkczN3aUJPQ1U1L3B1a1dpb1JYbHJMU3prMHBsRVNYR0VKT2tPQnQrdTJaaWNPZFE1N3JVVFFIbWlOQmdYSnBVSVVMcnFxQ1pFYWdOVDRiM0ZhazRKd21yMHFwdzRMU3VjemszR2oxN1B6L1NoQlFUejVPYnBYWnFDRjhhN2ZJMXNsSUpjN2h2TEdxS2tKRjhka1pVdGRiS0psOWNzeHJiTVA1aTlkamNCUTVxTFNPNjB1VTdlRGlxbGhRUnpva2QrWlpGaHFNOFVRNmtEeE9xeUVKMEJIVnBBWThjbFhKOHBQNk45blNKNFp1bDJuSkhKSHBEQ3g2Wmk3blpkbGNabG9OeFJtUlpwUFJ2VFo2c0lnRE9YcmJtMVVOZmJuR0hSVU5GTVRTL2JnV3FQeTJHR20xa3dhcUhGdkc4MEV4THNlcnZlaWpYa2h6MmlrTWV4emJWaEVCS3JFZkRMbTNtUUorR0xrOGFYWWZtblNSdndMUk42MHdqSWVHQmdWT3NKQTJsMGRiTkZRb0IyNElnSk02TUVxTFB4ekdSQmE1WTRDTnprdFRiUFVvRjlWOVNYMklLcXVxQXd6RThkWUpNajBMejRJMXVCaTF4bm9GNEMxTlFmTDZWZkFFcFRRY055VHZRVFBMK1FHTXV4NXlZUVpIUGdjOHhMQWNkb1dhanpyeEVHdllGOUIzR2VKYnVYRy9CWk9kbGtiNUxDd1VBSFhMMTJLZnZ1eitCMVFBQ3FEUHFZeUZWb2t4Vzl2Q1RybndmU0d2UWc5Z1dIcmVLOGJ1RjlNdEMvVjNDNThsdzVhMnFnOXBNS0ZVVkZNaW9uQ01wRllYZlRxWitwQXdaOFJFdnhPN2VEWmpySzVXcEFqaVF0U2RVYjBpaHZSUkhDZkFhTGd4bDRwUm1SRXlDT2hMcFVnUnpWdlRSZzFJNXZCVU1MNHZqOEpBaWRmNjEvUlVWUmFOUDlIRmd2TGlXdU5VS2FpVWsvZXVYaEp5L29HWjZkMzI4TUE2YlQxSUtkL2JqdjF2cDFXSFhzZFVOeUloZGxuMk5lU2xjc2ZWNXUxVWJlNkdsN2ZseExQSENUd1VvSTkxWGF2WHJEK0lxQWg0VktUcU4zcGo5MEdOVWxhcGpXRHE3L0N5bzJVdXJ1bm5tU3FremZUY09tL001RDV5bmFzV1RPczBoUllSUDFRRnJaZFJTcEtoUG5KMXJiUFRZZWxIU0hTQlpaMkNyWUpTTE1qZjIxRGwzVDcwcDdjTDBpSlpBQUZoVjZsdFNPSHNtdzJQK0pYOTBaUEVSSkhob25SL1dFbllHdTlaVUFhQzBrUUxIVXREdVZEaHBXVVltNFFHN3pTbDZsSXY2YjZDandlVm5xTGMwNGM0REhWSG03cVVmdE1ZZDgyRHdtZUUrQ1BxVXM4YlZFdDhqdVJ6UUl0NjVKR2ZtQ2J4WWtpZHFiRHFIUEgxMlVLbitQWmtTV21DdHVTSkpoMlRBSE5SMmxjWlpIRFZuMUZ6WTFwSzdMZDdYSEJjTEJVd2lrMFUxK2VwWFVlR1dTU3oyakpDNVRoRzh3a3JrbzVpTlNHNHhEM21VUWxYVERvaE50SHhHeWI4ZVJtblU2Rk5RenlEZnQ0MlVoNnQ2RGpwMDd1TGxETXNtc0ZTVkZpeDJoN28xSUVYTjFlVitJZERNOVFobFhseHFUZy94cUVXcFJsZ3RYUUxJaHBOaHM0SkEzalBDd0x5MG0xb1d6bFNyVkFlWDVjakZUNGdGcllTSmxpeE1Icm1oQlYzTERGU3FGZ2dWbDhiUk9jSkg3cHEvellkQkpUekZhalhuR0J3SnQ4cHAyUk9OZTRYc0JXQkdBZ2tBSHJmdFNrZXJUVklWMmJsdGR4c0Q1dHM3TXFJS3NnVHFJaEkwcjRIeHpuYWViU3RSYTV4RG16blJ4bHBrbUt0cElXOWMyNSs5NCsxYzJGYkJBeG4xRGQ3VG1yYld5aGpIeVpMSVhaM05zSXhNNlIwQTNrOThQRm5tYWVuVm1wRzZ1STJDeDVrUkN3UG9FRmc0aXNZd1ZScDVmZUs1QnZZWGNLekszMFJDM2pKYUc3aDFzK3VzbHIxNGpyQktnQnFnTUVsV0J2blJITjNuWEVwWE9YNi9NTW1PT2hkT3ZrandVTitkMWlEeTBxTFJaSkcvd2t6QkRtbmo3Vm5vaFJLZW1wQzdJOUlCcm5DOWs1cUltRG8rKzR1MThxT2JrcG1IMnU0ZW5WMFpPMEZYQ3B3aW1QSEFRemxLTjBLM1FOUTdyU2w2ajlSWFNwN1RCbFloTTFudmRHQ2N5dmh5cUFrUkVEbGhmaWIyQ1ZhREVGcXFvbkZqcTRySFhncHJEYlV3bHI2UFEzdHlSZm1wV0xuV0ZNcmVHelRWd3Z4cTVmcWg0aDQ0ZDhsZEpjZnJsbEFHbXpVRk0wUVFYMUdaRzBWMWNHbEVZNkJMMUNURjgram1KMG5uaDc4V3VXTm5oVk9aWkJEYnlCbWlNUllBKzZMbkJTMTc2U1JCYmkwWDlFWnZXeGVPcE5iVk4wdlRWdVFnd1k3T256cm5kRjFubk81ZE1rdzRCUXFhdUg1ejNpU0xNbzI2dzcxdkdSS2RDSHpteFR1QmU4TWF6aUJLK3l5eUcrTVdQbjNBblZmMElQZGRZenB0Y1lCWStYQlJQQlVLbzhwcjRFREd4U09PQURYSit1OUJ5Qi9UeW9FVzU0ZFpqclhTWXRRc3VnY2hyNWRlWDRJTEJnbTBFYWhweTBVUE1yNHRIQWlRbjBjSWVMTlIzaWFoa2tnWldKdkN5dHRDZjBMNWlZaEJJSE9DSFV5WU1xM2h6Y3MrY25nNm9kT1hESWpyMklSbHZualA0V3NxVE94R1JiWjdUQ1VwTEpld3o0eFN4WElYbytubkk3S1R1VUpTYXg3T2JzVkpkK2ZlZ1V4YlNiU2NTMEUvSnlhTkx2c2JmVERIblowQ21BbTBPUncxRzVVTW1vaEFsMm9KZGFORWxKYytIR0lYM0FZcmdERlMzTmV4cXVxODl1WHR6bEM0M2hsS2FmVHVmWjBCcUowdWlveU5CcVRqRklPVzZrWm53cThyNForL2RmeGtyWHlMdGtrNHNLVngvTWl1UzQrRGF5aXgwY1hoYlRBWC9qaFB0TThQZlBueEhmWDFCVC84TUZCcXRGZUY5MmtlTXF6RTNiNUEwTjEybTB6QllDRE5pQUFadldXdFdESmFaNUl5bmRXVXcybUJwUjM3aTVHYitRS2VLZ05WMjI1c1I4V1hlMFo3RTRtS2hGbXRzT2UxQVpLVm9vaU04VThPY2xmcDFCaSsxcWJBaUl0ZThkUThLcFFaVzF3dGVGZnN1NVl6K3N5c3RaL3krOVpKYjkwTnhVUW14NEhsVlJzMElzM1N5U0xQSUdDSysvZUIybDRXMFFGT2sxTU5EVjNBb2JOa09SeGRYUm1aSnFpSyt2VStWS0lVSmJKdmIvZXIwRFRaRWdoN0FRUGxWSFRSM1FKaDArZExLK0EwWEptSFFyb2VMSE43M0lIOUFQSllJcjdoUFM2Y2JDbmNUNlN6TWtKeVVZc0xOU2M5aDV5UGdMSU91UlIxVFpYN1ZaWG1VcG5QMGVVd3pRc2xhMTRUL2VXVkhQb3VBaVM1RmcyWE1jYlZsOUdUS2hra3l1dHdBZU16QVh3TlpSNGxGSTRZRDlJSmZZSUdVUzFET0NLSFU4Z3JyK1FGa2Q3MlZzc2tINElpRnZBSTBzQVBieGxaMTdpNEZMaktVOFFucCtieU9BcEJhVW1HUzRRVUZEMFlsbFp3bzhOVHNIMnd0SFlOUk9uMUNRRmhjOUF2Yy9ORXA4T0ovK2lSSEF5YUJjbmtqQ0lxMDJYYzlZSHFZNWljNnp3dEtwSVU0V0JrR0RsTWlRWWtVUyt0QVd2TllmdVpCQS82bkthS09jS2NJRkV0TDNvcWNpQ2xYNXFCaE9RMXljZ1BSSzRzRkNHais1WEtmbWFHL2ZXUzMyU1doekZNK1J4SWVVTkd3VmhDYWM4b2ZVQXFqcVQzcGdjaXUwZ2h2NjVFVHhLZ0VtYXl0RXJod2pybEFYc0RtNFFoeTlyZmM0QlBOUVI2cmRrTUhtanhSbW9CSWpLSm52UmpNazhGYzRaNHJwU3J0NGxrMDVJOGtmcEVUWk1OQ2RnTktQandyeDJLd2xOVDdsQ285S0NQMWZWd1dwMXNKNm1CQnZtL1JRNmtXWS9ORERYYkVUQW1oTVhnZVAyM0g0aHI2N3BTelJ0amF3NDZqYmwvZlFlT2t2QnBKWmxNZzJ4QjhDUmw3Z0lDUFBMRUhGbmhmQm9TSHp1UjNMLzhNdkRUM3d6Yzd5OGNQMjdJSWM1UURNeFY4T1ZXc1BxdzlyMVRYazFVRm5RRDZqMjdtaDExYnViUDFkM2c0TmlWaVZtZk9BR01YdXlSamI5NGZId2YrRlR4N2pzbXZ2NzRobHQ2NEh3citIS25KMUJyd3BjZnMvS0I2VklYRG5tblBHWTBhR0VyTFVWcWVHUi9FdUVTQ3FWQklNK0FsN291Q2F1RXZldU1JNEJpaytUaG1Ja283Tk5EZllDVStReENwbW5DajZSSFEzd05jS1pFZXJCVEJDY2RpMGo3RVNWNURrVEx4Wkh4OUl3SmR1OE8yckxtTHJWTkhBZnNiNHhEUzd6WkdGd056d3pBallJNGJyYzM1MW93NDROZmlVTVlGdjlObHM1TlVuVFdkZ0I0UTZ1bjVJSWNuOXFjc29yeVdCNTNxUkVoTE1pQnM1RnlLQzRyalhWdDJEZ2lUVU9kcjhta1RaRVN5RlNrWWRWSlRpSnozRFhWcmlvbDF3eGJjUEdlVmMwVG41eHF6b2FvbnlhTEdUZG9GTVBGdGVmc3RlZlJCanNROWdqNlpYcnBFUVVtbWFySnYwa0tjUUsxN1JIWWN2RzlpWUppbjNQeW5wV2Q2VEFVUm1BbUZ2cDVpdTBOSVlPbHo3d3gwQnlKS1QrbEQzZkppVEI2S0dlUGZUaE9EQ25JZkx3ODlGcGZIb2VJZzZMa1BQbWVTWTZXZDRPek9IWUMxY3RFc3BjWWhjWWl5bE05V2t1VkZCUUhlYTVRa2tCQXNDQWlRVDhGSUJJeXVOMkEwaDVvTFJGWnlQUExIWnBlZHgyOHpnTHU4QXJpWU5VQUpValBvWVhDOGx1WGtFOFdZdGZWY1cyYndsSDBjS1pac2hZaUlGQXV1VExRb2pCR0t6NzMwQWppbXZDNDB6ekppSkNUZlZhTHM5VmxrMm41bFhyaTZMeFhYdk5RS2tDTVBnVmhMRXhqekFvVXVWbUFzb0pQVGh3WGF0VllGa0FDY0NXR2ZtNTNZQndiZWowMFpsTFE2d3hZRUVDaFNNLzU0cEZQS1hSdjFqQ1VpNVNBbCtIZ3BSN0JjVnhLbHBVUFhUL0hOcHZYTnJCRjdCQmkwYkRYZnZqNjVxUEk5ZVNFRjhkT1FWWnFHRlVGM3JZV21SZkc5WmdIWmxkVmcvY2hPSmV4NTMzc0U3KzdGeG1hQWFpVUROTWhaWVhwM2Nyd3VRKzh2dS80dGhPNzhNLy9ublNWLzVRYkttNjRiUjF2TitDSEh4UDZvMkN2a1V5QXV1aDlmRTRjcnhPLy9IcmkyNHZzZ2E4VGVEN3BvWGUzOEFIc0lKbCtCLy9nZERCU3BNOTk4WjAxc2FXSjJ4ZTFUZHdTM2x2QjQ1N3h0U1cwOXh1eVI1U3lKMDlTN0pFY05RK0Ftdi9ReTJaTFdiM3VYWnlHd0o1clVJSDJDWHNFbUk0NnhHWDlQQ29ySFZaV282Z1QzejhHK242eUVpVlBMNU1NbGtESGlDQTVhVXJBaDFaV3A4SVgxdGdrdm9wNVRxa2wzTkNabWpoMGpSRG51Vm9OMXcyeHRtMWZMMFVhbGhSdzQyL09VeDZtQlBIVmV1ZVZIY0RCU0pwYWFUYUp3R3dHSEQzbUsrR1VjOUhyQ0E5ZWlyWG1GMDVFUkdYbWluNUdZanJLaEpPOWorSDVKUit0T05TL0lad3BWOGxXRzFXUjBCbVZHNVREYTNqMGdkK0p3T0xWNko2cng0K3B3ZE9Lc1BEbG5zdGFHanFkSERrcVFIQWRWbVRYQmFxT0dObGxCdmUyby9OU01ibmlEbGV0d2o4bzFHNFNkeWJVd3Z6NWxqSktZd3czd2JzcExpekp6QW5LZmwyZFVodnFXN0I3ZzZKNVViU2VldkNHUitkUVFFN3B5STlQZ3JxZEV5R1lSeWV4VEdKNVZNVGE5NWFmWDdvbFNNc1lJWXN1bXpWSE02WEFaZmdjVEsrcVFCVjZsSzB4UytTK1BUa1BaT2JJZUdMYlJNMnNJRS9HK1k5ZU4ybktrNEFxSXlHQXVKSExKVXp0Rnh3RUJKRVlYOGxMVE5UaWJ5MmNYZGQxNmRnWlQva3JjYWllSWs0dUF6OFdyNTZtUUF6S21jUldNMFBnZklYRUhKTW8vNlVOMEU5b3pDTE1SdHpRRlFjTUMxblIyNU94NG56WS9NTFFoVlF0YUlhRm9yWmQ1bnNXNWxJQ1ZxQysyTVFvQTg5bmdBeUxYTllzU1ZXR1hVMEEyY1lpVVVVS0x5M0NpTkJ6YjFzWlVRZzFLcENWM2pFRlpZNDBTNzVJbWhCb0svaWcvY3FPRTBSeVhZK3MzNy9kSDJ6UTRMaHM2QjRFdEVOUjZtR1NTblRpNVhXME9BRDg2UlA0K3ljQkp3TUQ1OHBvaXpnRlRzWlFxUlpudXF2MTZ6Rmh3SnA2eGVTQ2h6K3lkTzF6WDFpL2RQejZpNk5ONytSUkVEYmtkYnp3ZkU3enJEL09pVjgvSmo1M0t2SnpwOG8rd1JhdjY5cmRUQTFjRU1jMlVQTnZNUnIvOGw4Mi9MZ1ZDK2UyZTBibVBDaXRFb3N6clRCOHhmb1Zja0dOVjZLVVBVVnpqMjdLbkNRZmszMjV1L29SSENxWk9wWlNJc3BRd3J5V2llTjFvRStkbDdoSk5oZ2E3WEpyZExCRGhwZ3dWUC9ubVlEYVgzUU91RS9DemZNdVlCaS9BVjJ4eGVvUUxrZUdxSkd6WlBNc1ErZWtVT2FJdWZQanBFRWMwMjZrSTRlRngvVmh5WXM0UjFEWDZnaUJMSVpObGJVdHFwdmU1VDJHRjZlMEo2bHZ0MXJNSU1JaWM5cnFJY2Rvc0lEZDdlWjVKZmhxSjhVTUJaR1BkU0MzSTlpcGI4aTQ2S3J0dGhJdkw4UEs2S2RBME10TFdsVXVCemZrSlk1eWVOMXpsV0FzMFRpWEV2WFpKSTFTZzZZK0dNR0ppWEQ4Z1NrL2o3cVdGQVF2S0h6dDFnbzJYVStHL3Z3enEwbzJPVzhDc0xMS2pCdlg1azVzUWF4N3lqYjIxdy9OeFp3NHU1SVNXeEFlcGdONkNDQUVmeXU1TmsrWmVLYytSVEtqRkhLTzlyUWhBQ21ubXZib2NCWkdPYXNoTElLbnZtcHNnNlVtVGF4Y3BLVERvM2FQeWRuVm9zK2xQOERKUlN5UG1SU0t2aldHa1p0eTF6bEJGeVRDajVZeCs5SkVaWllncEZoZFhQSzA3bG90QkJVb1ZMMktOclB6VGk5Y2pBeXo2clJZV28xQklXUXB5VElDQ2hNSmRyNlNDVElyc3ZZY0wxVkxGdlhqa3VCaFBiRjNuTUwwNXY4bmpqTUlmTHhoL2NoeFQ3VVVIQ0xDREhOK3gxcVZWbjVaR0I1aUgySzdHcDNXNE1GSjNLZGE5b0dsUEVrZVE1VGhpVHRyZEVUYnlGZ0REc0E0QnIxc2hpYlROVTlFWStmQ0ZTeDJKdVdQRUIrZnlWdlVpbkVLWWREODlTTTZDcjArOGF1bkFDYTdWajN1VFZRS3BFMU1sY0F3emdBM212Sy9BWHpDUVlESkNsekRIUlAvL0QzaHA5ZkVPUXY2YStCOEZKUThZSUc0b2p3ckFaUE1pK2VKOHVLaXZ4bnBHb0ZYMzE1Y09Rb3Q0RDkxbkFyWGZYOTJyTEhqNHp2d3VVK00zV09aVjRzMEFEb0JIb3IzQ3VKd0JxcU9QM3g5NEYvLzY0ci83ci82Z3QvOXdPb1FCdEt5TS9MUm14VHVZNlhGOE9TY3F1RldlRFlJRVpCUXpjY0FnZ1Q5OHpWeGRIbTFjNXBSNUpTSmNQQmxwOEUxSW84dFhtd0tSbFYreUo5STNObW1ETmtJNnRxRzJEbmlzenczaG9wdmJ4a2xOU0s4Yzd1QTlZTWZmU0ZFV2pmdzFoaEYzcmN2R0pVSGlyQklQK21oUGVKSmRQK0xncGhFUXozMkFTcWZ0N2F4ZjhNNGFOaGF0VWVQYm1NNW1POEsrV3FqNFV3aWk2UlRYV2Q1cWxodUZFWG85dHB3TXRQZ1R6M2tIc3ROMld0amJVanc2VHVSVnRVS090RlFjS3FLd1pWNHJpbThiNlVIOWg2QTVTQjNxc0RJSnRkUHEyUHNmb3FJOW1nOHkvSys0TGlPcjVlTEZvWFF4VlZRYW5pclNCVmJtVEoraWtwT1NZNURwdExCMytSUDZFaldQdlcyUmJNcU9rODZQQzJnV3ZmdWxPRzJSclVzWEpkNjJSdUhXazVLay94a2QwSk04RHh6NFBQN29lQjAvR21MQ2RjMFdIbkEvRDVyM1hQcy80SXJZRnpwYmlweldvRVhEcFp1NmRtRnJsUlRMa3R0a2hjcVV2RC93bTlJSVp1TVRDSVZEODhoQkRhVUUzRVNHUjBhQklidkszc0cyOGJzSXEzSkY5eGNXQms1cGJCQzRtVHk2S1pidTh4OXp4TWREU204bHpnYzdBVmYrS3czdmRYMUcvRkpRRjhnTEZPQ2dHZ2RPVlY2MGlsb0NzVzBKa1IyNFNTVjYySTR6aVVyMlgra2N1TjdXQkdUekUwcHh0UXZvcFRLUEx6eWlIT0tjTUJ5MHp4ZlB3OEF4YzdmMFpVanBaRGpZcXdhMGdEM3FKeE92RENoM0JVQ3VIUzZ5a1ZDekhzanoralI1M2pvakhRZFI3LzVtY0pEcXJxMVRxRThKOEdGYTBFb1lWRnFkdTY2ZlgyNGRZOHRMM3hhclhiWDVtU25LTDRabk9CcExNUWh6MDgxcjNrdGowTGcxejFiU095WFh3dHVQekdFT3h2WHZaZ29RQmpFQ3Y3eEJ5d1N0YlhLT3VWSHcrK1E3UHUxdk9QTGU1WlNUL2o0RHd1LzlQOEFmT0N2SEZWLzB6bWl3c08rZVAxUi9oUW0rclVpNEhmdkdkdFc4ZlZyeHQvOEllRnYvK2FCOTBmQ2oyK1pOYlFwbU5hOEhNenhEa210RzFjR2lZdDByMWNrY25KU0lDcm15UWlPSkpuTjIya2MzV0tJYzQ3NFRxclBTVUNpR1pyUHdSRDlSemZ2T3FnL28vTjRoTlVuRmJINk9xaWtrbEdUMiszQjBXZ0pOZisyNS84YzhQMUMyYUg3VjRNWEdqV1dFdkp1VmtUYi85V0RCa3VFTk5POGxuUkJDdW5XcE5oemZOWVo5TEllRlRWWUs3eXUzanVxdk1lZ291c0NyN0VjaVo1d294Y1I0V3FsNWpnMmtsMWlhWFMxRWFXdHFVZjFSTTBOYVMxVC9zWDJjQWRXQUpxancxeGMwNW9yT1BjZEJWV1ZlVStSc2xtOU1GWGhDalJYeWlQa2lQUm03d1FtNVYwWWdWR0puUU9OVFpieUlERDRCQUZ2VUZtYWg5eHJrWmNMQ0J5SnlKZnI4RGFuMTM3MEExUEtzZy9PRFN0azVkeE1aNXdYOCtHVjZzN0hrOVZYTTloWHlaUW9hdGhWUFBnYnhyZVVlUkt1cWhRNURkTlNIanhYY2s0TFhwQjhXay90MEhqUyt1c3pVaDBzODV0eXhDbFlxdGNKSXRDRHFQQ0R1VERtY09QMkdGR2Q5TXFDMFp4S1RwRDJWb0J0SytvWVdKRFZHMXZYcGxCSTlGSG44TkVsRExCVGpHbDhpMUdqakZNNVFZRTR3cHlDUkFJMnNuL1JxdWxFSm1JdENiUEtUNXB5NWFNd2tRSjJHRWlPL1pBOVJDT2xrZVVRN0FjMy9HdkZGSTVSeEh3MmdKbk5XaSsxNG1CNGo3OVJwcE1Ec095cUdPeUpoQnh6a05RZ0ZlVm9CdERoTmQ0WXcrOGpRck1PMlF6V3J5ak1YNlJoVkRrYkp6OGowNWtSRWNoWWNPVW00aHN0Qm51KzRwNVZLaFpsQUxGNHVhbTFCcXI5c1BGbFQ1RlZwTHdDSUpsYmZJbUpWaE1HNGFFWDBuSEtLcWdiMndVZWxYT1R4eUp3MElsOGxzV0FNYUMrM1JFUXg1R0Fob2wvK3ZQRUg3NE8vRGd6dGdPNDM0dkFoNTZ4bWdwVDgxS1N0K1U5QnI1OHVadDNsdDRhMmx0RHJqK2dQQktLNmpoLy9OM0V2OWovdFNtMmwvSFlkM3o3ZUdML1BOSC9DWGdkNzdoLytRQW00M29Od0pkM0NIdVFiVDEvbkZTTXp6UEtMN0V4SXRCdXhTSVd2Lzk5d3ExV3ZQL1E4UGFXc2RucnlhaEVjL0dFaE12bXdibm11QVk3V0NKYlloaGZGNG9GOGtyb28rdFlGSDRXQlJ1a2VsMVp5b1FEWEZBd3lrUVpzQjNaUnpKRSt4ckFxeE05dCthRjQxRzdJQWczSXFMR0gyNnRZdHNlaXA1czVtVWkwajlLQmNRWFRZR1VqQnBKY0x0bWJvTUFGbVdtOGk3T3l4d1VzT0U5T2g2bVE0Y2JSUVo2bkV0eW9KL2NGeDJBZ2RoT0d1bWsySlJ4d3RDK0svUzRUeUNyaktybVJrL01RSExDZURUeGJDNTM4OGlvMGd2Sm8veitBcm5JMXJzMWEyd3JpV2g0ZEt4clcxZE1PaE5oVURwWUV1V2krRlkwLzFDcDY3eDZ2ZWxVWnpnQ0ZWcjFxQmxSMWtrUkNNa1ZHY3VLVUZ4N2NRakFISE5jY3ZUcjVURW9GeFJxajd4OXVhUUdwemhGdkd6VzE4NllnNG9iUG4vK1pHQWw2QncwOW5KcEpDVXpCMHArdEtLdjNaaFZzd2pUWU4zK1NpWjZQYkJoY2dHTGpCdVdENG8weWtGNUoyWUc1dTZzYVFJU0YzWStqRzhDTFF3M1M2UDJNZDJBampTMWpocitnZjRjYVpsRjgyZU1YdUh0eVNtT25IN1N6eEk0Sjg4VmFHNHRCdG9yU0FpcUhGdDV4bkt0cmlBNFBxT2lOU0ROSXByOFRGaWxCSkVNdkpUTTY3Y1JwV1ZnV0tMZGFFNUpzQ2p2TXJUbzRNakhDTHNXS1VHdmdSL1RPZHExNkpqd1dhT0g4RVdNU3orRzhtMkQ3NjhoZ2hVdkw0blA5MlU4cDBRcVFuRC9Qcm14NWlBLzl3b3JDQ1ZDNFpvQVhWdkJFRHRDa2VJZEsyWjJrZjdXM3Blb2czWWZTbG9ZSXp3WFY3eGV4MVYwM1JvQUdVVnE0dU55SlFsQXVhYUIwRllnT01OcmwxTGY5L01TZHRaQzViVlpLWTlTT1luZUVuTjU3TjdRTWZuZk9GR0xXTnIyRHU1UENSQXNEQm1ITHdDUEEvaGVnWjkvR2RiTjdQYlRMU3g0dXVoVTZGNHRtWXVERFhGL2JNcDlGZVMzbTNubitiMDQ3d3ltQnFBMHVxdnZLOXMvL3ZDN3luRHpmOWJ4K1gzaGVQMklmcEFZNkh5eFhjcm54MjV6L0k5L0hQZzlKZzJDNFQzR0k5VGViZ1JZM2gvWmxOM2pyVmk3MWR1dGVpdGptYkFLZnlkNkFLbUNjeUtoSEZtKzdPeGQ2SlBHN3JGUGV0aVQ0TFhaamNqSFVObjdTRzRvU1JZRUwvOEF2Zm51UENRWU9JeVRRZDVwTk5xUi9wRENoUExqdnJhSGsrc2tiTnVHMjdhNWw0ZU15alYzSVJtU1lFKzYveWkxMHZWTkFsMGxYS3Q3T3lQR0ljbDRhTGVxN3d6cyswdjg2eHlwOE1BYmpRZHZYRlJaU3p5blNpWUI1RTNhVGpKSXROYnVuU3M2c3lKT3dVUGhZWEdRUjFKSkVjeklFMmQxMkpzcjJOQzh4ZlJtVzBIeWVnNFJtR1JGODFiMHo1RENUcGNBcVVmdEF1ZXorTVBSVTUxS1ByQVlKSThINXBDU2hoL1I3TWE5di9DVWY5dnExYnB1S25wWXBxVkFIRCtERk5nVlJ6bVY0bktZOCtkNzVWaWMxeHAwMEFMOEJhaDRPTXVDNjQ0VmVDUGtKUEQzNXVzRS9SbEE0akVYdXZWcUg0eDBxVXVtSDFuNHNVV0dmNlFCYkNYRmUxbnA2d3dkemRwT084MXVBQTJYS29vR251cjNFZDhvQVZUczJvbkdvaGlZcDRybDR4cklQTlljQjFNYlZyS05sMlNxSElNcklmbEtMUEk4UjNaYVpwWmd0U1lBZzJaUEhMb0YwV0RCODA1aUJyQkhEeFBEUGQxNUtaT2d3RTJSdDRtOGZuQytORkg0M1Rhb3ZHckdtcVJtVkw1SVhYdmMybTdjN3NmZXhlZ3owZWU4dWhLZDkzSnBOWnJFU3p4bEJNellBTG5tQ3lZMGl1QVVLY2pFRkFRYlhIamFaYU9uVmN1ZCtUMjhBR2ZNREZTVW5vdGhUMFQ5bU0wOURTMU1YSU80R1pHYVNFdGdvaFE1ZElLa3JybEpGd1lJaE9yeW5kcVpCcGpqMHB4QTY2aDZmMS9qeEVlUU5halhzSnF6cEJOd2ZJVWpVZzAvc0xRbWhDSDE4RlBBNUdSaGMvTVdMWkFPNE5jQ2xEN3dIMzRGZnZveDQvMDE4ZjdJZUR6RU82N3I2RmhvampQU0hpaGJObUdlYWlXdTR0Mjd4VkVBQ1czazB4Qml1akJiT2JlS3R4OG1IbDlJS25HOEN2QmxHVGp6ZHM4NFh4T1B0OE1RNzcrK0Jzb0hsWlZPaVFBRExlTUNmN3pCUE1YYlZoUVJvYUZLQXlpcVZOeU9oamdjL0krUnh0aExhOUk3NGg5QlZYU3NKOEZ2S3NzNTdZOXoyb1gySFFBT01SRys1c0E1Q3A2ZGFPOXpJZmFsdXRGRkhuaXlWQzMzeU1NTGNGVnl3eGdlWnN4cURvWGczTWFLVXFjNG9tZnFDamtHSUF4MnFMeHlKUWZWbVh3cXBVcjBFUFUreG5TTURPZGJlYzh4WWd4MXRhaU5wdkY1a255a3RSb2d1RGc4L0IvSkRWV01sN1Z3SGdld0FXdmQ1R2tGRFhmVS9ibFlwMmNvRHozS2hsMnVaUFdkSjAyeEtsV1kra1JqODZtalRNd1hxV1dqbk02aml4SE4wTU1WTlRtWisxNmdHeXpvamN1ZEtOOVZhZTZVZkUzcDJyVXhYZWZ0VWhxV1F6ckdhQWY5RlEzclJIQ3lIeEZZTlV3UW5iL3NFVEJQM1laakdvZDZPNVQ0ZmFqOTZldnBEV0ZPZGlMZEUwWjNTbVdsWWNXWjcrUTNoRnd4NzUxdmhVNnJPaCs2MFMzVGtZN05tU0o5d2xTRm9rMXdCdFVMdzJMYkNzbUJWQ29jYWVsUVRkNUd4OFV6RjNwR2hKNGRjZTZoa2FDNlJ0TDd4UlFvODNhdFptd2JReUcwaXVsQng4QjNqRjRGRUZiQ1owSzNMdVUrUTExbFYrSkZDNW5zRlBKZU1sTUVaTU1LT2tOWmFSUFFZN29tejR1SGs3SlNYbkhzSjRCVGVaTFIvVGRsUmJuZDBVMm9UWUhmSXRMQ3p3VC90TWZEd3ZvYTRoY2ZneDdTWm9OR2dwdWprOWJScTVKUHM5cFpxRi96RVZTTUpZVzFPNk43bFBTZFBBTVpTMmhxd25EZFFhblNwL05qcGVTaGVVU21NaDR2Mjh0eld6SWtwb3FrcHhqbWxrQ1IvNmxqWUdDOFR2Q1k0Yld0Z3VyQ1pwenVRR002dURCdUE4a1g0MVJwb2F2MnhQN21mdFp4S3Z4K0FELy9PdkQxZHVCYnkyajNoWnZXWmxVZlhVZnV6cFN4R2Foc0EzS2hjSDk3b3pJM1ZIMVlWZi90UjNncGNVUVhyMnBDYXVCZU0zQmYyRTB5NmZPSnZQdjNMV0c3MFZDbVFSSFdQL2VOdTNvUmhkT09FaHZadGVKZ0RDTEF6dzZ0RmM1ZHQ5d3ZyMkUvZ1AxZ3JXMWY4RW9UK3hzVGVKNWN3OXlTSHJJQWRwNUR4b09Pa3Izc01SZ2RnNFdRZHZMWmdYWXpRRldrMTZnMGF3dThCOW5UdWlITVcyMkJFMWdjZzMzZlpheERDaVVvZFV0ZEZ0bnBvN041MG5tYW9lUUtUWWUrQXlRMEtzZ01kRkt2OHJ3NE1GUjFNK2MxQkN3a3V5djNFTDVoeU1zTDNkQzJFNlZzU0hCV09uclFwWVE4by9hRnRmVWN2ZU0weDhkTHQ3SUREVkZpanpKS3AxNE1LaXYzK2ZIMnA3NFduRXRDc3BxNWMwR25FQTZ5UXViZU1JazdYL2VjU2MyS3dCNjQzQjRqeHBJdnlVT1g1eFdLMjRIRTNRMnBXQ1BnWEdhdUI2WnFhMWJIeWVuNkkrVFVpdHA0eXY3dzlFTUgwSGhkSmV1UzVaWFBoWDEzRE5QRWF3ZWpWVmcrMTlIb3hVZTdMS0I3Wk9aYWI1VzgrK1RnUnB0eWxLTllJa3VRZXlXWjUrclpLZFNwaHJmV2tLc3pKNzRVOGZrdDEwRmxNNDRBUmN3MUxBOVcwK0NnWldoenhIaDBHaDFVaGx5Wjl0cUdwSWhzZUFvNVZrVnM3bmpHRzNJdTZIRXh1U0t2cmViLzl0OUQxZE91anNpaFMwdEp2SlppcTZINmRPdHpSWVBRM0ozZ2dPRWVwZy9JbEkyVW96KzhvUjB5dlExNnF2UmE1WUZMbjF5UEJOV3R1emlkMlBlSUdweERJN0ZvaFIxbG1SdlVObTBSQTdXZG1KbUlmcUdVUWxacnpIWHJXdmp5c3VTVkhMdDRoSmdNdGtkeE4wVHF3RTg0Z2R3VTJ1dXMxUzAxdkt2Z3lNL0dLQmN0VEt1QnBOeWk3R2xvVVR0cStvcGtuMGtNVk9rd0FkYnFEYmNmQzI3eWtHN3RKbERoeTd6QnlWcGNVbTNpeEpKaE1zNkY3R2xRQVJjMUNZcEtYRmZZaWRPdTZOc0pGSFJzUDFkOC9RcVV1dU54VkE3bUZpVjNOTDVZV3RKbklHa3A0YVNZQXJ3clkycVlOVGFCQ04yTEduYU5XRHM4UXJDRXgrQXBtaEJobEx3Q2Vka25DUkpUVkNQbW41QU1mbUl5blVMK1o0V1daZmdJNUtNbVBsUmU1Nm54bFlGNWRsUHdyQ3ZmUVFCY0J6Q0tLRkZKWnJLZlU4SVBETXNyM0g1T0NBd3FJUXdaQ3Q1MUMreTZkOGlhVDhzQmo0d2IxL29GMWRZRDUrR3lmbGFXRVBPUkp3cTZ6eUhRazBkd1ltejdIRll5ZDc5dmtsWFppR1hxbzNrVU1ORFhvSWNkMGNRb3c2VUJWYkJ0dy9PVytQeWtrSFpnMHB4a2VITnMxLzErTTJPaDFzbzllam5DVlgzYzN3R20vd1JHREY2SE1OeDR2TTdEclNHbE1rS09uZ0lta2pXWklFQXNWOWJKSFF0c2pmdmF2YnplTzhmbFBKWGpMczdJRnNiSVFuQ01xK3luVkNyckl2WlBnRlVEUVlnajVINmg5eDQrR21sYkFVVkM1T25DZjRlcFBEdnZBb0owSnRhOHFNQ1hwUzk2S0U5OW5mVGRSL0RsQlBSaStSTU8rUWt0V25Xa05KM3JQT3QwNGxpaUp5eUdpNWZZdTlwakhxMXUyYjF4SjB4eVhXSVlxcW8rSW1QWGZFOXZpejBkbzBST2tKbE10dXFRWE96WVpIeVZ3djBvby9HeXZxcEdNK3F4UTNrSmlSeElRRzJCb1A2Y2lCQ1JSODV2QWJSUnVZb3JvRUMzL3BiNms0L0t0ZWtKRFlYSkMraVdXeDNPOXk1Q0dLVjVyN1VUOFh6cVNjM0kwY2pGdmpzN2xacE9qN3dZNG8xamlrUDZHbWhiQlJGMUVQUFFzUERjUWo4aUgyOFRodXR4RGx5RmR2YlBaSUl0QUN2ekV3aE5pbDhZQWtOclRmVUpMMjVWQmxoeEpJNkZnd3FSbFdPTXNnc3lxa1VkQ1hzaGU3bmE0blVzb0JWSFM4ZW1NcUZjQytad0ZyM2lPWGZqMFQ4K2h3ek52MUszSFp6YUd0TURtQjF2NzI5T0RZdlgyREZMdHR6UWN4eGFuQm5uT2tIWmRGNmpNMUVnb0ZLV3dwTEUwWW1jSHdRMnJVVm5kNnRzUC9qdEdQanpyd1ZmdDRWLy9PT0p2Ly83aHFWaTM3SXl1a1djRmxZSDVrYmVncndCcTVSZzFWc0VwUFJqV09uVk9BajhXc2ZFUEoyZWtXeHh2cEw2V1NpSUFDckhqNEZ6N0dLMG95Y3dGanYwSFlPbE5XNVBBeXlQSEoxVFAvb1VQem9GLzhvNWdFZnVhYVZJVzhrdURMSzNJTWhnNmN0Y2RxMzdUZ0RjOHlWUFpYWWNRd0p1RlBUVnJTUnp6TVN5dEhXeXJISVc3SE5kRkRxdTh5L0Z3RFZPMEdnZ3JSRk1ZQ0lXRWx0Y0ZuKzFnOERvbVY0TXpkRWpwVFRXZEVOUXZ5K2xxTWVFaXNlRFNydlZpcU9mb2pVOVhDVHB1dmcrYkkwNzNxUklHVEhLVVlwSHcxdzJFalFGSkNsOEU3UkV0dGZxVVlEZ1g0aUFpbXJScDJTZWM4RFRneGF6dWluYXJWUVpROEg3RWFWWUJEVDNFNWYzU1FFcnZ2WGtZeExPbGFjQ1dtc2NZMklKQkJLam9xTVRtWlhWS0ZobGFjK3gwOXlVVXdWYzV5WnBIU3E5NlRMVjE0ZW5lYS9FNHFyOWRpNys1WXlobHFLWk5pL1NRdWd5Q0lWNVVXVFFVd2ZMMXdxUG9vWnJrYmF4Rjg2WDFnNmROT1hHUmFZVGFSWnlPcGpNSlZBOHI0RnVaM0x2V0xYbE9mb2xURVVpNUVONUZ6WUNBQkhLM0k1ODVVd0ptbXBiQjF5bmtBRmMyQ1ZTRWFHTGwxNHhaMWlxQVQrZ1FJR0hWdVZaOHB1S2NJaitOWnA3UkFsVElBNWxTVHM3RjYzVkFHR00rSjdDek03OE0wV0tQMGRBeVBhUlNMQi9oNnlnaU1FdWVmdlRieVFKeFp4aFZ1bnFZcTV5VUkyWC9jSXBaZjJDazdaWTFFd3VMQ0VscHo0VDBlK3Uxckxqak12SkY2N2pBRHpVNUJhbTNwdWUxMmVlNi9CR0F2VGVvMjU4c1JrT1B6eXdKZURVZFZEbk4raEUwVVVOaVVPUXJ1clZ2ZHNNQjZxRi9QTTB2b05oYW5QV055M2dlZHI1N3JjdDdFR0JlZnE1b3grOHlkUlRRRkVqR1hlaFVHeVphUm8zNWt1aW9OMEJQR3plTXJuTEc0RGRLamt4OE1uaEw4RER2S3prNkZUUkg3S0daVFVpc21kUFdPZGhxWXh2b2w1cmVlSG5YN3NoeC8rejNQR1AvMWp3OTM5UDRYRVRZS25uakFZcTZETWZTTzJPTmdoU1RNd3VzTk5YRjNLV3FYUitmdXowYnZlRDgvWmErTXNIUUxWYU1kSHg4ZEZOQWFZNVpKZ1ZaNUxDTThDQzNOL1ZSZENKOHl4VTdyZHNYUEVucGd6SWlaSXBrT29HcktuUzBoNWRENWZMVW5uclFxNnpEMENIVUxzTHI3NzQvZ0xPNTJBK3ZRL3NwdmlrM0FHUitOd3M4dEtsUEp4eHpOZjRuTTZGbnhuTzd3UTF1cnZtd0RpTWpKcW5nWlQ2eXFoSkJDRHdhRmZVNDllbWZSZktQQlIrQW5LcmFKbG80cnhnWlg2QUsxWWdvUm9vTTVncUpUdVNycFhxSEszaWVxeWhIZ3dUbjU4dmRHbk9OZWx4cGxMd3VEOXNmNzVlVDF3UEtpUWlzajFzd3RlZlJ1RTdsTmNmeUplU1JwWC81dUE4MklqMUNPcmVhRzZGbFpyS1c3c2ozbVFBK3ZBbFRJOUtSZzc5MGcrK3RZcnpURWhGSHZ5Y1ROMEVJRjY0QXFGdFNtT1A5a1NFL1BWSWdRV3k4NG1LRnpsSzNWSzFlNWxTYnFMNEZPZjh1TWpSU3d4TEVRTjFUUFFraHZRQVFqWnF2eVlFU2VZcEhNNzVZbnFESVhxUzJTU251VjVYQTNnSmNEZTRZZVZJUllwQmpHU0t0RGhpUHpwK0lrQmVLSHEwbGFtVVNZV09FV25Ed3RFbWlkYVlIUGZHVjJ1OU1BOUs2UytkWjEySmwrSllHblY1QnRyTURpQXFNN0VjSGYreFk0bitzbXZ3QjhGZDFrbE0yZzB6UHAwUmsramhDTThSdTRkZGdITmZxTExtTWFNMzdpazJwQ1J3UTlYM2pqTXEva2RmVG1PSkdmbm84Q1NFY0d4RkZKaW1XRHlmcjJpTnJxVW92SC9vUG84emVLTEpQZ2FSQ1dRN1YxYXBWVmJKQXlKRWlFTmM5RDJ5M0J5UFNCazRDUUhPbENTb1k5c01rRUFDQ0dCTlRVVWJiNkxVekhLTFVSVVdMbkd0MlZ0c3N1SEQvZDRzNUZNckc3bjQ1TmZVZ0Fwa0szMmlvR1NFYUptbDcrSEcvWUFPaFVuRHM4VWN2TGJYV3BqZlBsQzN6WUJRSloyQThuUEVmdnAzRkZiTkJWdTlBVFhvZCszUkJPMk16VE5PbTcrNU9JOHJoWlg5Q2FDOVdBOVEyekNPaFg5UmR2empQdzc4L2Q5ZmVndloydTRiakdEbVNPeERmUzlGL2FnNUljbUFUUklZeDZTQjJpZk92WnVIKy9uekU1OTk0UGlZK1BQUHpEWC81U0NUVzhtSWU0QjdFMVVjQlJtQjk1UUlXNDNrTEtlMGNnQ2g2QzBXdFY3c0NhbEdpZ1hGeTdXbU14UjZFeDBjKytKK3NCTE1oYjBQakpQcisyVzgxQXBCbWpMbjlVOXJUd29jUzN0ckVLTVNuZElVYmxmdUZCakNpMFNXTXd4d1lMbFNyY2tJYWNxcXFIZFNkMTRJSC91MHRNNEVxMHQ2Nys0TWhOenlSaHRFTEY4bE85aU5LMWRXc1N4MEROdHpLZ2JPRHFLcnJsVGxuVXY1Z0d4bkdRZHF2bU9rcUh4SkpucWo5T3ArZnhBVE1EcHFxY0doWWRFdHAvVjBqbm55RkxUcTNvelhVR2YvTG9CT1BBTDU3dGtoTHhZUWFhU1RLMHpIelFUUXpXVHdXaWlqeUtIUnZ0ZWZEajdQOERweGVxMGV2WFVId2p0QTVucnhXZVlLNmxOK1RrN1hrTEpiWG1FVS93NnVoU0N1bVhNUUE2U1RMRkdEejBSRnB0QzF2YWFSa1ZBR0lMbmNCZkRza1R2bm51M0FPcm9pWlIybktqd1U4dWM5NWd2SGhpWmVwRW9DMEFXS0xCWWZBc01sUFZKVjlqMnVFQnJna3V0MzRGUFAyUjZwTWtwVUlFaG56RkxJOXBtOXErVitNY1o4REFQbDdtQm05VFBPa3dRUnFBazlaUWZaT05xVHZNeDFvcDRWTFFmYTd1T1llRS93NXU0eGR4QklSYTVzTHB1NlpjWEduWEozYWsya1dwd3hJUmJlS3NyanpHbEdBaERlK0pDaURTVDc4b0o5N1ZXQmJNaVBMaHJRaFh3dTRaT1VFNUVGZXlJc01QWEcxOEd3ZXFyTmM4dTRQemg1dDN0Y0QrYkEzcStlK2hSQTU0cE5uUjc1a0RWSjYzcktVbFV1U2dxQW9UaU9HWlZxa2xJdGpiZ0NCd0FtSWZ5VC84ZmFVMVVoS0Evc3RjaWVqeDNLZHcyVmszUkZZdWFKT0ZiOHdXdFQ2WDJ3bVFFaklzYzVKUVE0Wnd0RnlqeHhYYXlFN1g1VERqMmgxanM5OURHdzZhS0d2S0pqei94M0NzR0JLSXN4dzJWckNjZFpMR3pmamhON2wrZ1NwdmpBc2pCeE1ZVU8vUHUvUkxqaXA2OEw5KzhMNng3Q2JVL0xiSWUxTGJRKzBGOEhYb1kwdmJGOGFEaElrM25WdFFoNldVTk1XeDh2VTVEbjV6UmxLTkdJUUt5VmkvQzdIazdGekh4bXE2SlM5a2lZTFd5ZVVVeDVWTVJia1RGQ0laaVZmUzhidmFpY3EzSzlWTEtNckN3endIb0h6ekdCejVQL1B2UjNXc3FMSWM3ZUp4VWhRTUdadkdHUUc1NzJGNm1GTG8vOUVnYldmU0NPNWJpWW5LS1VTRVJQWFVqOWtsdEl4Wnl0L240L2RubU9Zc09UNG9oVUl1dTl4d0JjQjZaU3RJVHBXR2h6Qy9TbDlyREhpVzFMOFh2RlRtVWxtYS9uQzBOQXZxaFRkMElUTlRFWkI1SHpYaitOd09ZbytpRGx2TlNFU2c2Qzh2YXRNcVZGeVo3SkgxQkpySkpSTVlkb1VGemVYQUhqdnpsYWVKRGFGMWRBbGVyMTR4RG5mbG11eU9XZTU2Rm9FbE5mS3k5R20wQ3krNUkzVnlaWWN6aktQVWliakVrMDBhR2lNVWVxMmx4cGJQWUpOUDdHVXFPbjB4UjdnRzBQeWVQSy9pUFJCbHBVaEgxNGhNTFRQVFJVNXd6Ty92UFVtZzFTZkYybmRGYkl1TUJUcEVJR1NLVVJnc28yNm42Q2xJUFg0cURrSWxIdVozZG5KUzlpVnJhTUdQOUwyaUlBbjlLaWhuY0laWDQ5YWw5TEN5bklRK0pJbDVqdE9uRTU5RHJ6cnZFYVhzZDA4THlBUEF0VHoxUEoxNUJHcDRjVlE1RlpmWklyVGd5RjdZUmFGNVZrS3gyN2NrYXdjSmVRdG5IWlFuUHllLzBrbmVjcHI4S1YvempwSVR2U3ZXd0lybk5lWW9UbEhXUkNGU1ZSNmVrQjFhdXVnbFJ6MUhGaVJqMDhWRDdpdmMyVmloQlFJNkR5cVpKUmlGNjRqTmp1b1RvNHVWOUx6WG1VUmZLcTViSXVZOENGQlhWZUNtWTNEOGw1V1pvMkN3RnF2NVVKa1h0YUNVcFhkQXVUajlXamNReVdXZytHTjVaUWtZTnZYcmdNTVIwZEI5SUdsRm1SeW9IYTdyaWhNQmVMYm9xNDcvYi9TS3M0dXg0OStPVEdGZm1mSFlDRElXQWFuUjJWQTNabFZEcDJMUHo1eGJuQkw0Zmx4MDlOOVBQcmhyLzdvVmcrczRCNGtMbXFHUkxiWTJEdURPV0xqQmVsa2pvV1BkR0N6aVFGY3JiRWxvQVgvdm9SRzNJRnlVYk9STFFiQnlpWncxcUpGRXFBTHBWbmR2NW5HWXZqOE8zTFhNc0VTWlRtY1dyZG5laUtoMDlYNXZ0RTd5Qk42NkwzM2Z1eVBkd0h1OVROT2MyYkdWVHVOSkJDbkdHZ01CeU5PSlpvVlJNM1pxRE9FZVVnbkFXK1B2WURlR1NrZnFKdEcxYnVXRXZFVHFvSUtVaUJCNWxVNUVIV1VnSVhFaHJXUGtzbHlSM1pCOVNTVmZucE5CSHNZcE55UlAwS3ppN3NDb0E3YytEaytOZTZoa2ZQUytTckFhN0hVaCs2WjY4cThIQnk4SDNNODhTd3VhNnFZNjdZc2tONW5BNjBPTXBiUndvM1lMa3NnbVJOZGVwWXlwYlFIUUUwdm9DVEwraDhVNDdlbWhudXk2c2Q2clIwUUxTaXVuWmFpWkt3UlNTWk9XVnJWa1pBZ2hiMW1rcU1FS1NNNFVtbGZrUmVNSG41TFBQTHdidzMySHU3Umh0YlN5SE5VeWxrZUFTRjZVcUtIL2ttMmZGZFBUdzF5WWRxS1lCclk1YVpoU1ZiUVp1YzhnWG5MamlzMGk4cGlmbVBxYW15R2hrNHgrUzlPSzJ2ak02dEZKVFdNTlFJU2V4NVROTGxTRy9BcTgxQ2lPZ2gyUHZxU25UQ0NrdDlBakdveFJwQWtDaDZLeW5BdGtYMXg1R1k1UVhOR1dWYlFvWXFwTXVQcDZrKzU3UEREdytYamFtKzRMamp4Q0d2TENGNko1T2pHN1loQng4WHpZSzVJS2wrc3ZIOW9qTkVDYS9QdVZKekw4RkpaQTRxOVJDek9jQjFhb3dDdHlxUDZGbzI2SDZvbnBvVE9WRXhuYkxTQnRxOURoYzBoU1ZxSWlZUnlvbmxVeVdNRVY1TDVaajc1dTFBTjJBS0ZITFdlMmxHRFRrb1RBSTF0d0lNd3YvcFg2cVZqelZpWGlmV3FUU2pJK2FkUWxhR1dsWTBZUUdCcjBqT0JFaWxFZHpjVWFjNVhkZ21aRVk1S0t6UGlaNTJuTWZBdURuWHRVQ1dPNzE2RHY5dnFUdW42cVhodjdYZDBCYU1pSDN1UnNSUEszMGY4T1BYWXdJZlFLNFQyZFQ4Sm92MmhyLzdnZk82VGVEMnRqQVBNczZseHdCU042VXRFYzY1cVV1cHB6dmFmR0c5YjNnSW5mMFZIZC9Xd0Evdk5QUnU3MDZ1VTNBekR2NUdRWXBGSW9ybXFSeld1RjV2VmJrenZpK3ZsRUp6SVh0clhvTHpOa0x4YzQ3b21JUVNvd2puc3Z6KzJSZU96cWpVc3pPSzBmc3drTjR1a3FSOU1MU09sWERJTThmZ2VsMUFCS1U2c0IrQkJGOWdHOWR4ckN0U0ZzbTdLV0Q2bWl4aFJIOStQcEhURjdTTlh2bGFKMEdyZ0dyY0Q1WndoZVVaNTU4RGs2MGd4ZHNBT1FOZHBZK05oamtaeTJSd0RvekIvREZQRVpiQ1dOV2lMNi96UXNIRituOCtsVUxVQU5mTWtQUkVqRTNreGtJUElvNXFQQkFGVzA1b3Q4MEVQSERpb0NIREtOQWNtdC9JVjRpQVJYU3FGYzJvVjdXL3N4a1E5Q2d2a2FFdUI3UHhmTWZCKzBTMk1zWWszZ2hQdDFiSVdFYUUyUDA0eG9rNU1sWWZJblFxeGpHZVJHWlQxVFlhYVRERmh6Z3VHUkZFcUtNSTFKdHZUUHZ4WmFHNXJWengxQmNaL1JoRFRiL2NDZE5KWTVnYzZCWWx0Vnc0N21RTVJlb2lPaFBYaFdnaHZXd3Y4SDFuNHkwcGVwNm9xWk80V1NJRk1xZEZETnExSTZqU0NOSlA2UnJCUnpBYm9nUURaNndYQmtoRTVuVTlxcVdnWTZVRnNZZ2UrQW9KQlZxS01BVm9DWEZqaXA2T3VvakNXa2E0MXp3SytGVXYrVkdnUktzZnJHalcwVE95NnFMN2tEY0NQbnFUaVk2SktxRUNsWXhNZWZLK1ljNU1SZFRFejdiU3hQUTh1SEluZ2hLNlFRRDBRUDJuUW1QaE9IbE9mVUlndWFrMmYxa2VRTVpXZ3R2NWhFNGxSUXloSkRXbTVKUnVDeml6R3NaNFdkRkVub0tWVnpXRmtVV1ZRRFEzVDZOcEtzb2VEM21INmtVc0NLanNlVE9JTGhibHZPN09hQkt1STYwR2l5T2tHZldpNmoxY3FqUG0zVERIQzBuM1A4Zy96WTJScHlvSFpPZEpZTk9aTHJicFk4TjBTMC9zZmdGblhOZnNuUXJDQVV1TDRXQUZYOVYyOU1tN2NoUXBNdWo2ZTNsZXMvdG45SXNyOEpnTHY3NDBVejNqWC80TlNjbHZhUGhXTS9CWW1IVUFCM0JMMVQ2MlkrSHRpL0FjV3ArK0YxTnFLSGZXem04QThPV0cvTGJoL0xYajl1T0JqMCt1N3g4QXJWUGc0elBRNEtYeS9iYWxhRzJiL2ZwVjdSR09DNjZCbUJDT0RJUUc4R3BDVEljMG5PbGxyNFd4SjRiWk8wR2hINU0wcnkrckx3ZGU1c2tTSkhkT2tjbE1scmJOdm5BQUJHRjVGNThBekFZRkdWRnFsSDVZb1Fpenk1eU01cm5TYTdzdmVZa1ZVUlB1N0dRTEd6YVJEMlhYbkFUNEdUdGNRelFtOGJFWmVPMm43YzM3clFFNXluOElkTlAxUkVwVTR6TDlmWlN0K25aQmU3K3prL1RZZzM2VDhvRWVvaFRSWEZSa0xPR05JNG9rRzI2V0dtWFBnRmFyR2YrK1p1dmF2VGFha2NWRjZlK3lFRTRtUXdyZU1IcjVadXgyVnpxV3dpRzN1Ni9iY1d1T2Z5Q3RMeWJmVVpWRmg5NlVyekNBUUw5akVkc3dlSytpanhVUGY4VDFNQkptRGZJbkhyRnUwa3Bpc3h1VW04enRCSWdRZ1ZvZkV4RmxPSmF6QnFLV0luQ3FDMTJuR2crM0NQSzBvU29QQnhaR3hDRnA3QUpma0ozQnJTUjE1eHV4Nyt4cFVBZlBxVDRkUEtFWVYyV0ZqMzZOZFhvTVY3SkUwalZhcU5wNCtqQXQ1TVQ3Y2JwekJiNjFEcWVYYmFJTzFXRFBLU1NpZTB4aStrbmpONWhGRG9LNFhWdGhub3ZXYnZUTW5RTkJRYXBKUUJ2WTk0NWFpNE5PT0JsMlErR0Z4YkVDSERZVEY2K0lESzVZVVBKajkxdkMycUZEcFJYK3IrVWhhYmZBcGlaWFVMUG8wY3ZHQktlc1RyR0JyWnlDTXg2RG9mN2NMYS9Wc0R3M3g3ZGxSRFJYZzYxaHplRWo1OHM4UE9PZUNaanhHNUxocE1DQ0xrdjU3UmdXdnFlR0JhMEtoWTFNWVZkbm9DdUhrNkVHcGtFQzBsczB1dmNlMjYxVU10eTlOaXpYcERoVkViMHA1elJOUUdRc2pDUlNsbTVjY2RHNVNJajVLK21VU0Vaa1FQb05QYlliYmwvZUxFZmtpT1BhVHpZRkdjRXBzTldpK2w0Z1NiaU1TN3hYNGJpYzBjOFRVeUczdzJaT2hvZkFNK2xsNjRkQW9OOG4vSnVmZCtSU3FVcmVnZFlUZWxWS0tWRllMMHV0cFBEU0VZWndlMy9IYUF6M3BJOGQ5YWVDKzdyaDlzTXBDYnF3RDZacHZ2eVkwRVhVNG90UmtXTWRtc3Mxa1RzVnM0NW95NWlMY2lBNkV0Y3F2WFlQeXc1VFVLYzhsY1hjT0NNOWErTDdEcnhlM1pUSGZpNThkdWJYOTNQZ21CTkhqNStZS0VCVml0QmlpdlBxZmZ0dmVucUxxUzkrbmw2WnlLbzRYZ1RScWZTVDFvaHl5OWRPWDFvbnNWbzBCa0dOV2t4V3BWb3VyZzY3dFVGQXRYQmFVbzZtVHpuN25pZ0VyM1VhNjNTd3BNbldTZnJYRmFoNjluam9CSE9obzNlaHJHZTBXRTdvdU45dXFyZm5tcThrSnFKaTh1c0VUR2kzMG1nUHFhUGhMUUZUa2EzaTNwd1p5bDdlQjJRcDBEQ2FNdmZ6eWlnbHpJY3E3SXlIaEVzQ1FXSHlYck9CaFJadXNiYlJTaUoyd2tsb1dBR2hzVkhFbGRCNnlkZ2gwaG9Fa3loRmgzU216bk1KZFMvSGRqaVZOUmJDY040WldSTmdGT0ZnWkQ3V29qQjNabmtsM0N2bmVTN09JdGEwU0VTVVUwWm9QYUtYZ1hOWUNDZFJ5ajcwVXNRNDQ5RDNBNXlzOGxsaHlqQVJxanNYMjZ0enFuUjRsZUI3dVdZMEl0SVRLU2I3WTlSdXFPSFZSSFdQRmVBbUx6a1luTm9GbmpkTVlkVVN0blNCNjI4bjBJajhoSkhUZ0lyS3BibGIzcVhjbkxvdk5KWUdLNjYvUkR2QlViR3lNZy9xbjF0aExSQXZoWS9wakRJd3BmK2RERC95ZUg3dENvLzB3Yy9CUTNwbkFBSTZDRllZVjh1YTBzcXg3LzIwZkg5eUNIeVFGT3NjUUI3ZEd3K2c1SmlZcFZydURzOFBSZHFCWG5EQnJSS1pPN3ZDaVZQRlBxc0FBeXJOaXo2UzJqMEN1aENOdWhCd3pWQ2dKU1lzTW5PWVVSbVBaWWo2Z1pLY2g3NWdjd0lPSURvbTRjQzM3d3RwTU1GWVY2Yndqa2pDdFp1NFFSTTNiaEJOWDY0VnA2TlZOTG9aT3NsdmJUeGVwNHp1NHpoZG9UTWtWekx1YzBPNjMzQnJHNDY1b3dneDNIUENQQmNwSFJmTDVJNEIvT21iMEkrLzMvSC9uZ3NGZC9XVVYxNzB3VHIwL2RWUmJtUWJjNERrVU9Ra08xWG9CclJSY1g4OExEbjluQWZ5a1RRZlFKMWlSeFM0RkVMYnF0UmFCK3VnQ1lKbEpJalZJbE5oNFl4Y0RKa2hwVGdsMUxpSG5acHpnbnZ6ZEtSNVh6Z1AxZlZPNE5mUHlkcDNheXhEajd6M2lYT0Fudm1Rd1BYMnFKam1FVmdWNVRsVTduaERqalhtT2Q5TGlOaURZVjVUNnhvRktIenFGaW9nNGd5cnhJZ1dwR01FVkltSWNadjNCR2ZleXI2cXNXMDNLZk9xVU8xdTE4eERpaUoyY3doSmI2ZGNnWDZHa1ZacVFzNHNaVnZPcEZteklmTFBnemJYUEtOL093R1NISThtMnVmR2pZK1NGK3ZBazNBNEt4TWpNRTdNdFlsa0pHUE93KzUySDBQR2plTmRtUHZIQ3RJVjNwTzhQYytua25IdWltcUl3Q3RUZXFJVjV0YWdVY1dXUTJlVThJNHVQaVhINXlVR3V1U2tqY2I5UGd4cGp5RHBjbU05bExhUHZSU1NwSTREMFhJSmRsQjFaYnd5R3c2a0VvVlhVQkF6TXdVYjFOYVdubVZ2aGppU2ZqT1JlVE9ONklNeFdYTlBETTdTNjFtOEFBaG13ak1BZFB5RVh5dGlYRXMyNTBvT3B4bUdPWFdzRWxnTjVDajk0K25LVlRaR0cwelNNaWZmejllZStzNXg0TXlFZm9hcVIxRi9Kb3dWRFFqTzdua1FMODRBV280S2ZVUUxYUjRlRlhUQ2taTUt1R1JhSVB0dUVzdThwbUY1RmFIV3BjVXJJUHBEM3BTc2ZCK0VxSSt1QlUwaE15d29WejFSRDRiWmFZa0orRGE5SmFhOFJaMG5IUEt3NXFjRDJUbzk4VTFncE5zdGM1TXREdHdPSWtBZElESFRZWlNjRFNYYzYzck5HYWt0WUtETzNmZ0JzQlZnN0NYaU53cmFQKzRSWGtmdVFLNW9zM05SMm1ac3lJMG9hSVovbXlZaDA2cFBYS3pyeWlRZmFVZFplRkVhbTIxT2tqei9qQnpsNUhPWTBrcHBRNjFKMFlPS0FVUjBKWHRVeXg0amtuQlp5UTFUMWlvL0l2UnA3L2oxKzNlYnAvZTNMeWkxRUVHdFVGTFU5c3U2SHhHcWFwVWpMNGk5SGhxYXB5ZHVONlkvOEVJNUN2WTZqSmNaNkxaaG5wZ1c2dnp6Q2VEUDNlTGkvMmhXUDhQRlNUM25NUXYzaHVLNU9xak1XK3hzWjg3S2hldm96Y2svdkZkN1AxamVkdlJBeW85cCsyMy8vTVNhalJnVS9jeVpwb01pMlpyWGhIcWtxalNONFJIeFFXMXd3N3RlQ0RhMzd5ZHc3S3dOUDg2Smx5bjBhZjgreHpSTXd0R0Q2MERxQi8wVUpYR3NJa1BWVHkxN0x5VytKa3pERTRwT0Vqa0k1MU1JUVhpb00yZi9rd3pJd0Jwa3N1eW5LZnZhd2h1VC9OVnovYVB3aGF1d2pHdVRpYUgzZ2w2WTRXbEdBdk5nclhTTlVKK3ljZ0lhcWd6TzI1eWVlOEtZUW1lQ0ZRRlZnbEpBS3BXM2VTcEJRYlJCTG9ldE1aUWJnT2VJY0t3RUJGQXB5RnlLblN0NlpkQVZTWkduUnV3VmlxeUppdXlLTWlLbVc3RnpqZFVNeTFLUXViOEhNVC9iQm92YUVObk4xTXc4cG8yYktIWmx3RlU1SjZIRXZmWTlZRWd5cXJJYS80UVJyL3h5ekJjUUNIUkV3a0w4SWY3OHhCaTYzNENJUnlPcU9PU0pSMjVlT0JNSlFYbnIyYysxcm82T29nL0k0VERhYnE5TU81YkMxRWN3Y1RZYTdPZUxwd3FITXh3N2IwNnpXUHJhUjRUMUs3djZZOHU0amtYd0c4ZzRuL1pYSTBwRzYrczFTTVhhSkp5N1NoN3F0bGwrYjZzRlFSeWppSnRiM1lqTlZZb3JkQUF0U253c0QzUjJwOGRVeitNTnRYbzNvNldlczh6TnJEVTBldUg5d3EwNmFaczJNa1pWdzN5MVZ1eWRBNjQ4YllTTmxVcUljcmpJUlUwcERwcmc0VjRBamtpWEpZK0NDVEpaNVZ5aWwzRktFWDJNQkFXRmMyYnRleW81Z2pod3R4SW96VDdFYTBRSGhMak52a216YjhHQ3ZMRVRYc3NGN2RZOEJHaTBxZ05acktIS3Bmdm15RG1ZK0dVbEJ3bURXTjRFQTEzWTJCa29RZVF5d2FoYjA0azB1WnBUbERvYjg5cTNmUVNZVFFMK2lwa1BJK2ZTVWpNenhQWDJ3enZ1dDdzcFkxSGpXdmpkVGZJVlp3c0ZjYzNNV2E2MHFCSC8zZzhVTjFyR0VObFFCeWFmWW5BdGp6SlloWEF1dkFyd0h6NEJZRWVjZkVPN0YrdmFWdlBFa2lKSmcyc2wxNEtVUksyNU5hQkVMWG1tY21kM3VDNEFZMjMyNzFRSEZlNDVNSTV1bFJnWlZaemRnOWNtc290anNpbkY1QXB3WXlpQXA5RzlPc0loZWtJSXdsTE9IUGgrZEJ3cVZUdm9sUXZkem1aRUwzVVI2NksvOUU1VnExUHdkcG1rdmgrV0puRXR0aXcrT29Ka3hCbTR3UE1zNTU1ZjJzT2hiSlY3TGFJVHZhS05vK1Nub0JkdEtpQzRGRXFJaHFDZXFlU1pHSWs1VnJqaFBnSW9pSkJkNXhubkUyZ3E4dWk1b0tRaWdZOVFqbjBoaTJ0amZ3RlhWYXcvMzNrV3JqNjFOd2JLQlNGZkxLclpoeHV2VWE3YVoxSkVNOUptYTlLd2d5Sk1XNTh5akFaWFNJN21hS0JwenBKWG92dkRHTTRWclJXVGFSRENmczNGRG95SFRhdXRWWWkxN2xHQTAyMmhCc011NVU2Z1pjNE9PTzQwSHBNcjlpc0JKd0pybzdKR1dvSnprZE1pRGppOXFUZzhBc2xVRUI3dVd0SFQzTUhiWVEzTjhEU2QxS28xeFBuNTNQV0RsOVVpWG8wS21pSjVWeERmRjB1cVpMRDkzVnB6K1FqM2p0RWxmOU4vakM1Y0phZ3I5RXh5MmxzM0FqV1Fldit2SHBVZWE5VG1GK0tBZ0xaTWtSZHR3akVQcE5tUXhzS212RXhBTDZibkk4amVkYmxpVjNSaFRhcnpUSGpJanY0R3ZacytHMHNmRXFJY0RVTDlsa1R2WEovUDhsQ1VjYWJCc0tBeWdRaDhhMW91TExNc3JVRWdDaUdaSHd2aU91aDhaRWtaY3JBbVpRamxXSUtleU1uOVpNblB0YUdrYVBWS2dhaGNXb0h6NUtrcHc0WVRDL2RiWmwybmptV0xQNGtGcnRwWVZkNDJ2WUJWREdXOHNsdnpmQ0pIaFdWQUVZSUtvQndLNGo2Sm1CWG5uQnFkZ01JQ2lYT1FPZHJjRnhtdm93SDFoVmFXM2M5cFljTUN1RkozU3hyeXNEQTFQa08vTFI1Tjh3cS80L2RmZmdnS1dVVnRTcDdpemZiOUd1dUZNOGIwenR1OWllcVVaNTlqaElDazlTMTBhbWFGZ2NxRFBwSElSVGNBUEFmK0E5bGlVRy9zaG5lL2M5MzNmZGw5enpJdzJwVDNSU3JHdWxVQkUyWHcrTHBQTlB4UVNSWExzcWhHYWwzbmUxYk9hNWFGT2FtRTVwVDY4OTBXRFdFMHQxZURKamdOTXAvVEc3ZkhmdEE3Zjc0by9GNGRPRStHMno4UDV0WFBPVm11Wm9KSkNvdm1KOU1USzZHTEd5SnlrOEZDbCtCYzRBc2pRWGs5ZmlvNjcrWkE0NVNNVW0vUlREVm5hNTNxeXViMWV1Rit2NHRFWStKZUMzdXk3enVVdXdyQkp1WFY2a0txM21mY1FhOE5mWnd1dFZWNDVUU2R5enpKTTVqZkFPM0Z4alpsWVNtSWJtelNmVFNERVlzRzJmN3FOb2F3dlJObGJKdEFqb0VERzRoNldQbXBxd1JYaDZIMG93NWYwWDJ4SXRLUkNBcUx3QWxRRWZtbHh0eVUwc0xvb1p5L1ZqNVFhZ3Jqa3lpNkJGWWMrVVFhYW9WZE1zeFdUUVhWSW1wVFk5UVlyWkJYS3FjNytQdlh1cXpWaEZBNDg2cTVjUVhDWEJWNkhJcUNFVmNjWG01c2pXdHFVVWNvd2xnd1N1OW9MTUpRaXl1TG8yUkZraUxhNUNCUDlyUGZvdDEzenNJSU9RaWJWSXprSVZIakp5VzJ3eEFZMDcxc2ozYklFVFN0VE1LZFV2MU9mcE9TOEVoV1plNGlnR1BrbjNVRE4wYzRQclJiV0xwUW1HQWlpcUIreTI0Z0JTWldwb1FBdkt5QmR0K3d0TkxHNk9pcHVwQWpnTVQ0dFdlMDRaUm5IcjhTYkR2eDA5SGFVMGg1N2RSaHVjOWdGWTVwSjlDdE1zVGVBakF4WmtRd1JzVEMzSW9ESDNRdXViSk92TEF1K2NPSk9lbnQzbHB3a0tma1pTTGVSVllwQlF4MXJHc21GTTdqd0VoV2k4dkdCSFhKYWxkS294UUp5NHpSY2FWRXlFSzZqMmhRTUZjV3J6dWpKa056THV1SVJ0TW1scXVqS3h4SHdmRDJxTGE0MktLVUtZbjVaNkJuUjVMTE9BRXdwZUFCNzQ1RW9YQ3VhQXVaYW5VakJVVUxNOUlVaGN4WWdDWkJubk1Gc083RVBDU3BoTlVKWmt3WncvS1ZWTVkwS2dtSVM0MmUwdEpHOUpLZERPQnpBVy9ud3ZjeExhNzg3NFVHeXdBZWJ3UnZsaCt5R1UzWnlHd21Vck56aDZ3UjJZVnoybm9yNG9VcG5vTEpIdEtKQkJ0Y0syQmpsVklCZVZvZU5VbUl2U1ZscEZLdmFzOHdGTnlOYUxLOTNrOTVQQ09iQjM0Y3dOUEFoY0RuUGdsMk94S2VuY2oxMThtR0VHT3c5TTNyc1dkaXBLMFQrWDB4Y3ErOU95TWkxZHJDUER4TU4xeFdCRVpHV09GYWIxcGpuSk5FSTBoYzZKOG1wRnl4ejk3eHFoVVY0UjF2V3lXSkNISTAwWkVoM0FWOEdxc1RFOUQ3Wlo3QzAwbzBGQzhKWjBVRmhYSWU1eTZML1ZvVmNtdWI2YktYT1R0T2ZUMndGRkZ5dkV5clNXbEUvOHlNOGlYbXZzbjFlQ1RrM0xGdG1VUEtQdTlVNkpMUEl4SGpFQ0RpRmMvQlBIWVVmaGZkbzQrcklvVXpVZzJ0RkZKeVZ6a3JSWndHM2VMcHlDa2lRVlUyVFVzUjByNXh3ckY2MTl3Q2taSGliMFYvcmxnOE9SUko1TTNuTkN4TkhCeS9iZHM0NTVvbjdRbnlueXpKV1djVnBjR3Bwa1FySUZZNWxHQVlQY0hEVHJZOWpuZEF1enh0RVJFUEJpRGNpeFlsYk1ORm1kZnFxYUtiSm03REM1OG13eEVwQVJyYks1ckNzRHpSV2NHbkRLVGtobCtFNGtQUFNsYkdVWEU1SXNmVEdXdGo2TFVwTjVBWXluVFdvSlFrUGxZWGViOGRWRHBCVDQvZWxkbzBZZGNzUEFOSStjeUtQTElVZlFHanJXNGtBTjM1ZnhzSG00YVNkMU1URTV4UmNySnNZb04zWnBvbXRMTmJML0lrRlBHSnRwOEVqOW4zY2xPZDZ2WEF2Z2JXb1dRZDZ6NmpLMXRTT0hKT1JlclZhbzhibFJNMU16QTZyYllLUFBzMG9lTUNiaXdSRW1nRTNYakp1V0s3TWRTMDFRMzczSEdlN3JHSlhyWm1BVzdFTVd5djRRSmNKTnEvQ0RUTjhhdkYyUGpJQURaRENHUTdYeE9Qdjl6L0I3TTVQWFhmaGQ1cUg1NUFHSVBodXRvVHBsSWJnZmd2UnRBeGNoWXhoR3BxNGNEQ0Y0QTcrdmNQb2RodnlGbldzK1o3ZWRlNW9xWVpvTWVRQzRneVRzRHJFMGhiVlZsaTl4YTVHQm0rSG1YTWRIWUpPNmYxTzE5SHN1NXYzWlI2Y0t6dkdjQXZpL3l2QU1xL0JPNzNZdXJvMXBKNVpxMHhuNTFBbE9wMElnMlc1LzIxaEhMQXFna0tsTEtveUtWVG9oNlJ2eHBEZkEyU2toT09BRllZVHVtTDduMzRCd1hhOFlvTnYvZUY1N0dNTXZuRGdIM0EwVHMrZXpVaitta2hmb1o3enhuYzlGMWNEZnVJMEdPZ3lua2t2Uld4aE5pdjdldzRLZ0JYbUJuQ0ZsVGswa2pNNDBxOFhIdlJ2VzEzdU5ScktXTzBodTBXMFNySDBJU0hka3BlRkR3L1hqSVVUOWJHajBIdldjYVh2aE1SdWlHSHcrZUprU2dhTm1QSzZKb0lQYll3Uk92SlEzMjYzYkNKbW1zbjA4RitIRUxPTFRRWjhTc3g0dGJNc0wvamRqL05TQ21tRkVMR2pMVlU3ZERSa0hHa2JzcjlGQUZFdEs5b0tDbEcwU3BCb2lLVit5MmZhSmx0Y0Z0WkNESkt5S2tTVDdwZGF5SXhVNVlYcjN2djhxN25hK0Q3Y2FLbEhJWTViNXpJYm1kZGN4Q3lvclZoWUF4VkJnMzB3WDBlUjZSRjlYSTBKRWxraFd0NU9xQU50ZkVPNFZHWGpLc1FSSGJRVzNqcUs3alRnRXBkSjZGMThlT2Q4d013K1RqVGpIZmhqbGxnUGdLTkhuM0xOZlZTem5xa25sVTY5MUorR3F5SFEvd2lKWEJDL24xSTcwVGsySnlPZFlIdmV5eWtpL0NBbzBrVWJlL0duNFNaTlJCT1pqSDFQUGtlWE1oZWV0cVU5NUlDajk5U1NjdnliZzhGV042WFdmUjlwSlpVL2kyaGJRMFRTY0pkb2UwZ1lMbVNjWHN1WkMyVVhJalN6VzQ5RG95cEVQYU1QTzZ0VjdTV2NXSjV3Zyt2T1RESjRhcXdzNSs3eEVhQ0FDckpyYThRNGs3MElQWjM2RENBWUVLQS9kckd5RU5lOUpTMlN1RWpyQkFWWkc2a3Y1MVR4RDFUQzlQTnVvVzhGSmFQTklIQWJOUDdScnV3UUlGUTZiYWhxaUZyQVphaDFPTEFIaHRqQzJVRGplZHNqUnR0ZHJ2djQ4aFczckxqQnVDNDVES3pEZVhFU05IZU5wbENwc0xyMFlRVzl5L3ZLQ3VqYmh2dm5kT25NTmZwU0dWc05TT3pRWVEyZUtISGVrOVdGam5VcUdCaUtOKzhvbzcxM1BGOFRVeTNrbmZPMStmSHdCMEZvNHFOVGdiV21UTCtlQUw1TDR2ZU5WNzR1OTlWNUE4Z1cwaDFSKzUzcE8wRXB1cXVJNnpLVWllbnFzM3VxNFlUUGpWOVFDZnhSWmRDUmJNYS93VWl6UzhOSjlTellDeG5CV01IdEdta0s1eUNJU1BnNk1rVThyZFh4L0VhSmtDT01mQnhkaU1HT1F3Y0owckp6bjNtNVdhZGtac0FCT2xQenkra1RKRUtDWVh5UWdKVW1vTStzU0xVeWpDa2pPMldLbEtKaU5mUlQ3R2MwVEFiVG1iVkQ1MWJIZlRRUkFHOWxQYlFkM1NlTlF3L3dvWWo2RElPQzVvUVJsdkpodVRmR20yb3diU1BDSS9DYStxNjFtMVRpMUNWZ0Mxa3k0bjMzVG52a3Nha2l4c2k0YldIWjBwMnVSTzVxZVJTbEdPQ1lnQm9UdWpGWk5SYTJHNHVKU1pldTZlWjZLWHJUbEV0c0ROSTZZeWtYUDhnRGlvWDdmR0oweExpelJUaHJUcmxYYkdRZlJFMXNwclJ5cGljUksrYnZjTFVWR3RzVFBSYU1HcmpKYklocEthT2VyN1dzejk2QllnNm80VWlMTjZFSjIwb3RSdnZ3OW12bGZvOFFwN2N2Q2lxU1poRGVYd2sxQ2JHdWxNS095cWM0aEF6RnQrbUlSd3BQQjN4bFFDODVZckN2Q3I2T2dPNUg3RkVod1pJaWRNdzZrYzMrZGZYSWZEYnZJQVZadzl0SVQ5VnZkRmpyOUNsdTE3amNrUEMrNFBvN2JyaUtoeDRGTzY4Y0ljNkZEcUpqVHdUdlFjbnUwZFBXTVZ2aGg1akhiUjZ0dkJPd3N2QU1xVHRUQU80eTlvOUNpZTlWdTdUbFRFUVFBNWFVN0tTMWpLRlczd2oxZ2pWVy8ya3dFQThrcWNHU0hINUdtNU5paFFsNHpuWVNLTm9JVkJlTGczOEFxcXN6YjdFYTFHUWc5NFJTN1NmMHB4aFhtUk9mc2JBMmFPL2NHdFpkZHdCdUozZXhSV2JiU0pIQnUvSGlhTXJkMldkejRyZVVxaFNodEFVMFVCbHdrNnNacUhNaGZvREhGNlZzaFQxR1NWdWNmeDJZN1dia0xmSzNTZXlXdjNOMy93ZHZ2L3lKeE1hSzU5MnppS2EzeTBWUTg3dXExdjNzNDVsZjJ1c1lIaWJOeHhyeC8xV0dIWXZDU3Y3UFJZVHN2TTQ4TDZ4SGx2VTFIRVU0ajl1NGhINGFEVzJRTW9zektnTWY5MXV1N1VJRFlRek4rRVRIZmxZYUpqNFpUdng0dzU4RzlVbTVaOWV3NVQ1TFQrUVVmRzN2eHRJbGRmdzFvd0JDTGtmU0hseEhUaXFGelBHY09LeU1aY0R6WERZeGo1TUVZdW80OXpKempaVVVXSGtFWTUwaC9LNGJMb2hPazNtbHc4MmFIbWVZbjA3V1dmZVI4ZVlORkNmMXFJVk9GNU8rVHB4OXN6b2VQUzVJTm1IVkZVTWMxU0tLQkNqZndlNTZBQkwzaEQwcEJMdWtUdFBxV0F6UkhCV1Y4QUFJbFV3emJZUVJ5c1Y1emo5T1FZR0R1czNuc2tvdG9Kd2ZhVW95VFFzUmUrNEhBeUQyMiszUHJHZkVzWkE5TUJlckdtZjhJNTExOW9oSjNCS2FDZ1B4ODBBejMwR3NJbDN5MHFXNnQ5dHF0aEw0U1NVZ3J0NDQvdWFocDl3VHZmcnNTU3ZOZ3ZOZStsZEp0V3Y1b2RPMHJsT3RGbVE4cER4UExHeHpsUHBSWS9HQ1NVK0ZnbDhMWHBHSlJTZW4ydFJHbi9uMkMwYTlqRjRud1RoVmFUVUVZUjlFUkZqeis2RmlXaEhtODJqRFM2T2tWaCtlTXZSL1RJa2tCeW9hSUxDOU9ZNHRhY1c5ejlFcWEyMHBRNm0rWXBmMDhCK3VFWUY1WGRDSE91S2hHOWI0WFhkYnJ5WGsxd2NFRld5aGkrQWFzalNCeFA3d1EweVpsWVRtQmtpQVJIWm5VR0ZmS0hSRXpwTmFXTUNyLzI5d0NMTStBNmtvaUxuSXBTNGhBOUtMUEk0Y29oNE9MUE5JYXQrb2F1WHI3UWx5OWJLTk1VTjcwbzFJN0cvMHNScGdpMUlRbERJZTM0dU1LKzl1Z24xNTU2NE1Sb3RHZjZmck1vNWNjdlJnYWdiY01QNzNBYXlIY2dTU2JSb2h6QUFUbTA2c0Zqb0g4aFplTmx3TXVIYmtiY0h5OEdtOG9wT0c0aXAwclJRb25sbENidHhBWWQ0WkNQbGpvbU04NEI1RHQ1M2ZuOGV0bm0rcDRGV200VDRRRnE2b0xUSXJIWmtZRnVvT1RPTXZIY2ltaFhKZU53ckFpSlErRFRSUSsybU1BNHptQllwQ2trZE9nWitQam0vOXh0QmNwK3ZreUZPdlBEamw3dTE4RXptSmsyY3g4UXZ2M3dISUZDSDZtVjdYMUhtTTNlTTE0bHBjL1NPb3BLeExYTmtrSk1Cb0VEdmhCdFZsSkdvN0ZaWHQwMzFuaTl4VHZ2QzdLYk1aeWZuK0xUd2FLZWozQ3B3VEFxb21jbUd0b2VhU2xqYUl3NVFTdWhxOGZqTEJIN3NDZCtSNk9IOU1TUGhpVlFmZHIxLzJ3NExNNWJYamtlOVlkeUJkSnhZVms3WXBlMjREdFJxMXZjWjg2RkdGck16VXRTRklkbUJNVHZtS1NVKzFTbksxeFNXeXQvMEp3RGJXRUIvcW92ZE9TMEM5UDAxV044dVVveVBneFN1b3dON3p6aThubnZNS0ZGRFpmZ2VtcGNJcUNNTG1lemtKQ3Q3NVlJYXR5UW5oUUgyYzJJSW1lc3B2R3FNYzhQTHVQQ2FFMmtNYThkYnlma2YzbHNXRUtoV05FbExaODJMZzFpQldBY0RwZFp3eENnNTdiVkM1RFhseGRuRkUxT3h6bzdqMkVrdnZhSkhPSjBVSFV1cG9pSXdLN0Vzb1l4cWN2QXFibVdRV3BkcE02VVhyMkN0dFNJcjR3cnY0NW54L2hCMG90cGVwa0cvODM3cVRaczRaSWZ1VmJMYXkrTzBubTlwc2JOY2hZTjJVWnlyMWtHNVpJUGordkhyUTNGaXYwaFhhaUNjUXZWakJ6NG1KRmQ1cnJrNjJnQnkxbmtoY0YzV05taGJvTTJkbG1YYU45VXBFQkhKQ2dYcGgxalhJaWxwY21vMVRKd3lFR2tvT00rQkE5QWlIQmJqUnhmZXFXcjlJOVVNNHhGZXQ4YWdtRTZFT1lIZkdMbmEzVkZNMkNlWU5rSkhhWVdSeEVsOFUrOHp3R3YwQUcyUCs3R0c5Sk01cmtwYmNvWXVZZnVjbWd4QS8zT3NmMFRPSEd6dmErRGFiUlp4a05jN0szU0NPQlRlQVRPODZqNFZOSUhqNHFFTU5LRS9VNkVpNzFHUWFCU0tEL05JdmFYV1JNK3UvTWgyazlhMUZDcG5QVitKeFBZbm1aeVM2akRWcUJqWktkZEc5dkNtZThSQlE1djBtdkpkMld2Z0E0RjhwYUhvSnhxYTUwUGlIRXRkblFSbTZYMXlVMFpsZzZ6QnNPYUdMWWpNTXFZem8yRkZiK0FFS3RsdFFpQmNXWjVDbk11clA0NkpVVWxrTUltUVVxajJ4UGNYZWFhNUhqcVNsMGl3Q1E0dGNvUlZmUjZSUTgyWWVJNkMyMzJpOTR5VXVuM25GeVE4K21iYzQvTWxGRFNLRVl5a1B0bVVBUkd0S0puR2RLNWZNT2NuMXZwdVN1Vnd0R2ErMlo1N25UdUtCT0dKNEs2dm4vSnRhc0h0Y1Rjam9KOG5hdU5DVHlpc2s3MEIyRThjcGxFNGQzMC9rZHBkaER5a0FKV1BnSHpKMWcyN2hydVZWa1NaM0RjaHhOY0o5RGNBZnh4bzZhVU50dkN2L2tYRE9EZjB2WnUzTXpjZ25SMVlsWkdCTERNK25ZckNpNkwyUExHR1dwbnVIY2V4TUkrQmN3MGMrNG5pZ3AvemFYL2puTmdGL2psbHdSK2pZK3prWXg5ellEK0FYMzg5Y1F6WVovb3BoVDhuOXM3ekRkQllYcW1ZNER2T1RLR2l1bU1Ha2FLbTNZOUpzaHBSK3FyTUJzUDZaNStGWE5kOUZYTDd5NzhZSlZOWkpqYXFDQ0RQRUFsSXdZZFNQRGVyM1BBV21nWEZjdTFaUFJJU3gxU1ZLR1VWc2JYRnBvSWJ5V0hYbzdVTmp3WUFEeG9BNGpkZjUrSEtYSDNoQi96a3EzZTdoeUQyaXBweDcvamxLYjNrelpSeXc3bW1sWFVPc29OUmFWNkN0K3djUjd3a01ROHQ2S0R3c1hmY3Q0cFNaMFNmck0xdnhXa3RoQldBTlMrL3MxNWRIbXJobFlwSHdrdTFkbUJZQlVaRWxTK1B5MUkxQzU0aUlPSWZwYWo4cWJCcFRhSUJPajEzUGl0bFpQTE5RMTZRbkJjVitsd2luSFlXWUdldm04aHU2RzlGWTVOUnNGUjM3ajBNUXREWEV1Q0sybXBZTTNOaEZvMUdhOHBkVDJ1Vm5jdmlYbFRqcmVRT0Z4VUJjbktqN3pSbHVkM3ZqTklPV0s5N1JQZFBVdHBPQWpQMzUxU0lQeHc5dVFScVltZHNkelF5SzdCYmFzOWI3M2VkRHpxQ2V0YS9YNlNPb21rV3gxT2xBOEZJcVRTcnB6Z09yaU9tSVgvTHdoWDVpMXcwSTRMUVN6ZEcvYWJYRTNlMndGdjJ2b01Od29PZmJBdHFDNHYzd0VMeDUwbHdTZEhpZXBSa3ZiNWI1dmZDS25SMklWb3pUQXNVa2o5QTVCS3pXajR3SjQ1Mjc4d0IrdUdsTnc1U3VUOGFqbjJJMENKUVBnN2NpRnJVY1RWeE5PajZXU01IYVZ0VnFNVUJFc3FZVmFHb0owUGZLak5nVHB1QUZYWHdqR1lKeHpHd1BXZ0VuT2RKeTNDSjBuV0p6Y2szTHQxVjlIN2djZCtzWVgrWThDeFR5blB4SG9TY3JmQTAvOFJwL2FCMVhkNjBZMHhNTU5jek5BZlBqNG43blRuK1V6bWV4M1lBNWFaKzk3QUl3ZjBOK0h5SjFqTmRlOHg3dlRkd1k0aXVBWGQvTHdPbFZaYnZ6UURCZUw3ODhmNkd0KzNoWlgxNGZYeUhIOGZoOFB5VGlxNTNPd2RFdy92MmVPQjVlQVhFeEwwQ3U1V0ZPZE1UTjY3SGozZlRkTU9NcTFTVDVmN2hVTW5QaWRkYnhyLzU1NU5JOW5JSDhOMHM4OXp1U0NlVlRrNUw1eWR0Mjdyd2hBdFpheFNqQSt0Y3pMT2RDMmMvc1BZRnJKTmd4WE1HY1lwemVvTUczRG5vOWU0SGpiL1hBWHgvQXEvbmJnTG55ZnRqYWRxcGZ2M0x6ZXVFTGtUdDUxUTBhOFUxZXNneldDNzVNQ0ZCbmJYR2M4WkFFZTZGNnkzU1ZJcFVqZXljRGRvWFVvcW1PQWY2N0h5dE5aeXZseWwwYlNSVlZMeFpwTUwzRC9RdzVxV2J4V1VQejk0RndCQlZmMjJvc241WFB6R08vaHY2MFZJaVRGOWJZMTZhSGRHa1dPQUFMUnFSK1Vwc0VuWE9UZlhNTk1Ma09mcU5LN0kzYWV3NEMxcFZPV1dLL2dScGdZb0JITDg0YUJ5TkUxZGdGcUoyT1hOeVVOVHhxeEE4UnNYdUlDM2VqZWFiYlhHN3lhbmxKWDNDdkV5WlprN2xLOUlwKzV0WVRtbUx6R1NMNkZYbkpYeGRlQmVMeG5ldEEya21UK21LUFZqanc1N1gvNGtqNnIzWEdOZFdvc0ZqVDd3QVdEcXBnMUc5Y1VxK1ZLVWFLNDVYeC9MR0xHdkljWkpCcVVGTkFuWDBydkhqUUhCTXhsUTcyRXphWUF5RjJEV2hVYkVEcUtNYzJjd2RUOFpJaDFqckdBMVQ1S09vVkM1c01SbkVFV201Y0gxV0g0dFlkdXRLNUtDTG53a1l1YUExdmVPYlFjam5hNk4zTDhmaXhkUVNIbkNWSU9ob3FPNE5ZMkFjQ2M4RjFEWnhxcDYwb3NSdHdFdTBaSlZLbWZ0TklkTTd6UlhLTzNpZnBRak5SdVpleTZ5V3k1YTQrdUpCNytwU05ieUFpZjExdXBVYlZwaENKeDNCa0hSTjlFWWovUlQwZFJaU0g5TlAzekdHTXdsVlB1cGNVc1FPcEtGM3RSeklka2F6QVJTakJWVEdBamNCeVN1QWd6emNzdE5tQ0VYVlFIcllLaFlpcmNybnl6dDlEUnlKSkJvLy9uQWF5bjZNakM2V3Jkb1MraGtRMHlySS9XSTRBTTlQOXNUdjU0QTZFMXR2L0lRRGQyeEN6TWZHM2MrSjc4OVAvUERscS9KaERmdnpWeE5BTmJueUQyTUpqczZlTVdlV2t5MUFYY3pMMytiQWpnTWxrOVp6OUV5UHYwYTNPV0tiTW1hWk9GTEdkMlRjQWVCRlQrUGYvMk1IMWdmd3I5K1IvK25UcnVHSGNSamRhOTBxUzNCU3d1cjBoQjJnaVNTUHRVOVRQUDFjT004RDQzbGE5N001WVdrVFFPbWdBY3loOE53VS9tTk1IUElFZm4xT0hJZVE2K1BBb2FZcVoxOTQ5b1NkNGZuWTNTY3dXMkxPbkNMRGUwU3JHMkdRSFlWakNkY1U2RW1kb3ZUNWFidTQyN3lmcUVwQmFlaGoxNUZuMnRlejZ2Wm5CYklaRnNIUkhsVWliUHlCQjZUTVV5aDFnVVhuekpRL2kya0tXSGkwMjdqN2ZobzRNYzRuTnVWQVo0Q1NTTkVhaDlYRWozNWFGRWVId0pURDltSk8rQzE1anhwRW5SNHRTRmNQS1p5U0thYTd1RCtBalc5eVQ5amFEUFI5WitWbksyNFFYMVgzSUdBM1BEVmV6cFVDRmdOakZKS0VWUi9iSXJCSnh5YUJiR0lzVExWUURlNTFHamgwTU9LVEZqbzA5a3VTSmpPaUp0VWk5RU1XT0ZlYVdwVE0vZXlZUlo3NUdvRllYOEtYVkRaeFNqMXVlRWlPMVZ4dzdEc2czdmZlTzFOVFkxM3F6QU1sSG1hMHlsYVZ1bmhBWVZTVFIyM2JiUDhSUEV5OWR1MjJ4bXQ5dlo2TTRyaG9tVzRVeEpyRW1qSE9YUFhTWERHeWtDS2ZjRjRRUzlGRWp4SEhZemxmUm9xcUVubnQ3TERwQ0hvei9McjRCdFFYNVdyZ1hwRkdDT0lVRDh1Z0tHeXU1Y29tSlk2QjBaTUUwWFBXSkFzalh3UkZuOUc5TEtNSTBhcVFwSElxcFVYOXJmUWZ3WEZzOHhvMGtmck1Xa1RxVGluZGFjcDJSTFRnMnFZMXdsQll6Z3dsMlRXbFJCTnE4ZUJzcGllU2NEMTA3U0pDVVVRb3JHVnlseVJia0M1UXNyeEgyRFZtb2pSejB6VlZOZWp3K25sYTJjY1JpM1dPcVp3RE14UUJudUhHY0d1YURKVWRyMVpOaVpxUU9NVXBQUk0zbzArODhtdVJ3OHA2Z290UUtrVXZiUDZqazZDbVJRSDB1RzM0ZHU2WXprYUg3bWc2KzcxYlM5aXhvYVdsMHJpN2ZiL2RrK1hrSWd5MXJxTzhvaGJ2ZWx6MXp3ckZRSlQyYzFlM092KzZHcGNJOUZYUWdIeGFhSytBd2hHWnVmb3BZMkZDbmVBV2U5NzgrcG80TU5IL0NhajM3OGdpbGZoWGVNUG9UNVJLUE1SV3FFVFFPZ0NkMEwweTluMDJvTmQ0SHZqY1pUZ1BHU1FDZlU1aEFzWlloczUvTGVEemVlTDFtdmc4U0dyeVBDZDJJNmFBQ2VqblRHQjNYMGFIMWduc0kxcEdKUHNOenZzWTF6SERtaGNqT3VLZ2lVMUhmRnlFMFpoZGZkQ2xBMDliczBLTWVHa2xscXBDdkZ5UEJDck96NDU1NHR4cDJJVkRGWWltejg4ZHJXVHozcjJVWjR3ZVBiQ0g3NHZURk5EOVZwMklDbTl2Ync1SXcyNmVlYUpTQjZ0QmFxc1d2bjgrbnhqakU5UHo1VkNGanpwSmJwdUUvU0d1aVFHRzc4K0ZVZ1Y4RFBDZnhrdi9UaDU4TDFwTk0raDR2WGMxc2ZPY014dW5nWVpDbkE0a1F5NUlzWGxOaVhqVEdkL0Ria1NDY3JXMFRUS1FtSXlYZCtDRFk0MjhCM3BWT1hMVWRLMFI4Um4vN1NRUUc0OGdEZU1RUkRlN3VsWEtma3VoZEdEeGZCRjFLQ0dEVi9CR0sxak12YXQ1TGlpV3NqajJsNWRYaHhKVmVzcU5uU3dnWThoNy9kcllsUzdXMGo2UDM1TGNpQmswK3RqcnN5aUlHOHg2NnFCeTB2eEd1Tnpsa2FjL1ovaE9LNXE5ZU12WGZNV3A0WHBvVHNQYnY0Qk5tYzhhNWtnR0ZGaEswNE1udFRuUVFQeTJCWVR1bHdpZGVTL1pMS3ZGZ1RNVFVmOXRhTktrdHA1aWorcm1SZ0JYTHM4U0EyZHZUL013NnBhd3FRMW1Ka283Y2xnaDN6a3cxOG9aZnQ3eWhNRVdGbFVLYm55a0t5ZTJYcUxUcjNGcGxzdGp5OWhqQmhsQjBKRDZzK3NrSUpTNTZKT0VrSXdjV1pDLytMTnBIbSt0V3BDSmo2V2Vua2NQWHZSQ0M3bkNVZlFBRk5vY3N5QlZmcTVtcnlGWG1jcGZXVElFd3hjWi9teUdFeXNRS0xkQ2hDNU9BNisxQ3R6c05kWFJOMW92YlhUTFd5NUhPY2Vvb0NybTBaUlJPZFNQdUcyRmF5Y3ZHL090YlVZUWM1YUJoZzNwdnFIYjl4THFyYUhVbjh3b2FqbmorZTBYZExkYXUrdkx3YkV4ZzdKeWd6Zmc5RFNwSHQwZHdwRHlFMEoxekFOZVRsN1UyejdYaWwwTDZJNk03UUIremhQLzFUOVo5dE5DMzhjeDhaLy9YVVBlS2g0YmNENUlEb1FSREEyekQyckVQckRiOVo1NFBtbm9zUTQ4WVE1WGV0b3ZjK0xqUlI3dHozUGcyL2RoTmNqSFdBYnc2eFA0L24zdytpZHcyRDBzc2ZnRjIySzZ1RExkR0Jtajc1U1V0aXBlQXZNaFdhdU9nd1R3U2dHMWhtWHBJeXI2WnIrM3F5ZGJyREN5SVBBVmliSUxvQ2ZYeGpWcnhGYlhyUFBINXllZnR5MU1OeS81bTRwZUxJTDdvckhGTU5JWEYrTFAxNEdyeDZYZmptZ2l2bno1YWgzOTlwMmM0RHc1MERGVWxwYU1vaG9pZktrRldLOE5wWEY2WFREYkxJeUJDTEZIUnpBYXE1bmQ2OGpNcG4yZU1LSHlQbm1JeVhranNrWXc1d3QxYW9vWjVYM2IvRndZNFBtbzNEZk1PNGJuc3IxWGhoOU9YZXc5QTZLTko1a2pCV1pjNkNYSzhQcnlhcWFDaW9HYmVYNE5leitCUGdNbkZiSk91SmloTkFwaXBsWHBFQ1dRV2djZWJjdVU0MnNPT1NzMGVLL0tQT3pSdVNvQ1l4azZvdHRRaE9sL3UzbldaSWs3eUIwaVJMZStiaFRsM0FOa2ZmRkF0Q2hzTTFOSWEzbjFGYzh4cHEycDZVYkhOUzFBWTN1NndTQ0ZMU0F0cGt3L2M1WmtRRlhQbjVNOHJKKzdUamhjVHJ1SFRxVWRIbHBBNUd2d0Zrc0pSZWNmUHVlVjFCb0xJUU8rV0ZuWXNjbExUOG9yWThQK1duanV3ZE45NlJicGdTYTE1T1FyMmVFSHZ5bXVWMGhSWFpTdVhPMDZyb1hSQzBFRG1SR1dLOGNoTExxYlFnbFZpd2FhbkJWaEdhUzRoaEFTMTZQUGdZcGlqMWh3b2t1TmljTHdZc3J5STNLTllVQ1ZTc0Y3VEpydHZLS2lNYjE2dEMyYkVVVkd0NXBRZFJPRndBa3VRdjVHc0UzTkR1VENzUG1SRVEwZWxpeHVvT0NCZTB1NGJURENJZTl5RndiUml1RmVvY2hSQ0VncWJXTGF3RTdjcEZsekg2S2hJaTk2QVJ0dmJHRTM0OFQxcUpsODg0K3ZQMkwyRi9ibkMyY0Y4Z0NxMHdqWStobHNEWmtyV2J5Y1FTc0ZxcnUwYnQ0eTNHSWUrajZBb1hFK1UvZVZ4ekI0QmQ1ZkN6OWo0dDhtWU4rZndJc2g3Uy8zZ2IvOVhjSDlPVkZNeUdYbFpwY0JaYnkrLzdsM3RuN3RCY2M1TUZjMHpPZ244TDFUS0J4SHQvMzNsMSttUXVrTHZ6NFp3ZG10am56aVpGeGVRTEZDMEZzbVVVd1k5Y0dUMENkeEw5SEFkcW95UTZFL2x3c2N5eUM2U1lXR1RtdmlsMGdZSFhFb0ZPNmlJc1hTSkUybzZvYWJLZkVYcGd2Z2VXMmlJdTVxWTR4TEtaa0gvZE1QUHdFZ2EySkVqb1llUFJlZTBMYWJ5ems4WDA4em9seFpkQm4rcldUK2JRUXYxbEl4UHorTTJPVzF4L2txaW1Fa2FpN3M3bGpEcytSQjRjc3hkSStRQkZubnNhdXhUMFUvRGtYdlpwd2M2dlpZMkoyeWJaZk1uRjFIU2hBcjVFUVI3ZGtTZnp6a0pLazBsNkhiVW5EMEYrNzFCcXhpZTE5WWZ4SDZSWi9NaEc3elBYekJKeThheElWemZDcVh1Mk1RQ1k2bHRhRkhqTEQ4SjB2U1pxWUJYbG9GOGlZUC9qU015cks2OUluc1hpNjRsblZaTHFPbFc4aVFWbFJlSnBNd05OQ2c0YXR5WU9tQWpEVTdCU2F1cVorcEVLc3FKb2hGYU12dk9Zd2JETWR2aFpFQjNiTnlMZUdET3dZallaNGkwTUhFS3BrdTBPd3FaZFF1dS9SQTRCOXRHRjFib0RveFZLNm1hSmR3NGxHQkVid0xJdGlSSlhJRmZpWEcrYU1kaGpqSVM0U3IxeHdDaVdpb3hBYWswMm1BbHRyR1JVZzhTa2tHVXNmMXVIZ0RRamhQNW9EQ2owQjR1bk9xMVNMRFFMa2tFL0xWNzFadEpjY3EzTkFPUnZEZ1FzYUZHL2Nhdk0wcVVjblhDeXlGQXQ5UmlBQVhITElXeWZWd005aHp6SEVNdTY0aUFVTjZCdmNxcHRyOEJXMVFLaFVZck1mZnR1RHpadU1jRTZwVUhrczlnMjlBZVBMcTd3anBUV0VYV3M1RTh6Wk5tc0pmOTlzQzdsVGloeW1nak8yUmNMTnk2dzMzUjJJTjVxQnBncEx3ZkRyQ1Z0U2ZBNktnRFZaQUg5V2F0QzFMdFR4bUJETlVMb2g1MlN5ZE5UNHNTVHQyNVZNUHBFNDY0YzluOUVRZmZSRGxQbFM2b2xNZFp3OUJEUE5nb3hRazNhQzJJOHk1SWxOUXhDYkhuQVRDV1RQT0JPQ1pDTHF1d0Q4K2g0QTRUendCL0djL05zeURMSFIvKzd1R0JBTjFHZmhtNzdEd01xYnF2eFdsT0U1aU1ZNlIwU2ZMeUU0TDdSTTkvdnFjMXFmOGVBSGZYcE4wcnBONTlkTWV2VHVoU0ZLNjF4VlRVT2ZZMStwSEhsNnloeHhMRXFDeHhJdEJmOHhZKzFsSWZmbnFBOXBNa2M1MWVrNS9iU2tNN0V0QWdteXpEWHFpWmpaNm1aNGJkRG51dlJxU1BOTXhiTDN0KzZkaEw3WldZa2M2YUxFb0tKeXJZb3o4L3UzMndDaHVBRXcwU1BocmRYbkh1d012OUxuTWVCcjlrSXdxU09vNitIaHJTR21qeFlhRmx1NjR2UVBmUDE5KzNSanIwOUlJdlJTTVBicSt6WDJobndFMjA0OEhPSDlkQUY4QzZrYnBGaFg1Q3ArOEtPV29xT1gxUEJicVlCRG9aRmRCUWplR0dlcGxhd2l5cXFyKzRCTmtDdW5RY1FsREwxWHFiSHdBRHBzUFlsS3dHSG9YQ05TOXhjd09oQ1REY3VXRWhlbGh4Z2dmaTBIVW1kVTYwZ3BMRUN1elhNMFR5ZkRtS3RYWTkxanR0TmdEcE5NSWphb2RWUVVVQkMxeDVaNWh3SFNGVXZjZThNWFI1NHN5WU5IcDBVdmVUakM2c1lIZDZtcFZ1VjRwS3RzOHNRTEhnOWhyMHlQaEJCeVc1SUZ1QWtlbmpVT2tiL3U2a3BlZU04NFRybTdnaFh3aGNHcEFPa0lJVlN2UHRHWWg5RHhrelhBZXkwc3NWQkVlY1U3Ui81d2VmdERtWFRLZFplRjNQL0pXOXlPaEQ2SFFWYm1XdFBqVFRkOFp0SGd5TWhWYmdyZWN1eUFPb3o0OUlrOUZvQTB3MklNNk0xYmhKTVdWUjdnS21lYzNPRWhoVlBhWVU2dytqaXVKamJRQ3RPWXNlcWplclN3WFJDNXFDc21ZRUlmYUk3YWljWXB5dlRRbndHWWQ5TmF6SmxJN3ZRTFkzcHQ2TGdjM1FBNG1JYmNuMElVMXlDWXNpVXJQK1licUdPd0cxTHhiQ1VmYmlsS2JBK3YrTWxwS0ZPQnR5eVlVY25yRHZibWxmK0t6VDJ5MzAwQXJFeTkwWXlkejBOZkUyQ1JrQUl5VG9ZK3JsYXRVVCtiVjE3SUJOV1AxS1VBTU1NUlcyTVRyWEhOVEo3T0tIMzdJOUdnL1R1VGJnZU1Kd09tSUhPZXhGR29VTm1IMEZmbkI3b3FoRUxnME1xWUVreDhydkFZVGlBY3laay9BQVJ3b2RvNWpkY3oreE92bmp0LzlWUEEzUDJiTVEzMmNhOFY3eS9nNFdjZzZoKy9QSmFwYUtJOE83SW95enIxak4wK2RiVXYvL01FU3RFTWNDeWZyL2sxcG4wb1JlRnA2T1Uyc2VoeE1wbDlpdGJ0QUMyL00yOW9DS0d4SHVTQWpZNkdMcW5QMUVvYVJqZ0JrUlhSR3IvdlMxMFVOZlUvb2FYWEhjdjZLR2F5QlVXbzFBangxN2tmSW5ieHBiL1A4dVZUSkFSMkI0d1BxWm1DM1V5eEdmWVlEWXNEZFdzd1FMR3VnbVp6YktDaFRvTjRUTnJ1RjU2Y0laTmJucFJxRHQ2anp2dzdVcllrTnI1SmdxMHFwcElvNXVzZFhCYlRLRmhrWVBlSEFFZ2tYMHpXS3BvdVFKUUNKTVpmY3o1UVkvQ3lDcnhFM0Yvc1RySXg0bmNoRmRmUWE3L08wQWtobTBDL0IybGp6Q3hFQk9jTTVBeVJ2by9xQTQ2Ynh2U2p2MFNOSjZtZU5OdGFaOG40VkpCVFI0cDRzaDA3SnExRElPT2RyYjRNeEJhWTBxUkJWMWFFb3FQMXhDVVhwM0ppWFNLMk9SZWVqQUZFajc2T3Jra1ZHb0ZrcnpuV3VhSzFxL1NreW1YSVdCZXpuNjdEOTFOYkFPYW5BeXdoZUNEVk9VRldWTndkTEt0Vnp4UzBxOHdtMFB1bU4veWI0ckJlS0ZQcDFGMTRUckpvMjY3UjBTNzRvbWNkd1d0UGt6TitsWUs2WWZucndtZ3laOGltSDVVb2wyOHpEWERLaU5mTk9wTWk4cU5vTWpsSFIwN1FOc1prcW1tcUdJUUlMeDRyUjZpY3BpVzlxRit6RmVlTXpjaFZaU3k2R3BvemV3WkFYbHdSK21VQlg2czVEbEZVbEZtc2hOZm56Q25QWERPVlZvbUY5WjBoWDF4VUVIU1k4UlFaU21oWjUwRXhwaWZCOGxMcXk0c1hFdHpwcmprbE4yVVJIU2ltcW51UGN6RHQ3T3FmQ0JidmRGVm9qSmhXbEpjeDVVeXRGN2VxdG91VXZGdkpKTXh1dW9tME5MYmpzVFRtL1kyQUg4MGpQYzVsaHNHT3FtR3dCUjlLTVZCbGhKM0lBYnpRV2lYbW9rdERoQlBNdVQrZzVtdGlSaDc0UExwanRVWEU4TzhiNHdHbkVPa0R2SnhWaXYzUlFJc0JsSG5pcGsxaEhSajRYYWdsRjBBMUltNlhzWnRpRkVuQk9XYnluaE4wWlFvNk9iMGhZdnhaOGZPODR2aTU4SHdWLytSbTRiUVUvL0RBMTFocng3clFRUldkYzVybi84czBvNHB3MW0wT3dpbm5sSHdJVG5mWjZ3dERNRGZYcEg0a01ldDVvSW5vaHFPUnpJVmkxdUd3OXBSSXBJNmNuWG9ubkJkZitBWGw1MFlYd3lob1paRE9rSFlXMit3eld4WmFCbXdORFVkRnRCSWI5UVNXb1lkOUZPRjFGTVJvNUtmQzg0WFpqMjgrY3MzdFJwUDBkM1JOYXlyTjcrVjdIZms2VktVNlZneTdjdDR4U25iV01kZXQ0MGx1dnRScWFHcXZqK1NrUDJmK3lhR1JiQlh6a2VzRytmMFNmQndMMWJOMWxSNHliWERseHVzZWVnRE5QbE5jTHRUeUNnRVpqRmFJVTBhSFE1a1dtRWVsTHhXTDJLUjJ4a000ZDVYYkh2b29Ua3lKMTJLTlNJYUpyMWUrQkU5Q2pZbEdIbEdMQXhZQVZIaVEveDVUR1dQSDVrakxvRjhTWlhoZk9sdTZsZHh6RHdETUZlR1Btb05LZXFpZ2lRWWdiQTlqYURiTkh3QUZyeHprVW1YTkdUSTVaNUpwejBIQzdZczRpQ2pzSDVUY1M1VzVCOUhsSGlMMUlpZFpNS3VxYTJVSzJFQzJTajRTdjk3dXRuWE1DbjA4YWJrY2F5T0k0R1RJTUlrMDVFY1JCMUozWks0NHl6RWpFMFpFVlBlK3BXRHl4SVJqa2FtajRGRUhPUlk5MFc1bWhkeVlwMExmQ2ZHZUpFSFZSd3JtVTVQYUpMNE5RcElIcU5HOHlEWmpsbUF4eGxOQjNnUU55Q1JUN1lybGI4VkFJeUJZRzVxODVhWGtpV1VoR2d4MGdSRTZHNXlMNHdFTk1kSkFWbHJNSkJZWi9vYktFSkZDUzZ4WHZVQllqRkxROEhLNXdjNXd2WG0rSUtZcDFyVDJiQ0hack81Q2FKTnhKZmFxMzlvaXFBMjZnUzZWTUVTMlFVOGUyTFFmWDhUWWQzQ0pMMWpGWkp5MzJPMS9iY3BWeWw4ZmJLaVk2Yyt4a3UxQ3VYV0MxRER3Mm5pZUJmT1U1RnhvN05tNUQ1eVV1b2FQamM1L1JPVFZ2RHU1QlY1NDdwU0VlZHJETFVpbWVDNVR4b2laQnRTQ25ZYndCM2lGcUxDSlJoenltaVkybzNkb3B5TWRVSjhEc2lPZW9UZFlPNGNHMFNrSWc5L29abmNQY2p5bExtK2JLT1dXMHFtZ01RWTQ2OGJWay9KdGZnUHB0NFY5OEFkNjJFMy82TmVPSHQraGVLQjRQQXhvZE0xazQ5blVPZ1lpazRzVWpjTXlPdzNrQy9BTEY1dGpkazBsRVVLdlMybHRYMnZPb1FxTVJYbXBSKzE4Wnl2ckpJZnVxZ21WNlk3QnN6cHUrREYxYkZtQW5uSy9KZVkxRUNWVkQ4R1hiZW05WmFTTjBsbVAxekxtbHZOSjRTMHk3VE5JeStHMmZ4MU5vYkhKc3MydlZRYU8zMUdqK2tSRkhERC9IYVhRakdEbU01dldwNnAwd2NDckQyWUVhVnhwQVpXK0tlbkpOaGp5MWlBbFRLbXVoVDBZVWVMNU0yQ1hEVFF6SEp0L2EvTzV4N2tZeHl1WkpzU1lkNlY3TENQM3U2WlF6Y3VqZlBoV2N6SnluTXA3WUZGOGY3Vzd6Y3FnU1JuMlBLUE5HRUxpa3BMWHRaVWRWMFo1TTkvdnpOYzFyRnJaSkJycUwxQjU5OEd2VFhKNjRzck1uUmxWN3NjOFNER3BYaGNmYlhkZ0pDZlRKOWNMelRweUxGUWNUS2NDV3FXSldWVTNrZ3Nmamh2bmNGWUh5eGU5Unk0ajJ5Q0NWODg5cnl0TmNML09tS3o5RUI2azJBN2V0TlhWUEtsVU91VUdsdm1WR2ppWXd5NGx4Mkt6aFlSejBoeGwyKzRDbDQ4NVZjRFJnV0lTQnFlSXlsVjVsMURzTVIrMnBmaEJ6TTNNMEVtcUE2ZEhsK3hmSUFqM0JnV0Z1elpBSXdQWmNOdVVSdVBMSUF3QlRHNFdFR1BDOGozbkR6RVBONllLVTlKeERRbUxEd092bzZLZElFY2NpRzlDRXZOMFZsSmNMT0h0Q1J2ZndNOEtUbGRBT05LRnFxaWV5OXc4UFl5WEtNdUlJY0EyVG13NStvOVRqSVZLTkN6VmhkTkRKUzVZVEZWVGtUdUxidFE3MHp2Y3ZGZi91cVdkNXFnclROU3dxelpCR211REdpVXl5NUNjQTVUWjMzZW50enNVWjZSQWcxYVJxYXFIU2FYVHhYamtETE44eVh1WkRCaGpieVRJa2Z1T2NSaGtnK2pFUnQwalE0OXQ3d1IrZm9vR01QanJzTG9SaHkyVDQzUmRTZ1Q1cVlmN1ZONTZiaGxPYzh3ejNNYitZaWx0YU9NNlhpRHBJeWtNeWlTbVEyUlNnUktHSkJSd1dwdVo3bUhDeVgyU2h2SThabmNQU2ttR2tybWMxcFRBR2tlSGYvajZBTHhJTzN3QThMR3c2OFcrL0FXbGIrREV2L1BrNyt5UHJFTm5TUmI4clRLcHRORjFzeCtNb3F0dlAxWXlRSllYZ2hFbHpKVitsOWx5cm5HcHl3TS9FKytPOXlEajJKa2c4NFRUanh3bDNQTjJ3c0ZMTXpKd0hNaXBxOHFtbmFTaUJwSVpBS1ZhNW5iOWpuaDFqWk5IV2RyWHpWYnFwQ29ibUhqbEt4QWdWM2tUUy9YaVllZlpBRmFQajdNeXhlMThDWnhRRVpkd2xqemtHUGZwamR5S29ndnU5b3RibURUbGNvZE9Edy9KZTEwaXN4YjZBbzg1VGFMb3JjYTcyYlJnTDR6ZDRuU0pqUEl0cU5RV2VhMFVGenpIakhvandweWZYUld4eW5LYm1CV29tejBDSEM5NFhjdHBNVm5yS082TzdYR1BuTmd3VHBUVjdQN21GTW1YVXVJczZWU056SlRDSjlFMkVnVldDU09LVjNpR2NCMWt2eDNCNW0yMmN0eTFLczZhWGE2cld2TStRWWMzbXZzVStLdXMzelZYdXQ0MnNoWXJpRFNWelpsL3NYbGxLZEtFclNvdlBoUkU1WlhYaUsrb1NSd3JiTVFzNlRxMkg2RGJwN1ZKcms5OWY1TWhzU1dINlpzUmNmWjVJejRGeHk4aGpvcHpBQzBQT1p6RWdZUTVacXY0bGxHRitISDJoVlpabjE4UlN0WllrUlpoS3ZUWnN2eXE1NVFYc0ZySnFqUUMwSElzelloQnJSa0UvS0N4YXpiaXBLODV6QnlDQXpaRFFmTkdRVmE2UE56RkdkNUdqNjFLZGFjNnVjQVhVNGZkS2hESnRNeXVuU0VyWWVhckpTd0dqeFBJazVpVnZUcXRiOSttNnFvQWJpOTZRcmpNYzVzZ0FSUkpJRy9PM1kxbkVCSVZWVWV2aWN4MWNBdEdiMTh0RldpWmVvRXJoVHJGM2hWQStrWnlhY1FMUW1KNVBDdmo5WmFnVmJsS0ZqSGJyNXZXQ0daRzUwdmp3TXNyWkdTcTZWU1ZRTnVRNlJkZHJ4cE05WGcrTm81VW5GdWFBOEVEdnc0aE8rcHppSEhjTmxqRm1WbFFuN3FVRGVBNENIRDJ1a0hNRFVnak0xL05RNkRROHc4L3ZIWDJjRjQ1dmxuWlVwaENHMXFJTXJFTWtKak1ObjNsbk1oU2JHVGQyakxFTHA2aXNUR0xRU2l2Q1krY2tSV3had0k5VEE1cEp2WW9uTUVnSEtMQ3Z3b0ZqeEJWRVVGU2Q4a1NubTZNYVl5ZHRQbzRrQ29DOFpLUk1oY2ZGa1RBblJvQ1c1VDlIRzhmZUUxQ1ZsaEtvYVY1WnJnRWtlZnBUcjRjaVNVb3Q1VndKR3BNUXpqbHIvaWlzS1NNWU1zM2VZRWVxamxRbEEydUlQRHBWZVZQNXVuTUUzdHhheHV2VTNwVFhmTTZKMUx2OTVuRWN0Z2U4ZWN0eHdrTHl0UlRXcnMvcDRYT2IvMXFLZmIrVUdyWEdnSWZtMVllOVlLQkhpZEdsNGlTMi9GclJ6UTh5S3QxYnVpbzQvZ0dVYjFGVVhCUVo0RzhDaGRUSEt6bmFnRGlJRVJ6ZXp0ZlNsV0xwWStEMU9UQlhWM09uaEk2cE10RWFaYmg1b0JyUHVOajl0SUI5em02MUlDbWt4cnVXb1doL0pEQ2FVL2M2aUsyNDFYU1ZlS2xjUUdtekMyN2F0VmNPVnZTY3gwU3BFVDFpNExkaWVodmdQZ2tPM1FkVFoyYk1KNUtPYlRIQWVYaTBhVkhHYUx4MDhMZlArUGU1TDVOclJVb3k5WUNaZXpPd1pNNXN4eHpGZDVhYTFsellCbFJGbEMzc1gxdkI0MzVIVmNpcjV4T1luV3lraWM1b1JiTXA3a2xqdkJadW5XRnpwNmVWKzhubkpTUFA0Z0J4ek03MDNxbnkzSU84TnB4M2ZiL2llbWpSWGZuVG91aE9ZU1dGM0ZKZTBRbEg1UXRsSlNySEZBaS81eUhyckVkQlBnRkt4cmNid0REeHhRL21waWxvWFRKaFp5OXN5MU1NV3ZXRFhNUmIwUUQzaEp3ZGRFSkZ3Mk5GV0pVYmh0NEJPNldGdGJpV2UrL09RUXhTeWlkVGdHVjB5MVd1cVB2V0xUSUY0RHdpRjRpcVpMZDArRytROEF0UzFwTFJ2Uklmc0huT0hJcTNqV1hDd2xqM1dqT0swNjFLOURvbEk1SXRYdWVIcjBzVFh0eXF6L2pZRjlJSjNNZUpXam9nWVl0WkNCUThuMERiL0Zvdkprb3hJVUxLMStTVnNKZVdzVngxSlMzYzM5OXhuTjlFR3M2Ykd4M2VmT1VDcVpxcUJoamt3bVVZZjVmQzQ5d0lDS1hjOTBFTGVJeWg5WmdVTXExQi9TZ2gzVjI2bmwzZldSaENOd3B6d2Z6WG11cFp2R0tkS3pLMGE2YnE4SEF5c0VVUkwvdG1Md3JZUDZlTTM5MkF0VGEyV3oxUEhKbTFxKzBUUUIzSUdyTnBhMTJ5cFBoa2FZM01JbjZIRUx4N3BmWTBuVHdMU3ZFb3cySXBZd2QyV3JxUko1MFpLNmN3U05RelhHb2F1NkliZW9Ga25DUG1jeVdFb2hXNmwxbkM1SkUwUmNOZ1h0WVVIaVRuNGdRZDRpejNOZzFUUnFzNjFBMGlzY29zMm84Z3QwSXI2UHZBMW9CMnUrSG96MHU4b2g4N1ptMVl4NGx4SHVGWUlHRzdiK0xMU0ZvakM4ZHg0bnFJUHRaK00rbmYwOUpMd1NibnpXYW05Z2tSMWxTT09ad0JKUHR1UDgyWHcxaWRwWEE1QjErR1VOdGE2bTZnRTkydHNDbXNqYXc2WGdxZXNmcFF0empQcVErNG1UcGx6Si9Id0NVZU9OVEdKMHUrSnRtWXpqQVdLUTBaYStvUlliWnd0aitvMUc5aW9Wc2FZY2M1TjB0dGZINzRiMFdwOHVZbHdEWnV3NHlxZGZLZSsrZ3l4RThSdzJnZVBWcFpnZlBNVEYyZDRIYzZ1d1hPTHU5L0puRkNESndIWEJaNFJhaGtkb05HUWpwbFF6NEhuUjhadGZhZitwT1Vtbnp1c2FhbllHMjlFQWlOanJKVktuZW5TR2FrS0pqbytqU2lweCthOStSdmdGcTVqak5qdTlFUXlybVkwNVJ6bzZHMURtd3BZVHdhTm1mSVhCM0Y1NFZzZjJxcG5URUZoVTh0WTNuUmVnbWpaY2tCcmxGN0hnaFZmd3cwZGxUdmo4eWJ5Qm0yMlVwTjRpNU9wQlN0QzBtZWpLTjRIUWhFUTJuOEZVWWVMM2s0NkJWRC80eTJmVGdzUFRvdEJESEIzd2wxVFNFeHBLQ1hRdFZ1V1dPNEg3S2MxcEJveU1qc0tKVEwrNTZUK2JVa2YyS2F0VXlFWTdRTFh1SlYxNll4VU02eWNBKzN1T004U0JJam1sa3B5cXhPUE1velp0M0ZHTWlqWWRTTzlOYTRlZmRoaXVKUXFkdzVFcmJ4Tk12eFJNZldxbllSaFFicE1VK05yZktlSVBBUGlZQTBqSUxuUjBacmlhbVJiUmhwUm9BUUJoZklxT2dZeUoyZTNENWY2cE84STZFR2hhWUhHZmNUZVJIa3REVUs0ODl6NHJrSGJlM1ZQZ1RXMGJGU3hhZmxRNFZpRFNXaGNPUFVMTFg0UGtHWTBsSldObUticitqTnc0UUlWYkdhTWRpL0IwTXQ4bEFtRGNZaFlZU2szNHJrOGtJY0RNN0xFM052OVZMcHdEWDk1K1BBN3dsMkVJYUIyT1REeGhMWXFteU1BZlVkQjdMOTMyUVFid1hJT0l3bGZzWStZUnU2MnlhZkoxQlEwVmRYSnR1QnJjS1FLQlhFakVJemExNVZ6QnBmOFRKVFFjajRuVnJYdWdTNmhORjMzQnlONW5TZlNHVmVPcHkxVm9Rd1Z6YTlDOHdrWWVqcG56YUIwN01ZRERaSUdEYmNHL3ZoWHRKZDdnaUFza0dlbkhvbDhEcjVteGZQQkwxM2E2NlJjOEsyM1d5ZnRPWTE4U3BkaWZtMDkyb3Racnd5VXNjV3JiVTZRdC9YcHh3Vkk2U2g5ei9taWFsNVRZaE9VQ20zQzBZcFo0Snl2YXFnbGNJMnlUdHd1MDJrSEhNVVlwb1JnWUJuU3ZuYmlRUVFsak9pWHRreGVIQmNtZGF3aGJTajNiVFM4WXF1TXA0L1M1Vk1tRGpHeG9aS28yR2xNSWpYV0ZiSmRLaWNxalgxVjRpYVpEa2MzcS9BK2UyenpWVXFMb05oN3hOS0czdWZxVTlHK3Nhb3VNbXpFUGNJeC93MFdjd0VXRmF1ZWNXYUpKMnpuTFdFaU1vY3d3QjVKVHZkc3lxS1hQYWNKMlYwVU1MS0tBaE8vdG9BOUlTZi96Snh1eDM0OHI3Sm1UTWhGT25XckJMb2pWVlR0NzdoZVVzb2ZuOHoydWFDVVc3T0lWU0dQSXVOeldMNkw4aWZzaUp6MnJmVm5vU2dwY1dpSXhEQ0Fad3BTRmRFZk5JUFhnank5V0ZNOUZMUkI0WFhFVHFVSkRNNXFmZjNDalN4aEtoQS9CZGgyVEUxeTN5MUZYb0kraVk5NzVXOWpoR0xycXFCajdoT3hQaURwWEkzdit3SW1XVzNlbGEwbE1WU3h6UjdzME9sc1M3ZmdtQW04WHN0ZWY2UXBCQWNwcWhETlcrdmllcVc1VnJNOStac0lheS8vYUdpNWNvaGZKUHJmZ0xIUVlGVHRvSThHWXIwb0czeGlOMUltS1BhQnNwbDhic0JtWmZBSXhvL0VJVGVKR2RoUHdwYVZkaDNERzVtQWN1Mm02MVJ5ME9WMmpETTZ4SDQ2anc4VTRVSzRCLytrSEVjYjVqckU2dDNmTW9xWitCR3ZaeDlLa0VTaURHdnBBMlpVUnZXZGlJRHdkVElmT3h3RnExRmF0bWdHQ2J3TUpnNmFId3hUUmp0UUJXcTgvQlpJTFRXdFVPZVA1TFVnOTkyNEtFK2xiM0VTN2JwUDQwVE5UVThBRFFNeVVXcTNFUDErVlByT0V4U0tsNmVJcm9wUWJuVGtVZ0pPL3JnbU5PMXA0QjFyeXVYNEZyd3JsSWxsQUNRcnlrazFkM3JMVjZGQVRPZHhZb0NtRGx3ZXFqK0MyTVc1RHdWVllnMndnT2hVNHR6V21RS1ZiYVhMSmFiblRaUHZ1bllicXJtb3JwclJtcXFKYXZKZjRCNTJKeU9NN3dUODJnN1lvMG45ZEZmMGVuczgvUHBrVVVMcWJPSGVwUUZLV1F1dkZBM0R2UmFpMW90YkpqNVJQeGdRTHdjTytBRVFXdnk1Vnl6UmxsT2hmYlBsZktVNDlGU1JzL0EzaWZxNkVpRlNuM21jUzA2RXR0Y3Z0MXduZ2NqaEpQN0ZrQVl3WEdSY1FRdkIrVjRYdVMvY09GVk10S1lOaTRMaVJpSENjMHI4SHhHdXBTUEsraUlSbUxFQ0l5SW5DY2RNeDFTeUs1RUVSMHRkUzNMdHI2d05wbEdScVRWL09MRDJZeWUxb3pRT1NEd01GeE1STmRpei9yOXl4dDMzSVA0UTg3UlVaaFQ1SDRPdUlBOVdXZTMrU3c1aEgxeStsdElocXRtbzNjdTBid0ZrOGxiMGRwUDRxbDNnNlprM0ViRm5qclNjcEEySTE4Y004OEJzSDhEM1ZUbkpBbndxQXp0TUJ6OHRZZ1MrNXUwVkZZcDd1SnJjRUtSajVHUXl4RDVBZ2l5U1FGT1k2NmI3UldQb2Q2eHk3MGFCNUlCSXFVTHJJWDZwR1BsUUJUbXlHVzZaemc4cEhxZWFHMkxWb2VaQ0ZndENPVkY0MGhnUTVTT3FaQWNQZlNVRmU1MGdUY0Vmc3BCMkpDVzE4a096T21MVXdhQjZFYzdUbXpiSm9TK0RzRlpsNGpldzNpWVFJcU51emxsN1Ewb0J4ZnZsN2RpbWpRWGhadHMrSnVVVUN6eWpDeG1NcUN0VGU4dHZxNDZPVytmcWhraUdNZWpMUUJ1emF6RkdPd1FaWmRqaE93ZzlYNnR5QWVWUThvRHQzTmlmVTY4dm5lY080VmxqSC9sazhidlp0SGpyaWxlK014NUwwUi9paXpFRHZ2TUlKQmRPZHlNYWdySVN5Y2xPR0JvN2xEU1ErQWFHaE1NY2F0OXFhY2pQSzhXeHUxQ0hLRVVNYlVtaSs0bTZiMTFjdHRaTzFFdTBrK0YyTGJGM0JqRDVXRTBPdklYL0hoVWVBYlprVWQ3cmlqN0VlRkdsQnN5dkk4M01GM3dtdUNveWxVbXBSMldDVEp4OTlOWW0zQVBoR0N2TVpCU3JKRWdCNElwSUNRUkdHVUlXZTU4RDRYamppTXVOU2NqR25KT2hqbzN5ZzZoZXVVTENSc3o3Tm82UVVLbWZJOEo3dFVPR25VbnZYc2RVcUJOVFgwR1V3Q2o0OVFhcXdvbmR4T2swZHE0VmtUNHZuTmQxSTNFMSsvdjJVaExtSFo1V2I3M0hDOE1HUUZmM24rd05iNm1vbk1DZnNVQ0NjQWV4dUpheFcrTDgxTWkzcWZNZ2VmbkozSmFodEt1SmNQVHZ2ZktGS0dKOEZvdVJGOFE4cnpVekhWL1p1S0sybStheERDbHVSTFFFa3JpWmwvOWNHOFZPV0ttRnZVNEQ3V3FReGFZVGYwSCt1R3JJbWhIUjhHWnVJY0pPMTBDbEVvNXV1Skwrb01qM1JYYnMvYmNrdHUycUFiVVQxWE9qdkxMQkx3UzhEZTZQUHJKeUprNlpJVURHT0JUNGliNW1hVUdPYVdvTEhJbG84VjJXWnBMWVFWRVp1ZlBnc1RJY0pQc1RIL0Y0WjFCWnZNOEpxcGhRMmlNZm5PeXJWb3hCc0xMOStGVFg0TTUxSGNFT2ZnY1ZvQll2WXdyMVVublFjeWlTcUR3Zi9UUWc4YzkzSktyTUNzcDhhOWw3MWZ0bjBVMEFFc0tGMDY0ZlhTS3IvWjVnaHpWaTFaNXV6UklvV0JVVnpiTlJnUEVSeTJWR2l4STdsRVZYbE9zeElXQ3lucEk2cTdvV3BMOVBxYmRRN291ZGY2WDFZakZTd0l3MFNVY3ZZc3NoenV6b2Y1SkFCNmNUbENveUsxVU10c0pIYW5MVUNqOHVzbGF2V0lXN28rS0h4cTU0OXZiQStsdEI3b1NVNThIN2xzQ3NXRVZ3Q24wSXoyQ3h0N1IzSkt5R3NjOFBLdEk1U2ZDRzkvZy9ydVBCcVJid2sxbFFEVUhzamRtRTJBSmVOSkF4SDMwN21FdWZWTFdTbnNmK0IwcXZpVzJtVFVhYzNuTC8zOGVzaThLMmsyek5qaDRCR05WZWZNQUVyMmQxVHVBQURuV2xsRGJEZStqNE9mdmpDWjBBTGV3ZG9NeFVJZnpOMCs1WGd2QnV5eDR1WHArSnhlRnl1c3RNdjBoaEdJaEhvRWxNcm9vVWRFR09OT1dNL1BQS3lYZjBRSkJSWU5wNXR1bzFDMVR0RHBXcVpTYU13Q2F0SHJGVFI2SWV2U1Z3NXlMWEdwRStGV3FHR05mU0w2aW5KT1h1Y1lueUplNzd3TzFCbkkwSjdwa3B6ckFOSzlmcjJTdW1ObEJTVk1NM3dzMVYvOVZ0TXJTcFRraWdtZDlHU3dxRVY1SXlZbTRFZkgyNzhlSm1rNTY1MnF2NlY3c1VQdktQaFd3bGh5cnBlSldHMXE2c2I4M0JqbzY1aUxTR2pNSzVjL1QyZHlXcmkxcHJRQURrdHA4RmFzTWxCRnl0WlFVeldRQVJsc3lyS3p2NCtOcCtlcXZqNHBTTnlxSVB2Q1dDcURQSnF6UVdKRXFZSUNqTGhxNDJmM2FDY0UzZExDRFhTOG5JQVVOZ1JTbkFJR3RnQ1JmRVFoWE8yNnhjZGFFcERxMUticFZLVkpUc3N0aG1QSjRSKy9YRG5GU1J2cWlLMFVDRkhXZHQ1WUkvQnJjM3lHeDFmTUFFNmVxV09aQ1dBcFNnSEhJVWFyUmJwWmpFZEZSMDQ1Qnlxa0twd1Q2azR5SzBmYWZLTXY1N2VYQUU2amx2NlJ4V3VoZTNKWW5LQnB5RUpnNVY4UmNPTTRqVXNFZVFzZDBSZTdudk80MVVDWUg1aXVDUm15UEhVd3pBZUFJaFJ2ZHVKclhub2FsNmVEbE0wZTNvU3E2aUptb3pJOFZaVUE2V0U4STkxYVp3MXdsWVV6UHlsRVFGTGZ3c3AwdkxHenpLRTFJQm9YajZHYUJ6bFY0amxvcE5BQUxEVTkwOS9DSTBpME5XMWtvSnpzQ2NhS25FT0ZFU3RZMjBZY0xOUUhsUEZwZ0tPcWtmdVFaNzQrc0ZFRFR0WHM1SUtkZWh6cXB1WEhTQkFDcXVMZU16ZTZ0WXRzbTdqbWg0ZzVzMmxUMWJpSHdmQ3gzdjhDREhjN2UzMVZpMDVjdlRFMHZlNzdyaDhTMTdZWWxOeXRyL0F1eXozbXBBZDZQQmF1N2tNNVlQYnpIcW01b1o4ZEFRZHJZanVOZi9zMkIvK1lEdU4rWTV4MkdUYU4zcUFJMUV5SWxWM3JlSUJLZWVYalNndGFWMGNxZ0FTS1dxSFpiNXZYZmJyem5TNzRRRlY4ZUN3dU5ndnQxOElxbEtGWXFlSDlQNktEZzcrdnFXUTI3dm9oa3pVeFFpcno0S1B4eVR3TnMxREhOWUdWdldnK2ZoMWN5aVNWUmlINU4wbWlleHZWTVVGOTN2MmV4bFc2WS80TmxYTG1FRWUzUTQrVVpCSmlYRi8yNFZGdW92ZXYxT00relkrVVFFbElHWVNUTFRwSFN2akkrb3NodVZnNGZYWkl0d0Y2TzFJMlVUcEppRG9VY0RUb1NjZytwVUZValhhSmlRVjZxRkZNbE01OUgwRkwwOEVTV1l1Z0xLaDJObzdXbW50akJpT09jOWxQeURwN0pLOTNrMWJZYVREV1IvVTlLZmFrRWs4UkZ2U2VSUi9FUlFqelBVd3hsRWV0RmpHNlUra0xHaVVkVFRxNVl6SDNIckFXbFF1ZU8wTFZQdHArNlcxNjZTMmx0bU9QZzNPZENHWnFpamlZVWd3ekI2TVhCLzJtdG5MNmdFTHJhYTd4YlhzeXoreHpWcFo3OUxQdU1qWlExd3dpRHNEQThubkxNY1dKTDNFdTkvNW9FV2JjNmlRU3k3Nmd4Q2p6TUxvVC9oZWVUNHlrRE5ZeVlHVVF0dzVYcENobnMvN2xISENEUTZXZkhDZTVYS0ZTdWRKMlFlWEdlcGQvR0F2dWlGMkp0Y2hwa0lreUpmUUxHd2kwTGZGMWptNVVSbWhrUmJ2YmRoWkZXZ01zQk56cGNxVXYvYWpqaWhnUnc4L0NqOGgwVmtUOW42RFlTNGw2NlV4ZkxDb0JxeW1JT0JET1BMNXBJNmFKWW5kOUNVYTcwWHZnK3d3NHFGUmwwa1d0UzMxMlhVMFhXMWNxaTZWc3FuNEZmUDFwaDZIM2FiRFJBSWZaU21zcVBrbGxVdFFrQlNRdE01U2VVaWFVRWphcUpjaW4raG9xSmdWb2FpaTNBVUlJZUl3SlJzNG9PRUN6b0FLVzMyeGY3M2pDTDFBV0NTdFpnRmdNaXROUHdYb0N6T2dCcEFIZ1gwUXRJUnBHOFZIMkdhV3B0U29HMzl3ZkxTZlR5cXcvUHZlSDErYWs2eXhKekhpZkFVSWxWcXBWNUpndmgxbURvSzBBNzJKbzFKZkhxejRLRUxvS01DcmduTU1na2Ruam93L0FBaldOZUMyZW9IeEZMeG1RZGFMMkpSS1NncUo5NHVVc1p4UC96ejlJZjNTejRPRlRTUW5aem4xRHp5QXBZSHVOTk0ycTlNblNsc1FUS0NXUXREVXNCSFVkaytzd2U4ZjFvT0FRM2VJRXNiWkFxbTJ5Y2E2R3N5Zk13emFMY1hZMHM2NVIzNHlVR0kzblpuSU1SSEhqSzFvbnU3YXlCTWd2M3JzYnhFSUFKbDVMSmRFMjEyYU9NOHpoMERrazc2UUUvSERjUnAwV1FkQ3hjazZkWlRzRWlBVlZ5MVM2aFhDZ0owVmNvc0ZXNFVuT1FKaml1OTdwU2E4VXRoekozNE5vNFR3KzU0ejk5cUxSeG5lYk5qZlVpY24wc2ZUZElvbEo2b1pRYndDNlNja0tLS1ovcnNTN1BvOU1XUVdKTHYrbHljYXlBK0o0ZGFBSlA5aTdsSE9sR1VyV0t6eHVGL3diVWN0b0phR1lFWUh5dlZZVHhtMmJHR2wwS2x2Ty9sYWg5SCtyVlFVK0ZEZ3hKVEZoNnU1OFRyUVhBT0Rwc0lWcGRweEx0WEVXR0lFS2dDM1l4bEhQUjQ0bFdNdzJzV3lZeWZpWHZ0NjhTUkkrb1RsVnpCRWwrZUNSVWZLVUlQekQ0KzNKaTFWclh5dnc0TnpNeExHL2ZTMEhza3JLK0orTWRibFNuS3pwRjY5NnJ0SmJ0elltbmcrNE9LWHphWFhpQVBUaHV5Rmhra0JhRnVLOTZNZkJ4amRFSXJVNi96citnR2ltb3Z1bXVUZGQ0c1ZTY0VWOGRFZmgzMkw0bWx4TkQ4ZU9ycm1LZ3kxSksvbjF4N2twUmxPVTFxcmlYQW1LOGdvTytpQ21zZXZqUldNeCtVK3V0T3Vjb204cTVvaHJudHNodFZGcTNKa2tGU21YTE94NmllOFFRVUlZbzkxS3k2bWtKRU9FaTBrcUZMOHlNdHQzVk5jMnZhemlxMmhaTEtScDBYN3dTM21VcnFNckxveUpxVXBkSSs1bUt0YU14cm82V05uSFFuNGlqUTBmOFFEekY0OUhFd0JmcEIvU0JwRHpjZlh1SW15Y3M2amd5Umc2ZmlqaUJqSXZkb3Q3b3lRcWtnZHN4TWRZTnFKKzQ3UkJLY3hEc0llRjlxOERlTXhhdXNlQlo0V1ErOFk1WDNXeW16Qmx0R082NXlPTEdEUHk1UXFxcVdXZFZoSlhSZERLMmFHTkxkRjU3Rks4SWJrbnBpeitnYU5oaXJkY3FaYWhJMU94cWpxSzdTbk95OWVSZ09QZzBSZG5WSFcvaWtRTUxscmtWOERJZC9RS1N3REhGOHZwUm5WMlZCaEV3Wm81Rk1OQ2NRdTZmQXVCWUlSWFhlaG9Fb3cwQnY4NFpBQ20xMm8wbzdxbU5DVldiMExpWFIwYWpXcWtHWkkyUFFxek51NUd0NmRVcEdIMlBITHcwVEpiM1Ryb0FFZmdJSUdZU1kyb21YVzZNQ2Q0NHc4WG5HaWJZVm1jSko1Qjljd0piNVpvVW85czhZNTlvdnRXSW8xaDBwbFdJS0tib0hsa3FDQlZpN2VPSi9TbEJId2VhMGcrY21ld2xiZlpYUm1hditSWDhlVE5INlpwUkJ4UWF0MnM1c1k0ckFSaDNmK3NEdDdUVEV3VXdQQ1JkYUFSTGtVYzc4VVFGUzVLVkdSbjdrbkRmeUhMMmVIdkR5MnZzWGVIWUhTZ0g3d2FEY2o4NVR4UzVzcDY1SEsyaVJUVUgwQ3ZPbklGMktrK2RZNnhadnN6MDBZcFNRQzI5YVBJVm01R3BEZmk0VmJ1M1JxT2VYdTZhZ2U4VFY3RC9XNWZrNXdzeW44aFF4RUVoYlBJNWxTQmd3SExaa0FNcnRxaHpocy9tQ25ub09tUzVuZXk1YmF0Z09iQTZsVG1Oc2k1K2lJS3lDQlN0SldHL0oveWhBdHVkK0pPajB3cy9IZWdwdzhmRCtNVWJ4RVFmSEF3cWRUcVlCTHdGVUZ2SVhZVmVxYWlxbS82T0lvYVlvOEw0NXNDa2lCZ1FaVjVVNUo5TXFBYUxhVUpUeUR5WmNpM0J4c1NuYUU0eXlqdmcrWE9tWXI0RXNSVDl5eDU2azhDb0dhV1pBcWVTUmNYYU90b0k4TU41WG9MSXlDcnhtYmtwejBQRjdvZDc4K2RwWUt5Z2lzd0ZFYmFwQkVGa29KYlFyQjVsajhINjY0RFU0UEoxSjVWMGdhbDJsVzUwQVR0WVEyeWNUa0xJcjlKUWE1d2VXUGc0Rm9PWktZZGh0WitZVlpDbmZwcm5XM00xN3puWEF0UWc4YzBuMVJBL2ZOcDhmcDVBS205NDNIbnZXRm1uZnJJT2VuMlNLM3R1dU4rQjUvTkFxVlI0c1NVVC9LbmpSSEZDRzhZdHk0eHpnWFhSUjhlNE42U1JmZWQ2MkZMUHd5b1A0MU4xOW1wR295VlA0UkJEcjBkdDAzaEZZNGJ3SFlwN1dYb0V5WFBHbXZxOU9PRlMya2xmSVRBeksyUXR1N0JrYitEREs3MVBZTlJZanljbW1tK3NGSUlVZ0JyOUJPQnpLYzQ0UkJ6aXIwYmpJbGVzVktIQ3BnUzlwTituaUFjVkJtVzQxRG5hOC9TMUhPSGZtaUM3UkZ3QlJWRWtDVWxjRzhBZ0E1czNUTUxGa1RKbHZoSGJaT2NWK1RDR3BhSTJ2TllMK1JnWTQ2RDMzVjFwWlB2RG9iN1JyU3AzeTlhelVmN0lDM2ZzaVJ3eVpEMC9Pc1YyeHNUejg0bDlEbzNmaXBRT1dIcVZzeGpEbHVyZDUzSkZaV1BsSzJ5dHJJaUthdGF0VFBIRXZGUlBlS2padmt4bU5lcFZrc0E0RTlnZzFpVVdMRHpxRjBaRnpycUdpbHd6RmJKemMzaDNSSVd5dGQ1OUhYQXNWVzJneFNyS2FoWEpGZWExaDR6bnVnRjlUOERRVGFpTWt2N0h3cGhEdGYwNThEV2drcjlpaWdRT0c1RGo1V1dYd0JRZ2NFR05udXpOWW5JUVFPQk05S1U1YVlTRzhSQjU5TFc4MzBlQ00wMG5qN29wK2hUNU5yNVgwa1pueDllS2g2aG00bGpxbjJNRkFOc2pRM01HZ05ZY05BUEFHYXFUUHpPQXIwaU1OcU5vM0RyR0RzZm5jSjh2R3Q5Um9VS2VleHFFN2pEU2tha0JydzNLdmlSNlEzK3ZkMWxKV056VWNVVFBublY1VWZSOWdFaGdBMFJFTVVDYXprSWhoZzNZVXVibVNkbFhXRkNzRmtjRFR1U3pvT3NjMjVaUXdxdkh6RnFnS2s5MmRPQ0NOdGhJRW53SkthejdTNGVueUtBRWVoMkljb3QrNG5wa0NEVkF3WHNUaFdGSjNyK1dscVhrS29vb0orOG82QUpOOVoxUmdqUDZDaU9RWjFUYXJXd1dJUmlvbCtnV0hPUzBDallrb3R3ZHNZOGtzc1JKcXRlVEc3blVpaUlmZUY4bk1PVzlaQ0tGczlWMnU5a3BJSWhMZTJ5MlJ1NHRvVzBSR3UvendQUEQ3b2hDYkFEM3JlTExlOGZyMVRENnkrZ1lKNHNTb3BXeTd0VHp6ditwbzB2RUoyUjdzanlpb28zb3lpM0ZZbmFHTUJRYnRxcjZmK1h2eDZUUVNjeWRSeG1tVWtremdDbFhzR2djS1dmUnJIUU1rU2FwZGxXTWVGRiswb1hLNlpQajJoSU55eThidmZPQmhCY1dhMDVYeHdiWDVSVm4wR3dxaDhjY1lwMFRYVXlDb2ZSVmNrV2dhalRTQ09YdkJyUThNdTZVSWNXVGZRdlc0a0llT1l5RHE3ZTZNajFUZmJaa3IyS2c4VHQ3d3JIODl3S0k1c3NybXJJTWUzOU81dWpIeXVqSlpwejdkbmhJdVNFQVFTbG9uaVc3dHEzcXNlRThUOG9uejc4NlR1STRBZ1UxaHowZnFhSk1VcDRlczF1am55Vmw3bjl4WElobDlEd1VTU25GWHR2MzNkNi9vcHBCb3lGNW01VXJacUdoS0FVWmUzd1l4MFpDcmdNMTFpS2N1dDZ2TDZvak9ENXROY3daekcyWEFxZWl4N3J4MmpudmZJU2FvdVRvUXpIRXVzaER2ZmhmVkdCWnhxdXFSeFYxNEFzbGI4NzdySEdLa0xjT202YzFhQUNVa0FXWVBUcytTZ1JGVTZtSk1OS0lDWXE5SDJ1RDErRXo1L1RRcGRLenJzMWhiYnp2dHJFa052eDlTRGtQdTg5bXRMeU03REFpVlVQbjZXTFdZSHZZMVVrdnJSSDNSOEpxR1lrUXlMcVp3MVVlc2F2T0xubU9ZS0lzdFFFem5CRHVhNi9UdDdOS1B3S1ZVWlVVVGs0S3dBSnpXTXFuaU51OGdJZFB5QkphZDg1QU93N1Z0cC9xVExXaWZJREsyUXRVNVRzWEtkNlpnMThjaFFTUmtqQkNOUzUwb1ZlWk5VcllXa01HR1hyQ0dDa2d1SEpwbFUxa0I5S01VTXpEMGZFeEp6d2tBS0NGN1lLN3dobnRxZ1J0dnJTTTNBckJlRG1xQTRqd25mNEtOS0N3MzErWUl2b0FyeGZBS0J1VmNxZzZuRHNKU1pxUlhVeHNMWmlOYTF1QWVMM25WbkdpMFdQeFRlYmtDdWZFakJiV1VrSUp0M1puK1lZTXFjTEd4UElVekNpTGNWR3RLUklaK3ZibndGd0g2UjFYRDVZMkt3ZUR5RHlXQ1oyMkZieGVBOGZCeFVkZDZjMWpKRWhhUlk0aWpXdHIxVnRtQ3RWclNNOERaNS94aVJEWWprclJIRktwbjU3RDVrbWtHT0VsbHl6MUdaRUx4a1VNQnB0WVVRNVJmN0xXM1dFTmJ6ZzV1Vkc4cnNlb210aGFNWTduMncyNG9iZ3d3dmM5NFRVS2Z6ZWFGUW84RlhQWUFDOWRJdUZUNEdDNXpzNWw0TTFhVmFNOFVzUW1oeWRLWjZUUklvcExMNGJOeTRGakllc040aFVqOCsyODRUVWxSa0ZxTE4xWnFlaGE5enA3b0tXRnFqV2hQdGRFQTVlRmZBQkhYWmM4ZmNkaWFMNkh4MVczWmthYXh1dUNZai9QdzJWWU1JTkJERjhlYUJvTUkzZWx2M0tXQVozSjMrQzVjQWNCVDZXbnZKUXg2S0w5ZWFUdUNQUThkVjN5MXNidzc2SElhL2IxRnhWSmlaNTJpMW1ZczJPN2xkRGV5WEVJMHgwWEdxb0NTUzVIZGVsNmdYQTZYNGNpY280dDhUMVhsRHAxWTFTNGlPeHo3TUM2c3ZpWnFmc2RaS01zYWFMbmd1WnBIeSsxMHBwUE9ackhPTDEyc0RINldGR1pUK0VqMGlyMHRNdGdOSEtRL3gwclgwaG5sb3o0dFM3SitIQUVQYkt5d1BSVHlib3VvVUtZTTQ0Y2VPQXNkYnJvamI3dlV4Z0FSNkYydEV3bEh4MXFKNTlIKy85b1hKUVNHdXZOTUNNR2gyTlVmRHpwTklzZmdReUF4Q1dvVmZkdXYxUHMvSnlYa1Z5V0xlZEpDUXFpT0dRaFp5ZWVFSHcvdWNXam1rRjVuenJjUTFKdVp3azRRSTlraVlZUVF3dFBmY1NuQm04TWNpL252UEN1a2xZNHE5SVltRElLK2xneFVqNFBCN0RQRXpmbHlWZXVESVhNYWRiOW1rTTFqc2tYWXlnVFJHdTJZeC9JclpBNVNkY2M4YkRzNVI5YzRpTW9OSE1WMUlBR0JUZEQ5NXJHR3plWUxGV2JqalhJYURRNmVtbFlrNkhET1lNdHl4T3paT2pPdHVCOUYvVnh2L1lTeG1rTHZiVksrdEZqSUtrdGFoemFvczZMdjdnSXpqbFJFMUdXUHBlbGJOUTd3cER4Sy9SVUltTEcwTnZJWUZlcEJIUXBCK2ZTSG9kS2VXcXh1V3RWMUkrcElxV09hRytjeUZNd1QyNzJBMkxxcWdLVVdnMHNzZVRMQmJ3Nk5QWEJ0YVVMQzRUNnZOWnJ1N1QxcmtUOU5IekdIQ09VY0NwY2F5c1dkSFM0bTRqYTFxaGJEMXBhZWVRdXFGZ2JLcU53WEtvY0VzSm9mbXd3WmY2SEx3MWZ0b3l6YzUxL2dyMnp2KzFacFQ2cy9zaDVCZXA0SlhUbDk5SkpKVjlXUUhObW9rSFhicXlrV09ncVFid3NiSVF5NS94RlgyYjFDWWQ2UHpkRlBVNk9pYlNpN2tsUWU4SGFIcmxRcDllT09hdlY0L2ZiTUVXU0VoVmFTNDdnVHFMcjdaYjNML2NPN0JrN0poekVqam0xTDlPbFAvVzJiUmlEYTBHS1UzbEtoblRGL0hpOVg1Y2JpV3hiV1lIRERsN3pGRzF1SUtqaGxRbFNYcG1NZkI1WkdzVHI4TjlFdjRjWEtsS2tXdjIxaU82VVVCWklLc0VOTDkzdkovanc0VU0rU2I0eWFZQ1dsdEc4YXFHSWU3OTcrMUpGQlgzOWltaG5hTjZrNTNBTVlYMHdNUlJTanFDVTUwK1hsMi9hUGg0ajJNckdjdUlzbnIvTUpaa1FhVXJHTUsrS3ZQZHVqNy9OUFZMcDluTmRxSEl2aDdPMWFRSlRsR2RneG05b1RrWkUwbktrV0plQTF4RnhvWklNUmJ3Y0hSOTRHMFcwRWhSMXloTzNHaW1RUWgxRjNUWk5qWWYwRUxYMDBQa0dIUm5HM2w3RjFtM0pRN0kwTEhnN1o4MFlSYmlKa1owTEE5bGtvK01tS1BmcU5SQVR1U1hVRlBrMWZTWVdhZ0JCS0JpaVZkMVNmbWJuZkVTMGtpMVJJK1RpNzJOUk1PL0FxbmE5ZW9QRC9qcVdQV3IwblZWSHVSTFM3ZzJ3L0N2bVI3U0dNMEU2QnR2ZDZLYndlaDJ5SENlaUhseWsycDVUWWpZK0ZCaEtLSGRMRGJnSnRtSzgwb25lTnpSNnRzelRrcDR5a1B2Z0kxSldnNG9OeFphS0phWERNLzFQSk5pM2xsQlQ1V1MzSkU1OW9lTzNSdkJNeXNoVmx5alBqQU11b1lCb2l0T1BJYXlFOTd4MjBLTzQwanZ3K3I2TGYxMHVmOTF3NndOOVRxWVlGdWtYZmVPZFU2QW1WU2I4OEZQQ2M4OEFkcUhNRjdweWVBY0UyQ29KSzNkczdXN1VvYjdxcXVkeXVabWlhY1NNTk14RUhEUHlnYzROd0phTEVnTFliamhmdTRwclJBR2JCNjFtYTJGVWtjd29xL0FQSVR5QVN6MnNCRWVVV0JwNFIvU3hKVk1KTEtHNjVUbmZUVWhUaWYvdDd6ZTgxWXF2OTRudlQzcVFhYkl4Ujh2THh2SHpWR2pOazZxRlFyaG5odWR5NGZpRXlhQ0cvS0lCZHJSSlh4SHVuZ0k3T1JBeVVXVXBWMHdGMDBCOFN5a05FR0s1cElQbFVKMk1qQU1UbXptY1JFby83dFVpTVVVNWVLd2RiUUFNVWhWRCtuTmFJdGVic2h2OVhVSjZvYzJFTXhYa0dkVWxsSlZSY2haVXluOHRGYktDWVlLekhHeVE4c1JMcWtqQ01kQnBMdHJpQTFPdUppL1E4UTVaaUdrdjMrWDFYdzk0UHYraXNQUVlocmhDWjFuVVpCS3lhdGZwdjVuVisxMHpaRXFpaWE5akdpaXlDWG50WjNhNDd0VGwyK1pWOThZUUovRTB1c0NsOE5oVlNpYUlJRnV1amhlbUIzT3dFUGxsYVNVbkVRc0piRGlGQ093dDV6TFJQSHFrQzVnQ2RSWmhYSzVIRWxXeno2Z2l3VUh3NU92N1VvcW00eEk5WGJOalNtNG0zV3hTeUVtekZGVXNDOEZ5SjMwVFNsMTdaaTRjbWM3amxsUDB1SFVEeDN1cTY1cTJYckRhUWprNzd5bFlLbFRSUVQybzFuWEJabGw5Y0lGTWVTK2RScjNZUWo2WkxLaGFFTnJZbm44UldYMG1SRCtWOEpETVk4cmgxWEZ3aEJDV1ozNjQwZ2hJSWhmeHVwYktNTmlkZUdNOC82VUp6T3VjRE5FaTZBSUhvdFVybjlDaWJxWnNWelNpWUdFcFVHUVl2SUNaZDQvRmVLMjdTQS9TRlMwdU5HNU4yYzU5RGIvQU56VDZHVmQ4dTBXb0xEUUJ5ZmdtbG9BVjJWTWJVZ0pFdU45clkyY2RNbHlnM3JMei8rS09kL09jeC83QzQzRkhDL2dsQURHcFZRSFlJbW9TQzFtZmF3VTRCd0ZMS1NVMFVXNXVtT2luejlkQnkzVW9OVElXenIyTGxWUEt2RlJUN0gzU1UzaStIR2NKNEdUSXNlV0psZFJCeVJyaEZNdW40NmNIUGo0Nnp2TmxncUIzTGVReTFUbnVTcStZaVVZVmYzajBualJGM3pLNm1vQVU4dWtMN1htVldyQTE0OUVuL1FFc3Y5Tm1xclE4TUdXY29GYjFTRlorY1BuZVdDYUlCbXRmbkJiVjE3bGZLcEFjRWU2WEVQZVRGZDc4NFd2RmU5M3dOMThMSGpmZ1hnNjhCb0RQakcxTjdBVzRXUTMzUkQrQW5Zd3N4R25raVE1NnFQdXhjTzRKdXdUck1BdFBmY3R6QUEvTG1uQ2Z1b1NyYTcyZSs4a0lDVnlISVJLK2FaR3NodEFNS2FNNkRialZaUENXRE54c0RqdmFMQlJRNWVSN2hibTlqUjF2RmNBT1paZ3pxR0RSY0s1RlpyZjFpZjRpTDNsZHdiU0dsSEdhTW0rc1J6YU9oVWhWZ0Y1L1lBaEt3VU1ncytlVDBUNGR2QzlVV3c5Q1ZLRFQ0d3d2SkhwNE03K2JlZDRtWnJyZTVjR3Q0VjR3ZWN6VlpsWEFMNVZXa2FFdmlZUUxLb3VLbjVKTTBKTGY3dXc3cUx0ekJpK1dValZWRzB3Z0dEd245bk5ZMU1pamF3NVg1SS9pMmlOZVJvUXUwYVcvUEZMUFpiT0pGVExuWWlpc1huSmtiVEoxZ1ZJUXhVSE5tRjBWVFVUdElUblFEUUZrMUhmWU1XOGRKaDhSTlVFdWRMRWlVYWlvd1JSMThQUlBYZGJUV21HUHVSUG96bWNRU0hWY2p4Umg5MG04aURmcm1qSXN4U29UaEV6QkZNMHp6SUdheEhXZ0M5aEt4akhJbjdkaG9FZS8rUXNiWjFTVVN0NEZnUVNnYXBkRzRVS0s3clFrYjBTN1d4ZGEzV3hGUTU5RElJZlQ5VFp6WmlpOUJGZ2pMc3UrRUo3cVNsWjZOYSs1RWlSWldpbHpnT1BhK2VkTDEzT05VOG5icFo3YzU3aCtaNjBBUHFWc2syeVRsRmVsOEU3OHJzRDFxQmJhaSs4dGhNVUpsY3NrWEYyOSs3Wmh6RzdmZFI3MFdpUEVWdExwSTRFMEdQWks0U05xZzFiVUV0UzI1MXdLL1FoN3I1SVRHRU1iVU4rcS9RWVNjTHMzRzdjdEplRHRpOVppS0c2U3RnMGtCUHB5OVJOekpsUGVhQXNZemhZV0pNV3QwQ3V4TzFadjRHT2ZCRlZreGc2V0M0VThtYnNwQ0NPbE1GTHd1YlA4VFl2YXc1R3NzWjNLaGljSndmZnFLUWxySmJoeWhEU1Q1ekJBUlBzQWdYdXgvb0pCaFpYa1FWWGsxZGFwaEhCQ2tONGcxMFltTVlhTzdMdjNsa1hlVW9KUTdUaFkrc01pYUsxVG5VUFdkc0VNU3VGb0xleVRvbG4zbkhMNVRiMTN0ZnZLcUFST21qTC93eC9JWC9EK0J2enh6d3Z6L2JBMFVYNE85RlhBTEZJRkRnVEtOUkhQY1Jqd2pldW5zSjh6U1dvNE1wby8rVzVqb0xqUURnV0NxWnl6Z0ZFVXR0RjZ6ZWFwbFlTN1d5eXFHaWxoeHJHMHJnTFZ2WHBBVWFST2xyeTV6UEJzV2l2elRNZ3R3cG1aWVNidSs3YXd6amU4M1NjK1R5L3U5MWJjQmVrWTZNZEJBMDZhYTRMQU5QVldENCt4RDk0djAyd2lwMUVKV09CbWNBYlJET0lnT3B6TFhwenhra3RuWjF2bU9YdUFNWFJzTFVkNjhJcEVjODlMSWljVWtSZDBGbm1rZVZGb1owL1pnUHUxa2Q1VS9Sb3VuRDc4akZFTFoxTGppcE1kd2hWbGhhTWRxQ2xUUW5xUzc2bDVUdWdSOVBBWWRlbHhlRXFNNi92cVRLZ2xhZ3E2WnIwb1BvelFDeHB5QXpIT29pcUNnODIzK25DSzFqQjdWcVo1TjlJd1BST3dtWFR4eWt2MEc1RnhKWnlOQXloWFVLeTVEQ3ZjSnZMUUF6K1FzMENsa0tKMXVaQzhTeVJsZW5HQVhXbFllY29KTFRUQWM4TG84b2w0Q3ZnbHhKR3YrQjJSZExVS0VuL1ZiRFMweHpaeE94ak5Mb0FNNmcyM2piaVVTNjRwQmZ5WWRKb2w2aERWejBhV1pTZ3VLWFV0RUExQ29BejVlcHcyTE03b2I0d3RNWFRzT2R6OWRlSzFxNWV1aGQwSjB0bUN1dlMzOVlYSm0yMzRhRVdsNkhYZ0ZFb1g2bEdzTy9MS3c5RXU2bUVleDlEZkRSSUR5UDVYRjdicTFRRUs1NGtNcGQ3MGJRbjFKWlQzbG1UaDFJWmNKdWxiYThIYm5SNjd5NEtNNWtvS1FRbDRSY1BISXVDaXJHTUhWckZ1VWltK1JZKzFUMHkzREY4VHA5ZHU1NFErdWVtdmRFdXdNZ3hZT2QvTHZDa25NN3Mzb2tOUExGUXRWTWI3MVh5Qi9jYU52ZTM3ckJqcmpyZVZzWjQ3VmwzSXB4c08xVUJWN1U0VWZTbUZRTU1jM2RJd1QxdC9lMW5XRmhFV2dycHBEWFp1Umd6TUlSeEJFYWtsSTA3YWhKRWFXSE9vUldObmpoQkx3aWNFaEJhdVdBTERFNThFWGNVTHVvbzhWN2d3UWV3UXhDZ3BlQ1lmUDFUY2l3TXNGLzdoYnlmKytlZUc1em1SM2psK244OUNmZlpnR1dlZk1wNlFzWTJKWXliY05wWnM1UW4wSEkxaW9MSTZOYlNXeHoyUjNkSnZHbGVsTnRaZms5clR2ZUJzR0lTYUk4U2YxaUNHUzhwbnErWm55MnRmQVJacTZwWGdRdjFHYzJ5b3p6UzhUZXdneG1ZS01WeEJZQjJwQUJyM1o2Mlk0a2t2dlRpV0lYQThOTytVUnNyT1VXL2cyVjgvWDhobHhiUWlQTmFWaWlKYU02S2VveXVlRUUwcXAvSnR1ZmRneEF2Z0RibzBiVldGQVU4YUNQRnVZSkxsMnRpWjlVaGlKUmtuUjFySFZCdldJUHJQR2kra0RkbTFaZ09OREF2cFVyM3o4NVRGT1dYbHg2TkZkUGJJZ3JHeHNaOThTMDNPWjRhdjZuTXdoejYweCthTVZBN0k1MzhGbzZsaWFJTXRTL21LQWllS3RiQVUyRi9OMmhiOHorN3J2QzI4em9SOEJKRVg4KzZCYVNyTGxUTmlMSkdjL1UvMzZlQ3p5Sng3cFpFZnZrYXlPYUJ1Ty9JemcvbDVudCtlQjkxd3VmSm5vaklNendUcTNLT2JkS1hucUk4RlpsVDZLd1daRGozeFZBSW4wZzdpdzFxa2gxY1ZoV0plcUxxM1c4N1ltb0NzUVdJYmdBalZ5ZW9HUWloUkwwdnd5WUpQa2QvMkFlVWtpWHhpdUZFYVVlSXdXMzJoU1JFY2ZRbFUxUkVkYnlJV1lKUGRnY0k2YWQ1QVlWZ2psV1NJVUJzUVcvQWlmbEJpWkRsM2NkZys5T3BLZE1zcVZSTTVnSXpLWmdIcnhkYUdPbEpwMkc1cVZvK0pMVldrallDdXVna0JuMzJpTXJhTnlvcW4wTUo5VzVpMmcwUXYyQmlpS2ZMeThCdFltL0tMZ0tNNmc2L1MwZ3pPTjQ1ZzdzUEFPaFVPWHc0QVNnb2w2N3pxT09SOWxiazdaekI1RVpWcjk1WmJZeGE0WkxRVzVUTE0zVTlrYTBoQzRkbkZmalVNdlJwWnpGS0lXUDQ4aEZEdlVPTVlwUmpRY0w0T2xOYWliR294RkI4RmlNQlhWTXhXOFFJM25aRExjczZLMEw4YjNnQjU0bFJzWno5WVQ5cVRGekRnTmdkZUtkcW55aVdneDVRVVVvOFVENURDdzBYeUdhVXl5RUo2KzhjdmU4c2x2eno4N3p1L0crUTZUR1Y5K1pwUVBoTStSalp2KzkzbU5obEsrVDRTWHRvUDFZYVBsTG1wRDZCeURSMFQ5cGRWb2xLczdwbG80VUR6TW5MUlhLRWxwNjRjRENuS2E2c3Btb01Va2NoVUYvU0ZwYVpaSWJQU2tuMjJiRmN2VjkwRWJWdzJRWXR6cWFZVTluMlNtUTNWMk8xR0Yya011WHhRbGYxOXBjMUJ1alNwWnplanRJL2RNVGljRjRIWFpoSXhJSWF0MCtNODJXeGtLSGNRVjhmMU9nKzd6a0M3S1JqUm1GN3lYSE1mSFM2TklwZnI2YW1vNmErNXFyOEZIWmY5MkJsUldKUmh4VVNqYXROTi9qR0gzQlNvZXR3WUpjMEIyR0RJT0V1eHdJMHlWK3dRaDhPQUJvcGg2UXZSdC9LeUFhZVJzaGVGTUZsUGNPTEVheTAwVkhUWm9IMmM5UGlKaldHa1F2TmFwRUF2V3lMR0pGb0FyeGplSXM5U0VJSllLVElXOHdKVGhJVzhDbWVud2JBMTRyT0dNM2s2VTJIQStVTlpCNnFFenBHRVVQU3lEMXZneHVaODlqdDNUQndDVUpkRllqS3F3U2laWFFIdzgyWmRsaVpiT2RKMGNKVXBncWhhQU95ODhReVNMdzE5UmdZZ3IwM1JEdHI1VjlCZUl5VWduYzR5a0NQM0h4VEtBa0NGenFaTUM0c2dhcWlEUEVYUHRTVWM1TVp3VzEvY2tBTzZkWStXUnIzNm90alZ4U3V2V0N1NXI3Mnp6NUtnU2JLR1Z1Sk5iVmxrQ3ZaSGdvREdjTlVWMTEzYytqVmh6dEJFQ3RwWkFjRnFhYnlYRXAyNlpQZGpLeWQyd01PNXlFWVptL0hZbUlMQWFReG05cnpkRTcyRFF2aFlLeUJQZUhaR3RPQkVsOStLU2VTaU5xbksyNnlCeEU0Rko3cldYWXRueTFtMTJOd2tmUTU1VjlQei9rQ0VRdVg5YVB5MDhZcXpnNFY5aGI3Y0E0aUlBeHlrTWoxZkRmMUdSMDQzaDZ3Z3BVcVVONHJOeGRtVDFrZjJ0WVFkQmFtejlHVnJDei85Y01kZi9uemlXRHRTQjJJTE1tV1NGN0RWbXh0YjNqUFlUVVlzcFJudUtWbjlkaDhoMlB4NGI1WDNmbklOTTNSYTVZa3p6ZVRZalpWOERxSW1qRTlWSWVHaFV2ZGlJNTRWYkV4VTYzOFYxQmpVNlZQR2NNSDNUK0JFUjVBNVM1ZzNBRzhaOVNRMytmTlF1SGdDdmNUK2VaMEptMFhRaXVFWTBxQkFTWjBSbGtNNXp0cUEwak5HS0taZ3NDNDBmblNvREhOS3QxRUo1eXBsVGlkUW9lQ291U29iamVCYW1HT3ZjL2pOWUFZNENDMExCekdXQ2FPa1hnbFFHODgrS3RZR0ZLSDlkMG9uRzZ2N0t1aURjNVdkQ2VROC9INjBZV2tGdUx6cUt0RzhtL2Z5TUhybEJUTE45WDNnN0M4cDJTRVFLK1VPaFRFVmJUb0dlK3puQW1RMlBUbE9HbVJrV2VtU2dodUFwOURnMXBrdFN2Y0F6cmtRYTVHaDFENVRpQjBnKytEYmc4ai80bXdZZy9OZW5hV1E5WldoN0ZmVTVKc1puZ2JubzFhTHRvV0haamVscHpQNjdDczg3a3BYRmpsNjdzaW1JQnZsTWhZSXA5Qm5RQ055OW1KTzFaS3hCMDV4R0tvUkxSZFFjK3JhVlZVQmwwdktjMnVIRis4NTNnZWpIY3ZaU3JtZVc1cldxQ3BOWVlnT1ZsRkV2M3Azck9FbGgwaVMvMXRaT09iQ3pmUUFsU2RTeG4yNzIzMjlYdXd4SVkwdHZvWUl6L3Z6KzV2TGpZWDFzaEJIc0RaNjUrTitxcVYwd1VTMCsrNFp1TElzUy9ZYTdtU2dpU0RKaXpYV0pLMTZYZ0tFdzFNeEE2MTRKTWl3T3hjUWlORE4wOEVtMXp3Z056d1YxNkwrS1M0Y25EUkZWbWIxSGIyNFFmMllYZzRFSHQwV28yNDhMM1MzWkZma1EvVGc0WDhxNGtxcmhubFRidFkrUmIrakV0cytrMXBhRXVXSW1nTm9CUktmUk5kMVBpbVdyMkM1dzlZS3RrWURvaWtuR3A1MndXb3FzMG9KYlNNYmt5L0tWRU1BSWlJYURBVnRUVW85RHFTS3JMR29xNW9ITXFya2xJOVZpaHdKQnFsMVZWZXZ4YnZDMkpKQTBQY2o5S1R4RE1yUEFKTUVtZDI4OG5XUHFhcUFyb2pNaUx5d2xHSXBWQ3FwRlJ3OU9qa1JXYm1pYXlUWGgzMnVyUnVTaDZMYVp0UHllTHZiUmc2d1RpaFhOeXBySXpnS3czT3NIZXBEUmNzNkxGWXFPZWRQa1BjMFNrS1pZUmhnaFpUVnNEamlWeldmOEVORUdsY0laUmkzTGhNMWh1R2QyOXcxMGRRQ1pOZmJqNG41SURhRGJXTUhDZ3JhZzEvLzlybFE4OFJoQ3IwWUxXaFZucnpkNkhDV3ZSa2IzL2ZYYVlaZm5lcTdNRE5HSXN0WTN4SUtFK0tLS25HQVdnbERaWFhXTWZkRmp3VWhkRzAvTko4L3hOcHBONjc5TEM5bmdEejExSzljRjQ2Vzl4UlNaUWNLY2xSSUNaeGpHaUFUNU9hbXNCUVdZTmFHRXhXMUErZm5BV0NaUWg0aHMvU2tzUHdOeGNwQ1BjVDYvZnVKT1lPSHZsUjJxeHJMamJOQXJTc25lcW15S1VXOUJnclhVY29JNHljM3J3b0FjRWZDaVpvTHkrZGtXTXcrZzMrd1VEeGwrQ0F5TjFveThMZ1ZzV0NxNURmTG1NNXhveWlOcENMVHNPZFdFVElYeS9XMjJqZzJxQVRQbVFQQ2lBQlRnRjQreS9XMlJvcUtrNHQ4U0h5dVArVUhQUnB3MWRHRDdKcEZobVVSR1VRZXBDNGRFUTBWQlVJY3N3L1V6WEV5U29mcDBSMlFVb0Y5WlVkeUk0azhKVzNBM29tTDZyT2JVekVyMVBKVlRoeW1sRGdWZHZhb2dCZ0t0OGwxS3lVdnczYXBYVFdaQ2RjTCtHQm1SYU15Y0wvRlBWRVdGa3FETzkyZDRVQnB5czFnZVMvRTRDd3FFTW1RQWE5U3kydVFkYkFPbzFFdWRXSmRHdEFJZjZLY204dzlSYU81VHhkcDBxODlvRjFwemVsZ29BQ3pTVUlpTFRlL0l6emdCUDg1aTEvYkMvcFB2azZoRkFxS25iY1dFYk1BYnJ3cnpLQzVERkhwMXVTWXpJOFdJVDVST0dHeVBqMEVJTWMxeUNWQVpVY0VCM212SG5sRGRVTkV2WGdCUk12VFZ0VHVrcHMwRmNjKzBYSVVHd056UVVvYmNPVjQrMGxncUQwbXRQaVQ2SlNTYlNZZER2amdaeFhhT2loN2UwZXFOWW9LUzdXYzcrZ25qdVBFL3YwRkZtL0RHTExlMzk4dmhLYlV5OEhTTlZJS2diU0NQWWxEZnFXb3JmcmdHQjJwWklMRmVqWVBaNnN6akw4VUlXTUUzRERhZHk1SFdBOVVHbnpXSmUySE1mSExtYkhBSlBwNThENTZQM0IvdnpOZkMvZWloNUU0RkxHc2RKSHNIQlc0cjRsWEZxVWp1WGJ4ZnJzSFd0WlNGRUVVTk5ZZzdXV0NTQzFpREtEUFJTY21oWlBYd3JtaytBUVFFb2VmUUlZVmEwWnJ5ekdjeE1hTnBhVlF2T1pkcnV2UHZ3Qi8vODVRWWkzRmpKd1VJZzQvRnFEdkp6NlBUdFQ4YTJGMmV1NVFCVVplZ3cwZldzWmpMVHd4c1p2UEdMbHVPb2RNUzRsVUpYaWlkZk16MjBoajA4MTVmaS96MUlGRlNjc2pYQ3BaUTJBOUhQWXJFTklHZXVVcDB6RE81alpWQzZNMmdydElvSkVQdGFnRWpqSFZ6R2xKUVUzY0FMdzZkQmZBNDFGd0hzbEFtQ2YwdVhrYW94Y3dBbDF1YzdPSjRyTmhqSk5pdEVPSTdpQ3V5czZTbUVUVnF2bjk5dm1KVnFzWi84ZU1XRHYzcWdOdnhXRS9nWk9rNXZKcUVTUlBudkpMM29lYmhzV3BpaEtBbm01VUFXWE14ZmZyaENtQ2htVGtWZVdXa05NWDMxc29EalJUYWVKS0NJQ2prQVgzN2NMREtEYkhUS01RaHprSVB1K3pUaHA0SHRIQlFaRHppTExRTEQzeHc1MTRvYm9SaDNHZXdFdS9GTjNkeUYrT0NubmpWTFpac2x2dHQ2TjZhVWxoeWxtYWVrM29hVHZ1aGRlL0R5ZjhxYmpmaHE5U2ZQOFVjRFludzBrOWNrU1lzOVo0cWhCWU02SURRZEt5Z01mQ1YrcVd5QTNVWXNDOE1jRG95YUVsMGFIMEU5OVBrODIyeHZUNVNNSlZLQUl0d3lVNjYwSmVLSmxUMDByVUgycUM1cUNuTWhjQzdSZGtZTW5iQUx1M0ZvY3Iwd2oxOFNlRDQ5MjdKalVIeldWNXJsN0M0OHJZa2NCaW1KRWxTQUNJNnR5Vkg2WEhkVHFTWG9QckcwSUprRnN0S0tTWlpHTUZVVTBHOWVGQ2Q3MmkzNG55dXV6MXIvaHliNml0SXVYR2hWZ1NtdTVoZE85clcreFJLRjVHSC9xMDU5QUVMV1JzVWlLMVNGa2dQTDJBanZCUVI2dnJvY0ZYVDNZSlJ4bFJtK2Zqd1lWWkNyM3lIazBpenI2aGxPbXRIZU1JaFlOeFNUY2tOQU9jWmVXNEZiNFRhallITGJybW15MGg2ejJiSWkyaktNMnl4T0tVTERLUlFFWFdwNU1ubE9qcm13Vml5UXZsVUpnckU3aWZ2dC9rell5Z3Vqd0cwTWllMFFlOWlCMFQ5NXFwUkl5amUrRXdvQXlWYlVkQ0htRERrdU5KaFdORU5pbDQxREVNNEhNZWJOTFNCMmw1c1dZUVpGeTQzTU1EYjNwKzhrUENjR1F6em02UE8vcHpoMDl1V1Iwek5vSVV1OGJMeW1BYUJoWStYaE1ma3d5REtFU3p1b0J6Z29xRWhpKzU0SDJiK0xoMWUvSDdzYkIyV0c3dVZSSjJ3UEFDK3hndzNzU3AwcG1hUE9RcmZnQW5xd2wwTmJFbTR0S1hBVkREeU1QTjF5UmYwdjBCTjBkTEozS3pSNzl2NWN3Ylc4dHVkeloxalRwang5bWJJQ1dRcXlzaXNoM0FGUDNsRkZuTzZEUkdlcmR4UFkyS2M3RDE2SW9JUXg0SVVwY29ZME1mSjlmZ0djamhVaGlKV0VNZzJra0JMYnJUSUN1UjBFK3EvY2ZxRWVMT01nQkpGaExLZ3Z3QXNSY1gzQkx5TWNEeU1HYlE4cUozY054cWZHOEI5TUNSa2RaZ2ErcTFxZHhTOG1WT0FiZ21FQkU4UUp3SXQ3cW9TTE5EZ3dkdVZlT1V5Q01BM0lYZUh1Nko0OVU3ZnZuTGNFR0RmbmJjR2xNT2N5eExEYlI2TitQcXZqVTR2dkxiOXhlU1VuVFpJNUl0WFdXaW9pRlo0ZkRwU0JUb1NKUE1uRElJK3drYW8xWldLQURqNmtCZGh0c1FzQzg2dStXRVJ4MEE1SVdEZ3UzUkdyQ2l5MTNoYkxoRjRiWDA4dHJaeXg3aTAxOUxNazBVZlFNSGpoWDk0dFVYbi9NTXRsRjI0cXFvQjRPbnFLT2MxSFdpLzFXd21rYnJiWFVnRkQ3QzZiU1NPS0FWWXNteTNxeTRIQkhpOWdDL2NKS1g5N2NVclQ2cmxIdktRaE1Id1MwdktpZHN6cHQ3Y2wrbHE2bW9pUTVvNTdVdmU1SkN6U2hxdU5KcXdxMkVkM0JCZitzb21XRnd2c2JiL1ByVEc0YVJHRXc4M203bXRXNE5qREo0eTlqR3U1NEhoUjBHNERaRGNjK04rVnhPbHRhOFU2ZUczdFNLbmR4TVB2ZEZqVnVDUGpmNDJQUG01VDdBbVdXMTFvTFJQZmtXU3dNOXFFY1ZzamYyTEc4bTA0OFRIVGw0enIxbmVQYUI4NXBvMVEyck1ZMnV5NzFWL1UyR2p6UVcvTlZFd05wZ25hOTNOeHY4TkhJdVFxZXI5R3F5dzlTVDRwWUkxNTVRYmd2SHl5d29LcEQ3VFhuWE1NcUdhZ3l0NUgwVFZmQ0NVTThkODZ5K1dDNk5hWTdWa1ZZVUo1eEdnUFBDODl6QndBQjV3NlBseUJVMDZSdVVzcEI1UEZLWStkd0pjTGZ2RjN3RVE5VVM0bUw3eXZ5ZWFrZFpOLzU5WHhacWJ0dmRRbm5ieHBKQjl1aGc2aUxuamxHSVRYaTNDTWF5M1BuWWdNOVA1aVByaldDNXZBcG1XNllvTzNqTXdDUlppV1RQQ2FleFRNbmtrK2E2VjI4b1FrSFhTbkN2enh4dStHYnJLRkkwTlYyRjFjMFVZTFgzdDAzaGFHRkcxQ29LdDdtd0NveTN2ZzEyQUJvb3JMRHdFU3dKczVPcXRLOVhwTjFRY0tzRGUvYzFHbVFsVzRuMDBwemg3WXBJaWh6cTNwL0FVbDlWd2wxdExqbXZFYlVSZ1BJY0hUbDFOK1IweGg2TVlqMkVOcGlTNVBtUnRDWUxhV0VKbkRjZUJ1ZVlCOGdVK1RyVXhobk94Wi9sbFhWWCtqajJFelZ4Ym1zTHZGTldQNVVKS3ZHcVFHRzdxd1V4Zkg5UlFUMXFRcm5iZW1HYmFUUDJLdGJSekVndVlQbnAvVzhMOXVHY0hob3JoTWk1YlRkR1hyTFRJUU0vL1BpR2orOFRlemtzQlZjSFczNzJqaUJwV1YzT2JnQXNQUzhidVdvcGZCU1ViV0tZbkJsSWEzSHNaWEJ1TjhQU1kvVUVIWlEzL1N1Mm1oUTVJSi9HZHFzQ1puU2owMjZGUHh0NEdKaU1nc3FCL1dpS0dHV2ZqU2pYWmxoOER5eURBdG9Cbk11STZ5SklYR01WSU1hU0VsTnR0NHlOMVZYVUpWMi9Vd3JXb0hIcmVyR3hpU1oxbDRNbDEyVElQUlQ1RllTT0ZVSXBvNkFLZkZacnpPclVnRkRDTXB3cDRoa3ltRTBSR0lqWE9ZMFZQRTdCcGE1ak9zRUtJc0lCWTBYS0lzUzRsWVJiaTgyYS9EcklYSFExWmZJcDVxWmhkS0lZQjByeXhpVXFyWkh4TWxZMnhaa1dVTFF4STd5V1kzd1E4UHNpajhRL3Q2Vm1Ba3craFhuNUkwOUhBbE9nQmJ1VGJYVDNCRnNKQTBiK2xBd1JLUjc2VS9UZXdvaTRHRFhuMmEwVG5KTWpqS1g3VVBhN1l0bm1tcVpnaWlscGlSK3A3YVQ3WGs2RVo1OFp2U05YOENDdnRqaWE2ZDJlSnoxazk1aldXR1RPVzJvK000R3UvdmFlb2tUa3JDNHNXc2Q1NE5ZS2hyaWd4eGtJL3JvU1hqdHd2M2xPbk9tVHJmRXVkc3RYS3VXeWhxSFVML1R1ODFTcGl3aVVvbStmR3ZGdy9CdU5LcFVMNmI2Y3FFMWwwVjQ1RWJheFZ5Q0lGak1BQ2F6NW43SFpNU2JPOWNRNEhuaU9MMlJtMjZwQW5xNHlDdTRGbGh2OWZPN21UWlcwVERpTmxYQ2VDVi9ldXBXNDVWV1JidDFRMWN2R09xR01hSkxSTXozd0xMRFJUWVFrZlRndjk3SXc3cWJjSXhZTU1LU2RHcEVqR1ZpdUZKRW5GWmZOd3lTTFlXbW9SWWo0bW1MZk9Dbk5BcnJPZDg4Skw5SExSbk9SZ1pMSURmODZUOHhlWTB2SG9CcTJRSlFCWHBNdlBFWTBWM0pqWmc0QkkvTUFSRXFVRlZudytYV0dOUzlkaTBZOUNVRTJGMlZ0VVk0cnhaeWpZMHBST2FyQWFzU0hJSG1sQjQ1VDY0OVh5M1NSYXNIM25Wd1c5V1lndHdBZEI2Q0ZodmxVdHpEVlYrZkNlL1RtS3JYUjAydFFpaVFOQS83bHl2ZGFwc0pudFU3Q1kyWTh5d1JlckpSSTRoMi9WVVlQUm5hYTBWanZsT25GNjc0eEVuaXVONkR2eldSQXJ0VldIakdxNHFoWWpad1hqamV5L1hHYWNwVFJwa2Vmek14VzJ5VllDSkVXV2kzR1ZOblBOL1I2b0svS3NTc0E3b3hXT0R2aTdhMUc5RzFXM080eU5EdHhCc2xsZkoxZUJZQkEzdy9LaVhBZENhVFUydXRGclZjSFEvaFVIOFhBMklId2NuM3FxUmZSaVF2b2ViODMzRzhGTmFqNzdiM1hJRWFJa1JxZ3dTdlFHallyWFV0UjE2N3IwWEZGc1dlRmVFdUZQZDVhb2FjaHNFRVFjUzJGSWJ4OHAwZUFubWs2aHRjOGpGVW8zQ0FsQnIydVpZbFNhR2s3c2lrWGh1emFaa3JjSG5PaDE5OXF3dkhLZ0VwWkNwc3IySHVraHN5b1phRnVHMXJObGd0THhTMmNHYUhzNUkxYmhqWlJjbHBJRERIK3VCSkt5QVJ6VURNSmRYb3FGY0R2Tmc5MWk1R0tSNVNRK0VaZkl6enVqc2srN2lYcHZCV3RNR1RjdlZ0UXpwajdhYzhacXJrZXo5ZUJ4LzBoYjBZRU1TQ0NQUmtPZ05jM1VzRUtxTHM4aVl3NHJpZFB3Z2FrZXJJMGc3WGN0R0lQR2c0QzZrYVBjRkUxSHNON3FXZk13YkVjNGlVLys4VG41MG5HT0tIeTc3ZUdwM0g0ajhqdkxzNVJUeGwxVGJ6MmpzY3R5OHNNeFY1d1lNRzVUMEw0NjBRSzU3THVYRi8xeGpaaG9TZldhd2tFcVRVdjNuWURqRkZCWWpGbDRaN0s2RU45RUJKNkx4anpKZVdSb3JKQXBVaEo5Ly90R1BqKy9ZbTUzb1J5MXA1QWlUVUg0TzJ4NGZONUlLMXF3cVdLKy8rNXM3Yzh0b1JrbFFlN0tmc3RCYmtKRlNienNKaFNYcFBDNUtaeEdpMmp1S0NZOHM0enh4M0k1R3FZSGxLT3ZlbEw2TjdrdmVkS1k3dVMwTmp4S2U1NXA2eUlWd0hYajVFM0JaWENQcU85N1ByMHRNVUJXQnZtb01CMDFxTlEzbkg0L2k0cjBhREpib1FIamFyVDVlWnFDb0xWSW4xZ0pCck5jU3dCZ0pNOUpuOExjbHhrZUhrYlZYOTdUQ3BZclBEa05IeG0vTElLTER5b21SZldjZUNYVGtCVzJ3ckcyVEM5ZEVsRzk1emhmRzJaWlpWWmJVMFhjL2lxOTArMlRwM1pEdWlzQnFvMDVGdE9wa0NreEhUd1hHNDREcTNYaUZkbGxUUXVMMk5FU3RVTWl1amM0NTV6UmpxbVZRVmxzSS9HV21wYTFKdVBFcU9pYmlUa2huT2VQcHZhSnc0R1d6YWZBOUExWnJ1ZlcrTTl0bmRnOWp2bTZnSnVVeStKa09lQy9nMzBYekhIUUdDNTZId0VsdWs1dFRNZkNyazdrSkg0QXNGMVplRlRPa2J0dERYL3krYlorU3BjVG5XUDdvWllZdWo4WG5GL0wzaC9WRE5DYXFMcy9zd244ZzdSWXpPMUFnVlpINDBHVVdWMWd3QjBSZjNRdzhmbWwwQ3Z2QWpGZnEvTVBaZmtpanBDOFA0MEorL2FJOFQyeFVTZzBpOU54ZmREaWw1SGduTHlTR0trQ3lSOHhXSUlLU21YRFNwempSMHRVUU9nVlhtT3BzeVpWOGhOUGMyVm0xTEpWYTFSVmxWbDB4U3o0Z3RTRU9ONzZENDZnbkdCUzFndWhSdHBYcy96WkRsVUpkQkVzeFVObHdONXhlK0hWYVM4S1VFeXZVZk9iU3hKdWlsU21WTnRKNUdSV2dqK0lpRGU0MzdIN1o2UlU3UGFXM1NZa01vRlhtZkw4UWtSNTZrVnRTQWNtRWVFdTNoRW04MlpiN3kwcGpLNWFzU3hDajNKQzRXQm9EaUNneUM2MFl1bkZUQmRCT1BBYXc3eXhadGd5cmh2N0JTM2hSZUFjelZrRFZmTEdiWFFpZzJPQWJaVzNHMzhsNkZBNXpqOXVnTTdrTWlDZDk4bXpzTUJRZ0VBVExiSUF0bU9TRHVvdkwyRStKc2tRUm1LSEJ6OWhUVUVrbG9GQ3k4a2IzUG5CQmhLVVJXUU9yV0JGTEovL3ZXSlljUSsyWTFKNU9SanlQUVFNQTNKL25yYU5Hc3FLYncvUG9IOEFQZEl2dUhrVDVMNlp3eWg0am4yNThuUVpTbUo4OFhHNHdyZEtZL3BIckJGY05Sak82Vm9lVThpYXhRaGd4dmc1QnU4MWpKUlF0dWljSnJDeUM4VDQ3UXdZNkRsVzhPWU1FWXRGN2p6VnZFK0JuNFpzVWZtVExoaDRlV01abkJTSndJd3RjemtrQUFRQTJJY2FySlNDKzYxeFRXT2lwbzc1bnlpVDNNSTQ5eTVvNkI1T1o4cU5oWkNya1dQZ3l4YTRhbXdaUi9ST2pXVmd2MFlmSCtJMENvYWRhRmpvY3lCMTY2RTFxMmdkSzVmcHFEY1NRbGdaU3pJeEQycXRxMWJxeWlWTXR4cnUydmxuQ1hvR0s1OGdUVXI0WVlpOGhtN1l3V2dLRWp3VzZTaUNxTzAyU05TQk1sRGxiQ09NWFVQOVVmMDEyeERoVlN6QTZrVHcrQ3ROclluTFFpMk9obmRYaE8vNFAwczJOMHV3NUhzTkdqVXNTbWF0NFRmb25YS2FFSXI0ajVuMmtKMTdvdkdhVlgxZ2xieUhBay8vd3IwZlprOE8vdHVOTmZiQTBCMkRuYmRtQmdLU3pueDdLWmx4QTh2cnYyWnNjMkp3LzZsbEVucFdLaFl1UU1CUDdYMzFwYlFUbmNpYUV4bk4vNDF0bXAwUlowVXZhNmR0Y2lGSlJjRVFTNFZqZGZMV3l3VG84UHpoUDRkZXBkcjBCcXZtUUloMDZKalBTOEhwMWZIRUR0eW5Ia2M0VGFDWU1DdHlwVHRPdDRlRW5iSjZ5bjk4NFVoUFNuVGtyTlFyQ2ZwR1Y4RDN1NzYxanBHdDhteWhYRm1MZ3JraXRuSGhlcllBN2F4YUNPL0Ewd2p3bWtyT2xiTjljSWRtK3JEcTNQYTZKeFVyRk1FS041VVJPMnY5WVFlUWczRVBYUm9VUXczTStBSExreC9sMUl6c2ZKMEtvczYwWHRGRWpBTFBRQWI0K3pzNGRzN2dwOWNJSzVUZGEwdDIvZ1Nsd0JFSVllZkNoaUxDM2lvVCsvbmJyWjFlTUJMbnJwdS9QV2hibG1xaFQyT2didnFRaEtBWGJ6U2E0S2dSYXE4WUZLcUdUbS9zYVZvN2ZqMjdUdWc4MkZwSFRrMkFpU2J5YjNnL1llRW5ZSmVtOTdQS3RDTmUxbHcwRldtaHc2L2owVmxHOHlFRkNCSlkrN2tIUklvYS9MMVZrS0NMd3pzVTA3bk9ySFdRMHlKR1dwNkYwMlVOamk3Rzg2RDV0aVpHSUo3LzVKeEh2SmFXbmhiMzU4WnZSSlkxUHRBNm9OOEFvbTcrRlFsQzJyRzVxNnRZeE1LbUtzdDBZNHphRElGYW5XbXhiQnlVQk5CaTYwd1YwaExMTWluSEsrVkc5ZEk2bHpKbS9wdEg4aW9zMkNnTWxKM0E3Wk91cTJPOHhKU1I5SmZiblpWTFFsNEt3WHFoY2pibG5FY3dtM2tqTnZ0Ympld0ltZ3VidkhDWmlkNVlRYkhPbnNOdU92bUNpT0hsa0NTeGVIcHcxTElyZEVxZ0JQM3gwTlJQR0EvUHFqNHQvajZoVHd6V0V5d2VpWXIySFN0RzZGVlRIcHROL2NaNENreTVsRDJmZUhObVo1SGNLdHZkWklvYWhTZ3hEWDg4akh3ZUNROG4wVHBueDB5U0tESWdPWnVzWFkycFEyc2ppTXdkQ1ZkUWFyY3J3bG9OZE9Yc1h1ZmlQWnJ3MU1VVkYzaTM3L2RtdUZqanAzMTgyTk1uSWVJanFTMDRCVVh6djJRQjZvd1NYMHRSaGFXUXVmN3dtcDBmcVk1TmxCdHU1UWhvNkgyNzRjcGRncnF4ejBxbnpJQ3VQajFMV0Y4d3FKdi9hellNYkJqNGFkOXg3Zlh3dmZ2alA2eCtSbXBxOTlLTjBQNmRVNlc5Q3FpUGROaTlsV1JqcHFhcFE5YWFqU1d3T09XTnhWbTdTVDcwdjVyeFhMdE1TY3phS3ByY0RoN1NJMC9jbFBJdmJYRVFTejZZdkhjWS9RNEx0QmdvYUFtcnpuVmR6SzkreHVabkVqV3hQbzZxdlNwL0xoK1l3MEs0Q3hDK29Sa29ZaVVRNzB0c2hiWm4vWGlqcElwUHF1OFBvVkU2WGxPZXZqN09zMXozMm8zMnN5aS9QeElzZ0ExNkhueWhkRG5VV3BXVzdVY1NjR0JWRGFoTE5uRmJlZkNWUkM5aXRJU1VkczZUK1MxS1UrMEhOZ1ROZU1kT0N4UFZwRHZDVmNTU0FFeGhNcU14c0RSS3ZMWXAxbUhiaWtYYVpCemgxU3ZiVG8rY09YN1YzOTd4UDFxaHJPaHkxdTdtVUxiUHgwVld6RXdNS1RVejdsTXlVUkpXS0I4VDlYaW5vUHNZdUpoQ0VYWk8vYWNMWmRPZ08wTnlVdDZFSWhrM0FxT3JwQnNMY1l3TjhacElmUExVWklpUnRuWE40R0gyeUNEb295dTZJaWx1czRMOGM1d0QxOWQvaUpweGZ5NndtSnlRNjVvVmcvM1JldktGclUvNW1ILzZTL0FWaGUrM0tadGNyZThwMldCV1AvYzJ6SnlFV3dMbUc3d0pqTEZKZTZYc3lzNnREcSt2aWNUN0hNQkw5M042T1FKWUhmVEpWM3Q3SHBKUWlRTEVjOWEzVFY5ZGNLVnN5SWtrM2lVNU9DY2FnclkzaE5HSlF5bXlCVkRQQUxId1dZdTN1QW82M3RZRmNWdDVGSHdxT3F6ZGJvSmlmRENSYnprTk5CMXN0SmtEZUpmUkJpTnR5MWJEZi90OXBCODlzQlpDaU1sZXQzSEZBSWhwNWFuQ3lVZlJES2s4aXRXalRUUHVSY2tpd0pVODliR3VhTlAyQ05MNGpOQXA0TWtNaVJxNFNCMHMxOW93S0RnckF0dGhLZHRrREN4d081OUVhRGNsMm0xY1U3bGZFOThYdzJQMnlKVmJ5N0syVGVNeFVUYzhhVFJjeDRUQXdtdm8wT2RNMnp1b1RDdVNuOGRFK0NEY28wU1NQNWt1N1pxb2UvUkl6MEJaMXh6d0orY3EvdWR3TGhpWmJjMFpzOWE4VG83UGwvZHh1TWtMa1dHMDdXSGZIRkFkWjNZZENsTnljNmVxT0FCNE5tVjh0Rm4zalpTWGQ2d0RLZlNOaURLUzUwMWttMEEvOXVQZ29xQlpuenRUbFhiVWRUSys1NHkwQlplWXR3WkNaVHRoaGRySmxQS3plWGdhVURZdzlUeXNHcWZPZGd6ZmdnZlVabmlVaVRSVlFEWCs2QllqOFBaZElwZysxTExyc3dDRUJDeEZYRVFLM3poTHJZMmNWakJGQjdraVJmRFdLRGEwVWdXSXhES3NqeDU5VGNUV1h1MnJUcDFhZGkxdW80cElUeWpmelN0NVNwRWJxMG9wVE1VbnlwYWRVVmRrSEJEOHRDVTM2bVRUaUIrcHVaZ2VYSmcybk1zM09hQjdHVkp3WC9PRFR1N0dSdnpGTyt6QUdVZE96WjFXRnVUQ3lrTUIwZTVOaW1MZ1padVFEM1FEeDlQdFYrdFM3QkpHUVBuVWtNV3FQKzFrd3dETFExVHhzaWRNYjhPSGM1KzdkMlVDRDdoZlJNWnoyUEl5czd5VjRoUnlIV2pVV0kxNnFlb0dpYzlmSGhpTm42SjUrM1d4cmFmYm9xSk5yVWtOVGJKS0cyelZmTEZGa2VMMXIwMUEzMHd0RmdUanE1emFGemkwVnNmL3ZZbzhFU3JtbCtVTzNQNjUwREJRYzB5RDhBSlI1WjVjRFEwYVZPSWxVd0cyVm9DSlRGeU5MT3pOaVZBU3IxNHlvcmhWZVdRc3pheXVoU3VqRTI3TGpFVndFK3JKS2JjQy9JTG1PSTV5S05nWmhKNm5HUGhUay9NUXZObjZ1WnQ5RlBSanBWd0RnSzJCSGtYMkRLUXdkVVVscnJMSmJHYnFScTlPMnVxOWVuMjhGODBtN2pkaW5GT2I4WHJtUjFrNkZFSU5aSFJQdHNNek1UWWF1ckpTMlNSYnhaYVp4WEgzSENVZzQxbGJBMERIU0JHd015QmZObWpVRGxkcndYalZMaGFhN2thNlBGQW1nMTluWHd0TnhTZlAvQ0lkSk1VL3hXUUo0NzB3WEJ4Y2tJdGhVZ1RIWmFCeVhUWFlvK0FjemdpUGxicVV0cGdDTEZkMVlSaHp3WFlNeDczdUNmYWFOT1V3dHNkTnVmSHdacm1YdWdsVi9GS3BGeXh6UUdNRTk4L2xXZXVRNTB3aHhrYTBIbjNZNkhQYnZQZ2hJWFY1eFptT1BOWW51THplbXFtOVhJRmtFUHhEYStWWGdXMURCRi9GVlZUdUs0QURneHN2dWVkclUyUmlaRlNNTE41R3dLVHh4eXpzeXlsZWFKaXFLVHB0Q3Z5d2hmcU5pVW5NeDdpUXYrYWlhRXF0VElxbkR5OERZZ1ZnTHB0cU1kNGxHcTVDUHhQSGpXejgrQStKWW02YytnUFNxUUFEOUpKVWNYUkpGV3ZHZmNuSmxxZVhKY3ZycVh1enBuRWVYVnZYejNEMTVpWXM5c1kxV3N2ZEFtaEhHRm5sbFhrYUVtcTJuTEFkYmMzOGk5cWxVZVBnWml4Y2EyelRneXZuYjJnS1orR3drc3RMVUtxUklaSzBBaVJyZkJwaEN5WEJvTEsvSXJTRnlCbzlJVzZHZm9Ld1NWUHJLREl3UVEweUpnYXNFNVVJYjI5MHFnTWJ4bTUzWlRISG5DSjIvSU5ERElNY2FzckgwNFlKTG1mN2VtZ3NTSlFFdEF3aWlPbUo3S0hpUUljemRhQ1hZdXRjc25kSGtsMXhJVWxzYy9kQk4rbzBSUkhoNWoyZGtDSTFYTUFnRkRRNDNEUW1KVDlCSWhUWUk1RzZOV3hXeDlrTXdSU0RaK2x6Y09KdHpBN1BjKzlueGpud05FVGx2aVdWYkpsbG5KM2p1YW9VSEhCb2pFa3RxQW1Nb3ZkckZaOVEzbHNGSURIdE81elNDSjFKdkpYSGJRNnZXaXZleGY2M01FUGsvOUZtRk5lZWtYRldBWFpESU9GMHFoa2xveUVNclgrTTczQkptcGJ5U2lGSmJNQVlIOFZnMGYyUHc4WkNtRG5SVEYxbld5cXVKWlNIRTRQR1hYaU5yVmNVd1NRM292MXNKK3prRi84WEp5emlIUGcvaWpBazUzbDBEalYyNFMxNWUzV3RwWVg1SURRWUorTnpseXpFMDI5Smw5TGMySXJoUTA4Z3VnRHJURVgrbmcwMUFvRWFYYmwvU2YxVFU5RlFDVnlGZUJNaHJ4RzBRTG9sUGpiQXM2VThNQkMzNmFoazUvbndsYTY0U09TNXhEbDhSTTRyekdXUUtpa2cyWDR1NzdUYVdoUko3OTNVZHpLT1RtZlQ4VGhheWNSWTlCblVMVVdQVUlZblFzSmtZZHAxV3I0MWpCR3huNGVhTGxaR2k2allvM0IvYTAxNzlUUHNqMEZvSnVtc05OTmhuZGxiL2pTSno3M2pyZGJ4VEIrLzRVUERMeXB0VzR4VHZnRHUzbC9vQko3VTFseGNjNzQ3dnNQeCtrbGpSTTQ2VkN0T3hqTm15dHdCSTB5S2dGaXBGTXpwejZSSzUyWURoaEdvSGlOdHlpN0s5MXhsVUVLWkhwbXBLVG9nUlF5dEQ2MnVkaEZiR1Y4b0ZPT3Flc2ZUQWtuVzFrMzZhcGFGNWgwNFlhOEoxeU5zenlOMENpNWJvbjMvdnF4Z0YrUGdmNXhXcVNpN3htRE90NE1KTmFvd1VwdEYxais5K3MzcGRzeVVEWjFXbXhBQmNISHQxblEwNEVlOGoyQU1CbkNMeTI4RklIOG1DLzBnK3R3U3lxWmt6VjBMM0VPMWR3eElpSmNUL1JEVCt6YWxBV2NTdlJ3cUtkWWJoVjlaa05pWWNsMEd6UGcvUmdFampqcWQxSHhLd3hQWUJNSll4d1U0V1R4RklERVdxaFpYWVlBYmtLdFJtczdoVXN6aFI1enc2S1hURlFPMVRmYURWdnA5cGpySmIwZ1FjbndjRGVHcDQ0eCtpVlR2VVlzRXRaZlhFcjk3THZlNHo2Y1FsZSt3TWV6WTR3WjVCTmxSOFlYS2lhY0dLUHgza1ZmdTJXUmRrZlVHQTRaTEpoY1lPUEFhWUo5eEVlM0FiY1Vpb0I4WGtTL1ZUYUppSUkvb04xay9udDBvdEpRNEtFUXBFZ1RTcXg0MGVnR3E1a3AvM21TRU9Uc2VIMTBOcmE0VjdSYk1vdTRJV25SK3JHaGJnZXdUeElIQlNBQ1hkcHhTeDA0TXFsUnQ0d3pEWDBzbXlWK1drNmUxMWxUd2VCQStRYng1NWQ4UWhmQU1IdTVVaHJBVVN4YU1DWVZQejFxa1lvQVZzYld4SGdtaERQSGhlbVA4TjcwV3htUnN5MExjWWltMFVrTCt4UDRuaGErL2ZxQjV3OTNsY3VIZ3FDQkRQRjZNMjJFeVFqVzJSY0JwaVpzTmRFcUMxeUZLR0IwNWo4cmF6SEZTaFdZamxMNWZnaTM4RXh5SlhCb0RVcmlSOG5tbVhYRFdVUlZ4UDIyMmZVZ0VhdzRZNnk5SWdZdEkzcUdPNFhEdHJpbUIwdExaNEdNVG5rZGE1SVVwVlU4YXNmSHBQQlBJZ21DOXR6VTUxTTB2Z1A4YjAycy9xRjBVYUhkTU4wNENtNEhmbGJmOWRFUk1ITldjcjB2cFFZREdwRXVKYU5VN2tTZXo5Zy81TkZmckRJcFl6cEZNZGZhSUlqU0w3NldMQnkzS1JFaS9pZk0renBMd2x3Rk9JQkRDUHZsam90RitVOFN4UlFvdlVKR3R1Y3ZDN2tOZkxsSGkrSXRLUTgvc24zT282clpVbmJEbEg4L280SEtiU1ZrWVVaT2RDTTBTbU9IbWFOSHRuMDQrckkvZXRzVGRWc29pWFMyNzgzRDM0a2tQWExJbkhuUkNFT1ZudHNuY082TDVFRjd4Nms5VmZJZ0kxM2hiTmFWc1owSkxaUFRndnZFZlMzM3pSTVRqRExSd251WTBUZzljMEdlYytLWFgwNkxNbjQrTzRtSGpveGpUWXQ4bm1TQXRIMzNHc0VFaUdkaUNzYnJmSTlwOXkrZm41RVFLOG56eWlCMW9XVGtUazJSQ0ZCZEJvb2MyTWVDb3lkUHU0ZUJlOXR3QWtpTitDeTQwOGlmeE9yTEROK0thQXl2WS9uL29oV3VMaEFXK3g5QUFFb3d6b09VbGFPNEVBWGs3MnI4Tk1CUUFUd1E0RGVHaTB0RzRLNVRoUFlKaU5KcGdtM2tha3RMK1ZlQmd1WjVvTlJtejVudks3aS9WWlJVa1p0YmlVV2xIaVZxQ3lGbDNsOFlKeGdxV3gzdFhzalIrNW14bFlZVkRPQUNqUjFBWVVNRjU2MHZFMUs2TUdUeFBJRERBWXdTU0dOOHQzS2syalpzZDQyYVVMSFRlSDExZlltaDJWckFSZ25wOURhbHFBM21VWmJxRnZlT3JkMHdjaEhZSWhxUG9DYmNjRU0vSnozK012MitnNVluRFN0UnUzbWQ4WGF6RVBTWnBoaW9wc1BGMFZwQmh0MHZpVzlPNFBQamhlZm5JTFhsMlZudWVQdUNGb2hjZEJ5QXN5RFpCdWVtdjhDRUJxK3JxNDVxTlZZbU1FUTVtRjhDMjhDK1BuZWxYV0pOdEZxOU5CQitxSnFEeG1FcVN2K3Q2RDVuNy9NOVZQSkRaK2lRb0hlaGU4NUJNSzJWRWdaN21yU0pQTVpzcU4xNVJwdmRXTXl4M29FVHo5ZGdIVzdQV0Z0Rm53bE4zT0c0NXVVSkNMS1NNbnJnVGVGN1ZBRlZDM0FUKzFjNUJvQ0RMbjVsNmMraFVsS1BoMGZwVlVmT2w4WThwSlJzUlhUSFBQZDJhNWhTaEkrdEdpNWxMR0pnT054VTdxVndiU1FwcVRpQTBza3dXRzRUcjFjTEV5OFRjTmFTakpHY01Nb3lSc0hYejB0SThnaUpNOVNjdkdHSWpSa1Bvb0luK0I3eERDeXR1YWxrNWtWTWlWcC9WbFRsMU9acDRqOWF4T2JOaHU5Y3A5Z1JWZUhoZk41S3J5aXNJdTZIZ1hQZktYT2xxRllmR0ZxSG5aemt3VjFnM0JBZVhhS2htZGJDNjVXTUsrT2hkVHh6QUhEWDRPOUdxWXhoeXBUL0ZyWWlUNHNJMU9mQy9oeTZxemlBcHJybkVnZ2tJZWs4NGtNOWRiUDlPdXRTbFErTmxUNE96THdCcTFpNGZYWG15bStKcVBPdEFtOWI5N3kzd3NzUm9VdHI2UkdtT01lY3hwNzRlazQ4ajVNc2Y0UFJocXgydW5lMVZMNjFpazE0RkJjZnlkT0ZpMFJHVWlYaWh2QnRuSkhBcU5GTG5VajNUa09pbjNUbWVsOHVqM0VPR2h5WXlSVDVNWWlKR3NIcDVlRFpJRnRxV3ZQR3hpbkRyM2FMVW1FazlNQ3NZY3BMUHVlQm84TU1DNjhZV292enlHRTY4Y2krVjloOENZdU54OWF4OEZSRG8zckZXcTU0aXNUYWJuREQ1aW5HSWxuY1VUTFNRSDg4anB3S1NyWFhJZ09mbVBNSkNIbEllVlZWL1VlUFdpWnFyUVlRMHVFa0lBN3ZGNUZDWldFcjJYY1VRbVk3d2tJcmdwdHhxN3ptcnZLem10Vkp5UHNEVzhqUkJoZll1SWo3RTBkK1VWaU1pZS9mQmRyYUd0NGZGSmkwVnFxTXA0N244N0R6N21Zb1JML3hicUd5aEY5K1hmanh4MlRONm10dE9CMVE5K3I0Mjc5cHpLT1dhcEdUeURad1VaWUMzRzhKVC9MSjZ6NGFGYTNUMk1xQ1gya3BGeHlMZjZaTXhhdDRVaHdUdTBxd1Nxa1lrTUt1MlpzQUFJY0VXc3VZTy9BOEQxTnlZNTU0UHAzU1l5bkg5VUw3NFk0OG13R1RldCtBT2l6bm5OS0pKTkJPVWZBamUyejA5b1p5TVRURmoyNTVhZ25mc3FDS0Z3bWl2MzRzNVVsUFIyQXhOQngwdkw1Qng1SnVJOEVFMHBTUnh0ZVNlVFFVeGtNTVdxdUwvam5teDQ1b1luTGRXaEUwV1Y0U2llZnppZjNqUit3L0xqd0crZGFYMGtBSkpjQmdsNjU1bkwraFZFYmgwb1BaRDZveG42YlptK0ZIem40ejd6b1hLUmg1dkhNd2hkQUVtWjBqNjBaeVZKem9QWUNNamEyQTNrK3IwZlFpUjFsWXdyVDlIeTE1WTFRWVFzdGdMNWFNMDBDY0V6M3gzNUkvVm42NWYrOW9JSS81VHplaXIvZnNYdXRTYnJhaDJCaUZhR20zZ21NbjF3Q1hCcTJZV3FzbUJTaXA0enc3aVU1bVJBZmNNRUhPRWNtd05kS0E1QVM1RGlTTzVIM0JJckErT3BtQnVwMjdZWWhWOHBRaWlDU0hjMTZFdWwxYWN3T0RFZEhPVXM2aVg4Y0tRaVN2eXNpa2hLQkRJWHJFcFk1aE93U2NXNDRKY1lBdUhSNnNvWWlOaTJHeURUb1B5Snd2bk1kbWJJYnJma3A4ZC9JTDFCTlltYkowMG10TTZreTNsWWd4QzF6SHh4bHdRNnd1TlAweWhiYnZCdzVUd0FmcFhBVjBleXZBKzRNTmdSNFd2WU1VWmFSbWdlRjc3SG9JclQvZ3NtNmFOL3M4UEdySFpqWlhFVkxpNlZ6b01tVE9Ec3pwaWhod3JWYUZCL2poeTBPeWw1SG5ZeXpVTlhDZXZzYWtyTVZSTWhJL1MyS2prQmRLSXNrMUh2WTQxQVBrVk9VRE95OWxmTnJjTCt4UE1jVUY2Wkg3Rmw2THJQd1pFSUNJVWhrcDlpOTVUZkFNQloxSzlJdUZtcGtrZ1I4QUIwQ0FuT0xvU080MXJlNExTdTBkd1J4c2Jjb0RSUWhjR0JJMlIxRlhOQmtUbW83QjBwY0s4cTBYTDh2aGZYVjVOYXQzaXN5NmtFNEUyS0F6cHpOdGY0cGdCaWVRR2o0K2R4em5ZRi9tT1cyeC8rM2ZQUUNJRWxmUWdhZ2I0V0xyWXVXZlM4Q3h2UnVDc2FuWE9DdXB4Uk8zbi9qUC9yTWZwSDJFTTNDdTgzNDZZeFdBSjhadzQyWkRLYVFPZFJLZi9mTXdiNjdZK0hLQkFjbkdKUVVMSGZtVzZWZXFwVzNsR09XTlllMTY1ZlN2eXAwKyt6QUZQNWFIOGFFNXJqYmZKNERQendPUHR3cjd4M2l4U3ByZzEyam5rdWhaSXpWblY4SElDUU94MHN1YVNnVkJCM2tFVHB3Q05XcnVIUWhsWUVqV2UrLzdqcTAxakRYSXlkOEN0M0JFQXdCVkVIQWsySTVTL1p0WnNzSEdESk1ndU9nVUdqSzZ1TEVxcnl5QUVhSE1LOWpNNHEwQjcrcWhQL29Ubng4M2ZIa3dkT25ZcFp5U0dBRUZSa040QmMzYVN5b2M3RURzVE10K0dvVWtVYlpyYkhnZTAwcGpacitTak9ObTU2YzNnSTVWOU5ZS0JTeDViSXJYaVhGU1VZMTJxWmY4ZTZ0WmJJZ0I5Z1RHcFUvMkZKbk42TURYTDhEckJlc1hzT0xIMExhRkg3NXMrUFZqV2NmRStxajRYYzc0L05hUjZaNkk1VXljRFMweDZuUk1xL1NZNHZlZllXYkZvWG00dFhWcEluUnEvNjhsQzgrRjZweDREV2ZObTlpU1FMM08xNkZyeUI3VmxER3dCQUIxWnJHcDMxa1hkZTYyNmtLM01RdEwwRVZJUDFoVFZFTVc4MHRhYTU2SjdEci9TQWN3ZWVlQnk0enZPYXRaY2p6RDh0dy9EUnBlUTJSZ3JEUjg3UGc4SjI3bmhxMjZnNlRlRm5qaFVlNGVxa0poSlBSaVREc3Y5am1pOGRaUU01dDVBanRyWFMwOFBVNHFTelhCeG84TmFBOVkydXZIWE1Tb1dCZzE1T2dTSlVORkx5Um1BNllxcTV4d1p0aUdwWEx1RWFYU29XaHlRMnNMWTJnZFp2ZlFsNlN6NDdHaVAydFdtZDdqdlJsK0plZEVvaWxPUEdwUzg2OGlTaEVhZVd6dVl1Y01ZUGNTQVZRUTRTeUt6V09pNE1USGtmRGpQWGlKbmdQNEdNbm04YlJJazJDTkNsK3I1anZRcWJ4bmU1MjBnWW1NYUhWRkdVbVgxOGpTWjV2a0lIZFlKQ0xJcWRoalFtSG9ybVhseVp1NDBZZWFGa3dPa2hCODJUUTIxQUFsa3NwOWVKZXFoQ1lFWGFtNkJ6TVdicmkzR2gza0dvRTArM0dpTUZmZ0FFNXNaZHI1dmdENExsZVlXMVlmbUdyT0FERmJJUXlLMlJibTJ2RThiZ3AxYnNnUlNqSDJObTQybFdOYUhxYTd3MmtVbnVkNTRQRzJZUnAxS3lmNG4vNzRnWFpyK0llLzMyeXlOci8zeFc1cndYM2pIdVZDNzkvUlgxK01OakpOWHcvRHpuK3VpVzRlY2thOUZmUXpJN2VNRzZJTXUySUxRbDM3ajUybm5LdDlhTXkyRy9HV0pXOTR2Qi80T0E4Y2Y5cXRGR2tNUDEvRnNZcEc0MjYveDNtODB4QnJON3pmRzhGaGpoaU9kSjQ2YUluMjlkeUJETEYxTFhvQWlTVmtIYzRMM1hTTkUwUHczT000VUt2WEFCK21ySmxmbitobkYrRHRGdmt3S0UrdWMwNEtaTlhZRDg3amVmSDhHZjZlSWFVbnZYb3lQbTNORERkdlN1RnlzbTNBZTAzR1ZQWDJWdEFTVXpPWUI4WlIwQXVKU0lxS1MxZnVXRmRLaEFDSkdoblJjZ0VzRDRoZWtJZThWd0llR2RZM0hiVkVTaXhOdEpJVmRaSUZXTnlOeVBGNzdsRlJtVk5BRlhyalNPRWgxUnJLd0w5Yk5KZkpCUzF6L0h4L01KZjR1R2VVVzhicnN4dkNmVkw0c01Tb2tkUDlOck9WZS8zOXpQajNhUUt2aVk1S1JYcTdvV3JHUmo2Smt6aGNnU3A0UEU0YzQ0VGpvVXM1cWRRdFdqY3h1c0M4STBrSmlVQkxCdFVkUUFkbFIvU3RUcWo2TjhUQU44TWFvbnhyRlRpNmJBWS9zdlBNNnROZUJSRHgwb1V3VUlldCs0eE9BMEw5S0tJNzRGUWFnbzNldU00RHNVL2prQitNczNzRlNBYVBvWGJFMmdzc1BjNWhoQ1lEd01INklEd2FzSlVpbk1XQmJXdklHM0V6di8raElGdCt6UGNnOFBGaUNIeXNIU25mc0lSamVlNE1hZE5yUGUwK2U0Y2ZJc2tCMmh2NTU3Y3NVaGtzM0RZQ0hjTVdMM0xGV1lsd0tpVW1FNW9SdXNtN0dYT0VCYjZtNm5Va0NLdXpIVTFNNitZMnJlUjY3RFFja2lIUW5XaHNXdVF4VjZZMEg0OUlHL1krK2ZuRUZLb2Zrd2FPUE8yb0hZc3FPV2p0NjhoU3d1cEUrUDBESmllMlhDenN2ZzhTVGcxTmIwVjQwb3FDaCtUSW1VbzBvQnFUbmM0VTEyZ0tyeEVUNHpzNTZxczlVN2c5bXZhNFdOd2N5ZXVmU0VGVjZvczQxd0NuMklBbDlVb3VBcCtzeUVPRVZWbW8wSE5WYmgxQmhFS05UNERSOFVMekdjM3MzOXVRMFI4TlgxNGJYbVdhNS92NXpMamRibGpsUk9sQXUxVWd1d0NqbFhmNzFBcjhIWUJzTlNVc05UaE9IR3RIZDhFUFQ2dGtiS3VJK3BUV0c4TmpjQzVqSzNNNXZ3SC81dC84akZhQnYvKzczMW5ZY2F3RHg3NWp6bWwvdTZIUWdQNWttOG43Vjd0cTVKNlJNN25hbngrZnBEdWRpK0hOclJpTmFNdWJJVEw3bmFHaTIySklzVzBsV3BYbzJqOCt2Z05sV1JqVHk3NisvSEFDNlIxemZoZ2h4VmhWWE5rRHF3TURCMGF2blBQM3liQ25sTXp6K3gwdkE3NDhVVzgzZWNQS2VlY1UweVZqRlNYQ3p1eHBUdmQxa29JRUo4dHkxRTQzaVo2M0dYV3VDNGF2ODR1Rm5KL1BGejQrdmlseXlWMjBFRWVheFhFT1BMeG1XUUpEZ0xxZ2Z5U0xHdHVuRm0vWEtxekdPcENreUp0bkVncndReXNXdnZ6eFM3SSsySDk0cXpqUFR1ekFHTWIxWFRNOXR0U0lKdmJ5UWVFSEErRFVxckdBalpGTklKeHBLS29FNUNGTy83elFaa0Y2Wks0ZHJiT0FPZ0xOK2QwazlOVHlVZVdsUVVHcUZKZTY5dEhqM3BxSHNxOVEvL0FuaTU1bDhhUXdEM3JVaVRZcC9QSmE1dVdjWFYwYVhlOVY0RjRXRGtSWlZVc1Rxd3hLRHkreGRBVmFDSWRhcXQ4K1hYQXJQMzIrWG1vVk83RVZObDVoN2oxVDBFYTNTU2tFNXJSZjltS1B4anM1S0xMdlc3SFBXQWRneGRRanplSmd2c1IwVVY0MHVITEJkY1FVbVRzUFZQKzZIQ3QwS0FmTXZ1TmU1a1M0cEk0bHVGMEVPUlJHSmpnM0k4REVBYllWVGtCV1JSZ2pBdHdweFZrZDgzUXVBL2s5RjhtTzZncmpHNFZzaHJsVnJsVURqZzA4ajRYWDY4TlNjYWVONFNIRmxpenljR0tJdGh2WURLU1pVV3BsS1hScVp2US9ObUFyQTEvdXdGdVRrVUx1QmNyeHlaUkVuNEVweUpVcHVXTXdSWXFVc05Wc252SytnSHhid1BmSjFLTUlrSmcvQ25PS0FGbnY3WlNSVFgrTXlFeFRpcHNzL2QwUElOSmRiWGtYaUhHWm5XZXJxYkM4VFBsNlZ3bEJ1b1VnOUFJQ296WmpqZlMrOEszRDVENWJ4Ulk4aitEeEVNWW5VTzZtcEZ0V0dDa0pYUjdrRWRtOER3Zm4rQUtoTm8zdVU5SFBXYUhMQ084eG5FV3U3MVd1blpyOENNU0xjdlFwMmlLMlpPdzVtYTR3cmEyajJ3SklTYXdQVVZWNHBTUmZWSDc0Zk5xaU9qcWJTWkIxYUtLbUcyb3Vwc3pyWkU3eHJXWFVjcUpqb2FFemY1Z0x4dHRtWWVUM0JxZDV3NjkvT2ZHNzN3T3R2T0VjT3o1Zm4zaDlENEFGS29Dc2NMQU0ySzFNbFBUQVhBZFNzejVTOU5JS3ZWOWd3NS8rdE9QOC9CWC84SzhFMGhyVDZrZFhIL2oxejk4dzVsREtnaEdJKzQrVlJ0RUFzbnVrNGhiMlkzYmdpUS9VK1k0N0NtWmxFd1pnNGp3RU5DYmtEZDgvRHZ6OHNmQnBOUnNlS2VsTU42ZU96eGU5OHJrS2tldDVZcXFod2xSYjNKOC9UcnY5NTBoNDdzRDRmdUoxQWs4QTdmVTBDc1hIN1lGWkJIcGlnU3RKVmxTRE91VXhOaW94S2tmY01iZUpldEM2eHdrYzY4U3lIUC9BdnIvd3V5OC9FWmJ3T3RYZDZIU1VjK1J3Q2xEOXVVUk9SUG9MNjk2cHo3VmVxY2pEOC9TbHR4VGtIUXEva05YdHk4WW8wL3V0MkpwNXRJeXY5NHk2RmZ6dG94Zy93ZGUzRm0xV3g4SitUalRtbGxtK1JrQVNXUkcxNzNMdzhXTlkwNCtUT0FtVlBaYkNybVZaSkRJSms0WmhDcVVsdjF1OVNvdkFWRXdvSnYwWDFxaWp1T21kYnJjV0ZSS1FrRURrbHQxZ1gxTjltMU5HWDZ3MVd3WFlRSVQwUkVIckowYk9xSTBwaHlsQlZwUTYyY3BwVWJLUmw0VmdmMWtGM1dNZkZLTFg2S211QytNa0VHdFV6SGt3M1hWMGltSVpSM3VsZ2NHcUhER2hwZVdlclBnWnhzWFpLVG1SRS8xR0FHcVp5MnFrNndsMFIrTmoybGVldE9wZHBVWVVLc1pYWHJXV1RZOFM2Q1R3cTZxMjFGUEFNUTRMTS9sWlZnRG1zUFNadU42WllwcGpvSXBiSFlxS0prZGpYNENtKy9KMEFydGNZc3I1azhHWHdlRjU3UjN2YndrWUdhL1BoVDY2Z2RzK2Z1M29ZM0Vjd0FxTmoyOHZmTjhESklwTU1PZmYvRjNCWm9HVmFrcWNPejRJa0RoOGcvcWhpaWxsVHRzUHphNVRlc3dBNk0yY3pZWE53dmhENjJLYmphRFpML0tVeDhEc1RrSVZZd2lONDQ2SlkxOFkweVhEUXRVY1ByYUUreU5ITk1wa0xxTm1nK1YyVEZzTWx1VjJZaW1FYXdxRzhCVWxVMGlYT0kzMG5OWkhYanpYOGFuMWVTM0dRK1VERHk5WnkyS2hxbFRVL0xlNG83ZFczRXZRVkxyYTVPdHNGVHFqN0FaUkpRQkFnVnhjaEdrZ2lZcGIydHFVQWtBVnR4UnZ5T3hDRkhIaXJUc3FsUjRYRG1CdHJKOU93T2IzbHlvTVBhQmhhSFZHVjUvQ0hIRUNGZmtKb3NxdHpEeDNEdElYUitzMnZKY1QrWDNEWDc1L1lsK2M1UEdkYlRUdjk5UEN0SDFuYmZTVWlaV0hYVE1GZk10b3Q1dXNmcktxRFNNbG1GVG1RMTNCOW9sdmN3TG5CMGEvRTREaXpmbjJIWmlpaGFFZ3NyRHkrWmVKZG1ONWtiMnJ2SDBZUU1BNGlLamM4WUcvZkcrNHZTVThlOGZqOGNDOXNVbU4rZGl2Z1QvKzVjVDNYejROOE1iSmFXWlFqQVhjR2szTnFaUkpQenI2QkRLcXJoSVlMMjZTL3A5aW8xdmd0WTRzeEVGblcxSURBWnl4aHJDdzQwQk83d3piNTRIUmdjL2p4YzhjQWpMT2lka1pVdjNMeDY5bUJQWTUxVDJ0MmZqSUpzRG5rOFlHajlnSEswQm81dW5YVmdoQ083dll6aExPdzVSZmNGS0xpSUNSOG1YQzc5R1NlWjV2YWlieGRjc21CQjZQRFQ5dENYVkxodkc0dFMyQ3JCSW1RNUd1RXJYV21QejM5UkM1MDFhaWgvOElOWXlXV1NOOHF4UU1MZWNnZkJtRDk3djhaOFV0cU04Z3FiSXJZdThpaG1sSTRRd1l4b0NINkVEWGxMQlNGQ3h6WnJmazZGeTFVbDBKYzFzc1A2MlQyakJMVGFjcEhuZW11cjdiVWtnMmZrZHR3QTY4WnNaTUd4WU1LOEpjdEtWVTJKZ292RkVuL0ZrRWU2b2V2RGduZHFrSWZKZ1hwRXdrVDBYR1dNT3hmdmRidFRIMTVPTmJuVGh2Q1dVdkdCTGtIc0U4a0ZDV2xFb0s3NTFySnp5eEJZU3hxSFhteWpXN25BL2hUd0tydEFLQUhPYVZ6dlBiamJkdEZhTWo1TDM2UmRTU2lianZFejBpdlFUMEZwYVc3VWcyWjBleFVudUZ6dWw1bnp1NzlMemROak04ZnZuNXhPZm55K2JqSmNUNEFlRG5QNTFFa3p2Ym9yQW5Jd1AvNFo4bWZ2Z0svUFFsWVphQzUwNno3ZXNkK0Z6MFNyKzRqay9VSll6S0xtRmRtU29ZR3Z1UERzdURENmlVMVh1YlIvc3F0QUtjRVJJbnhjeVkrR2RyRUFSOGZsdVdFZ2crbGNUbUtGdERyWVVwUURLT0NrUTRCWWdVaDFkWDYrYmxLWUxyM0N6LzNSbEE1aWxqUW15YndUWVprVEt1aHpWRER4T2NsNEtwaTVPckhKR1lzZEx5bFVSUVZXZG9oQjQ5OHc5VXFDczJPSUpwelZHTnZFNkdBZnNHdExub1BjUnl1d2pVZ1JXTktsQWtnQVJFS3JSOGFRM0ltOVBpQk80TXRaTmx5OExFdlo4NERvNXM2eFMyYisvY3pGbDV2eldOSFJuQVMyQU1FUVcwNVhrMGpDU2taczk0cElsdkpSdllpTWVCc1JyT2syVlUzU2dvRWJhV2FtWHZlYk1RMysyV1VNZTc4V3lYMjBZdk1tY3FoRjdSckU2YTNzZkhQbkRpVStTckhmZTBnbndFZnFoTkpIWmdGdVZ0NHQwMHc5NDdqb25QQTNpTkRPQVRyMmZGeDdlQ0wxK0J0N2VCL2p3RkVpS3llTXpPVU5FQVZqL3g2aDM0OWNTUFA5N3d1RlVpUGNkQVB6blBKenI5MUE2dXBwR2w0Qy9tSXpaTXRFZEJWU0ZwSEh5K0FaaEZjTURpK1NZS296NVA4L2FYRkhsOGxkMmRvSnppaHFwS08vWWt1RDN1dU9sS25oL2ZyV2M2dE5sRm1xUU5xYXNWbmVNRWhWVmF6TFgyMHhtT2hvQXNTd0RReFEyZlpRRFhoTWRHOXJ1ZkhnbVBVdkRqZThIYlcwWUJqZWIzTDhuQ2luY3pVQmhLSEF2SThwNWlrd1NRaDF2dHV0ZVNIcFdMazJGTmJkUmFwdGVybElEMnFzQk5iQzI3RnFKcFVlWjU2VTNQQU01NXN4L255ZGVhbFpjVzZHNHBRMkFwa3VrcGc4em9IQVptQVV1ZDBsUXQ3ekxnazJ1OVhrVjh1SitzeVlacjJtSWNFM1VVM0h2QzUxenk1TFRtVjlienFUSXB6bE55b2lxQ3VTU1BMQ0lTSUNldk14ZG9kM25JNFZ5bU9GTlp1QlV5R0c3MVRUaWgwMTZmMC9zakRDUjVDbWtXQWtVWGNCd2RsVSt2amxCS1FWa3NaMmpPUkxta2loMDdNbm04VjZURXlkRVEzd09TdFBBMXRPN1JVT01OSUNGUWdEV0JHVG56THVCaUJ3YmtUYXBzNjVUbmU2YUdXOUNQMmowL1g4QjJPL0g5R3l3Qzh2bTVjTHllT0Fha3lCYjJqeE0vdjhpaDhUcDFrVWtLTE9uZnI0eGYxeklaOUxkL0M5eEx3NkdveCtjcXdqa0FQNzRyaFNVanMwYWJYeVh3NXFYRXBPdjM1aERWY3o0eDdWdG55QjRrS2ZPRmYvNCtjSGowY2M2TE12LzY1cW5kWmtaZ3E4bFZKS2xhQjJuSmo2bktnd1g3L1g0R2ZuMzUzNUplRXpYenRkZGZ5R3c5U085bGZTN2VTUHBrZGZGWkZFWXZCRVRZaGluSk4rNks4Q0lrNEFvQko5QjMxaEt6V2FWbHJ1RWpRbHhvOUtWOFpObzVvSzJ4SmpBQVNacmNLZFl2bFJjMWhlbFJGb1lqbmxFTWhPR3VTRzB5TFJLRnNnVmg1MkdUY2U0TGVYOGlGYit1Q0EwS3dLY0tQajdnY3dMUVdHUSt3aDZadjVoOTROdTNBOS8zQTZEMUttQU5jQ3d0MGg0V042VE1HOWkvTnhkNmRWbkNicnpvNWE2dXVud3phQXFnOE9ieDZqaUcrNzBIdm8yQmV5TlhkR3NMSzVjSUZST1pLSHBiQ2UwU0llU3p2L0E2WHZqMnZCbUFCZ2s0KzRGMFpOaXZwZ2pYNVpyY2FNSStUdlFPZXVkaW9mdlRuM2M4YmplOC8vaEFPam0vVG5MWis4VFFKaW9XdGhTSVVBREJYUjdBL2xHUlFPclFyU2ExSHcyUUd6bDFPbTYxNnJ6Q1Y1d05hRElpeExFK2svS2VmbFErbEZ0QlFVVXB6VEFjV3lYeXZmejRFeDVmdnVDZi92R2ZnRHd4ZUdNWG10bEVwV3NlcWFkdUVxcDV3OC9uaDdPaHNUV29FM0VrY09OWHJxOUhKWnI5MFRKK2ZLLzRjay9HTDk0MmtySGN0NHJ0bGxCS0lNTnpUSjhvakxsTzFaeklEVGdDV09FWWs0S3RjSXozY2FxVFdTRklDRHZQV2RoZlFJZHZYcFRWZ3NkY2luNHU1aUxsVjJMWTcwblJwNFRTR3YrOXNvMS9xWkgxQXYwVkdmMHk5c1VBV1pITStPM1BoTFVSNEtialVyTjhXeG12Uk03clBJRGJBNWpuSjNxR2pvN1hvTUY1ZEhqZUV1ZXh1N2VsSERvakNKS0Y0dTVuWXBxSDV0MlZ3SFNYUEZKNERoVExIcDZ1dC9DbzlYNHRJaVFTcnRJdCtybG9aUGpuNHo2cG9DSjNLaGs1b1RTQ3d0bk9rcGFUUHEvclVmaWMvNlJUeGFPSXFXMDZEZ2sxVi9ZbmI0WndENEMzYk9sTjZkRlZnZmxTcWRiTTRLMW9YTmEwdWE0V0Rjb21mM01TVStkY09GNm5QZjc2VFZURzNQODA4aWRzcmd3L3NKb0lrSyswdWg1VnhkN3RkLy81bjRIMU8rREg5NHkvREhycDh5ejRhQXVibGE4Qit3WThKajNzMW9WNFR3UDdWS2M5SC9YaWxyRzQ5a0YrQlRydGhXTzRUT2xTc2U3VDBQZGQvUnFjRmozTE1ZQUN4N1VnTUdkYVcwTXNwa0Z2VWRoRytSeVluYjlGcWdXdTNUNG14L2Jpbm9XeWoxZXY3ME5yUnp2Tjk5ZTZ1SHBKejB0UXdHclJoSlhpajFwWFJBMjY4anNMT21MQnJNa0JHV01GUjNXRk42Tm4vcnFRM0dPSlpyR291WXZYYytZQ2JzamtvZG1GVlp3c1FHRjIzTWdNSndSN3lrUU9IL3NuWnFkSDMwWkdMOERiUnV1N2JBaFBESk5jd2VjUU9FU0NTMTVndWczMHpyN016eDNXQ09PeE5Ud1RjM2ZxN2hWanBITUU2Rys1SjRoV0EyeVUxVFFHZzVZZVVhWUYxOHhZd1RnbEk4eE5ubVl0NzErQWRpZ3ZsSXZsd1F2cjBDV1VOeWxTNWJoV3h2RUNmdm00aTZXSlZualZkWC8vNkVqNXhFYWxxdEt2d2VZQVhpdHAvd1dRN0RrN3psK2VCdTdpbVBuOU14UUk5WnVlZzJCQmNyM0ZXak5WYTAwOUtQQVZTYndpUTJjeUw2MDExaE9Qa3g0MGl3V0locWRiR2tKVERjNXcxQjN6c3lPajRPM3RUZWNUcWxRbzB5L3ZkM3ovZkpwd0dtb2pDL0tQazAvQjhxN1JQclBrZ1dNRisxUmVVOUlSeHFqMmZnZHUyekxGZmtPeUVPZmZmazNtWGYzd0J0eHJ4dHVqb3RWc2VKQkh6ZVNrdG5YdUhxdklXbHl6cCt4aFZPMFBoUnFwRERodTBQY3FjTVBOUEVMSG45UktyeVVqWTk4SFVpQ3Fvd0pIOStTQXZ3cnZpMDdCWFRoc0dEcWZFL1NrRUdZcUh2SU9YVlBlWDFJSE1nOHpGL1ZkTHhhRnVwZXV0a0hLaGJhQ2thdmxaRzlidDRpU2Q0UE10emRzU21sM0NmR09qTnE2N2MrS2haNklYSGMyT2FEaS9ZdktxdnJwd0NRVFJFc093aVVMbUJhYVJPTEIrMVBMNW9vQlZkWTRqZUFhVGphRFl5M3pYTTlSc1dkNmFTZ1RkZEhqRGJGTWVVYkpyamxNSGdvbVlucE80ZkVsaHF0YVFqdGVhU0c4d3BTaWxQTVM3K1NuVURQVFdEeVMzMmR3QjRUeFNJRHFQUmsvUlowRFBTK1VvV2lBbkpyM3R3TUZkOGpHeGpSamZsaWUrZnQzN3NkMEE1d0xPK1JZZEYwRXNnTGVjYzFEcWJlQlloaVNVcE5DN2htM1c4Ym91Nld1M2g0WnJ4ZUJlUS9aVHJsUUwzaktaeHpMcWhxQXpja0FuWHpOamhkZXVKVWJjcEZDbjhQVy95TUJQMXYrLzlva0lJbXIvZXRqb1cyRFNsNU9SOGIxQ0xaTmNSRFFRRGRRMzhjdWY5cXhMN3FvOVZkbVRtSk40RXUzYzZXNFhjcHFnVGdiZFVVYzdoMmJGN05DeC91WjJQdVhvWm13VmhLY3J6eHFJZU9iUW5nR1pXdFF5V1N4TTZVSWMxVUNlMmhSKzg4V1dmcHVKTklMeTZZdzJOV0dkY0pMQkk4WlV5SG11akpPN1ZmNTBMaFpsNStDZW9mbitwQ1VVSFJLVCs4OEJjOHh5WkpHQmI1L1crZ0hHOEdrMkF3c3l5dEY3U1RaVlVjREVreDhFdExJRXplaHlWK3Y1TGxSVTV4ckZHTU5XbWdzNFFGcFNkbVZiaWR6RVBHVE9ML0RqcmMzWU04VG55T2o3aDAxczhmd2wvY0p5N3J2UkdtT21mRWN5bm12Mk9JTEZSbWJnZHo2dm9DV3JDNTRKakxjYWZUc2VWL0IzZ2VOYzhmQXNTTktEUjBHak9uaFhkUjdOY0ljOHh0c1FmS29Od241MnBEMUhkOFJZeEdSVGM4aFk1MFJLdVJlVTBtZGQ5aFNwWVczR0NSektsbkF0dTJtNnhwS20wd2J5NC9QYjBZQUJETTZhZFR4NE8rMlVraEZYS3Z6VkxNYVkwM00yR1JTM2dYdlg1T0JlN1lDQzgzK3pkZHNudFhYRzNDL04ydVljcStiYWU4ZjN1RVlFYlM4bExZU0JYT2o0S1gzVHc1clFEU1hjSEtZYWNqYmhUaVVtdUpucTVlTXhaeWtWSEc3eXl1VVZ6cUdhdGNsK1VReTR1dVc4K0toWHhDRnpqTFdFb2g3Q2VQajFBNFA5aiswb3VxVVlCMlFpQ1RkYnBUcWUxa3JsZGFYeHczZmo0UnlKNzlseXBQOTNiMEdWMW55a21pTVVJMG5LMWQxeEhvdWpmTW5nd2psWnNybU1VKzhYbFBHb3d3cG5Zc1hSSS9wRG5aSFc2V29paWFqZ2hHbTJ3eEpSMnBaL2FiU2RWNDZPdmdvYi9iYW03c1ZHcW5KMXJLUFN5THQ4a1c4cHlnamQvQmtNQldLeU1rVnRQcXl6ZVQ4NmM1ZmlFV25JZ3k2NUw4Uy9QYmo2Y28xWkxOM0dkNmFLOFFCSEZIOXNiOG1mdmsyTUdUVXJVOEFkYkV4bG5MYURKeFF4ZDNXd2g0S0pzcmpkSytPVzkxSHd0WlZ3OTZKdmo5RUtiejlqVi9qRlh6ZEQyQWZCRmV1ZENqVVhUQzlSSTZ1RWZheEM2bGZKT0Vtdm4yZXhqRUNaSlpYa3lrRnBTeHJNVnNxeHl5RFdKWWtBeXRzb2tuZWdrV2FXRXgrdm0yc3ZyMFo0VklTM2EwSXIzeGVIUCt5d3JGQnBHdWpaRFdxeElqMno1cC96NkduNElrUFV1UVlZYjJmK0NkV294eXhNZVcvTXEyS0VQVVhlbFozdUhPbGdzNHVmQlBpUnViVTU5U1pxVzFxL2hJVEZzZENsb0xNb2hHVWFrU1NkOWVQVjFqZ0dIYWVMKzhKMjkzT3lack9vZHBZTVBjUjNtRTJaWkxWd204L3FmQ1BjNUxlVVVDT1cydEkzbnJ5WG5HY1RFS3RjOWg1VXZieEE0RVVGV0xia3JRY0RGbjJNWkJTTTZIRmc3K2RaOFlxVUpQcERQU244eUQ3S09DemV6dkx3YTUzUzRDUDc0RmtScVp5UDU0MFpDaVlrMmdSMmJ1S0RFMUFQUnNYaUNsMjRoYm00cHpYUWdXK3ZMNTNaUHZPYU1DN2Nxc2pGeTRqN2VScGlFL1Z3bytPc1RMbWtNcnNuVDJhWi9leEpKaUVIaGJKaGxKRnpjVTh0OXZiVGFSRUc5TEhVNjFhTXhXN0dZWE5jbmgxcTlaK01HOVZtekIyQmhhVitlZnpoZjIxYyszTENKaGdTMTRrbWRxcm9NdXk2YUxIdlZsa1FTRTNjV08zUnpMbXZydHh0UlM4M3hOKy94TXNmMzdMeWFJblg3OXNWblBkeW1ZZWg4UW8xNEZRMUk4N1VPNHlhR3VTRU0yUWYzNWhtNXM1a1BZTEtRZ1lGOFAwQld4NzZ5MXVzWmE4YVJGaU9KRlU1cGNHSWRPWEVGOXJ6ZEQ0NDNCQUtTa3ljeTFreElyZ0JERzNTU3h4ZlFhMVpRN2ZNY3NocVBhNG1ZSDkvWHZIN2JuaktBVmxWcVFjVWZESFZvMk9kZjRBakYrQVVTZGFaOEMyWnVNZEZtM3pZRjF2WW9WSG53cHA0VUM2MzhrRlRtdUlwYU90Y1MyUFR6Tll6cTZRVHM0eURIUjBvZWxEK3JqUEZhOXBWanFLR2FHbGJzQnhDSnRUZ0VZVVBGRHRmU3dmNXdtcXhDa2pKYUo1eXdWbTRzTTVpZlpQNXJnb1lsTllYSld6UHVxOTRFdkk4RVhMUWVjbVpxSHJkNnR6aldSV3hCQUpoNnY4OWxKQXNjWWxZbVlac2FxR0g3Y0ttbCsvRDRXUGdZNDRLZ1pHUW1TMDVhU3RSa0RrV0hSUGloc3VQcjRjRlhNczlpdzlrWUZQQUc4QVB2QkM3M2ZpR3RxR0pBTTM1b1M0Q3prR0RqaFFWUkxMM1ViT1B2TG94NEZ2ejJuSWUwYVhnMk9ocGNKOWFiYjNpQnZST1BxeHhLbzVaNCtTYkptcE16R2x0bmxUbkRYUis5RCt5VFRPWnZJMklkZDVVTTk3S1c4U09MblJWandxT2MwNHJONHpOZ0s4U2F4bUxJTktKWE1pQVgwNWNuZ0x5OEVxa1pOVzZDUUlNS0JlNUVYM3p0emsyODBITEthZ29DaXZyczhqR2dTME5xTVhPc2x3Zzh6REo5QjQ5RmdUUERwYkYySjJwTDZRMmpJRWQ2NHRZQVNCYkRRQXhOa244eWNESXV3UTVub1JIRFlIMHd2TzVkdHFRMEUzTDhuRFdBMFRNODNnYlo0RHhpTGFzbDFqUXZQN2xZY1NkMUM5K2IrNHNqMWNmUXhTdEphSksyRENlM1VmRG9sWXVKZUNXUWpPMm9jRXd3Z3pTN1NGTXI2MEpGY0J5TUFVbktYR1YwNTYwUk44NUU5b3FZb3ZldWFsU09aZ0dWb3RhcityVlZXekNENmlqanhOM2JHWFY5bDlzdXpzWGpZTkQ1WDU2N1ZiZld1ZjFRVHRHaFRNVzh2bWFhNFhjT284MDJLa25ob3Fwb2dnbHFXOGRhckRRWXY1OVhyaERKNTF1SHVXVVFtVWRFck9XdDFMQVlPN2hYenBBTXBZMk42U0tldzM5VEYvYndtLy85cnc1UjFxRFpudzlWRngzeksrdkQzTW9DdzFvYlhLM2dQdUNVRTU3S1FRdFVwb2FuT01CNEt4elFYRlRNRUVOaEZJOVVocDZGdEN5czhVS2lpWXZJSU90Zmg3aGRlUU16dVdtVlhoL05JTExkY3dLdEZWVGlTdmZJbjdvWHFUa0lNTWRWaVhGczB1RXdZalRCUjZ2M1FSaWtuNW1CY0RLdzE3RFVYaEVrRDgrckJ3K3p3N2h2RmdxK2EzeHQ1SVVUZWdldzNzZjBBenFSalJ5UVBSNUt4NHRHaHRDWE4wQytFT2RFc2RIVkMrTlVqNkxhclp6NG01V0V1T2hFaEZ6aEs1V0o4d1hWbXRtOGRlVVpJa2NBeVVyRGZ1VndpWU9HemVJK2Z2SlloWmFaYzFvOU03cE9qNm1vU0tSWE1iTmpkeStXcDd5Nk9nRjUxQ2o3OTRsRlplOE13a2pRR3dEbUJBZnpIY3lEbUFlNndSR2xoeUFJZWYyMFB3QWV3TW8zWFF3VGc2WDlza2E1NEpLTWRTdFVrRGJzS1k4TnI1K21qWWNZb1RJbVBaQnVhYzZEWXhCNTg5NTRIblI4ZjNneUMyMDRJbTNMOTltcEowWndZcEY4cTljMUhQRlhNNEluV2c4UGcyWWI4NU5jRFRxMlFuR1JmM2MzRk5YQkR2MXozczg2cTN1WDVBUWhzSEFEWnlWYkFYZmltb3Z1ZnRnWTlCTk1OUXRvTHpwR3d0eFpYcHVnb0U1ZHRvaHdiclZqUlFDVXZXWS9IaHVZZFM5OTdrUldRMWp3YVVWa1grY05xb25DZm9GUTUzQWxtWFBmWDk4K3dzNHZkU0EyTTBxblk5TVhqREp2UzFMNHh6Q00zSU1BMFZOOWh6T0U4TS9idWZvb0tON0NOeTRiV2x3blY1MW8zZVd5SEJSNnRSU0ZJM2VpZHRDKzRTRDVPbExhRmgwWWpRMFlmblZuaE5PUXdnNno2V0RoTVFSSlRiN2dFK1VWRW1oZjZtMWFFc2lDeEZDb2ZUNXcvTHl3aHA3VUs3V2JXOTNVZHJoU2lzaGIrQjJxaElsOU1YWnV4OTRaWm44TEwwS1NNbG05RERJRnEya2g2WWE2NlFMT2FuSDc3WVo2WkM2T2Rla1IrVkRYYTJiSXBRU09ab21jdXRLYU1CRm4wNVhoeHZmNzg3SUdDZGw0cWY2NEhJVVNQamVuQnRjSyt3ZGFNSFRYNlhnUi9lRXU1SStQTEd1dVRiV3pWY3d2c0diRnZCSDM1ZmNOK2FHU0RibHBEVFJpODUyUmhFeUhNNmw3SDR3elBJQTRIZzhtOGVOWXU5aERWQ1NaVk1RS0lzVEZLeHd0TXNpUDBYUG9TSWlwTDkrVnZKbFRsRGlxbzBvTkliM21VT2ZFekpVYi9KSWlLdE5rYTVPbm5ZWlNjS2p4UzIrRnAyVnN3eTJKdGdLOGJJVjVUcW1YSTJ0MVZRMHM1b3hoenl2R2o4dk4rQVBqWXp0dmJNQml3bXNpU0k4Z1RXOFlubm1zWTkzNnI2RTR3ZWpYUUdRNkFsQjgweWorSzBxSXh1TFRMQitSckpGa29xOHZCR3lBV2RZZVpDdzFjdFZXZUsrdDFhcWdDTFFCZnY5eXBKNjFnRVFpbndJTnFSV3JjWlZWZnZvTjA0aUUrQTBoQXJDOWcxZ2U3MXhnTUloVHVnZGdZNlR4aUIzWlZVdm5vUm5mSkZMSkxFQnh5a3FRdjNiSHFYTTJlYXpJQkd3MEdXRWF5QTE3T3pzaXFUWVRLSm9oWU9waTNSaTJMTERva2cyNkdtRHI2RWovTVVzSkNSMzJNVUVWdEYydU9VN05yUGFVMmxUblhwbkFoRDJiemVKT2RXVks3N1NlVmFqNGx0eXhobHVaQ0lQZGNua2Z0MWluYld4YW9CT0JsMTBtdnU3OHdWd3h4SGNqbHBSN1RwbmFoNjdwUzdtUzFwTmFqNkUvRGhLdEt5VzFKa1RDMlZBcHh0RzRNMlNVRzhFTFJxd0JJMGxXUUJnczZsUXp6dmNTN1BTelJUNWdsT1JBWFFxMG1wS0dTeFpKV3BRWUFXMjl3SFJuckpJMkRJNUdiblVYajlaSWk0SDdEV2VGM295Mk1mZGs1RzM1eGREZWdyOG1EZFhuZkt6UERPYytiQVl4NWNORjNpTXZpNGlVWjBvQ0F0ck5pb1lPZ2FlVmx1N2xQdjdGMkFMQUE5Wjl5VkQxUXNDSGxBMTh2Y0RaYktnUVI2aTgwaVFndVZHeDYwVE9pQnI0bTFFenRSMTFSNDM1SFd3V1ArYU5WQWNMbERpSElYRnVwV2R3NTIzMElUMFVKRzJxWXhRbUZwVTdvdEtFdmQwU29qZGZ6ODYzZjg3b2N2UWJoUUtEZ1RhUUdsL0N0NTc2V2tTNW55NmxnRC8zcG12bi9zS05nd2s1cm81STV6SUE2SU1TMjhXVEc2TlhzZXdRb1hhc3FWNTR3Zld6R1U3ZThTOFBaanhadW9WVytQaHRhU3JiVnR5OVo0NSt2N1pnTHEvWjE1MFZJSVo5a2VMVWhoVGdxN2dSNmVkWjdJcHVpYXJmZEMyay9CQ3BuenA2SjI0NWlyaUEyRERHRXFEbmltd3NxS0VMR25tSnppdFJoNmU5QW9SRkxKS2w5bmlaeExYZXF2YXFtYUFrd3BsOFk5VzNJSTNINW1xeU12eWNsQWxqQUJhcUhjMVBYc3lmS2Y3UTJvajRYOU8vUDF1US8zU3ZENUhQajZBSDc1ZVVZeEQvT29iQUppYTR1RzRzUi8rbGp3OXEvdVRGRE83R2NHMXNHeVNDemxuclYzSmpDOU5hMEpuS3lOVWJIOFBBRnF2NVFVQ2RTb3loVmdLNVdwTkVsb2Q2aEVNTWZYZFRpdGdDdDl1RWRONktIWUNNTlppa09Hb3NvT0ZmTFd4VVVOOTVoQlpJU2MrSmFNYjZ5L2F1enlGRXZaS0hkMEJNcUV5NXNzcHlOcTZ5OXdXWG8vaTJPcGNIVEdFcWREeGsxbGRya3lqMTBROU1sV21MellQdms0RDh6MjRId0dTNXdrYW9CRno3RWt6eW1qS2Q2cFZKLzd3cXRQUEkyV0c0SG5ndlpDNEJmTW1OMG5HQ0ZHeFpUT3VvNTlBS056V2JqWkdTZ0hQMTQwWlRvcGdoWGhkdnpaUWx4K3VscFFlZ0JZWWNOMG40eStZbXZMcnFVMjI0dkpGVG9IVnE1NkxJckVDVWUwL3h6ZXhNUTNyMU1jTmdnRTVXVU9qSzg2ZE4vRWtRVHhuaG9hUnBENHo2cnlzNnVWVXFxc2VtUUp1Q0kwK0VtVTVNNTY2VG1XdzJ3SmJsSURqYTJTZTd3a3VaazFjZUlHdmNkemRydytLUng2Vng1eEV1R3NSbVRCNGdTRzMzaHJOSFU1N1ZYNXl5RkFFSUUwWHVGWUVpZDNrSWJSSnZEV0Z0WU0zTUJienZoOEpJd2Q2SGxZU0dtT01IZVZFSXZ3R2x3SlRNNkowTTZBSTVPdmVJT3k0R1ZvYnQwQmFSREVtSmhuU3FlaDUza3ZuY3lQcFcwcWF0dzVQMGhtamM5SlZPOGNnN2dEV2FpcE5LdjlQd0M4UHh4SUZ0Wm5UY0FSNno2cUpoYWNEYzBiL2xpS1pPemdRVG1QZnV5MmxvN1R6eUdFL09PR05tVjU3d3NMQmZzOC9NZnhmVExYV0hOMEswdjN4aVk3SXhyZVUzREU4K0pQMGpLV3dCOEw4T1ZyeGQrMGd2ZXQ0b2NIWUQ5L1YzdlJiZUg5a2N3YmYzczBNNGErdkdlR0JsUEc3VWFnVnJ2ZktZZVc1OVZPcEY0dklzSFF0MFhDMzJoRG05YmJoam03MW9FMzdGbHVnQ0ZEbmZGMHNxazVkcjc4SmJ5SlhoYkdndVdGbVpTUU1TL0tYMHBLQ3ovREtBcExHeWZUQXdzWGtHeXRaTGticnlVUW5lYTZKTU01bE1Ubjk4ZkM1NU1HUWtrRGp4OFN4dmVGa2JoUEVFUTZKdGkzd2h4dzcwUnV1OWVlRGZCS2hkdUw5ekpRVTZVUWovYTlWaGUyTzlmeTUrN3ZIL1JTV1pZb1Zyd0dPQmxraWl5d2M0OVBobEMwOTJOOFUydU1rcWsxNldIWEVDQmE1emZRVTQwRnhlWFo0WUlXa0ZJU2RzbnJrT1VjVU5uZGc3MVQrSjhWVGhVS1ZuRW1RL2JoMThVSDRNcEQzUFBLQWJHdXFrcHNvZnlzTzA5RE9CcWgvWFZ4UUhhZURONnpLaktDKzJ5b25IRG95OWtONnBSTkFWYjFQYTlGa1REOVJEWDVrYTFLNmN0N3hZWkdnM2drblBEc3o4UWsvYmVBZ1JPVnhoN1g1NXo4N1g3aTJabVdmTEduai9hT083ZnJJZ3NBNllNT2U4eHF1Tk43UWt2T2NlQnArbXJwd3JxOEc5NEtYY2wwcmJBRDd1UlExMnFDSklDMVYyVWxPZVNxcUROaVZnbGxNTG95SWw2M0lzc01LWXljS2NVOEI4N09zQU5YeTlYQ1g5M3I4aUxFZzBrUHRDTjRlMU11Z2NxclZSMmZlRU0xS1VkQmdJOU5qcUtFSm16djFha1lkcFFCcEkzTDlmUGJzRW1aWTQrQy9abFFuQzFva1NkOXk5blF4a2pDQWd3STZRenNZK0R6dXhrREpBdnB0TjZpZ2pNYW5EeDNEcm9zYUphVnpJeDBMVVV4RDI2Zm5adDVCTEZHRWFVdUQ5NWJMUVc3UlFVNnprcEJxMEpHQW1Hc2JHSFk5ZkhvV0Mzcm1xaElOTW5lVUNZVVUzaFYrcnlITUlkNWdrT0NaTXZWRlAyRWgzYXpJYnBYa2dkOGErVGo1K0lRMHBlQittMXBoblgrdGpXalpTMDUwMUJKV1cxQVQ2NmJTMGxVeHZETmpIQ2RhZVZJb0pWTVF5QndQbVNpeTlQRmtQanZJNGErRG90VUJMQk8xdjFJYkxzWnpKY1RXVG4vYkhWRlJadVM0N281Q1VuMmtOdkFENCtDOXA3d0x4OEpQOTBMdm54TmFKNURyUmtsTDBzTnZMMXZ1RzJzNG5oL28rWE1mSFJDYmcxdHUxazBKTlhOMWpCQU5PMkJpV1VLWmFrWFBnVVljNnRaakc0Tm1rbUpmU0dyeFZuQWJYUUZHR2wreUFTMlBKd1lLNWRQQzQ3ZUl6U2FBc0RHL3ZJQnNVM0VHdERmN1pNbGNlZUluRDA4amNMOTdGSGJIRFd6UVBIUTlCTFFLOHJBOHh0UXo0UnhzanRYclVBckRmVnRrVURrZWNqUUlvUGN0d1dMRm02VGNlcWJDY21FVlRMV0JweG5pYndraGtWMzFoUFlVVTBSN0tmU1A3Ym5FbTZKa1RkZWFLeURQQUo3NDJWNWFYbHpucENqQnRSYlNtc2xwWVBDTzFVVEtZR2xKS2dQNHdHWXRyY1lnVlBWQlg4VTFSMDExQURVeWVIUTlnK2ZLd3JCM05zTFdKOWJrWndXUHMwUnlXUFFMRHovcEpNWFJ2Y2lkYmVpbndYdHplcTB4MEUvQ29FNlV6Wlo1Ny9meFZQeE1keWJTeWd0MmVkeUtsYUY5STZPSEdTaXFHVlp1dXJydStoMnJVVXJvOERESEF3cDQ2NmE4RzJoSGNCUW8vaTZnT2RKbVR6R3dNRmdwZ0VwUHlURUVrbkc2UG11cTZNOFFHRDBRU3NrU3NXOFpCVFhJK2NsRmg0RWxTNzFqaUxRSTNhbmN3MllUbmRabHJIUVJVY2MxeEhZaVl4dzZxV0hxVThqWXhSWkRsekx6SmJuek1vVlZJTUxlWExRSythR3RrNk1WWlRJajgrTnJqcmY3dk9iMEZmR3ZjTG85dEtBbFNtMFBNM2ovK1Z6NGZjL1FvZUNLVlBPdUR6dDhHdGNjSkJNcERtTFQ4cmVhay8vSStuQmErK1dnNEdBWWdQOHNvZGNsdHp0aElhY1Q4d1pZYmg3eXhMVWhWRUUxZTYzZTBJNksxNFVVdHd3TFNzZlZ0bStWQ2ltNFNITFdsV0dOM0ZRNmNkdXV4NFN5RXdiekphdUdBVE5kZVVHL1U4Y3ZMWUNSV2ZjVDV2RDBNRjVVT0VUdE5lRWpUalJQWGlXd3h0cHcwcUU2TEdOSGNQKzQzVzh6c2pSc2hVaHVidUJvdjhSQmM5L0JMbFBTOVVXK051WEJ6N1hyMEhjVURlN3RyN0U3QWIrVWVHVERXcXNyZzBvUTYxUUJHY3pCc1dHcUxLb2xRdnl5bWdlbnV3ZFNleUgxVXBURHB2VHQxYng1VXZEMzM5SitLbGwvT0gzRGRYdG02YmNkaVdBN2Q3WVBTem5qUGMzOFhBbnJzVmNHN2EyR1FsU2FtL2MyRVg3clN4c2VMSGR6UFF0TzVtMnlJWEdhdmF3NEEwNTc0RHVDMm1oTzJER1V6L1FIeFdSaEpPbnZ1S0lmOEtRMzBwdFJQdmlySDlmUWhjaHNLdkdFcVZhYXFzUENTM3l4MHZhQjdsSHJTVDNBWGpTV1JQZWE4Ykh4eUV2cFNLanMyMXRvNWpZTmxpanBOLy9rUEhIWjhLWkt1WU5hSzlwdExFL2xvUmZuc0JJd1RHOFJzSmNWREcxeUVtWXRoTG90UWtMMUl4dE5tSGdEcHlEM3FHd0EvZWNjR3EzdkZWNmNaSm5OTTZycHlRYUk0SWFPM1lHV1hMcVQ4MFpoNEhwT1prV0Y5N3ZMa1hPOXdMbk0zM1BYL0JJQzluV1JrWVh3UXlqTlE1M25mbzlwNFdsQVBJSWpkUitZUHFRTGl4WTdsWFRRTHcxaEpldC92QmRGUkhOYzlsRUZUQ2RsS2VmM3dobzd1d2ZLalZSS1dlMmdWWnBTRGtBKy80bDRUMVhwZG8yMURRQjlkRFlHaW1UMjVad2EyejQxVHo2b04waVNSSUE3UTBrSUVQSExvYlQyV2xBOXJIdzBTYytuaE9qTTNKYit1UU5pUUk1cndrZjFkUDRSM1plYXpacmxkNXlpNFpKb2Y5UFJYdDVYZEd2blhnaXpwTG0wYU9zY0V0S1R5blVMLzM1dDV4dzh6V1VmRTRvZDZyMmRyMnlGMEhDZWNGSXhQUnVYb1VrOC9CZTBWb2NXWDhwQlhKY3JpQWZqS1NGZEpGcnhsVWtEK2xvZzV3RHIvRmlsNW9KN0Zpb05SbXRhS3NkZi80bk83TUp5N1p0NmtqMkFzWWs4RXpqMW5MaEFqUHJ6VXU1cHVaSXlseGhOd3lBRWRsbzJha2hESXNMNm9ybXdlWmtGQlo0M0VDdlAzYkJoVHU1RmVhbFhrRTBnTm5VUUhNRlpXZ2Yzc2NuYkxVc0pQRnhFdEd0c0tjemJ3bE01ZW1PRll0b2RzbHZoZ0VWd1ZGclJxS0JieklBU3N0b1dwU0R1WEo3SEoxMGJ6dWxvcXpxZzAxWE5wS3lFTGZRR2JaVEhxeXZZYis3bFdhYXJWU05nMUN4NTdHTXNDY2JxYmpqWVoyd3NkamlYWjFBcUZFSHlzWXhmVDFmbWdPR1hrOXZHNXYxRndVQ1VUK3R1dUdhbVhHS3VkSFh2RDQ5eVdEQmdZWHdkRmhhc3REcWdUdFRQaWJNLytWWDRPdGp3KysvMHZoMDFqYnZobEpiSms3anhuUGNIMXhVcFRZVGF1MjJXWmxXVFJXb1h4U2ZBOUxhSW1KUUVzbzVrYnFpV3hLUXZtOXlDYUpYeG9GSEVJL0lOMHM1czFFSjNLTm5LbWdsSis3eE1Ra2xrUUpvcDNlMDl3V09FMzVBdWpuSGl1ZWFKMkFvKzV4bmk1cjA2c3AxaU1TSHlQYncwYmt1L2IvdGtYQjhWcVd6Q2xLZEZnSGMyZ0pXc2NlSkRZL2ZTYllNR1N5N2NvdnZ3SmdWM3c2S3g2Ym1hUHNwb3dUSlV6bHlhWFVWNUFEbisxdEJVMi9yTC9WaFJrTStGdm80Z0huSFc0SlJPeWVQTnFpWGVqYlRieUxnRnZZQlMvWE5rVkJHUjg0bGVxTEhFV05ZbTV5SWFheUVZeTRVVXdnN2FtbVdUOTVmUVY1RnhlQlIybzRnbWVIR0w0R1V4OVR6Q2FZL01FUTFHaDRlNG1TUytUclByU2s5QlhyWnprdlFvR05UeWtzRU56L2VOMU9PYjAxR2JtYTVya2ZFNThIVTQ3bUFYejRXWG9mSkVVb0NwbndWWGs2a1RpN1ZETHF0eUxEd3NIT0NESUdCTVFwcWtSR1JHZzFIcFV1eWRkUXpybkhra3pYczg4OGRxNU5QWk44N1c5ZU9oSFVqNkxab1hxRmM5MVJ6bGRPSm5qeC9qU3hRTkZuaDZRQ3BOOGRDVk5aZlNHWjR2NzZGT29iU0pWZThnYjV6WVRUTkc0M3NVZ0xyVnJYL3N0Z2txMi9oQmVWMC9Ya0cwaERxTUFJMlRpc2xGcU9zTlJQOWppVlhiTEh6NkpkeXFHWEtnRlpReFBpZGJ6bFF2MFl6aWlFaFJVRmh6SUx6WUEwcW1DZHA2TUFnVVFzRlN5elNta2xxQzlVL2ExaHRZKzE3Umg5Q0dKTFpTcUFYSnloeHFzaHNDRlhjMkRXcUdJR01zdU5MSVpjVFpqa1dJbnJGK3o3WlN2OXdLODhsSWpSbEZNZ3F6Z1U4TjVhTitvMk5XbFl3VVFSNGp1RzZTOG5mUERIUElkQlNFYit1cS90WUd1ZEo1dUtDZ1pFbmJ1bXVlNnpBNml6SjhKQ1o2dlMzdWlsWTRKNTJoQ0ZuV1FhUUxJbEFud29lL1BEaUJ1NURWamF3QnVsZEFkV0ZTTWpPd2ZEeHJWVUFkM0VlRk9OeGZvNm5JamxPUXJLUWhuODFTRXlRQzByaW1LV1RkYnR0TEFTR3ZIT29ScmZ2enhycmVYWVZVTlNKTXBlQnl1NTVvVzBaWDJyQjMvOVU4V1g3L3luemdpLzM0Z1FoeURMM1VpRmh4SGE3NDNITHVOMEpLTHZmRGFGUHRMaGFyYzdTa0xzNmpuQzlramt4ZFF1bkQ3Y3l1NHYzQmNPNTVGQzRGYkR6YzNjTmhuM3pGQWd5bUxqVzR2TUI3OWM5TkhjRnBVa2hRZEVLTzdXOGExb3JJbGhLeW0vV3FDRmRHUUdUeHJYT3hnV1l2cE5LTjhFWTdHUmUvUTd0QVBmNktsbzdXQTgrT2lhR3ZOaXd5RW9oaFc1L0szaDlEdk1nSC9VMEFWbzFHajlzQ2Q4SE1BVkF6N0lCZzQ4YVhxc3B5TTNDS1ZsV2RWcy92RDF3bDhIMWZRTzJQV0htakZwcFZNeVQrNytpRUhTWU1qYU9FNk4vYTZBdjRQbDhSdFVLdW9NTVJmU1NORVlDOHc2bTZjWVkrUHdZR252UXdURk82V0o3TEtvaWhvSzRuZmxlR1dZQ0lEc1k3MG9PSXdUMzJzamI0UFNraDN1TUFRNVZON21sMm1zcTU4Y2RCRUNtRFdtZHVKRnJ4N3hxRTBuM2hQY2NFZC9TRU00YkNvclNmaWNteW1pNGZkbXhyNHlQajRtK2ZEeUxFME9obWxHMDBOckFQUldVUW5yanh3Mmt2cjVMMllsSkR5amticmdGT3RMci9DVWVzUlZpbXo2T2hWY1hvTmViSG5XZzNzSUo0TEZzZkY1cm9xK2hDRjVGVGx0d2dpZTRNa2RYbmI4cjlMbXlsWlE5Ri9BNmxGYjEzN3lpRHJYM0VBYTN6dDBxb3hJdGV4VUEwM0NLbWtYcjh3VlV3dUpCd05XTWs4SDVnVkVZTnJaWS9ncGU5NXhvTlJUcGNhZG1URUkrZ1FLQWtranQzNXo5Njd3aWpETi9UQXJkUzJGa3lRdnR2QXFraXJMbFVFM0hWdFc0SitzcGgxV2o4OHhTSHJka1VFaDR3Y1N4ekVtY1FwVE9WZHd5NWlmRVREZkREUlppbXlqTUg2MHUrRTJMUUQ3Z25IZ2RDMS9xcE5HU0ZtYnZXT2NpMFF3Nmp2NW1vY0hnMFl1MGh0RG05a2UyT29hRkt3WlJxbFc4STltQktTdEtFeHh1VXd1V3NBQ3hNdmpISGRJdzUxQWtvbUFFSXhYUnBZUHBrb3JpR3hncFNlUXFUTms3QmI2M3ZwOEl3WjZ6bG1BS2Z2Q3N4dURuckZqamhBN3YxKzFUSGhHZFBsRGZkdXg3eGRZR25xdkwrL2Z3VThaU3EwUjVsQXAxNnJ3bFkrMEJUTVFNRDRoMnJCamxiTDBFSUtoYWVKZUFwWHRKZUsvQXZTNzgvZzc4N212RDI3Ymg3LzVnL08zaDZZZDdoZTFXVVd1Vk1pK29KWmt5YjdXZzFVWXlKVXZRYlVqNURsUS9neHMzUU4wMkN4bmxydGRVYzlYbVVsaCt3Wno3enJmV3lRMWZLb0NUOU1qeS9zTGJEc1lYUDl6RDRGRnA0YWZzWVVidEVZS2JycnpoV3czVWtPZVMrUkRTQ0c2bnUvZStVSFN2elhOOUxsZlNncDR4enp4QWZBRjJISjNlcnBZNHc5OWZKdnIzWWlEWDkwZkJXQ2RPUStkdWVNZkNSM2VQSitFZHc4S3Bac05ISi9ESS8rWVlGRUUxUkpqRmFCNzZCK0I5SWxTcTFMSFFEYlBEZkY5dVdWNmE5clJRN0gzQmFyNzNmVmM1SUEwMmVUcmlFSmVMWnpJMUUveUhVT0FzVTgySUEyU09XNEhpOXJwNnVRczJaMXVoWXVNS29pYSs4VjZKTFNuQ0NLa0h3RkFUckFkNEREY3dUV0ZNM0Nvdjg4dWRKRmVwd2FKVEQrczcwQ3dFbk5YV3VnMUcvaGlIREIwUitpclRxRzhUZVJBN2NKUTc3bVBoOXJVYkdQbmphVUJFVTlqYmpXN2tMVThETVBwNnJDQnU0blpuTkVvbGJOUmtHNTBpcGdVakhiY3JJckV3OE1lZm4weTE3aFBucWJTRHI4MU40TUN5RElNMTNRQVpWc2R2WXlpVUhuT2U1UWJXWmpaMEszOGJGc29mWUc3ZVpmTnJaU2w0TGxKUllqTXlvT3FKS3cxZ0xNL294QmVBMTNDaUU0VlgxV3ZFK2xBNWlHd2s4Slc4THdRQURwaVZGaHV0UUhvcXlaMk5CYmYweFdBRTFLSVJpcmIyR0lkZ2d0SFdFME1sS0JOeGxEUUZzN1lGeVB4Nm1qZ1YxbXRWSG9JQURKTWxHbXh5TXFUc25kOVhaQ1JyY01QTnliNWxicUdxYzdIQzhxeS9IaWlZWWtWUzRFT3NTVFZvYVdZTiszWk5uR01RU2M3Wk04SGs1VlU1dmZCeEpHeXBtcVc1UDAvVU96MmNXODA0SnhGdU0rMUFabU9VUE5qc1poc0p3NDBsUk9lN1BCTmVSeWVKenVLOTRaaUdxSjVMV2pPRDFKNnVaNHQzK0hwelFVY3UrSlF3WDd2TlJxMUNpUXFXbVFqcWttQUNnU0dxUlI2cVIydkkyS3FVREJIbW5EK283TERlc0cwYjFzeG01SnhEZUlybzJZeDNvZkNqRklqdlRVZG1yM2xodmlodTBKQkVBR25LVTFNLy83VXBuN3dTbWpqaHZUVnJxankvQTRvYUt1NjE0MjI3NDhzTitNTVB3TmNHL1BoRHhROWZHbTZHc01ibFNNYXYzUXk1Zm45UEtPTDgzbG9SRTVwQ1ljYUJjQVB3a0ZkcmpEV2gwem1qUUM2b2p3YWNKOVpKaFJpMGNIcW93aSswd250ZUM2c3VQdzMzUTYzNm5oUjRMK2pyTkdGWElDclpyU3Jzem4vVG1BNDZaRCtrZG9QeFlqQjZkYTR0d0RtRzZEMFJ1ZGZDOUpuU1lGMXNqU3FqazA0S2dUY1dId0d3NlVrNmZKNWxPRSt2NElpbUtUUDdGVWE1M094WW93R2dRbUlaVzNUMXlpVUZhUXdhNWpwaEM3RlFoalZqOVdNNkxZbmsvdjFjK05Wa2lHUmlJZG5XdlNqK0swclpNYmlXdW1xVzk2Z1o5aWlJSmllNDJCZjh2WWxhQ3BuZzBDMDl0ZDJJWFJuREYxM0M4eWt2SDhFQmtoSWRDd3hnbElJQ1JWQUxyRWRBVnNueGJNc2NqSE4xalVrMmo3Mm1BVlRQOFdac201Y1FGNjduQk5TdG1oSHlkaXRvOTRiMzk0bzBlSE9GZFBYSVJiM2tKY3NkV0ZrQ3p5T2t2WTJ2eWJzdkdlb0h3RFJxL1h2TzZYa0EyODBOY29YNzg2VHVLZ0F6ZTltYUxMVUcxRWJlaC8yY1NFb2pqaFdCN21PZStNdlBFODlYeDFPTmdFNTVFc0hEc3RCa01JbFVTcm56V1BxcE9RYUJhZGc2RjB0aEM2T2ZmU210Z01Mb3lTUXdrcDNYYUVDTU9hbjBKK3Y0dlYzcnVyWlVpWFFZaDFrcG5xeWw3R29nUENSdmQxeGhKL1hLVGo3S0hJaEsvYXcrNW4xaFZJYm1DcWhNd3d0VWk4SzBDQnFBdkFhbDBienoxdXBSc3huaEl3ZGVlZy8wZEhrOTIwMFBDaHZsdEw4azZYUFZNd2YyTHdObEtuMFg5Zk1ZUTVPenJNd3RtN2VVWFl4Z1pZYVVLVndVanBzZFhnM25sL3F6d0l0M0lUTDB2K2hFNTl6dCtiRHc3dFMvVXgxbXpLU2J5QklhTUtkUkQ5THlsL1I4SGljK2R3REZDU0U5QXFMRnR4aE5pSWFKd2JoVjFkWk91MTFqbC81S2w2ZExBUTZlbnk4b0hvM2cwQmRxc203OGZBR3ExRjlhUTkzc2VINm1DTHlWTFlLWG9JU0hYRkpWVGJUM0dHZU8vUmdMUWRLVEJRUUNqZ3prTXpzS0E3eDFSWVpvaERCTTZvS3lNTCtaeVVpSmdZaGV1RzJjVFpoMSt3eE9KbFZxQWYvUThhOS9BcjYrVGZ4NGE5WWljZnNoNFE5R1JoS2JpNk8rREdCM3Q5SzN4UHplalFDM3JSbDNQQ01zdGFEV0d3dXVrcGNMaWVkdE1uR2Y2UWhxWkgwVFVNaXJUaW5JaFVJQU9WQ0dRaDJlTzlQS3FCZkp3RmFvblhTblBIZUtPYzRSeGNFU085N3lSZEN3U2xVT1Q0US9vTUpjSFpFNkkxOGl5and2Z2NTUVVORUFTZGlPVU01ZVNLbDVScDhLWjNaR2xFRE9pV0tVeVNlRytCcjY3RnJJV2FtWWdUV1lsam03SW9JTEd2dUk0bEJTYTBYMEpVK0tTL2VXYUhSNGVtVHA5YkZIWGp5ak1xcGhkSzRRN1N3aUNENEdQdmNUYzE2RmRJb0tJaCtBTUlnUTFOcVZaRTNhVDRHdE9ReUhjbUNNYkN5REM5M0IwT3I1d0Y0V2YvV29HZDdBR0lQN2lCRko1eGt2YUkyUmcwMTdGMWdFdW9uaSt2R29saEs3dmJNZndPWkdBT2pKdTFDYmMwY2MxOGhRTmNYVVZIanAzQkxGMXdLcXR2Sjk2MG9ic0xRUWlrcmRHNmpZU1hwaysrMjJWUm9nT3VlNVBBcmM4WmMvdmZEdFdNYjArVHdTemozajdNQTVHQUhkdG9UOW1FaVk5cnhXeDZ1RWJwck8vQkk1Y2ZneHpnTTliK2l2N21SSHd0WU92SVlab296U1RsMlgrVWVCakErQy8xZ2ZOS1p6ME9HbTBERktvUWtMa2R5UVZQaFdIcm8ybUM0NGtJeHViV05DSVF3OVBkMUFKcGZkZG1NZUltR29XVVgwQlM1MXVydU5hdnVITjBKcjIyOXFPbEFzbUcvVjZZbWpBMHlSbHJRNzBGL0E5dFl3Wm5hRXI3NCt4YU1nMkgrRVliRTZMZTV6cnVpSEN6ZXdzOURtTnkxRzladk92QzlvUHFkcTNBOWoraEVIYzl1d0pROWR3eTFqSG4yZ3IwMjlDQjIvMU5YdHFOcDRjQ2xWc1FRdERmVVFYN3FrQ2RSZUw5RzY5VzhwMCtXVFp1K2xtb0kwWVF6UGo0TU8ySFhSUEwrL1VDdHpaWUV2eXpwZE5RWE1nOTRXemhHRU1KTTEyU0kyVWEyMGlJV21STkNJc0xyYWdpSE5FblhGb3NaMHI3ZWxKcndFUVZWck1ITFRMVGM4ekJzZS9iU3VjaHBzODVLU3pyMlZhcUg2Mld1VUoyblRyVDdJV1NBOGdtZ2hVQk1NT2Z2K0FQN3d1T0hMQS9qOVc4UGYvRTB4OHBoU20rVU5KOWFsMzJSckNWbWV3bll6SVUrdklXZFVDWnFTUGNSZU9MK1RTSFRmdlUxMHV0ZmlNcUFhWW0rQlZzUjBTd1FwK01YSm9CVktFM1NUNkpWbjNkOUFqakJkWm1lelVHclJyQVJoa2Vyeldrc0dkS29FTGhJRUkyOVNCZFBhdndIWEpWbzNxS2pKaEpkcVliaWRPUzRFL2MwS25JMVJyeWFrcnZ2U0doeFErZUZRbi9FRkF6Rzk5b0YrVGpiaE9FODgxN0pXbWM5ZDRVNE1wOXhrRkVYWGRhdWIxY0F2bFFxZWJhTFovWGUwdk9TM2U5aVZhQ0owdm5hdWpySVdvMmR0NFZhcktaYStNdWVtMDRrNDUya2d1am5aQktpVWl1RFljdU9hZE1pRUkxRVluWjJlK1cvc2pwRnhIcWU5TDh5T0hKS2xybllJdnY0KzhRTExFMXNHbnVmRXJjbWFIZXd0RWNzR3lrYzM1QXp0SlZZRVNIeXBWSlRkelZUNVkyT3p0WWt2dDRRVytXYWt0R2tkRUhOelBEc3daWUFuTW5VQ3pjbzY2WVR3NDVjTVVQSG5WWS9BbzdMc3VReTdRV3RBbGVNZVBNTElaVGdTaXJUd3Yva1BUeHViNTlueCtiSFFsYy93K3ZsU1NEVHplUGcrbUlwb3dRL3BLdkdUOUdoRk81clptemh6UWhrVEV4N0JCbE1KSWlJNno0dzVhRFMrWHFJVVQ5ZTBTVGF3b2V0TVJDMThlT2RtM0JXbExCSThSWnRjSGhOckpTKzVZcXhvc0tJditCR2hFblhvS2ZGNlJhTFgyNU5ka0lmSU0wZlVlWng5Y2VEc1FrV1BRSnV2RllYdGxBbjhDOVlERmZHdlNmRjBlS2g3RUpWOFdtaWE0SmVyeFlzaFQ3YU9DWmE5azFhU0EyRktuSjcvUVdib3ZQR2NISzhWeGtkWGVjbVFSUmw1U2xSNUhKN2poUmlVQUQwdWg5RlQzdDRWR3R3SzhPekEwZzEybGFlQUtIanhwbE5oTW9LV0pRYmtwU0U4MzBmVExzZ04vVGhwdExEZ0g4ZVVjSTlMRHE3QlJPSnJYblREV2lmTDhiWkNRYzc1WVp0S20rZUJ1Y1JJdHZqYVRObkdaL2tFSkxJcHBaTC9VNVJkWFB3WU9JYnFybzBMK1NBN2xOZjFJc2s2bnF5V1VGcmhOUmR5NzdodE4zeWtIVGNES1ZaODdnTnJPYTh5NlVGclllNThaU1dUS3ZNblcyR3RjbnNBZjNQTCtOcHUrTjJYaEswQi8vcnZDOTVhd1hiZjhIWnplbFFwM2tUUHFMYUU3VjZqMjVJaFhVV0wyd3J5WTBQTFZVcEZXbGJydHpBK2laaUtKZk5NRnJrV0M2M1ZPeEhjcWRzMVJONCtJbHBLb0hydE42YUQ0WUJnZDFPSEQzdjVBcnpKeURWN3FWdHdmeS9FYm9Ld05jVThZYUtHdSt6dzJZMWd4YzN4UzhkbCtOZ3BENTluR08yZ1BKbm9PRzJCcWR2Z1FVSU9MdUJnbktUQ0E5dWU3aFA3MFhHZUdnQjU4S2M4NUlWb2RuU3VSZHlISTR3eGNLTjFRRTlVSWYyR0pNTjJvTG50UWxuRjYrMEhNSFgrMGJFbEl2RUpmQVdtOXorUDdoTk1KN2tEUnNWRnVXVjcvZVQxVEdydXlEcHhkRzViOHoxTzNNYVd6S2lkaFhQQkduaE5aSWhLQTNtMXdjK2RBbUI5bElTdlcwYUdNM1Y2WUpYaDZsWm9tTnh1bXoyV3h3MXNDaTRGRjJzR2o5dk4ydi9lSGlyVHphVHZGZUdzaGVZZDV2OTJheEIxQ2hrV2dlamdOeEVHTEszUXdLVkl6aW5JcEhwOUwvbXJ5T1BFWElNQXYxR3dyTDk3ZGRDdUFhZi8zYjk5WW5VTGJWT1pEM2Y2R09yM3hscG9TNkY1ejAwdlJTK29pSG9vWGcwMTd4a3VRZ2Nzekwra09KYk8zZWUwNm9vK1NJQjBIcnlHOCtCNEVCYzNjV1VVdExldWJZQWM3WThrTmtmdE8wd0I4UGoreEVSdHBNR3RRVGlRdEVoWVBpRE1QMW42UmxJSSsrU1BEeWxiYmZnanMxWTBPMFlxektlL1Nva1hsS1N5OUtsRUF4MHJkRjBSSmFBUzVYeGRCbjBCSXUrWFJGeGpHN05FR016UXBzeWQ4K1BGTzhKaHFtNjVTM1N0SnowNENyZUpZNWtTNDRCTjhEMWpYbG9HNnZ2NEFNcDdSL1Y4ZDJyeVhvYmZMMzczQm56MERJQU5KcjQrbWdxVE03YTU4SEtxeUgxaHpCTXJONHpSMVh0OFlpQ3hhWW51V1V2OHl2NldnYVMvOG1qSXp4T0hWdzFNUHM2bEhMdVh6cUpnb1BBM1Q2Mmt4V0RxSjJBdFAxWDNaY1FXNjdDUmxSZnV6VDR5ODlRbHJzdU5zK0F0WHA3anhqbllhejVjUkxVNHhXWmxPamR5OGpPUzBrVkUwNWNKd0g0T2IvQ0MwZ3BtSW1QY21xUVJQTEg3dUpnd3RKWGtiRlcyMlFiRFVZVm81UHBJZU5TQ0gyckI3KzRaUDk2QnIxK0J2LzBCdU4vWXZ2U3hBVnRWc2gyTmRlSjMxaVd6NXBNMU9RV3cydkxjdUZjZW1sK0l4TWpac1ZZUDM1Vzl3bTRDTU1yQUVhcWx1aHNkOUhrdXJpOEU5SE1lcGx6blNIUjNwa0xrY3c4d1VrWWNVL3dCSTRDamVTdlJiRWt5d0tjbmwrYnNiNlNNVUc1MmtyOWRLdkkwai9sMkU3ZTFBZi9pTnNNNWtGSmZrVGtXOXQ2Rko4Y3FuZnl1eCtlU0RCRU04b2F2am0rZk80WnEzYzFwUFNmMlQ0WTBJeXhhZ1RJeG51SlNkRTlybnI2UkxsUkhwVlFMSDcrWGpuYTdHY0s5ZzV3TU1TNU80d3kxQkUwUzhnbXRESHpIcER3NXUvTDdrYzVUVzFqS2x0blJwZXhYdEVkeW1JSjQ4Zm1keGJ3Zjl0Y0wrMEg1ZE5FdUY4b0t0bGcrTTdrWVNncXlyMThuQ2JaeVppK0JtMjVwTGVFNUhCUVpSM0NMMkNQMzFiWmx2TDBsdGhTdUJoSU9SeVFydlNNeXBKVk81ZUdoSEwyWTM2SlltL3dJd2xBVjZPajlnczYvaHJubG1QV0JzUVJ1L1Y1UkdxWDRjd3o4NVk4bkk1b0wrUHlVUStUS1ZtbU52QmFXV2VQQzVXaXZPWVZzOTdvSThWMHNKQUp5dFFEMG50TFFpYXlOdVdIMlJHcnJzMkFOZXZYam9Ed2N3dzBGUkt2VWtPdUNDMFFQKzBLamcxZ0JwaVAwdTI2MHErR3JPQXFPSTNtVWcwZU1ZVlNubERyVnRBTTQrdFZ6NTFVQ1MyMzh6cDNzUE5Wa3g2QnlrK1dOdEduQVRub0ZiQllSWlNseGVINHYrR3FYS1ZreU44bUxlYjlWRkFpRWtXRWIwSjRnY2twTGZXV1IvRktIcGttbEJTc0ZON0toT3RsbEM0VW94TFlLem1iNUVKYTJwT21GQlByTkR2dkFiZkgxVEdTazQ4SnpJYkwzaDkreGRuUExEYVhHT0MrbUlrVmhPZGdUZHpDQ2tMenh3WXhTc1ZXQTdGNnpPMzNwOUg3UDJEUWUzMjVNaXh3em9WUUJ6d1FXZERuUTBZbjJzL3R1RWhDREZlZG53cStmTUV2Y1dmNnU3cmE4TmpHSmpaSFZVYTFoZVdtZ0dtaG8vY3Y3V3k2UVhJRUlXVndsK2lUY0loQ3NteXhJWmRFYk9CSDloNWxBTXVkMGVDRWdHSVU1OXgzZERUNjFrR3JLbGVjRVE3Ry9id3QvdUEzODdnc1YrZzlmWVorNXRXRWxrTG5LVWE0THVRVXB5N2JVZmUxV0dNYTlzYThpYTJaVGNCZExMN2xoNG1rWkcrNTh0NU1uejQrcEFRVG1Dd3NORkNsT2tBUDFlOStNaVM2WElieEJRVVlqK1lldEhZSDg1Z09uaGFvdDhoRUdadFk2U3JJQ0JjeHlhekM0M1dIbm5xV1NwYkRXeU9YMkpVUSswSTl1MTc0OVpKK040QWRJZ1RuQkJWS2ZJb1RsVVlyay80YUE1VWZVV284clNCL2Z2bjJpSCtOeTJ1Zk0yRk9Xa2RHaVJITVVoRXpSV29yOEdiMUhzMXZac3ZmTFBlR1dic1NRdElSNkFoMGEvMlpiRFdWSmFPWVN3bmwxUFBlSmRRNERQUzFSRExlTlpETzFWcTNYd0xKYzkxUFFTa1BjSGMvWGpxdGVwV0JucWcrb29jVzlFQmNRZndpcmd0MjdqdGFwcnlIWTcwbzRFbkRUdHA2ZFVabytPMW9HMnZrVUtLeGlRMEgzU3VRNU1Qc0R3NHl2aWJGazhHTHBSRFNZSzVoNldyTnkzeVR0Slp6Mk8zZE0zQWNCWmFNbW8xSjZXVHJBRTJVT3NzcE9nb09CWkJpQ1F4VXNnejNIU1VIZVBtSDRXK1dZOSs1c3o4a0lqSlpTRVE1TXJOeFp3ZFB2blFMdjhsZk53VHJSSllNeEVQTWpRWnpTQ3QyVkZuVmpVR3BoUHp2NlNlYlJjd2lqTnFhWHJBa1hNNVhhbHI3MXZ4WFBheGFJa3kvd1dONDhiR0xIUXVaY1IyK0RvbHlveXEyaXkweFRmcU5FM2JGQVk0R0R5NU1iYVdSYnZQdks2RnZDTmxuRHVETEFnTnlPUlMrWGp6UjFaUFVMakxjRUN2RThodFBGZWg5WUlWYWRycVpvZTN5QmJqcURyRXBEdVYzUDRkbzFjL2lRNHJjakprRDA1Y29kRTlVOUNWc1FveisxdUNicUdwNURSRkkzTWUrem5id3M1L1l3SnAvUDF4TXBSZi93bWpNWGYyNGVBdlV5QnZRUm5iRENvRWtpa2ZGQUs0MEdSUXZVWEgrWk1rNFFUYW5vS2g4THFIa2plY29BWG9zTWQ4V3M1eWxpaGlKdks3eHI5MkpUb1dKYmpuOVlnMVN1bzh1Y2lUNjhtUktSM2h4WVl6MUh4VGgzeHo3SWFCbzRaWTFYVnlMYVVOMUlIUTYwVE1yWXE3QlhHRnIxOGF1eVcxNjdLQW9LdGlYRjNvaVZVRTMxRkxrUVM4bHVid3RmUzhiN3R1R25MZU1QUHdGZmE4SVBYNVo5Yjl0Z29jZXRzb29pYnhSMk9ZSFhSbUM1U0VNYU9meGJOcnJmc21VTHd3WXRCSUoyc3lYaUVySmFYM285TXBzVWhJZUFEWkZ4S21KL2kyalp4QzcydTZoNHpGcExvN01VQ1VwYnVNR3dFSlNiem0yN01yM0ZtWXRleXM3NWJtTUZnUmQ3S2JoeG4zSC9WM2JtbW9WdFpjZm9yTWxkSFQwcU1EaTlLL0x4YTE2QWNyL3RlQmR0cHJRblJNdDVkSFFCM1Q2L0h5eTN5c0I1aGpMY094VFZvakhleVZDaDlybmszbGFVeUpRVTBNVzZWYkVWMWl6L3dGNFBwUG5WeFhVWmduUEZMaEcwU0VaaWlTZ0VvWHNxdDBraWFvb0lCQlZUS05oTXk5eUpkWmdzbU5sZGFtRVd3clN0cWJEZWZFWDBORHowWkhNMjAwVHlra3lBNlRHZjlobU1jVkJiejMyUVBHeVZoZEk3UGp0UXRxSVN0a1ZuWUIvTXdTZmd0UmZrZEZwNE8yMFpSZWZqU0VTVlJZTjZNblJmb3dOM3ZaWXc4RWlVTDFpU1k4dHBPTlNXdGs5ZEpIRDBRY3pBVExidSsrN1ZTc1NmZko2TWJvYndkTFNFRzE2RWUyd3RZK24xZldUVU5hbVVOK25yekFoRzl3S003WWJqNkRoZUorWGNVRzhNZ2lhcGd6d2xPNVNTeXVIdXNIaUNmNlJYRVlIYWltbEwxMGlMNUp4ekFNallTSm4wNVpXTXBKN1VmMDFnTjVaQnJyM3NnR0Zwc0FBbWUrMW9veEpGQm1TTHNtNlJKUzNjZjI2bDJHbUc4dU1UL1ptd3hCYzQ2aFM3Z3hUNVdKZ0tOM2tZc0ZQQlM3bFBQTStLdDhMZmpUb2NYNWhYc3Z5U2dwbzJqd2lUTENCcWsrMDlXejNLYmJrU2poQ0lDYkRaMmRWckRxK0p0dWRTZDBwRlFPQ1pqTFpsaFpBUzdoc1ZkMzk5NHVYTnFSZEVHbExwbmQrcXVKdEYySU5KQ3o0UDc1T3NuSjIrZmpYa1l6Uk1TQzVuSnNKTjd5amhJQ2ZwQkVwREZoKytONDA1a3hZVnZ4dWVWd2tlODVSNWdidVZkemhlSVJuSWJpTEhhdXl1OEZsT2VMdmR6RE8rTlNzaXhkUEt5QWh5VTZsRGVPZGlQcnExdXhsSTI1dnEzMEdDalYxem1UMDFHUnh3Tk9UU05VOExwUkVhRnJCL1I4Nm54SXp3WlpsYzZiZVNyRi84anpuaEg5NkJMVTFMZzdRRUN4dS8zeEo1d3hPUXQ2UzJ1MFE5WjhVZXZkN1ZubENsWTIwdy9vSTRQSlVrYnV4VXFXd0YrSVJ6T2lNT3FRZ2RFWjR1aEpzaUdRM256ZGtTYUhSRE9rQTFwanFpWHBXbnVlVFU2ZndVckZ3OWlLekhSUEJqU1Z6L3FFeGxHekZPVjRxRnRkT2pkdzZxOHNBZUJjdHBhRVNhOU4wQVJrVnFIYWQ1Z0RKOVZ5ZEFhQTdiUThTNFhOZjZVSG5wY2U3S1VVNEFEN1QyeEVCQjJnZFNrM0tvTkU2ZDNHaWZFYjNsaGxLNGVwNUFrdkxKSGVuVzhNT050MUtLRkJIWWduTDJUQ1I1ajgwNERNdFRtY05lRkNSckZKSVN6UkZjbkhNS3BSeG9WSy8vejZMNVd2TndySUNYa2RHRHU2d0xnVnZUd0xrZkxtOVJnZ2hDS1VMRUVTV2VYSk9TNzU0c2l3WERJTjNKMThnTWVpNjhQZ2FOLzd4N3Z0aTQxYmM2clJwbTMrLzR6Lys3WDlDeGJQK01mYUU4K01FdjFwK0FYQXkzSnQ2UjNwZ2lwZjVFeGJqd3NaeVQzZE5leXNPZmF0N1NMZUt4OFBFY2lJTTRDcFlFRjV5cUtmWTBzWVpZWUR2MlZrQkZlTm1aWFJFWHVMOHZYMENHMTZCMU44WlU0bGxYeHRWL1VOU1RDemRhWWFOZUYvQlNqMzdNYXdjOFR5UmtmWFJLMTNJTXdpQkpZTzhDeFBlVzF2ZnNVNis2Q2t1OGdrN2JKZjZxaVVJQzBTWVZsUjhIWm53UUtoTlgvdnVBTEJhRlk1NTlJbWU2UGJVMWZZMTVpNkdTcW5Qd09iZnJJaC8zWEdIRkZ1VnJWWE9MekJydUpqYWlMNXFQT2hIZ0RjOUpUVnAzYzB3cW5VRTBkc0ppTnpOa2UwMklTNjh2VloxS3gxa1Q2dUJxS0RXNWQ0cFdFbHJqbDdaTUFvVEhyYXF3T2VPMHZNWUJ2TGlDN28rc05pUUExWmFCeHBnelhnWDdhK0JRR1FKVXN6Z2xoR1RwcUJIQ3dxZzBDVEptaUQ2QnNlSUFqYVo1RUxDeEpNeDBPQTFjSElYNXdFbDZTczl0UXZNZ3Y1ZWJ4T1pGTmFQM0NJbWxWTFR4Ny9FenJUS0licVExQTlzY0dPZUl0RTRpQXZ6dDY0MWxRdkxJNndHait6MzdFbkNFNjZTcGxBaTFLVVNsTnB4WlhPd1N1bkdyY1ZRc3ZLV0Y5N2tNWlBRN2EyOWE4UHUzUWsrOFFIN2RNZ1EvT1YvcDhhYktSUjVWRVlBSTRuRjdTRVNLYmpjeTV0eXB5azl6M1pLblhPU0F4VXVPRkVWUW5MclNwRmZ6RFg0bkJMRFNHQXk5dE5MQVl5Q05hZXQzT3Q1Q20xdEJBaWtNQ1Q2d2hTdmRTTDkraFRnenNRRXRKVXlsMmxCQlUwdWtIajJwRnJxd1VHcnN1OU1kSTAzdVc2WGs2SmtVY2hZVTd4cUhRUkRmY25taDM4YkVTbE1wbUdicnYrZHArSVNSUGxFTFdCYVliamhWUnZqTHMrT2w4T01aRFcvTnU1N3NpWHdsRitJVDQwdDR2RlhqNks5d1paNnhsVWxqdVZTZ0RReVNYcUJZbVJ6WFdpbzVPTnNCKzYwK2dTN0d3VVVPZXlyMXhMR2JMc3A4aGFndkFRWmxwRmVoOUduOERLeWhsMUk0amdOeGVMWWtsRGo4TWJBMWdWWnlmU1ZscDdMZjZNcVpLU3Q2OERHNG84T3d0R3J5allINVRsTnlmbi9oLy9yL0JQNytEd2x2YnhYajFYSFdML2pwRHFTTmJZTzN4ajJWbmRGd1RyUmhqd3lGQjdjMk5QTkVuNStMSllrZFZPWXZOcWloOFp0MVpZNGlCK1NuZUJPaEFCYmFmVG5ZV3VNbCtSTGpHQXlFMCs4ZWt5d2FhZUdXR203M2ltODlBUWVCMFJoZTlhUzlwcHZ3Q3ArcmtPMG1kMTJaQjRVM25ZWTF2V1BhUUhIYklqUFNQYy9BeHNiNVJWaTJFTzJjWFNiVlRNNkFra0NiTkFXUUxSYS9iMHgvSXJDRFR1Slp0eTVqNUdZTGN1R1U5YklXK3dmbVkwaFlCQmhLYmJ2OTBGWU1BTlgrV1ZEZUJ6WVV0UlFjZ0NOUUIrLzBQUmk3ZEowcjBKUGN4ZHdzbFV4M3lpR1RiV3N4WjltTGgyYW9nSEtUWlo0YnFqZC94dzF2Ny9xVk1teHlxeForM2lZZU41VURWWkNIdVFNZEc5NGVNWFFFWGt6V09neUpWMjd5SU1EVWhQR1E4ZEdIQko5NEFBak5qLzJyRUY1OFIyMDJUVHBFQ2FMWE10dWFQR2Y0dHBrSS9kbXpySEcrTjRRRmdDL3pxZncrbnBqZWhXMjl1eVdMVm05eEhYcHMyODJNdTljYTlQS0U5c1dZOXRmWGJqdnpsNy9zZUgrN3FaWlV0ZG1BczJteGYzUU41UEhOTHBUQ3FiV0NXeUR5TWZmRFF0dHZVN2h4NFI3dVNMaUJ4c0tYQm1OMGUyL2tobjRVcHIwZlgxaGIzSElod0MxWDVKdmFmSHJrb2hZcS9rZERSbUc5ZEJZb005RkFrNEttWGlib2orQzFDYnZlY1NnYWdrR2F5cmxzWGRWdHlWTmFTRjdkdG9MOEppZTFSTDF6NDNNNCtGa0pLN2Y4RUlld01MTHhneGpKVXlINnVQeUx4SnRFbndNamRkb1NPeU1TVWNZWVpaSTFUNnhXZ3R3Q002cHlYTzRrenNQeTVrZERhTGFBeDRsS3Q5RHJtQlB6ZUhIclRXRDFUL1Erc1Q4WDFrN3E2RWFKYlp6Y3MxUDV6WjR4czhLaEFyUGxpKzJxREh0aUs5dDdsWGVycEdVclUyeVhZcDdNc1o2WHBVdE85cHl1VldIM3FIK0laVThEY01HSDJEb3ZrandLRzUyR2xDZzdRSUhPZytQV1VuQnFOSUl1TFhmY05sR1FIaWZpY0dWUjlQTWE2OGhsaEF4UFRrd0NwbXgwejhQcm9hZFR4VnIrbjQvZzBWTkdHUXZQbDVUOWZXQTlQL0VmL3JIWS9ubC9BOUlCakI4cXZueTlTUjZUUzcwMjVmWWRlRHVTY1c5MG9XYXovSVo5eUVCUlB2YzhFejdPaE5GcEFQVHBJOFRXMTF5blVjaDVIWk1sSFJPRUxUeXlJb09NakJibnM0T3Vnd2djeDd1N0ZzSFhBdnhLN2lRMjBsSFo5ZXdxZjh2YWY4UGRVb0kzR1ljWHZpVkh0Q1k3U1V4SkpKMUNaYWpjYzkzRjJjbzkyaHpwNGJtRzF2cXAxMWhqV2VseW1hTmJvL0dDbEZRS1M2Y29qNjErdW5vdnFiV2lmdjlrMk9iVVQ2c1FXaWMwVzg4bXNPWGJKZnlSQ25ncnd6ZUFMV1o3ZmJ0RG9XZmw3QlJzcWttQXMrRU5GbklJRTM2T2NIN2lrQ1ZST29ka3FqU2xSTTVqb3pjbEZMcTJTRHZCOGFMbFN1S0V6T2xubWxOV0U3MjgwbHIwaTA1RU9WYm1odGxTTXZnaDFKV0tOS29TeENUUVdOTmJnWWFBUzdUZXB0ZFBndFpyVVNoZjFrSkVHT3BtMTlUMXBpL0psaGJPa0s4TStUR1VKUEJPb2pkSmFsczJZMEFjU3lBM2JvOXAzdE0wWU9FQjJQd1JnVjFLMWJnMHVQSDZHcWNua1hCZ2tpakUvZzBpMjI5M1cwZXQxT0E4S0ZxbzZOaFhCWitlUEdjdDJESFJaREFVOXZLVUFQSThjS0hDaWRKU2VsNkpyVkxUSFhockNUOThLZmhpaUhhZzNUSWNuSjd1MmZMRCtlMUd3R0J4cjN3aDV4dkN1Z0RYa3JXYkxlRnRuS0lzemt1czYyRzBqYlVCS2JpOUJkSGs1N1VtVXh1K2JQMkl2SFRtL2FwWHMwQ21FbVNaWWZubG5PSmM1QkorSlJxN1o0U1E4MmpEWFA0cmVybTRkK01jK2FpaGV4ejRpREc5VlRHQmRuTjZHZFhWV25jblFXNlkxbHRVUnNpanB6SS9sOGtFTFhEV04rUEEyMlBpODFQNTh6N1JuMlRmd2dvNEpWWm42TEpFNVlhRWgyNmZaRCszVnJBdTZSck9iMU5LS21Nb3BWZkl4VDc4TkU2Ukc2b0VRbm1mTThhVEthNnJCMzJNam0zSlc3Y1V3UW9QT2o0V2d6d09mR2RzMVpxeWhMMU13UjRLN0hxa2VKVllOVXNUaG1JUDNnQkpDZUZ6aHFpdzEzUXlIaUZyTE1XWDNOYkg4N1V3N3dSNzdXZXlPYS90RStqQStZYzNQTjdsWmE0ZUZ6MVBZQ2VuUUZjYUk2a2srVVhEa3Z3Z1N1YytUNVZSNW94aGl0U1pQQWYyZzRZWGNzamg1bVZQQXFEaGhNb0RGNGJxdFUyYTY3ZGNOdFRLdmR4elJwclo4RC9jVnRJS29qRytWYlowUHBLSWVTYXhUMnVKeWxjYzZ4SHhuT2g1bVJPeHl5dFB5M1Jya05kayt5UnlXWFI0cFJBQ1RoVXp1NUpINk9JOXpSc0IwYW15LzRTQmExTW84VlFpamhOUWFyZnNveWl4WmlIUVFhQjNPeG1HVURwREZnQ2ZrMW13bW5KQ2g4cExOSUZRM2JGKzBva2N4bXVoYk4zNGlVdlpzQksvY0ZhWTExNVdWeUNWeHhEaXN6TUV4a1dQUW5ZNU9MRkd0WVZldHlTdkV5SzU1eVpMZEJOUUZ0Z1lCYkRQL3VFclFWL1pPaTExY2MwdjE5OUVzQXRGdklRS3hSSlBmSkgzUGFUTXZJUDFWRW5hWUY0WGo0eGZuMXg0dWpEb2tHQldoeVNWOHdhclFvcVF1WDJXVVpRanordFdqLzBkR2Q2NWdoM014WnZ2ZXQxRFBBbDBPa1ByMjdXWE5naE1naVBvVTBGTm02RmV1MjZsV0FyRXdUa0RuNitPOC9nd2xpcTgzWUVlR0lneHBwV3VqYVZTcVhXdDBUa1hVSTRUZFd2b01vNXdIZ0lyaFdKS1ZxWkdZcDJXT3I2MGluOTRBOW9OK0hJSDd1K0Y0Y0ZVeWN6VlNIdDczeko2Mmlnb2lHeFVqcmJTZXdmM1E2ck9mRmVEOUtrb0pEMnFHemtvdUdFVUwzOEtQWkRQYmtiU3Jjd1lkNTBIUmFQdlliNnBSS1JDL0VWclBMdVBxSmFRTXpqV282MXVJaUJzZWZUTlM1WThEQ3NDbDVSS2hPYmQyMHdIaGQ2QUZQTFFqVVl0TzdmT0pLcDVzdHRiMEw2N2w4VDRPZ21hQ0M1YTNRRmhRRCswSmdFREl0Wk83K1pZRFZzbk5qblhnZFJmVmpZMUF3Sk94NkN4UVZETHF0TXVPOFRZaE9kc3FBQkQ1aUI0OXN5TXBtQXc2ckh2UUd2aER3MENrSUtrYUZLV2RCbDN6cGR4OW9uUE1YQTRvNlRtWXdDWGtDeURab01qdG9DaU1qSnRkZGI0cTZhN2kvR3g0a0JYZlhSS1BwZTRIbGk0MWdwRzFJYjlGRktvL2duZE13Q0JqV2RlN0M5MklRaGRFVGNZanIxaCs5NlJnUE9UUy82OUxUeWZDdzhVZkF6ZzJ3Znc1YzNsZThKeHVJTlhxV1VsYjFDenBkUUdJblQrbW56ZVJlQWZyWUIxQ2t0N3FQcEg5MXl5Mm1PWEhKVU1yaEF6VTZmUzd6ZzYwMEtGYVNFNlVWM01hMlBpMVNmWDhQSkM1aWlwTE15Qk9qdVFBTXFGVG1KeHByL3BwR200YlVtTWhnc1BOVE5hYzZqaGtZei83RlRaa1o0NlR5MGlTT1JmT2trU2EvWGNwOG9mVFFmWk9Xb1phRmhvc0lZMkV3aEFBVU84eVRtd05WQXFhMG1xVDRuMEExQ0VJUGZYeko1ZVFla1loQm1oVE9SMU1vem80SkZHZ0ZsWndNM0NpZzM1b3JjeW1ub2J1N1dkQ2ljOHFSTk9WMjdtaERaaW5oeTRyY0hCL0VXYldzWTJhek1WbTlzeENmNUR4bnZLdU45aGJTL2hoa2Mxd29pd2c5ZkVMUXZPVk9sbDNrNndLam84RllhTUZzdjJBT0lFeHNyaS9sMzQ5Z1I2NzhHaFRVVVc0N1ZDM2dmK1ZlTWd1ZU9mandUUkNDTXBDWlFJOFo5bjVsdHkxbDlhdnNnUUpVYlRmOHM0azAvRFV6U2tyUm1EV2hHQzdqdzZxVGZuc3JFWnMyT3RBejEzRTNRM2RVSGFSVExrSkpTc3lVdjArODE2VGZiWVNtaTFhcGdKc1dBNXVSRkN0eC9IYVhPN1A1K3N1eis4amhuWTFrUkxBajk5SllCc1N3M3ZYekwrNWQ5a1UrYXRKYlJXMlA3d2xuSGJzdDFmeWdxMUsyY2YzcTAyYzZscUwxcWxQdVBJaGVqMVZpbzU5VStCQUR2UHQ0bG52Vm4xQUFWWUxhWUhnMENEOWYwOC9OOElyelpuNTRLTGc1T3JjM2hRSDFMWUVuanBVcUxLbkRlWkM4blNGOTdpVkFpZCs5UDNiREVqZEtGTzRIUmp3UUdkSzRjaVlkeFF6dzUwZ0h1MWgwL29PVGV2ZWlsbGo5U0JjQ3V3SHRZTHI5NWhIR2lkaG1vZm5ZNEJZSThabVF5Q05zZHkzbXBpV0RRREQ4MmRIU2tBVG4yeGJHNjlHRG1iOVB4WWpiQ0lDenBNa0JMY0taaUxRL2lKN3lqVFVmZnlCTjNTRHdOME9pblU1RXgybFl4dC9BenhFblBSRUpwcXZieWY2Sk5WUkFyczZZaDJzSE1HTGZERVJSbElocWpFNitDWXRLMG85M3ZoREFuVU5qaTNGOCsvTUx5Y0sxblBVQml5cnlmd0lTRTZuOERYQnpEVktlODBQQkZCdnBsMVk3dzBUZHBoQ0cxM3FoZjJDT3pTWUVSY1l5MlZyNWVwRm9sT1lUZHdhOTZQUDdBSlV1QXl5b2lRUDRjWVFnVWVIVW96TEx3WUVmZ2t1VmJhaXRJVzAyTlVtRWtZaTA1anBpZXU5NXdSOGlCSFhYa1NkLzdibHJFZkNEQ2I1RmdSdHpZZmdtd3BJczByK25LRWRLRXQ3YmdBeU1OUHBzRHhxQjdCZ3lpZ3M1cnpyMGp3ajVYc2VjNVV5OWRlNk43SUU1ZjJpZjVETFJyWG9WekNQd0ZhQXBiL3JuSTZVK1QrenJheWdrSlN2NjhTQXRZVVN5R0RRQjdlcG9nQWltTDZvZDh1UWExd2NPVUdUVWVZRW5lSG11OHd4L0hHelRNbW5HZWFYY05TZHV2ZHduZkl2TXVESUdGdjA0bGRjYmk1bU1kdktCWjYyMTg5U21LVnlKdzVCL1dtL2pOaVNrczd6SkREc25JeTNIRmZMdVMxaHhmNkZLcTBrc1hvN0Y0elN5K085THpaN3JIWjcwUUtaUy9aK2o3WEdEOUdLd0puUlJZbWUvMlVRQ1pvcE0rQlBqdXQrblZZN25IdllqRkZJZFhzdG1ILzJJR3hzREt2dGM1T1ZINmtVVXlnczBWMWxkSXBsOUN0clpuK0JBN3hLQXM4Z3pVNUJySjhiNHB1M3h0UWJoMVZXaTlYcm0xc29ETFBCY1dVZVhhakQrVlJjS3lFMHJhNCtSeEk1VlN6a01ZUXV4OVlCN3dVbGxQT01wZDdoSGY1ZWJuZ0F4VUs1MU5RODF5cElpM0IyRjhkYWpYRHZ4VFZLS2twVFROVVpuVXhMd1N1OCtjdUlKeXVOemFpV05GT1JXS0QrQ0lqeW95THJoL2FEOXA4UkZOSHc3VnJBRGwxanBwVmd5aUNwdDdSWlFIREZScURXSExYRVBLaFVDWnhYS2NTZTlNRWRPOGhjNm9CSmdlS3NucVlIYWR6elRzcGlCbU1ZUzhQMndPSGtSMjl2UlVNejRCRzlRMUdaMVN1THppK0hIRzRBaEsrME5iVjFOaG92SFZrR1FHUmF0QXg1UlVtaEU4WWFER2xZanhDZTBYQk9ZdmE4Z3RaMXlxSHlVZVJvOGpGb1lMUjZ3d25id2J1eUc1WW9Qdll5OGx4VUJxRkNwRDY0c2N6VUE4YVBUVlhuS3Rpckc1eUphMWljeVErVTA5aEVoNTRlb1dORkNTUzVtT2lhL3lyclJVaHEycTJWc2JIbVEyejlFSkdUYzZJSmkyWEdsYVdqYWdBQkVYQ0FJYXF6UXYxaDYveHFlcUQ1OUZwcXJhQ3U4YkJzWlJMNHpvd1RTK2s1VGxmZVBvNStvbmtvazVlN0dKWDhrSzVjZGRxajVsOFRKa25sOXlJdFM1dWdGMjQyS0x4U1dRMkpaWHN0WnNpN2kyaGVCTW9HZVExMVNuMUVTMDNJZVcrQkpxSTBnZGZhU3h0NERLUEk3cnFCaHVVUDRjejNNeXBGUmVDQUhZTndXdWJFcVRjNmJYZmNtSVBaK1ZMN2kwNm82bGZ2NnpWT0h4aW9McmtWc1JibnFKYjNKU2lEbnBicDFzRXRuS1NCUVE3anNQcFpMdGFlUmZjYXNPWDk0cXkrU0xnNDRHSmNwTC9sK2VIVUp6SnlyR081eWxyZUtwT2tUbHVyeENRcWVTYzlHeVQ1emw0Z1RHTDZvSkxMZWJ4NVNKc1FPSXF1TGRsekdSakxGbVh5WXpiM0lVSUxkWHVzU2k1bHVHdGJ6UHlMS2cxT0w2dWRMZFVMVG9JTE1rMEtucnZwc3hIbitoVGJHSnprRmxQdFNibnVUSDNibk9sQ29UVXJaNDBuNGV2TWJ6ZDM1UUxGU21ISVo4bEg3eHV0KzlxdTZweXBERkRlY0dGeVJDSXMxaHA0Yi8rZmNZZDJVQ091U1NVRGJqZm13bWt0Sm5nWjVWSE0wdWRpbWlvQnRTVlpYRnVlcytWdzJrYlVmSUc1RjBHWk5VNUpMQ2J1aHBtbGJxQkZMVkJzdWZxOWdvdVRLMWVPUW9BQkRmRXdrcDNsWUNKM0c5Nk1yYzQwRkRBdTFEMzFYam1GY2JQRzh1Rnh1a2FYUENYaVp3M3Bvazh4SmZFbkVYRnEzUEsyRTVTY0tSSDFXc3pRcmlKclZvSHhTdUdTc25XQ0srTU9BY3F6dGxGMnBIWWRLVGRLbjc0RVpoL252aGxPdVdMWHdPRko0bW9oTTZ1bWQ3N29GSS9QUVhnSm91VGJxK0Y1OGRFZms4Vzl0MjBoNmR5K2tMcWhpcGRwQlNGZTRDTUVQTDFLZmE2Q3dtMVkxNlNpTERTTlZLaTN0OG5oWStkODNVdXNaMjVicCtBTzF1U1hXNnN6YVV4RUtiQmhWZ0c1TzFGTDRxNVR1UkFmZHY2UEFwd1d4MlpyNFdCTndPZzU1Z1lwWHVkYkNad1F3dEdMUGJMejU4RzV2dTdQemhEaXplNUlyN2hsTkZTa2FJQ3crMnVtVkhTQUFxTXpRNDhCY1A4SXNsYVBZaUZzNnVpMU5USUptUFdpVFFHSGdiZnpSWWx5OFdkUXdGL0V3M1MwNmVXSGY3a0dOSnhXSE5aOU9RNHFIeEw3YkRHbU9lT2ZsdFl4eUpBTXJsdnA0V25qVm5COU9vNEptYjIxT1kwT2N5MjQ2ckVTT25LR1YrQjFoUDJGVWI0WFA2Kzl4WUpRN1pKWmtNa2FvVXlJRGlFazhxbmNvNkJRMStZZFViWlJZcGMxUExOc1FSZ20xVEMwS0t0VG8rWWttdllxT09qME9YN0t1U2I0ZzVmaFdRZ0d6S3FJbGozbXNSQ3RJenVjV2hybHRZd1BBaEFxR2QwTUZwYy9LMGsrYUhSZUNZY2xFVDJwTzdnRmVEZUpydUF2UTU5YnRyZTc1YWpacGduYjZwTjFqR1dQdE03QmpuSDJkdmMrMGlkUUpjd0NENE4vbmFHTTlrcE5NN2RLQVVxWUtMcTRHL1drck5hbUxpVmJQbWFYQmxER2NJOHRKSHdxbnhjQldoMW9YY0J6aVJnTFFKc0NqLzZaa2VlZkxNNmUyOGhlZlNwcTRQbmoxVzNQRDNrYXZPRkc5dTlsckd3bjRmSWNRcTJWdGtYUHVwa1RmbVhOSVRVcGdHVFJFUnljRVBSTXkwTnhSWFlXRWhUUU9rVDdPNjFUclFGZHZ0S3NvNjVscm1HM29HL2FRbjNyNmJnU0t2WkovSTk0ZlltbWRSV01OZTFLaWxMUTZJcXViaFNqQlBCYWZZazJoeG1ud01xMDZ6UVBKZGRlTldhVitKVnJLSml1RittVUY0akVNeUJ3Y25Ec01Gc3FseVJxRkVIY2lFUGQ1NFQ2T1I1bG1vVkpzR3Z5QlA5aXkxT0dZRlRuK28zQUYyQ3FXT3VMTkJoVlpjM0llNHpteGlaaUZTUGZpZTNjQ3pIVVlYb2picGIzVGN4STFNNlBPVWVTak5TYzhTK3FKdmhEU1FDZnoyajFYSVZKeGQxMmNCSU5WbzlZK0w0SklmRVRGNGl5SHNkNnNRVnRGWTh5bUluczgrUGpFbVdKdU52K0hWRjEwSnZwTkpsaks2VUZicU5TTnZxRTZkNExDQ0ZXUWtXcEFmRmpXMUtvOG9SQVB0Y1NQRk9WMkxFUWd4M2JySW9aek9kRWxrTFNxTkYweVQ0L3ZZR21MSGZncGREYUhpNEs1cXBXQjBZelMvcS9JeEwrQnhOV1cwTnlXV3RZWFphcWdZc2ZlM0FPUS84K3Zrd3BVd3FXTW9nUmhNSCtveHFtZzFacktRRHFTa2tmUTRjOWJDSUdXWlFkWnZNMkptS1BjYWhlM1puYWx5NDBMT0ZvWUZQaTNBUzl6SElPQnBsbmVmQTZJUEVoWm5PQWRxRDUrd25EZytJQTI3QUlyZU0xaWZHeGk2UE4yZmpNN0UzTFlVWHBFZEFleS9vb3JIKzdFcnBLRG10SHZzY1YwV3I3eGw0WmZMZXY2Wm9haGxwb0lFNXd0eXZPZVR3bU5LcGlxeUd3SkgxbkpRZ1gxSlVsZmZEUlhtTktPbHlJcmRVWkFYbjVMRDhPT3BVYUp1TElYNDFVMkJzSldPcldpUzVvTlZzUXZnQjBnZHVaa3dzZWd4am9DOTVoOE5CVUloT2EyWmdrSXY4Mk0wRjRybTI3TjR3amc2RjA1ekVneHZKYWZOZkI2VElZdnYzWExGTjRPdWR2MGNGcURsU2NlZm9rNEFmUTIwU3liLzNpWDJjekVOSkNDcTlwTEs2RWVQSVo4cDVCL3RXUTBLcU5UWjVsbGNOWEloWTV1cTR6WTRuaUJrbzIwUXpkcUZBdjZObmpDcG1xeHpvWm9RUWprTzV6WGwwa3FpSXptYXFkL3lwN203SWlPNTZjME1mekswZit5bnlIS3U0VjYzOUVVck1ZV3hHOFBLd3hWcHlOYkthWWp6NVN2TjRyNEdJQmRQWHplN0ZKSlJJL1JncjFaZEtCZngzNzhuV3p0dlhqSFFEYWxseXRMUGFnMmFTL3pRVkZXV3RiWlVXYWs2RUdvL1dvZG56Mm5xNVFiM29JOThwN0VhS3JpcnVwVlhvbk4yYloxdDljbkpCbGZYTHMyTm03NDhlWllqbXk3b0J1OGliR2kySnhTSUhpOUxFdFlScktFQlFoTXNwYmlMbTJGZG1DK1NVRlUzSXNJamV1aUhsQXppV2hPM0EwQVRLb2VYYTl6R0xjTEUrSW9iYzJkREZZcEg3Qm1UeG9QdWVFd1pFbEk5VTNrTzRpKzhUYTJoTXkvUjVVZFRFTzZaay9Ya0l0a2Q1U0VyRVp5d3l5aEhOUW5sUTVzVHN3aEMxaktiMHdFUjJsMHk5NVdFaDZiUzZ5cFpBUnNSQllHc3JiZ0tyVkVuUm5XQjVWOVdMMGxqeUhhNzRkZklJY0szTlNRT010eVFVdUxOMUtpTG1ySitCNTNhR1NaZldZYVFrdHY1ZDd1VUp0eW52U3M2T1k4RndyWVNRTWttTEh2cStUNXcxNDlzdlRFbCt4UVpFYTJDY1VvdzhWbUFZRXJFeXFTUlNDa3ZlQTBjUXB3eVdFNzhxa0E4Z0g1dmtQb0puUDREdkhPZGJSVDFPbkFlTmozME9YNG1NcXNoUkt0dkFJOTg4NG9XTWpuNDFEbEJtWnU0Y3hRQ3NVL0k0RjVDTHBBRWJXSjNsMUY1RDFROUh6eXkxZkEwYm4rRWVlR0c1WC9Kb2hET1Z2TUhxNys4OW0vRno1aUFZS29YY0twUTVCSFhPU1NEMk9JRkREaWZDMW9rTjd6blhXZFNZUHRNVGE1bENaTUpEQUZuREZJQ2xyRTVYdVpMWGwwZXhtLzU0RFNTUEE4VldSL0hobGtKVFNONVFncGtrTGdKTUJacWpDUEc4c2wrN0FCSnV2U3JjT09GTkZpbytaNWRjamQ3cTJTbDdpZ3RRT0U2QXlqYks0dEEyZXJ2ZlhndGY3a1BvZjJBL2dhV2F5akU1WnVkZ2IvTzVFczd1dFlRSkhpTUZxdVhaczE3cVBjb1JsRGN6aFJOMGdHVEdTa245aTNtdkZ4S0pyUWhWZWdNZUFEN0hSRU1CN2dQbFRIZ05IM0RvNEdiM3NQM0dSVXhETG5KOUZyNmZiRjhwVHk1TDBPdml3T3VxSlpEYWxXdUlQQUlFcHRqaVBtbkdCdWxERldkQTJCS285Y2FtSnhXQTBLMlVJVXlTbGFhTk1DY05nWktwU0FyOXhZS0tMNjNqaDVKUjd3VnZqNFY3S2VTYnJodGFvMGRmdEs1em1aTC9qaExQSmpDRHJFTmpYQ3B4SFpuS3J0VGkrS1BJZmM3c2RkNFNzTUJ3cnpBSEY3NnRCV1FwU29sNHVzSTZ3a0FOWnNrSXVXVWhhSkVuWDY0TUkyYy9kN1JJalcyVHF0WkxkdVE3QmtnM21sWUJrc2lEQ2hrUm8rdGhjbENUdkQweXdHRUJmUVE2MnZuWnJ5NGl2N05LZ2hpVVpXd3pCOG84THdVbWhIYkdKV1JNWEVPdUJlK2xFNHhsNFZXR2I0c1JVTmdZRXBqNmRsT2RjTUpTMitZcFNzb3B3WjBFR2ducGQ3b2R3M1h1YytBaXVoUXRyb1FtVytIakJSdzRnc1ZRb3hsSGdJVWhwSFplQXJqb1dPT3cvWFBwTFNNK0NXUlRIVUVOckVnb1VJTHEybVBhbUdFb3lnQ1djcjlVdVN4RktkS2lZVGg2Y1lBemF2VUNVTVJjcHVYWEp3ZUNlSm9pNnR1OXE2L0ZyRGdHck90aGVSTGcrUDYyT1lzZkZxYVZ2R21FelhsRFMxaXBjTzJKaWpaNUl5Smt4TEVReHhUNW1RdS9CUFM0WitKWTllM0hBaDZnSno2VFZSTE5DVXU3dlF4Qlg5R1VPaG9ZOG00OWQwWCtqWE5HV1NON1kyUUhHcHVIM3U3QWw4WVd2Ymt3ek0rb2M3YzF0bG4vOVEyMVRSejdqdGVSY0RmajZZNzFObEZrQkFLTVhoejd4R01DSDNNWVVQS2tEeTVHMFdEYXJNV0xGVlFWT0NnajNZYzJqMmd0cDR5TW5EbW5RSUxYRWFKT2JBRXlLd1VlTDVtbE5idDdUTzd4RWJRQ3dBZzlYbFJpRXB3T3JpSHN2b3lFVXBaWWlxQkJBbG9XWUEwVDNVRTBRdGhIZU5Ha2hMeGpsYW9Yb1pMVFZVWWV6Tzl3Z2FmQis1c0xqNVRSbDhyQVpHVjV6YVJyL1FRcWJ2SVZVam0vam1JRGU2cHB3Q0V5aG5OTUhLYzdCdEdtRXBWQ1pxeUJZMTlZZ2U3a2o5V0VZa0kzZTk3LzZtVWw5NnljTjI3cWZxZzBYY0dXdEtMMXBTT01RdW02QmM4KzNxaEJIVGtUdXBJNElXM0NFSnR6a1BJM0Z5bjhpU0lLMlpKdXhpaDJLZUxSYVRSWEllN0ViSmMzandtQzUxd3d4VjlVSHp2VzVCak5BK3MxQ0lpYkhadFFTYTY4U2doUTQwQk85WWIvL1BmVnJQLzNuemE4dlRlOFB6TGFJeEZmVUlRUXRmSzFFVklyaUNlMEEzb1FhREl0d2ZJUmhROERjR2JudUxTNERiR2tOWHZoYnllZ2hsRVh2aCt1R2VORkZNeFg0Sk1iaDJrTlJjNThpUVYxYkZ4L25ESVY1eFBuZmJpUWQ2c2ZJTFlpV3dKYVJNS3pBeFl5SE9KakdQNXJzZmNPeEJ4Q2dNWXFHbGtPaWRaVXN0cmJQb2k3d0hRSWhDa1VDdXVqVU1qMlFPblVtcTFTWUxzQjJ6UGhIOTZLdVhpL2pzVWFiNVcvNWZyQWxpZFFFdEhUS2FvZlBobDdZVGxodVJEdHdra3l4dkQxbmlBNTY0T0svUng4Qkk5WDU3MmRaMkNOdnJhR1BYV2dWTytZRlQvaXN6bmhoengwdG8zMVloVU1yU2I5bTNRL3JNaW9rWGNONlp5QktzV2dzaCs5ZjBYR1o3c25oWElkcVMxZUNzVXBQUlY4cmFWUGNqSks0YlUwMzcyTHpzN01WbWI2OGRueGRyL2g4M09ZMTdwVzlCR0g0cDdVTUZuUjMrejUvT3RCbFlla0twSXAyOHRkeDlxSlNVcVp2d0VheVFHaHJzVzZLUUliT2VGTE1mbjNZNUd0Uk9JbkVsOUpac0lxZElZUkFkV1IwVk5oLzRVcC9hYzVxSlZLdjl5bVJRL3ZXMlZ6UlREU2NMOExPaWxaMmx2aFdqOFM2blpIZWpMMW1rL0t0d3lvYkxXaFplTjc0QnEwaUdyM1VBRWprUVhDUGtUMGFTenFsNWM2RU5aYVNpeXdLQ21UUnlJZWRZaHB6ZTQ3eWlQbVpINE92bkJ0b3lTRmttakpVWE1yQko4NHJmZXhzR0hoY0FHSnpDWUJJdmZQa2wvTks0ZVlsaFNLUFNMMm9Bb1Nvam42TDJ0SENNb2YzcXVFVUR6NjZ5emZralVLS0NDRFVSUnJHb2I3cHdMZUQ3eEtNU3Z2czlLZW5icXZNUkdOQUxYWVI0OWFZZ2xUdnRlalMxSUdtd1d3VWw2cEN1WHFTMG1ZQkVPRmhkMDdicVZnNWlBSGs3WEdZMVU3NTZ3VDI2Z3N4MHZaRkhTbW5oQTZPU09scm5zazBRSUJjWkgzZFBkS3VSYlBHVWN2KzhIck9ZU2N2clVObyswSVNEeXNwR2hQVTZjcDJOS0cwVU85TC9Kb0lHMVJlOS9QVTdYVWJFeHg3aDN0Vm9pTzcwKzBVMnhXaGNKbVM2U2RUQmFTTE5qeXRESDY4YjFhcWRydmY3U2xHVTA0Q3VBdVhRRGR2R3FDWGpQMWFDaXVVTXM1YXRIQmNTMDVqSkhrSzdONHpYZnlQS2UwbTBkOWsycFRBM0FLU0ZnaERrZEJUMXl1SldoNkEzcEoxMWVLWUdJNFdwbi9sY1pPYXM1dGtMckVsUFpKaE9SMSsxbGJ2Ykt6bndyazAvTElDTjNwd1BCa2xncmVkQjZ4UVNERm1oSmRtZkx4N0k1blYxR1VTdWcwc01zcUFNSnc2SXJ5MUFZckx6emVGdDVNU3kvOGFqUFFPRzlDd3FmY0xEVzI0elI1RnVxMEdHZENobzkvVWE2dWExNjRKKzIvUHBqckhNQXg0bHJNMlUrVldJNGhRenJ4YmxNaWFaSU04S2dyRFVQV2xGLy9mam91Q2FWT2hWQUpBdDB5QldFL0I0b3dENTRyUGhHVkpvT1BDdDhwa29vcjM0R1hNVVlqRjJENnl2RW9UaW95WnFKM083M0I1V0pBanlFK2d4TS82dGUzUjBHUEpJY1BWenpQU1ZVZjBkUUdGcjBVYUt3aVRvYktmUk9wR21RcGcxQ3gwTm9DbzVDcm93Z3pWVkJGRmxYTTAzN3RDK004YUh5SjUzUVU0RjJBczE2cVRWUGRnWFhMK05nRi9ydXhSMFI2SmVTNzd3N1JFRnRGRk92eEo1cEFtWjR3MGpFbE0ydmlkZ1BUc2JPejNOZjloeVNPa1lhTXZYY3IreTBRSUZCZEVqME9oRndGTm1SazRUbGprdXFGcEdSZHhjUEUxSUpnMGo4WEJVeW1QSk1WeUZZZElsUlpWellUcDlUTG9qdmNGc3BJNm1Kai9NaEVoMGMrWG9KVWlPNGlVTjVpcU14QklXbXAwL0JNM3Vyd21rTVVPajRpcDg2UU5HaU15QWpJYWdTUmFGS1RpR01yYUlOcTlCZ01kZTNIYWF4WnJRMk1lbU12M0J4b3pUbEV6M2RNQy9POGp1R0tqOWFtaG5uTW9QUGp6ZElXMGxNUHQ0ZTNPYWJqR1ZTYnV2REw1NU1iLzM1bmxFN2tCaG9STmoxSkJmMm1NclVRQlJnOEY0MGxXZXN1U0FLL3VNVDRORDFmSG9aZmVJUVk3c1FiYzFMSEN3bHQzVkNzUnJSaXJaTWxlUXRhaEZGdnI3dVQ5UTIwOGpDcitGNHpTaU1UV2g4bk9lRG5ZVTU1SFJQbG5KNC9SeHJFWGR5YTFVZ1l1cmxsMXM0L3RvUy8vVEhqcHgrOUpMRGdoNThxeW5iam1OdmVrT2ZCaldLZnlZa0MyZk9IRVVyeXNIZ2p4ZUpxZWt0NXk3eVFoREpmTlpUalNySEhVSXJDM2ZKeU5HZFhteUdGOWNZbmNBS29GQVZVVWhEeWZkYUpPVTdtS1JseFlyU3R0TERvcno4aDROT0VyNUEwYVl5Y0xIa0k1SlZFUTRoWFhkZWdWek5mblJVVm80TkVmUlcxcGVpcHpaU0F2VmV4aERBV3M1d3JtektVMzF3aTR1aVlGa2tiNk1jS2p4RVpqeHRyZkxkN3NocmlIeGJ3NnlLRkxsYTI4a1AzakxkMXd3ZDJSZ1BjM0ErUXZqRVhIbm1oSmx2RUdtNWVpNWc5MUJxM09Wc2hxc2J5KzhIbVNqMTFreVYxQ0duallHRE1pMHdONUhkMzdpNXUvRjVRR3N0dmF5SFp5MjJHZDQ5NWNIOW9jenJYZWtua3h2QnVlV1ZMWm5oWXNzUkxpNUVRSXRwbDNxUmprTE53Y1VPdUVNOS9kTzZ0WElJYlBxbjE4SzNTOEd0STRtc1BvL000SjNJNXpKSDcrUmUrZnJzVko2bkY5NThacXJ5L00yYmNVT25CTGM3TjUzT1BEdkpLanlINTFxbllOdm5nVzFZdHJDS29wM1JSYjNBN1BlZXVPTUNCV1Fna1pub3FPK2liWmNXU1NUbE5JZUViQ1p2YXRKUktGM2c1M2Fja05sT1JSZDNzbXZiZjdOM3VLUStQSTBURW9DK1ZQRDhuenRkQ240d0VIWjlQNEMyalpmTDY5M25pMTErNjZZMUpaNG95cXNqcjZJeHdBZUZBbmtMaU8raTAxcG9pVkJ1b2RUNHJRai9xbmFTUWZFOFFlTVdSdTdSWVVsR1lHRVEwcmpYZ0dycHN6Tjk1VFdCWG80TTVlS3FienVmbkpQOUd3a2h5d2F0eU93SXdKWGo0dWpBYjdhVVZPWXFxYjV2UWdGUklzYmttbGF1bmRCYWliV2hPQ3FMbWlZMVdCQzNJS1YyZktNUmVuenZ1YnhUcVdNeERqcE1ndlRtVmlsZ2R5YzhQWjRvTElnZzNQcXI2bG9QK0Q4ZVNnRGhlT3hXd3FCaFQ3Q0JlSFZiS0VsQWVabmNFSkZENlpLaXFOWnhxdlpuTjI0Z1Fmc3NadFdVZ01KaDZqL084Z2pmQTMwVVJ2YThPenNka0Qvd3U0NkhlQ25zNW0yUnR6SjJYeWhJYTg3WUtrdWhKV3dsTzhEN2tiU1FmTFhwME4xdXdHYXRVVXg1RnBTUDNrbkRiTnVJMkZPcDlsSXgvOFllTVA2alBlY2taYjIvTXc1WksxcXZjR0FGSnRjckxZVldFQ0hlNDJiT1gzV1FmZDgxalU2alVNNFNpT3ZaYVY2UnJHVm9nMmNNTHo4NUxQUkRsSzg2bUZ1SE9qQkhnTW9vYkFMb3dOWTBJVHdZNnVDYkllelFSa25IRjNDWlBGeUlFZjByZXNwTkNzbFpURHFNSjBMa0cvL3BTOHlNS3A0dlNxbkdmY0hic0pPRmJNeHFLY1RHc2NhQjNBa0tIMW41dTJ1K3JZQTNseHJNaWdtZXl6N2RFOHFrdkk2Ty9GM3g4REJtTUJkTnl0WXdHY2Jpb2FKQ2RsVEpxZ3crMTdrMkZNOVhLUXZYdEpXRThCSHc3eHNteTFiT2lLOVhGMk5yMENLVjVmQW5hYnlua2pYcytYVTBzVXBDSUE3MWp0SUt5Q2hXTnJiOWh4azZaQXdsRGFzc2paSHlNNlVhUSt5UzFBYlYxUzhDYS8wd2s5QlI5WUU1UlpkeFY5eXh2TVJhUjQzTVU5VkpwbDg0aDJMU0F0YzJyaFBEc0dXOXA0T2RmWHZoNlM4YjJTY3lzTE1QZHhZZ1RCQTE3UGc2dkQyZURwcHZCeUxNaVp2M0NGcm0xaWV2aGQyWnJrMEF4WFg4LzNaYXFkRk5WVDF6bGpKWFNrTEs0RGNxNDlOdUlTTlBwUUhFMEEvQk52RlZ4OHh0aXVXbTdLbm9pUjJnL0YvckJhTXF2TCtCNW5rWmhqQmR4QWk4QXIzUWl0NGJ4M1BGcGFWclprakxhQWtsYVNIQUR5aUFucExwallWZVVxSktMZG1LTUNNdm9JQjFrOFNZc2Ftdy9KNW9tdGNESlRJb0lISXE4Z2NqalJrWVFhTVlKbmUwcU9qSk93OWxrQVpBbWViSFJWYUt3c0JmZ1RZTytKamVqd0pVZTZnWTB3Q3gxakhycDJ3MFdmbm1ZVXBsZS80NmVHRzdLdXlFOFdVdTZUOVNxc2lXUkZteEZOWU9wV2dPQzlxcjRIQUdRdXIvZEdBNExDbkluNFZSNkllT2VLNDdaTlRIOHBCRFlWTzlqbURWZU1BRFZGRFl6WEJTYXlnb3VyV25oN0JHbFNFaFVOallmeGNCR2ZEK1ZBd25OTjMrZ1pUSFFUSWpSR25kdStpUVBwSWJTMFJISVo4OVJUUWRpbVo0bnJXVEJVZ1JqWVZCWXNWUm5UT3o3enBQVTRrQzRZS1F6d1VmRHE5Vm0vT2tBSXpGdGl6UXRMcFhaK2hOQ3VSYmdrYk9WbWhVcDgxYVRrZEdVZCtCdEE3WVdvTUpIMjFCdWQrWUQyMGE3cnhKamtWdVZ5d2Jkb3c0NXE1SC9xOGkxMlhPaWpEbG1lU25ZSmFZeHFTQ1ZDRmxVSlFDYjhPcUVvUmNHSWszRHNYUVd2Wkxrb1pjbDhocjNzSzdlSDZhRFFvY3BOb0xmVkxVeHNsTEdLeEx0L3BBWEtvckM2OUdHZDBROXBtcXlUK0ZnNGpSckhjS1pYRXM0eTFXOUt3MXdCWXhseDZIWW1sZHR0VUZIVG5SVFlnTDhTYmpPTTVsd3hGaVVHVHBxSTFabktscWdOcFJLUnkzTkMwc1FieG5ZeFE4ZncxQ1FUUW9lcUVneVlzSG55aE5uelJrTTROUmx3SnR5Q0Fhdm92YlFFSzJ0TURoT3A5MG5VMnhLREVhN3k3ckpFMWY2ekJ3aHBRaHFNeGxXMW95T1hJc0dSbXNUc3d0NW44TStXRVVLUHB6RU1OZmdhem1KZ1k1cHhVQlBYSmdvZzlkVDNjeUNGbmlKdXJiZ3NWVzByUUpseVNDKzhvLzNWYWdvbDZjTmdOY3VIc01iVUFiTklnaGs3U0hoc3dQMUZnbE1YTjBOSEo5VHVmeUo0YkpsZldBUTNRS2tHNWJNcXhGTE1WSjZQYnVuaURDSGQ1WVJvdUo1MnROb0VTMEszdHlBcncwb2JNV29abDhBVU5saWVyRTNmM2VPa1hOWlBmdm5DVHpQanMvOXdLK2YzT2NaQzE4T1lrcEcvOFJIaCtrWXcrTkw1dVphcmRRenFUcG9WQVkwQ2dpZ3k5SnJkM1ZycXd2MGxuQXgvQnprd2ZyWFFEdGFQcEE1Z2hXSTBGeEN5Wm9IT0FzYk40VExMZEJBVVYxaWRvd1BlbllCb1VjSFFtQllxR1AwaXA1VW5pUGcycllCbmp6ditZWTU2TUhlNjFMZWtsVCs3NDhhaEIyWjNtdGF5Vko4eDF2eXVjSlpJc1JodWRpNlZHTlpTRUJTU0xnUHFBY3ZidUpmWHJGbkJwOW5LMVhqb3FuSjhqU1JJc0NrQlk1RkFvdkFwekU2RUxZNFNyb0t4WEZwdmlBUTdFWVNGSzlyREZTQkZ1QlNEWFcwS3NSYkxiUUFBUVBDRlJIMWxFTFA5QUxoR3RDUnFJQlNzRThsSk43bnNUT1hNME94UU1Jcnd1azZhNXhObmVBNHRsc3poalpHRnd3QWVTb0NRVTgxRGJKRGxjeDFsRkhRcWtRT0d4SW9MSnFJUEswWmYvdGw0b2U2a0ZNajJVdHB3TzNHdFZvS2NudERNU2JBU2NSOFVjT09IRlNTazRoNWZsNmJOcGZDZFpnY1VWd0NzK0dvOHVKa0t3eU1DOUllb2V0TEU3REFKSXg5S1pLVXNPQ1VVVlpaamRsUHBsSnFkalI4Vk95d1kwU0VtbERKZU1lQWgxanhLdFlLb2F2dktyVXd6ZU9NOVRYSURlRGRvZXlOTzJBSkZTZUQ2Uml6SXBYT2RZUnNlME1JbGhDOUhtVlpRL2ZHV20wSTVOTjlqWlZHSkxvWHZzNFhFUFlEK2ttQVZmQ2tGWXZFWUJUayswSiswdGxZR09nQ2RXSVZSU09qWEluWWxWM0NIc2pvdWs2aHoyZXdKMitGYnNzY0JPZ2V1VVpIeDJGOGQyS0xsQ2RvTmVYQll6OVhsaEdVaUlVWmdYbE5VeVZTS1dPTXl0YXpaV0ROWUVLMFF4enlYcE84cHBSY0NySWM3ZkdBWityOUNGSndUWU56SUFXbmt0b0RRSG5aK0ljSG9lc2NiTlhjYWxDcVpoSExsUzNqNjFhdHlnTkZNZ2txVTUwTFpaejJlNS9qUUMyYnlZODBvOGZFOXc2a0QrREhONFhXRWJwbXF1M285KzhlZHR4d3E0R0JZbFhrZDNHSExCa0FDaytMNHlIbkhiVVdNenlrL25BOEkwV2MwMERPTUM0S1A3NGZMTW5kbjBNS2VmanFROHJFNkR3cVpWWktGYm1wbkphTHpOYjEyQWVHbWttTlFWbDVUSExKejUzNHpEa0R3ZnBFNG9JbzlNeW5TMGoxem4vZnFuaHBCQzV6eWJwb1V2Wk14elZYZXZOMVRuY2J5RWs3WjRGL0RVdFkzd29YY21HQjhVL3VxVG9TNWNZOXNaei9PS0ZKSU54YkpWRjlTUmhDY2RKR21PalJTVVpDa1R6ZisxQjd1RkZ3eTNibGVOeUFXdWw1ZFJvRzZzQ1dNQ1JGR2pLMlI4YVhIMjdXRjN5aTRmVngyTVNVMUZBZWp1Zm1vSmVUWldkWUJJMVExVEE4ZTVkRU93MWx0R0Z6RHVXdS9JdDN6S0wwak1rQ01RZGxlcGg4dWRVallidXdlYW5WSkFsdnBBUzhISmNDZm1venVWTEltb3g3YTNpdkJXTU1HZzRSTHdoL1crY01vaHFpdTdzV2FNdnFnMzBwV2hUNFVMOVRjck5CVWtLR0VaUFRQYVROQUk3bkVGcTZHZkNLZGQyYlFubTFvcElKVHZOTFR2eFNoU3VRRXExRlJFSm9sa3FJQ293bFloU2xNN0l4V1VYVDRNelV5Z2FHWTMrOHdmcWZwNGJJdTc0WHZEMElnS3EzZDl1TXBlbXVHVXBVU0MzV29acVdTd0hTWjdPVFNuRVRVNVV4Q1N6ak9aSGdleFFyR3BPa0pCVkM3MXhLTStKWGFYa3QxNFdPVlVRb1l2SUwyK0dTbUExanZNVWFxeGsxM2REWGdVdzBqNTFQNjRENlg4bzJLaU5LVkp0Sm9RU1dWSWJxWkh2SXRRYnZnUTBuVkNlZGtDUjBQQnlkSFhRMUp6eXAweExCVTJNTUdaODh2R01lTitjZDQraE9vNHZQWTJKYXhjakFzVExtT1hFY0JkMGJ1NXpBcTNOdmxCbXNiTVN1bk01VWFkNS9qSHAzU0szV1YzVE53c2pZR2dQTFBiRnBVeDBEcHk0eHpZTHN4Z0pmUVd0WnFTN3laTHpHb1ZUYVlBcFN6SnMrQjJNRjlvVzZPNkZMNHpjelJwWG0wNk5OZjlZK0dINGVYQXpuQ2UrTHdEVThzZFJhTjFKODEraUpPM0FkWTFXbnA3VnhJUE1nOXl0VzlJUjRBbmc3QnZZRWxERllJU09sUHRTenUvZU1SMk85L2lOM0pQWEE4R3NRMnplK2Y5dTE3aHJHT25HaTA0Q3FHUlVkYWF2NG13ZDF4TjRKeEN3NVU5bEd4STdsdEtXZ3RvWGJ4cEsrT1FiblpqRks5dXVmZ085c1lBZUpKcVQ2NU56ZG1RWjZmd3N1QUY4YndmczNEZmpIczZuYlpDKzJGN29aNVBwaUtsNE1odE84Si9YdndGQUZsbk9QY0p6SkJaRnhyQlBMaDdvV2M3NVl4aHE0cHZPa01lMmtRNjJRNUNhbDJEcXkwQlBEMm10ZFBIUkhVVmVuaEkwOG9BdGpodDVWL29QaTRjUVNPYWxGTUFWQkhVbm5GYnB3Q1hZTmxXaGxhQUlHeG5QaGZDejBkR0xQQmZmcXlseEYvV1dhSXQrbm03MEoyU1luNGNzUDlOZ09BSzl2dkNjaWswL2M2aDErdk5ZeWkrdGhWbDVYSzFLZTUwdGxWR0ZhRHVjMFl3ZW54Z3RaWldnN21ZZ0Vrc1VNcm5XV2htU01lZUd2ajBZTHd5ZlhPeVFsVFRRbitGeEQrWE5aMndsT2lJSGJXOEdQOTJRZSttNXIwZ3VDVmFlcTA1OU0wNmxjTzM2N1piWkxqWW9CYlRUL3IxUVVYUTlFdjVwQTd1bENxd25ydEhHMWVlMlZnSXRrbTV2cEVPZEJPWTh6T09xRC9FSGQwUkxEdVl4clN0YlJpMzhIYTVXblVQcFFEVzlMaFgzUmlWV2dVSjgwcWxyS0ZtSEptU3g0dC9lRVI3dmo2dzhQcEZ2bWZkMWwrbmlvT0xsUURwWWxZL09hR3Z0OGsxTExrYTFUbW1kQ2RMMnBNYndkNFJUZHJZeURxL2ExdndBQksyVkJtUEdsYVVtYVdoYzIvaEpPTkc1QzFvekM5M0tPa0hnaTg5RmNoVjU0cXJLNFZLODh0ZVljRnpBbzJQMVMxM0k2YUszUDRPOWcrZXJHVWpVTTRWUlVxRndxNUVFRjZkUlVDMlBKRlluSndYR2o2eEcweG9tOXpRa3RHQnhUM1dvZkMwT0JpejVaUnZiOHlQaDhEWHpiU1h0cnk1QkFleEdvbkJEZFBYS2YwTS9wL3phbEFodXc5ZWdabjdLNzJDejdQSllaRi9Ud1lZODBhalRmdVVRcFlNaDB0R1lJYThyV2srdllOMFhHTmJvaVJ6NUtBWmM0MDdYMksrMjBDS0VYbHZ1dElpREVpcTV0RUZHUmwzSjU5TWgrb2s4QVFaNUVzaGZPY1JINVNtNlZYQTQxeTZDUWZQR2szeVRxUHgzY0V0dTJEQU13bEdadEpDREJjM0E5ZmlKaGpOTWN6TnVrWVN1a3VJWnVJaWRHVms0MTU2bG5SU29Fb0gyYkEvMjdseS9pa3I2SmJuVUx4VzNha0xZTThYOTA3TThUMzg2RTc1cWYreXhvUldtL1BEQmZkR1QzMStHYndveURuR0NPVDhrVmYvaWhXZ3JYSXpISHdtK08xUU5FMnAxYXZOQjRmSjZ5eHBPb3V6ZUNJRWNoaVVSckVkL2FuSDRhV2V0NGVTUmRFYmlPbHFqd0l4NjI1S2lHTU5QRzVadURSZys3OVRTRXBlak1FSUNDNHhtOUg2UkVSU2JvQUZmclVRak5lRjAvTzEyWWhpVVViNElhNlZPRS9hdUM2T25xSlJVRURLMHo0Nm1jYk1rWlg3WkVaYVJlbTQvN3hPdEFuTmM3dHFFWjhmKzVPZ2FUeWN6aEp1RDlSbSt4UFJvditVaVlsVUkzT2ErMWZqTTFvSlpvQjBna2N4TEFqaWJoY3VJYnhDWXFrMHhlMlh2MlhrcWtwQndENkV5UW5VeXgzOStyMFBESkp2ODRlL2c2NjhDY2pVYVI2bnhQTGdiN2R5bUJ3QXhGRTJBWHVwZ25XN3oyaGFUT1ZjZ08rRUNnTFFHckNLaG9qaEFJZXRmekZHbU9PSkZOc2JCbExYRU8za3B3TTB1ejNlN1kya0h5alUrZ1BDclc4eVdobTZpZ1ptZC8rdExvY1dMaW5oTytsbWwxbkcvS0NUOFNyZFZiV1hqNzBXTHJFSGN1UGJkR2dSVmxOM3l5UUpyUW1yTUFPeHZVTnpMNjVhN3NZTXh3cUpONjY4L2lIRzRLRGdidk5SKzhsNEVVem9nU1VGQUE2SG82UDVzakZEbDZObU16YkhFOVRXZmtkVEQxVTlueitXcERLVmgvZW1qV1A1WDdsMGQ1RGRIb1FlT3pOTFBseW1TV0dOVU8xTHpBWlJtWmlqcFJPcXdGNWJpNURzYUxwV1UxVTlFNmtudWRGU016Yi83OElESjk5aE9mbjZZRXlaeTFtTlB2KzhRdkh3dkhDL2kyVDI5cWdST0tzbzJNbThDNjV5bkRZbnFFbzBUZGNtVUpZL0piZzdOZGduVEVXZnQ1R3loSHRLZGRVNStKaGl1WWZlQjYrSHVXMHVLWU9KaDNYUlJUOElBclVuY3ZSUmdkeXBhMmNWelMwQmpPaE8zdXFaL010c1NMaG16ZGdPRUcyb2lXcERjVTlHcFhFTkdvRkNEb3ZralVrOCtGa1dtOEwwNnJkWjVjU1g4eUNGaFF3Zks2bFRuT3dFQXZFN2Q1TTlyVGFoVEtuSDkzSHRyd1ROVUNseDhkdTlORDNKTnRtR3VKZkdOZ04zeXNFM0xsbklacFRDQTBTd2I1M243QW1DcS9uUjNmOW9JZTVEMXM3VjBHc2lQOUo4ellyNnNLSkJ4c2NWKy9TbDZsaW93T1AzNzVZTzA2eVZjNnlnVHV1UUZJWE45YlJlRmVJTzVoRG5NNGh2SHFESXdWcFVXbEVrUmNjMFlOVGNodWNWMjA0Vk5KRkYxY0hKTy9PWWNXRjFVTE1EWFJ3L09Ba1FPdDR0VisyQzFOekhNRkVDd1hscHFnMnNMTjJ0d09La0wwTUJaanhFVDNMZVNNVi9UYW80M3I2aFkxR0tPYTBqMVJBeDZhU1pTeWtFeklQVFJSYnNZeXc3V3dXa0theFVMMFIvZWE2NEpTVGJDejBpVnBSMk9vZklyUmhIWXZBcGF4WWNEcjJlMmEyTHY1d0pMaUtza0Zsc1lDb0ljNFlRdDY3TUcrNTBhNnlTMmhHQWY3M2NnOEFycThuYmtJbzZHcWppcURkeFJnU0hmWVdyb3djZ21KeXJRSFM0TWl1MWE0b1RWT1lybGFKYXFsUkMwNFprYWFDdDJkeW56MWhIUHhQaWU4VzltRENOaTU4T3B1U1U3azRwU3FsVWFoV08vZWFzT2NBdWZJVXkzZTlHSi9ZV3RDamo0VTF0NFcwckZRNnFBbmhRMWxJM0N3M0l2bDVYN01RTVBBeHYxR0ZIU0ZLZjM3bDRSV1R5QVVNTG9hbVVWZXUwalFaZ3JJVmJEU0Z0M3ZjdEVhZGNYbHBoRGo0T3pOMGJ3N2s0ZmorVmdDV0JNMGFHN1VSWUdMdmtvbFExQ2R4ZzlBb1dHVkszU2RWT0pKcXNjZWVvNHFNL2o3bTdxNDBkcWYvWWFnZW43SEdpOUlTL042akRWdktKK2Vyd3BlWlhvNWszSjFJdkh6WVVjRURTMjZ2TUltQTBZZ056aFEwTG5Bb3pSc2pXN3JsYWdmb0RtbTM3eTdBOGhTSXBhckh2akhYdzdzYStKNUpKd2VMVk91R21MeW0xQVhQdkZsdk00VGM4SWlmdTBtWDZlelQzbUQwbDR5d3lhZzg0QmUxTGdqMVJld1JKNGtRM3kyWW9RaXg1cW90aGFzWlRNOTdMWU1ER3I5SFdRUUJsQXBaQUxYeTdSeXZKYkZHcEJCSlo2OW5rTHJyaWdtTkpZNUtRbnhSMU5GMHEvd00xa2dOaWZMS3NtTUhuTGJTK0pjb0xPTFdyck9xblZHT1RQNllDVENDWW1tenVuMUhGV01mendKUHA4djB3UG5TVzh6cldGeTlzeE9GbFl3czR4UERVZFFIay9xbW9kcStoT3d2V2ZMVC9NWEpVQ0ZFWHJjUWJEYUY2YTlXdVArNlI4THIyKzd5YVZ2TzduVDE2eXE0S280eFF6S3FjL0dBdnFsVm1pajBlaThaYnhWa0ZzK1RRdTFmNXdEZi9wNVlqOWUrTk8zRndHMzFSd0pHcVJiYU5yemlENGhDZXk3VVdjRWlVb2srUUNsT2pZaFo5VUlLQnFQYWF4Ukt0TDBWN0xyVGpzcU9XZWRWR0pGZmJkNVpSVkpmY3NkUFhwVFBYbWJCYjB0akxPckRFdE93c0VTbEthZjcwak1rNnZITENZUm56MUtBeERJU01mWXN1eUNFZGxpYnp6UFpTR1NjV2JENTFRcEp4UTZQL3RMbFFPR3BLZVZDUUZybHNBbGp2dWR4OHZBQ2VYMnh1dGZWT1NNV25ySHR5WHlCSHJYeDhIcXo5N1ZSejhWSVU4SGtmdU5mYjMzZWFkM05JSFJPa3BuWjdyZVdkKzVJdkdqR0lJb1FkM3loUlFILzZPQjA5MUpUSGc0QTllUUhCVmpXTVlOU0RzQmQ5dm1EY090SnZ1b0JVMUlLTkdIQ2ozdEFLanM2NGZnTFBWVEg2VTZ6d2FHeW01MlMrSlVsR2JMblVvOU43dStleDQ0K3FEWHFjUEJjUkFkN3Vka0tkK05FcFVVdWVsRW5TQ0k1dGVHTjd1eEY2MXRUSVl2dGZEUGRTQWZGYk9keUgzSU9PRTJyeUJLdU1ocmFXVWc5WXk4TmFSYjBUNE55MitXYUs0Q0Y0Vkp5bDJNYVdOcEc1WEdjanV0RlNsVzVtckxwbk80Z3NvU2hvNCt4RytPNEgwSWlaeWFBMi9OMVl5S2IycHNlU1g2TUpxK1ZQVDl3elpBTWpESXBJTE1oa2QyY0ozY0RmMnVjQUV1U0pBRldGTEtZOGd3QVFMVXRzYkFGRGZCUEdML1lqb1pGQUdaUGphUU10Zm9paTR1WTl5QS9CS1J5S3FjQzJJMkNKNGJDOGQ1NHV4UGZQL0dzY3pGaVg4cVByNHQ3Q0JhK2tQOEJuUmNSUEZhRjE2bm1JRlh4K3JSTENVWG9HMmJoeUlON0ZwYmxQRkpNYnExd1hOYmUxcEdMSWRReFY3NU04NkIzcmdURDgxOW5oT3JrK0o0TFNyMU1RYVdERmk1OWFyTXlOaGFzdVpUclpEaHJHNE15Vll6eVJaeTh5NWxRc3lmRTN0ZXVEYzZYc2V1Q2hoZnkwTnRrU3U5OHpuSlI5L1h0RER4SnJyc1BVaU50ZmNYbHZPRWE3d1VsZlUxTFRJVUd1NlJnb0s0TDZod29YT2VBMmpac1FJRmFkRlpldnR4dzQ5dkdYLzU4NEY2Qi9vcjJtb2piYlpFZi9pcElhSGg3YjJpNGJDT21hOTUwT2pyQ3psUGxjYXlRdVhIMzkyTVM3Mm1pQ0RsOTRYN3ErRXZ6MitVdE4zMkwrWDV1YU5WcllNTWJEZktpN0paV0lzZ2JtVEpFcENkOUVXOTlZOS9Qdkh6cnljKzlwM3g2Y0wxKzc0bHBMWGhPTUJEaktSOXViY2xkbVlBUWFGWUFYZVkxWWxOQVZTTWs5R2p2dXY3bnFZQURUczJadEZlMDFIN29NTE9NaFcxZXdJVDQrMHVuTzhiVXZaem9RNWdOdUE4VlhmcGJFVHVvU2ozMDJqMWlqRlpTb09HbkJiR3BlV3FnRk5lSk02YVRIVGdkVXowcWZ6R1BXR3JQUE45SmJSYUVPNk9HcTJNNkR4Um9KQnZpSFNrYzBjbTlGVGRwK0IxekNaNytqNnczZXZGVVRHV0g4U1JjMllaMHlJalZaTzNNQmZEU1hrVDB0a3h0YzZMenZBSmpTRjVhM0ZTeUFvYnJBd291dDUrSUdlRnM0K0Z0RWxRWWhKL1VJSTg1K2duM0FmTVVrcFNESjRYaXg3ZWJvcWJSNlVRYkhrQUdCUkVmV0kzRG5iZzlTSmIxYWF3MlcwZmFEK1FKY2tEQmJtNGU2cU5Ia1d1YUVuSzVRb0FzM0JkcFNSQ0xvTllOMUYrNWxTSlhxM1dIa0duUHUxM3ZvSUFvaktFdm8yKzRjaXAyRHBSVmJicXJtc1UyU09ISWkvRkZGWjFLc3JoMWVVQ0ZtM3huYVRIVEJTUW00bEJneHp4UWRVamQzays2Z0NJT093VTBaTlAzNk1VcFVnWEdLcFdlcWhENnpBdjVRK2RSYkFGS0RLTUtCMXZXRXZYT1FyMWFpa29HbysrZHVSRnI5S1BrZ3NCaU5GWE8wZ2JUdWNJMXpwMldOam9hdmZMbzh3cDhCMzN2QnR3T0tmbFlITmZBUnpVNzgvZThYcXhoL2Q1VUczQ0ZkbGtLUG1majlQeWtlY2hvcFNwam9YeWJMSmR6K2xqUjhNZjFmNTNZbE9lRnhiaXpRcnhBeE45VXVMT1lPRVBZMVFOaVBhalJMc0pMakpOSWxOUjQ5eFZPYkRzejJYRUZDR1UyQUdsS0N2ZWJwV3B2UUk4U2tHOUFWdXFxUEFvMTBSTHltV0RSNzUxMUVuZzJTSE9qckVTRWZ3REdIbXBoQmgyZkE2b2IwUUh6czYwUlVvc3QwcFMrbHpscWxMZzlUZnZFQ2U1dDFyMCtzVnlmSlZLc0pUSGpoYTZWUHA5VGNOYXpKcXRqdjMyeVBqaGpmd1A3ejh3SkU2UUp2Zm4yejBaUVU2NU5RTlNzMVBtaHRZUDVFY21yWFlXWjdzYXBOenVqTTdWdERIQ0JHZEs3c1J5UGI3aS9YWGllMDBHM0Z3RTBLcGJHakZBTlUybTZjcEVTNW9uQko1bEpLTCsvL3ovVStiZlQxNjNEckdjNjk3ZGNLUDMzRVY2MDBxeGNlN0c4cGx0TGZVb2VlR0RlbWs0WEtqVWdkZnBvcFFBT0I0ek9xek5SVDNhMmJpbmNtS21GSEFCa2liSittMHIzMVFjSlNtUFVNMHloamJxQW5oaTkyb0I1RUdTK3hNWjl5WS96WE5UZ3hjUjFqQ2l0em5JOHBPeXd1TzV5cHVsMS9DWHo0eS8rME5GYThYQ3FWdmlTTjdxSkNBQkdaOG53MnpVVnd3NURkOUVXN1pjWkdzYW1sM2xXS0tmTEVtSVpCa3g1NmM0N0laOU9rQms2ZzZYUlZxQzJkZ25mdExwc0o1Wm85R0JJcjhYV2RObU1OcHg1RGlScDFEVnhSNlRxbythZnN4clJvaVNaQWp6Z2JLZ01FMFZUL3NOeFZtTDNCa3dJY21OZHM0ZFRVMXpVbll4SEVZT3hvbGp5VHJISjQzSWMrRzVJZzkvQ3FEeGVpVXJXWHFoNDdiK2dxOWYzdkY4N2hpTGFPUXNvTTc3Vy9KOEx0TVlXMlBMVDJRaVVTYzlxRFdJWkcxNTRBUjVmMjh6bzZ5RWVrdkkwU21LWkREandKZTA0UWJXb2dlQ0hBWndxbm5EMTYvcVBwU0hVWUhXQVA4NVQzbnNLQjBCc0RsWmRsUUJsSnU3MGZMSWk1Z1BKOUpNckg5ZTBhdGNIZGFDbmxYby9CeFdZSEJreS9GY3RvYVdFb3g4emp3MDg5L2NISU1WQkI3TlNqWHdKMXZuN3lTbkUzWkdwcXpVQ2o4L3NvZmd4VTV0M2FRS2hoblNib3FFa1FncFltMStaRkFnWW1aS3pUSTlqU1RQWmptSmpLN3Y1SHRKYklGclFoQnRuWGJSaXg3QWVReXIyNTJuclFDQnp5UmJkaUt1UCtaSlExM05SUmpha2xIcyt1WU1HdUhpdVE4MCsyeWpPU1JjUmtHcFYwelBuRExrUkl2cFdicXlXT3A0VTdpMkUrMkhLYnJkc1NxT29YMDNsTnlKUThwZCsxWEc1bFlxODZWV2Jya1kwVlpiV1E0V1g2dTZ1TnBZcTVzN3c4VlYvQk45MEhoaVdUSG5NL1NSbEpzSXdvSUdXNGJQRmFlSndjaVNVcCtaU3BNS3paVGg2Wm1KcFNaVU5nZmduUEVwd2oxejdoQ1dUZjd3TmVIeGRzTjJiNVRMNThHb204bU1reEdhTTdpK3VWYUtlZDdIU2lqM1p2T1Z6d09UbG0xd1c3Vk5vTkdDdmc2dHA0bHpDZXQwQTc3MGhXZFpUR0hZZDJrVTM1T3FzYmFNTFRVZmtERGNSS3Y3bDU5UGZCdzlnbXFNVjl1ODNMWk93UytBYXorVEdXZkkvQzFrOGgxOGZ3RUxndzVLY0pSd2pkVmxsV0NIODc0c3EvVkFkL0Rpa2tjdWJOTlNuZnQwYkZTNk5OU2EydEFrQ3drWFBRY1pyQUJ2ZlFaNzEwZ1VZS0djSTVHL0ZYMlBGcTY0aDdzOXlqakhXTU9NaDdsWVkxNnlxdkwxOHk2SXBwMDA0ZHUzanMrNTRaRVRiam5Lc05xaldNaHJkaEFkalltOUwzUk05SU1Lb2Q0MjgrVHpCaHo4Y2FBRmVRR2xNVHZGYlFJRm4yYTFPSE1YQ1d2T3JvNWVoUUsrcVV2Uk9BYmlpQXdwUTNkZHNueWl1V0ZqREZaVm5tdkN0YXBraUptcUl6bFFwM3QrbHRaYnRjZWljalN4OWFtSGRSdWNneXdMdm9ETkxYS1JKOXNHRnEwRUt3ZHhMejBXTVJmTWN6RVBaRHFMVnhKaVlCSk1OY0JRNkVxN0NlN0h0aGt2ZkpjMDlQeC9UeE50RFJra29IQ0NVOGxyVXlIaGxnZnU3QVZBN3U0cVlkUlBVL1oxRUpKM3c4QW02enJsUmZWYzJjMkliRk13NFdFa05PRDd5NkRCRlgwTlZlSk0xRndwQ0RNRmNVbXFGSEJkbnpLeVIxNHVqRy9laFNwZFVneForUXQrZXFKTHlBdkFybjdrUW5LN2NwYWlUOFF6aUdnbEMxeXBEK1VyKzlpRWx4STZxY2tydkdXUCtoVDNEQTlGOGVWOXJ5VUdkSEdpNVV1Yk0zS25BNEdmUGFQV1BmbHJIdkxQa05RVG1weHZlcVZIZUxzcGdCNFpzTlRRY3orUWUxZjhTdEdkTHR4S1d0aU5PYkRqUXhWMy8rRWZuK2FkczJIaFJFT0FGVVpJSURNRXR3MTRaUGRRdXlKMmQ4NXhUWmQ1Qkd0NW1lMHc0NHVNYTMwTUlaWW5qdk13ajRtTVRnaDIvVUlicGRvQ3Bza3crM0ZSNUVXbGZVa01nVTNkelNxZEI5RXZXN2tXbnhlbE9CTlRGN1hHdUY0UFhmNFNJRkxLQXhnT3BwVGk3WVkzcVlteWFrYXpKYjlPR1RPU3pVVGVhNzdZVGF4MHVqU0hkTjVXMUtJM1Y5UVNIRUttYkYxak1FNlBLVTNUKzQ1ZnZnOVVkSHo3L3FLbmVTek1TV1AxYys5NHZ5ZU1vK0xBUURiRGZxT090ekErY1I1QVZESHN4OEt2Zi9rejNoN2NMOCtuSWhJNytlbmY2d3V6Wll4RUJINGZiTGxjYWphdlBHL0pXT251MVJ5d2FNc0xjSWROY041Qk9iT3hRQUliV0tiNzVVdkNlbTA0K21SVnhlNUN0TkJ3S0pYR2Y1bjRBdUR6TExaN2l3ejd0M2ZncThiMDA2b3FTQTJ3QzFKU0NwMmpuaUYrZDJJYWpMbldTNmNsWTZxRlMzSWs1WXZYdE1ISkpqcjBML1JGaEhlWlErVVhFWUU3dmMzalhFNks0dDQ3eHNqTVU4RVBBcjVPeVpCaExHZVRRcVlPMjhpbFFJeExUWDRPTGRZMEp2N052enZ3RC8vcmlpMXZhTHJERXhOdFpiTWdaeDFHUm5Ldm5ORFhSbkJhYlFXdHNkNFozNmVkTTFBOU1HV2RsY2RJcVVpQmVoVURoWVNOYmVVbXBCeVJnbDFzRlZzMmRqU2FsYXJQanlJQTlFS2xRbHN1OGJvcW9pcHlsYzNjZlJkS0dMdlN2UEUzdDlad3F3c1hjMXZDY3kwcExtRWhHZ1QzVnJPZDBtQ0NUaVk4YzVyOVJFK0xZZUVsMUNvS1hzZkNaMC9TUVVYcllPS1lVb2JKcVJhQlh6OC9MRHhlalhDaFlEa1h0WVNlc0RaNHJZbGluanF3UFNyVlFwOVdlbGRkSlE2b1RwM3BvSnRDcUZzRlhsckJiUTI4SmRJZjBoaXlPQXJwaFI4MzNINUlLT1dMUlhKU2RvZWNHN0Rtd3JRU0ZJSlBTVzRkb2pSbmpURExWamR2ZmJvSEMzbTRBZ1g1L01MNTJkT3lOWjg4OUNZY1FHUVpRb2ptckRrc0JBNmxSUUlZS2M3Z1NraitIV2NhVThndHFMRHBjYTlUUnBKZldlUTRTNjRZVXNCeklpb3VFQVpySUlZVmtaUFpvdEpLdWJCUjh4enJPOWsrcmtUQWloSzE4M3VRZ25ERXA5SnRyK09KMllPbi9SeE1mRjlwUnhlN3NlMGR6LzUwZ0RKUWdEWXlTbjZZQXY3QVloOXprT3E3Rm5zMHIrN0xZa1RsdVRlTUdjMW5jTEdmVDRiTWxVS1k1V1p6T01UcnJ2SGh2dTA3WmRlWU9KVjZXbEMxV0hZR3pXRHpjMVI3SHllYW80UktRVTJETFRhRldzN2hOZU9PTFB4SVJqVWpNUUU0NktXdEE4Q21qblhXYlN2U2wzQWRYTENLeTRWS2RIYlJXbnkra01hZ29Tb1BPOXVhOEhKS09sZEhuc2dET0RXYjk3eU10UXhudG1zK3dKTGNqTk9CcnJpT2FnVEFIb1VHVnEwTmo4ZnZNUGQveG5iZjhQdzg1T2hRa0g3NXNlSitKMDRMSTJHMk1KVTVUYnZ2bm5oOWNoMi9YbUEwR1FGd05xVzV2WmtpUGJwemxremNVMGJkYUVBOWJxUVN4dW9DelRHVk14Y0pqYm83QXVnbWd3N3p6Wmsrb01GVmNkNVBpNDhlMzRQcG9PU0tsS2JwSG5nS1pKdDRzL05tbktQaGh3YzVmUklFOEVzd2pNblBaYUI4QUIrejRMRU5IR1Zodld4SEVjL0ZuOUNjUjZsanpZRi9qMzdCQ25PRjhxV05YVTlnYmdPek8rb04yRWxWRjU0ZElNVWVPZitWVTB4dWt6VHBiTTQvbkFkZG9jN2NnYU9TS0taNitOMGtrTGoxejRsZmZ6M3g3V1BoOXZWQThRWVB3NXMrSkZQMHFjSVB2SHZIdGVLeWF0bEE3a2ZDUG1vVTVUYzRJNGlNR2NqeUxOZ1BpQUlIaU81VXpHc2t2VmhvL3ZJK01EQ01nYTVFd3hXaGVqVldNcUF5dTdDSmFuYXBoSWpabjhRY2xNSmwzcTM0ZnFkRWkvMGlJWnRXR0FwOENUdXhGL2I2Nk1NYjY2QnRVN243eVdZQkMzanFIczhkMk5GeG5FbkJpV1JSbWFJOHJ1ZU1TNWJoWnQ0TE04RzVaVjU1amx3c1ZpaTlyWGxhUitaT0IvbzR6SHRveGhkZDBCb1hka3NWNytqWWlNdTE4ZjBpTU1ZOUZkd3pKelU1WFNZUi9pWU1mLytsSWQwNVJzRVBJSmFuMnNLelRmSUtKNkxjUzQwYWZCeVRFTFZPdExDR2tOQzdJK1VYVXBQQmFTRnB6cE1JYW9Lc0pRdlBzQnlBR1IzL29pMnJJMzFIZVBNTE9pSlVQU0thSXdEbnRaUnRKUlpZZVFYSEVFWUVPUlNhTXdQYTBGVTRNd2lXdDJvY2ZqSmVuK3JXWTcxTFZreVZZOEU3bE5YSk1yUzhMdlh5TThMT0NqT0tid0k4V3FrcWZacjZDbzJJejljME1PVEhIeWZLbWhhOWVTMm9lWlJOQW9xTXpLclMxYTFWYkxlS2pJYVQwOHMxbEYwWUZoclFnN3o2ME53dktHdys2UUd0Y1dDT0RjL3p3UE9ZWGtmdkhWbHhzajBjNmxwSVc2YTNyYWdPb055NWxQcVdieXpobFlKcmxXVldMU1VEUnIvZGdQZTNZaUM1Sm9DdTZKdVZhc3Y0ZU5ydVpSckNrVGtsbVN5ZExuOW5FTW4wSkk4NUQ4eWpzNVlmUEVpank3MC9lbmk5aXJlS0o2QndIVWhzN3pKc2U4NjRINUxKb2lPdFZRclUrWnJXOUg0VTFndjhsMThiM3Q0T3JQblBkayt2U1VEcDI2TmJIL1gzSDdNcDh4cjRiVjl0eUtLZmZmL3BqdjNienJuUnJHNGJVMU54VUxHM1d3SjJSai9LZlVPYjNQVTE4eDVyU1hnOHBKWWFNS2ZhdWV5Umg0Q25QQnE1T0xZSi9IRGpXKytQZ3VRVkw2ZWRBSDlKRlh2dE9IdHlraHZrNnJHamlIbmxMWUJ5VFdDNWVodndhWGhiQzk5Ynd1MXo0YysvUUhQaUNGRGdXakliK3FUT0dlQ2FKSlI1Y1ArNkIwc2xjS3hNaUY1amZmY1FHZjhhK21nZEpzd1gyeU9hb3FnbktVNDNvU1NkSS9UMGk4TGljOC9sWnlxUVFvWWFtYi9CcWxERTVQVHRsNEcvK1pKd1dMaVpsdlE0aFhSbHZwYjNzOUhISjZva1BCa1lwV3ZIZldVY0RPR3BVMXdDbktLMWdON2lDazd2a3YwNStiRWozS3Fod3VCaWNWbTRCSG1hcDFxcElxSWhVaVpKM2w1ZVFIZUpJUVc4NWxRNEwrRzlWZFI3UmZVRW9UYUw2c2ZkOW5jZ1V1U0NWRkozenBNQzd0a3h6bVhLVjZ6SzJGL3E3ZHduUGsvbTVYYmJKODZ4U21XWXQ0SmJNV2x2aXZqWVJaUEwrV0ZmNTlNTnhHbWVmeG9FdVdGVnBvbmZOZ29yRU5HOXJRM2JkcUphdnFuaVN3SzIyNExwL2xvQm5BUkxvbHI0cWEyRUw2MUVUZlNhYnRTWU1mZit1eTlJaFlhQk9xR0tmck9obHJzMWk0QkZKRHByZTRPMUowb3dKVVRHYWlKNGNDSEp0VEVQOTVaSk5ld3BwekFLQURqeWR5V2Zqd2dDcEVnQUlrZkhOVnNIWU5ndlpaVUlIb1B0ZXdVU2RjMDZWM2J0cmQ4c1NOa1JsQ1BDM0tWaVpTcTZYRXRnVUxPbncxYXNYNEhkb2d5VG9ielZUOVFBKyttWlVHcExBTXNEVWMvZnA0U1cxbU9maUNPaDJwdURoc3RLR0RKNEpKbUlMRC9wVmRVTk9KOE1UZTdmYklDSkJqZGpvQkFzZVFDdnN5TmxEMk5IbC9yaTZTMmo0ZXphZ3dNVlZVMmVGTS9QSXlnd1RSRUxaRFlQN2wwS1RRbDRKNWtSVmF0QzBDV0ZNb0tJVW5UbjZtNEkvTEFsM0c5V2wySW83eTlieFFOQWJtS2NoQytQRVlaN1RmajhUaTc1WXhXbUtrOXZIcE53dUJKWHVId2lLU29nUUNHNm1QbWdxQ2svRHdUM1BTYmlXSm8zUnU3azFDblNpRW9xV3pGaFZtTmVvOXhhWlpxaVROSGlUVEo1NEhBbXRmcncxQXZ1dDRJZnZsVDgvWlp3Vi9PMUoyRE9CRmpDRlQzakpOL2V2aVo4Zmd2akYybERMY3R5N1g2NEEvZjFoNFJ5cjlpZm5heUxpK1BsNnFBSnhGSnpRd2VFc3dEbWkzdTJaajloUlgxajRXVGRpTHY2OHFqWXFodEF6UGUvdFEwVEc2RG9TaDhkNjRVclU3Nmg4UVgyUUVaT2c5YzFNMVpoaFBKNEIzNDhFOTVXTXBiVTE1SHdIekR3ZW5XN3ovWFNVaTBKeXcxV3JrMHFGSFh4a1VEU2MvamlUa0kvQTJkS2dCTHl3L21SWmRWdFhTSGtzbnhRWXdFWml0bkx3T1ZCdXRXL3RCQzlGR2dsQ2RHazE1ZTQwanRlTnJZYmpuUGhILzhNUXlUK2RCOTR2bDU0ZlhEazd2ZUdZZFNlZC95d3VRZE1EN25reHZEVVlXYUFENmhRd05VODZqRUhpVk0wSGc1MGcxblNwRG5sT0YzUnZ5bVQ2ckNsaVo2bk9sTEppOUNSU2c3aWpWeUVQd2hCV1ZmQ3k0QnNnNElVUE9hNXJOdElJc0FzQUV5S25jWUdXa2lPVi9KOE1zUlVsVFlKKzhhZG8zNjc1NmVZdC9wUUpVRTJzb1JqSVJqUzFObXVNc2lpN2t1YlBVZlJZbEk5Wnk2TDBZYk9lbkZVVWVtSzZxbVBoRnV1cUhrQWt5R25POWpEZUJNR3JlQkVRMFZlTzlMcUpraHU4bXIvSUVNRVVoSjllTGN6QXNZZXdoQjZMbjJZSWJhcHh2K0ZyS3NwemhTSGdYREloMXNCSWdWNnNZU3kzeVNiWE9xVlM3a1pkYVRTTjN3a3VMSTBySG5RTUpvelhGemVxV09La1VxMDdkVHBBNGlaK09pcDZnajBwd2lwSWpGL202cWFpVGg0MG50dEIzSWhCOStEcGpZeHQxdVRHOXlxRlY4S0hUTzgzSE5DV1V2WDdJazRiMHdFSHg4Q3BPWkVPZ1FxOUpBN1UyZjJXNER1TmJQNUNMZ2RVTjRyK3VKdjEzT2duQjM5Ry90TlRJamExWHRPcTNaakpvSUs3emVXRDdacVJDNlJ3bGtKaCtwNU5YQWFGNCtXTFVjYVJ6UnhadkZsa0lMNlBKNTJENVpYVHhuZDVSV216d0xLbUVCNDFrakVlQkNCYlJpUmhDOXZpVTJGV29vT2hyU0VITVFYZUNUdDN0MHFmQWJPUHUxdkRGMkh1bklkSzZuejY1S0I1c2ExUnRraG95dDZvWHZLRko1bUNOWkFkVSs3WXFLd0tDMEorRHZKQTYvVTA3VHl2WVQ3eGpVYi9QOUFRY2pKYmlqOGhOZitSSllNVzM5VDhRTzRIM1NJTE1zVmRzWFJOMnlWUU9lRzA4clVmdmhwb1cyTTlIbjkvSERRc2lwUmJ2ZW1hd1JLZVhkMlVqdy9QNkVkZzZyTlc2ek5yN2VpU05iaWRZMklLSjBZYU5oUTYwTGRFbHJ0QW9BNlNRNjk3dC8vN1lZdHF4cG9MZUJWMGJmVFhXa05pbGhaNXdiNGZrQTNBTzhRVUdJYnlhak5WNXQ0eU5ENEYxOEwvaWx0eU1jeXhsTThQZklZSG5zMXhUeklIdWFSdTZ4V2dGNDg1bjI3eVZFaUJSd0J3QUFRQUxqSnYvZFFZOWJ6a3JNK3ExcFQ4QmhFelFzdDZ0TXBlc3NvcGRlRlZaRm9BSC82ODlOVzgzc0ZqbDhKNHZsdThYOWV4ei84UThYZi9LaG1Gbm5oWHRXL1Y3V1Vad0s2bktRdE5TeGtkbkhxMFh4eXlsTkhabm5MSUFSRXl0TUY4THJ3VVRmMWtpNVRPVEtRbmF0TW1mZzlrdkxldnp3T0ovb25DcEk1TGc3djNjS0gxeU81Z1RDalAvbEF0R0VkS1p1UWJ1Z29FS2pxcFBnNFRwNXRIQVJ0SFgzZ3RUTnN0MCtJckVNL3JxT1BNM0tiTGNxMDBoQ0lNaWZWUUd2T1pQVFZ3WERjL1ViR3R0UWFhZ2swVVZvTGhUT0FwTVkxclF6a1BGRFNJRzF3V1hoN1MzaXZ6UlRZT3J1RXoyQ0VGd3NOQ3dZdEtEdGFlVU9mWEkrMzdZRjhlN09OV1BJRHFiZ1hHNFhnc2lUNWN1Ry9TWGtMQ1haN1IyWko4TVRYamJYcWlkb2dvbDA1ZWRyS09SNU02UVRUd2hha014aHVFMEpEcXJMR3JyMm5wSlQyaHhxczhGcDBMcXprcVBJb3U1cE84Um5lS2k1bG91UVV5QWtCeEN1SytDeld4ZmJwdTFUZkc2NjZvd0M4bnhJb2MxZEZ3RUR4b1BrWmE0YjNweDJ0cUpwN3dtdXh1Y3IrV3NBb2R1MVFaelRnZERtSVdvdjNxQkNiWlVMTnJJcUkxTVMwbkhnZkRXZGEyTU5wRU5VbkFnQTRKL1krV0hlc2xKbldjWkRMRkdDN1BmQmFYR3RZcDYzcGpvbzhDZEI4S3dyZnFYbEtkY1ZZa2duNCs1Yk5BLzM2QUVEUCs1THpGbG1lc1N1bWxneEpqM1JpbkRCazlacGtmZXpId0poRlFUeVYyVTdnU0tjcGhraTNTWDVNcDJ4Sk9MeFY3NHFvSGtHZ0t2bHoybHFDRm9VejhYSkxCRlcxUjRXNmxhQ3lpckV1dk9heU5OamUyUUNyRlBYdWoyQUFVM2ZxODlsc3JkUnJXQ0FPSEFUdUMrQkh4L1AyYUtiSTN3endkTkliQUVpeWN3NUZFU0o5QmtCby9jS2NPRTQ4M3QrQUo0bG0yUDc3NUwwbVdKbnl0dUs3VHFOOW1pcFFMWG15RzBhVXh6cVBDN0FKcVB4K1cwaHIwakZZalliUVNqTGZiWUhnT1QxbEdZNXJXVFFURDZuRG1TbkRYaUFWOE4vY2daK25MUDdId0IzWkRMeXBLR0FOUlNMTHlza0VrTU1EZFlVYmlYaFByUVd2KzIrNmFUbTlLdlBFSTlZdXBzQWpXQU1IVlkvNmdCTXRtZFBWUWh6aW5jNkREUjNtUFJ2OHYyS2czem5wSHp1dzk0clhaN2NOOCsxVkFIekQrOTkrUmI1RmhDR3BUamZmQ3VvZUNVRmJtM05nWk5OeXVnY29YRTZLekZvSS9xdU4zeG1kSHBZWTVORTBtck1FbUFrVjZFL1MvZzF3aFQ1M0FZMlFMK3hSY3c3c0xHZTMxN0tYR0cwTUE2ZVVCWHFJdnVyMXF1QzlqanJhZDJwREhtYnBzUE1QVXlLc014NmpHNVBTL2lJbzBmUHFDRTdVK0xlVVFHdEZCa2NReGxLNUIxV2xIVUxLMTFxdlBaWW5QU0ZUUCt1a3B5VmI3YTBBdDFicGFkOHFTbjJhd0g1N0pQeFlzK1ZGVzA3b2R6WUNPbjU1V1RSa2tLbEwvc2V1dXVjdlJpcVRMZFN1bnMwNWxCcmdubDZFNVgxZFozVlVXN1BJajc0YTJVQUhicW96UWtSSmRGS05TZ0RTNGtoZWlxWVRDcEdjSmdLQVY2bk1qd01ZN21OVlhuSUpZYU5IdFJMZXBLZUwvT0FEdVU2elJZSXduZ3lIaERxemVaSmMvQkNzdzhsaHdsT3N6T01HZ1pSQWc4bTl2S1QxYkF0MnFoZEF4RDRSWkN6QXpMb2ZUM0dSNmFvS29qRHZiSlg2K1ZvbXFCYWVlQ0dxRGRvTlZoTFUwUkVrcEVBVENGRGlpcDRzT25xcENqOExGT2xqVnRtWWFDYS9GbUlsVnFabHRRdVg4MXdENTBHRGQ0MFQzWkUwb2wrNVIycVVzcXRROWxWMWw3eXJZaWFyTFhCU3ZobDVSVVBCdVdDVVVCTHcxSkQ4RlphQnhqWWNLSllxcTNLcXBnSnVkL01YeUZOd3BPVU9FY1pFdUhHbEEwTUszSlRiNUJPbENIdWtmT1FkS01Ya1hyMWVyMjRQRmRWTGw0VVhDclkrOEZrVEhwa2gveTlUTmZHRHV5eUFiZE5JeXpwMjdNOER2OTZCbHFnTTd4bjR3OThCMis5YzJTZjh4NDkyTFRubEhWTlhDV3k1R25jRFYyNGNzOURnVHRuMUZkY0V2ZnZDUDBaMUpmOGJEUWlFZnBvanV1dXpkNFlRa3M2UXVoYnlSaWV1YytVRktaVU0xTU9iWFVFcFQrbTVjSDg1a3kwdnA4UEZUdzhBT3czd1JSL05VNjRYZlVCaHppUDBESzFuKzZPeHB6OG55SENrVE9CSzRpUGlFTzdlTTFuT3lONU5lZEVMR1YxbGNFQWVpNG9pYTBFbWhNQnhzMkVNN09QRTV3N2NrZ3VZakhOZjJJK0JZOGlUK1h6aS8vRmZiZmp4ZHp1Mm1ZRjFNMFhSQVVmelk5MHFNTlNJUXdDUHpheWpEUlBzOUJUNmRzTitFTWd5SlIxcVBURDc0a1MxVXlHemhxUm1EWWU4Z2EwZnhoNjBxZmI3MEthV0JPSnZUWkJ6ZWdhYm5Nd3FDNWRqNjJhWkg4ZTBrQ0lnYXU0VjVUY3RBOGRJU0E2TUcyNVo3Q3hWeXJBdzVnazJVaG1xc3oxMk1DdzVwM0x0d0VwRENhUUEzSlVzTWM4OGNyUm9YQkpPQ292T2ZFVzhaclUycWsxNUtvYUdMQkZVRXZDV0Vtb3B1S3Rzc1pTSjJ6YXczYklSYjd5VnpNMStid1ljUW9ib1pZQjJaancvYnBnNHJiZjA3VWNUNzJaRWZubHZ1T1VIU21Pa2dvMUppanpJRWdhTGpxN1lVRUlPbGNiM280UXRDd1Jud1FhaWxBdml3SUR6TWtRUnF3N0tSbmszZWx0d1VKWGdzTHd4clc2a1JqZ1djcTdoNVJ2WHN3UGhsUDkxQTF0eEl1V3dmSHBZS1FCbitkSjlkSDNlUHRjQkVkaEVCanVRTmxoazErSlNuZ0pIS2JVek9zYlpGZXAxL0VBQjRvR01jZ2FPbXF3VWNMNTZwNXZ0cXVhQWZjN1crbmx3NUc4VmVLYUNMOXZDL21yc2NMVVFaWHBpNXBBa2l1azhFWFRXUGFxdHAwOUM1aUNlMEtCQUpDbDY5TVlhSjVMNlE0QVZGalZUVVdQSWNLMCszTWlaOXQxN1huaXJDd0JEekxXU0VUSnZHZmNiSitXWUpJYTUrcVJldFJDQ1hJY1VDOWZrNXVOOFNPL3pMc0hrcVhwZERQWjM2TFBnZFQrQndmdHBaMFhQSklZcUF0bWhUZ3cxQU5sV0ZpNUVYZlZvQVdyT2dwNjFhNzNWbEdQTU83RkNPQ2RtbXJpVmdWOEF3N3BNZ2RTRTVGWmR0dk9YWk9CRkxvZWpBTi9SOGFmLzF3VCtxKy9teUh6OStyZjQzUThWN2Q1d1M4bCsrekV5OWpPcGJlMTBsZ1h0QzlKQmJ6ZnU1VkFpTjVZWld1YzloeEpIaFVZdVhsVkFoZDdzdFZqTHhMbzNRVGluRzRWQlhReUYvOVc1TWRlQ1RFRnFZNXluRDJ3bUFGcnB3MjFBamhXN25ZNHpzeW5OeWpoRUNUd0JleTFYT1pkR2RaNVF5aktkVkZhNEQ5V3BMeE9mR0UxaHNicTU2Q3pGajNDQTlIbm13dDByUTRTT3N6OHlMQ01BQnEyVjhFeTRBNDQxZzEzSUp5VXNHSThROE05N0EyTnlzeDNBZDB3Y2UwSlIyZDB4aW9CQ0E4Zmtvdi9seVBqN2U4T0JEWVVuaVE2anBJL2xCSWhPOW5qUlJEaGRNRmZPYU1razV6OW53ZmVQTHJDYTNaMU5YaW5GMHdVK2xzaU5OWVgzTjNCelBUTm1tZmlTZ2UrdmdkVVRwc3FPenNHYTl6bmNIOHpod0MzZ2VCa0tra1BmQzdqVzlDWWNYSmdjR0FQTXdEVFc0cncwQ29aT3NzUHZKMHM5ZHRFVERyanBIUXBIaWxuVHd4ZkhjU3BxQUI0K3BCa0lieWQ1K1JXMlV1M045dGhRajRFeVhuN2RLT0QxdlZmbVlzdHdsT1hFMitPMDByU3Z0MnExb2hGRjB3Mk9pWEpmcUNPYnhmL0RqeG0zcmFLOUFYbDdNMEJkZVRUTHVaWHMxRkpSN3FleXZlZ0ZMcVU5TDMwem9vUXNscWtMa0tMWHd2dEE4VEg1cXhVODF4WWdFc2NLWTlKNzFieGRqMlRZam1KZWVuUThFdk5jSkZ0V0JmMnVsNlZCa3VacnBoTVpGVkFwVGw0cFFQc2lhQmJUTkFGNk04dDd6MWJtQnpUMC9NbnJQRHVRZEI2QlM3TjVLcUY4QnJLbFJGTHZsNEdJbW5xUlpHQXBpYzhwNzN0WDVVQkJSY0ZaZ2NmdGp0ZjVBZnhLZVhNT09nUEhQckE4cktpcmp4U2Q5NzNMTXBnUzAybXNySWpJUkJqT2pNUXB0SHBDWG43aEk2eDdjTUo5YXB4VGRBd3MrdFVmelJNdlpIeTc4N1UreUFIUnV4RGpYVXZEeC8vcWJBS2Vab2o2ZmFSYjdFZXp2WXErZFp2WUZvMXM2bE12dDMyN0dBcmZGdE5UdlovWW02MDdwa2pLd01kSXVFMXlUSHljQzZkK1hSWWtHMXdWWVlPbUdhZUIxWTQ2QkZKUHp3bjN3M2NyYlUwb0t2KzZKUUhuN0Z6ZWRrQ0dKaXdDd2I0ZEtxeWUyZ1RyWStIblgvNEQvcDJJWnY3bDM3OEI2U3QrOXdQdzQrL0kzMzdia3ZCVnlrZnJONVlLSzJ0aVJDTmxwYnJNODA0b2p3VThuNHdVSnhxYTlLbzdrRHBHdWdsZkE4bGFZZW9IcUxSVndSQjlIWVJmQUtQUkdVckJET2R3NzVpSmVrU3RjNlVyUUVVK1BUcENZNzJZVWJRd2JnM2xuTmpHeEZIa2p5eXdGWG1OMlJpbUo4MHhpdTVtOFh6eFlyMW5NYUlHMWkyTHBaSXJLSFNjSFNBVUNFbWtKUEpNS3ltamQrdW84Yk5uZEZQbTBhcDFqSUVqRlpSQ0tzK2x4WXJ3SEdJcExaaENQSklHWE41NnA2RGxoajRHMWdHY3Q0V2tybTFwUkZnck5ZN0pyY2JaWnpWSXJycDdVVFRVdG5tVmgxbFFQM3k1bVpmeXVaOVlScVhaQWlrTk9CSWFVWi9HL1RveWNDaDYvWDR2bHFmKzl0SGxBUklSemU4TEplcmdIMFhtc1FmU0t3MVNNMmFGamtSR2lpTnFoVEhQSFhNdFE2M1BQREZtc256aGMxOTRkWHBQcnpFeEVNcDhRb3dYcnBpbE9MSnl0cmVTa0p2ditVdXBLVzQzZWVKNXN6Vnl6TU84b0dOMEl5YnAreE1RbmVzN0tsR29Dck1WRkJIbEFMZmJ3dTkvU0hoTEJWL3ZscWNtQzFMaCswSjFJVFY2Q0swYUt0ejQ0ZC8va0hIYkdyNzg3b0czTDE5QXFMeVNXOG1aOWVncExUQzB4aHRGZUgvVEhkM3NDMCtmVXdvcUxaVnUwdFBYWjhSMzdYWFZ3ZllHK0o5YmlERHBIRFZqbkc5R3BZUkNxUk5wdkVRem13eDNrQXBidWE1eGNIbko2aDk5c2VlM09LWUFKNytaZ2U4UXVEUFNDZnh1QURJUHNvVXIzYlBjZzU0eXNIeUFTdVpyZzVHWU5lbkZCUng0bVBCR3lsUUdYY05UM05ZcExBOWFla01oOHI1UGk3SnhtTlNiL1pMc29LSnZscHJPZUxzWGZIN3UrcnhFcWlvNlRpbitqbUhlNGtSMWJLL0QxNnhWY3F2MEVubXZaTXJiRi9mUVRFdU9uSmMwTXIyVlduUGtBc3VvNUJVWENlYTNsb0FVcUhjR3k5aGxTOCt3OW1YZlFUTlNMTkk3dHp0dzI2T3UrQXkwdkxFbVp1QzlMbno1c2ZIemFhRFAzYXBUbnAvQVB6K0xvb2JTUU5Mb2Q4Q29kR2VES2ZVeEFuRDV4Y2FKemtzZUorYWVjQ2ppY0o3c3Z6SEQ4RkNOdlo1RFIrWWE3OFpUb1BlWEloUklHT2c0Qy9QQWZiR0twVmJaTDFocUpFVmx4TFhIUnlwSWdnWW5jd0g0ci8rYkR5UTg4Zjl1WURwbUVZUjhMMEM3VmZ5cmYvRWovdllmaWhqMUJxTkNlYUNzRFRudHl1Rm5UREdxcjg2VXdMMGNjb0lvK2dqMDZ4alBpcElLeW5zNFRvaFlzM29QVUdZT29pUXBYelJvc2dTbEYyb1k0bTRwT0U1c0REZk9uY0pibGcvd2FCM2pod3pzQ1YrK0hmaTFLYWM3Z2ZzQ1VBbVM5TExReW91UzRFWjR4ZkhQZUs4a2diQlNDaEVsaTlnemhkbmxWbEk0YklWUHN0eWltMUUzZDIwWHlvbmJaOEtkblp4MDBFSzhSa2dIQnFvQUY3TDRyUnpPM1NubWt2NVAvL2NuL25mL0MrS2V0eUhONUJ2N1dPZzV3Q0dYKzAwTXd4UkUzMjRESi9VZEt6WEs0ZHpjT2NPU0lSRk9MaC9QZGVMOGxQVnJ1aVh6dS9CbU5WTVVvQU14QVVWanROQU1vQlhqUFE2Z2JVSWE1MHJnSXNjbTB0eXJFR3V3Z00vT0VxU3pMN3lRakJYdU5SYWVxcVB0U0Q0L1lxMkxJVVpZY2VwQ041R0xoNEFGL0ZrRXZ0eGJSUzFON1FhSnVMNC9Ocnpsd2swQ1QxOGNHSHNucHNOVUtyMmYzQVlGbUF5Q1cwbE1VVGNTMFZRWmhyazVOMzJNWWJvREdRM3QxckRkTnR4Ly80WjJ2MVBUczQ2Smo1eCtyVzNoS2xRK0YwWXJVeXA2VlQvVWdvUWw0NUlQSHM0dkVPbGtlZjB5ZUZ6d2NEOG9kRmVwWFhKQVNzUDlkd01pTTdRRHY5WUdsQzFFU3BvWXlWbkl6bWlJUW1TQ0c5NEF2SlZ2eGN6T1NpWXYwUlBPeXQvRHMzRnV4SldFQ1VjOUY4elJOUzRGdVNuWWV6Yk00c25ySHJwM1NpWlVwU1N5T0NoelJqNlpHNmFQSHRaNjIrZzlGb2dzYW1ZTWNiOWpPRmM0RlExbTVJSVhWaGdpdGxiSit0ZVh3MXZCVG91eXAxTG5Pank2akxRWm1QZmRRdjlSR2FKS0VuVytJN0ZVaFhBZXFhTUJxdTRJY1dhWjJESXhCOGM0OHJ3MFhNdU5MSk52ZHdJajd3MUk5enNicXB6RHpubDdXOWcvRjk3ZlhNRXN0Y0psSklCVkhnV2pMankrVFB3dFh2amowNFZBSEpwSUpZSTNJQjJhb0hCQXNtaXMxeU1SWjlPQnBIRzY2b05yMmFLZnA4K0JpTlVHMkNTclozcy9ZVHpxWHpMNTB4L3dUcE5rc3N3UW9jMEl3M2FwRXVKcVBnVHhWRndFVXcvbDZQampQLzBGbjU4WlAzNzVpdjczRzk3dU1NekZOZy9EbUF4KzI4TDdtbGljeCtHdEZ6MUNZTS8vOHZNT1AvNzF2L283aTdxVUN6bWFLai9HbERQcWtlWmk1K3Z5b3ROcXhBL202ZXZUZE9peVZKTUJXTG04Vnc3V3Z5MWg3UUFLWlhncGkzandMeGxmT3REM2hkZElXS2NJY1dwRlA1Y3hLRlpjaFprbVR5eGdLK3lJbEVVYTRKdDlSUXRNWjY4SzZOTVZUZys0UHBSYUh3enplcnZVQldoQ0o2MzZVWEFxcDFWVGNLMTdhWHFMV25rSmp5UmxvZGFCQXhyY2lWKytIL2ozZjByNDRmY1ZQOTBTc3BRdUVrRkJWWFUzS1RYTGlaUzU1SUY2QW4zSW9ydUdVZWM2ektxZlBVbzZBR2RaZ2txa0JvNDl1bGQzVTRyTTNjMXhJT2ZOY2lNSnZLN2FISjBNVEpVR0trWVpLR0hSL3FFcXpIaUpqRWc0blZ6a3I1TVZETSt4U0YwNUpqNDY4RHFuelRWN0VJZUNXeXZveWFJMWJPS1lGNkJZdUdyRDFrekltQUJlSnltRDY4YVNPZ0pHR05aQ0NtQmR2alV5dVhrZWpaTWVpZWRUdk5DNmtTL2xnYTJTOVd3THJSZWIyNTF1Z1FUdjJ3MWZmdjhWOWNlS1prQzR1NWVzbUNjdjcxeHhQMTViS3BrZ3BXQkpDL1R1NHVlSVRIZG0wNkZmTHpSY1o0VkRDcnJZRU9jYUZFcDlvdHA3d3oxeHBLaXBwU0h4RytaclhKcXp0TUpQaUhPZDkySTV1Q1o2aWgzZGpNT212dWxkSVdZQnBrUjZreUdQVTNNOUZlcFVNdG9YVGpUZnpESTZML21DcERheUV5Z3pvaEUzMlFQbmFVK29XS2VNczVqaDhHaTBqNDAvL2xTdE5GUUdPN2lITDRDRXB6MHU3em5kWjNSUVJOYzZyUW81U21DYTVjeTVQenB3Q2l1eVVrZFM4QXhZZ2xPdzFPN1FlQzNicEZLQzFtSTVpOTJORk1QLzBqVmREaEl0RkY5ZTVMOVBhVEQ1dG1YMFVaRVZrWm16V0c3M0MxNm90MnpLK292aGRyeFR5TVBPOWJ0SzArcjdZK0M5Z2pNOVQ4ZlV4RkVtc3ZWcFQ4amJobll1NEtaVVo1ZkpLKzV2ejVIbGViTnFoTEoxUEhiZ3pFSzZpd255eEVRZEV6Tlh6RW8wLzVtZElrQm83aEdLUG1icmluY1NnU1FBbG44Um9nd1llZk9Xc0sySlpjdVdZRjlkeGdVVGdWUmREdk1CbHlNd0hwUDl4ZmNCUEdiRzZ4ejQ5czh2SEZ1MkxteXpVc21PODBUUEZmM2tsYjJNcFk3UEh3M3dQTzN6eWI0SlhVRFF6Ly9pMytHeFZmejB1dzIvKzhOUEFqOHZ2UGF1Yit2UWpyNVhvTVF3Y1UzUEhLeWtQUktsdmROUUhkS2pjK3BNdDRRS0E1R3dOMGVqSEtodG1DeTZyWVRQRi9CNUZIYS9zeXFpaE1xVEVMV1hFQk1WLzZJTDRublJxQzJQRVE2dFFxSDRtNllyc3RpbUptZDY3c0RDSXVIUml0U0RZWmh3WUFJVkN5cno0cWphTlJuNmQ4UW5YVTRNV1o0T0dQcS8vRGM3M3Y4OThELys3M3pCMWpxK3ZJUEkrcFF3YTBaSHhxT2VHTmd3YzlUR1ppUUp2a0VpL05kUW11QXdVdnh4a3ZyeFVINnUxWVR6b0VkL3JvNCs1ZmhPaWg0Zm00YUpNeGZra2d6dzhaZHZ5WEwvVytvb2FacTFOU1FOYjVtY3Y2dW9udHFZOExLQklsSU5QVFhWK2xUZEJYbDl3dngwc2VoOVA0QjlrcDN2bUFoWm50SlZXV3A4TmZVb0tiTnoyYTB5WndVaGdwV3g5ZnNxT1hGemxuemhoZTk5b1ZqZWZqTG4yaVhVZlU3cDFMSURVd2IrT3o4SjhKSWFDcnA1TkdJZXdUMFh4Y01uNVc0bGdjbmJIeHB1WDBTeDJPNUFFVEt2SW5qWkgxWGp0V0c1cHkyRnlpTUhhQ0dWaXpQQzFTdnc1anBFU1h3Z2pZM1ZXL05BcDFlaWtMbjVpVHdObXdZeFpENlVudzR5R3kwU1BsVGtXTzhsQkVMc094cStLUTNWVmN2UW1JanlVcGVySGxETzRnTlFickZrQ1hwWm5pbFRLQ1lweURqU3BWdFlHR2hhR3lqUjJ4ME42eGhobERHMnI5K044cUVjTmJQNi9tVDBvSFhrc3lpeTV5VjJMek1ZNTZIdWFJbWtJRUVhVThJWnNUTEJGRnpNSUJoM2dHUXNTMEFvMUVwbVFEQ0Z3WEdxekZGcVFVcDg2QjdaSU9OdjdXT09OMkR1dElIR2JFc0pVMzIra1ppNi9OdGJ4UTkvdy9QZjc1QkpuL0dYUDVIVWdoUWd4UlR5L2YxdWRlbmlWMmYvOWM5NW5RZExod1N2WHU4RFkxOTRxcTN4SC84eUxLeC92aWFtTHh3MGN4NzI4MER6bGI1SXIvdnJMamtRcGhNSlNrWjBTSis4MjZ1SVYxbG4wTUFMWFkvcCs0blZNaDR5bkpKRFErMW13VTZSOXdtOEo1TFFaUEQ5dEpialR1UE9oYkZBTThNcTVwWU9ZSVN0WlJBOFA2R3Jaa3B0L09XSis2T2diQU9yZDh5NVk1OGpVcSs2Mjg5dUxZRjUvL0xnMStCMUhVWXR2T1BuYnp2KytVOG4vdllQeGVUZjluQXVpZWdsLyszWEYycGRWcWE0UGQ3d2xpZHlka001Uk94NURxNVBJeEJicGxja25WeVZVamR1Wk16RTJjM1FITE1COTRuU2s4M3BqM2ZnKzg0cUwrU0JPanFpd0NtSDF4Y0RHazBXc3VjN1VuaXdSUk9uUzlFenhEbVNUM3g0OHd1RElSa1M1SWNwVThQdzZ0UlFwS2hVWS9ndEpaZlRhUGJiZ1g1M1pYNTRYbDVlMWVlTHBUdjc2NFgvdzMvUjhWRDV4SmZmVmZ6THY4bjQrdVZtNlBQNUtIaHNCOHNUeHNESXlqUHlmd2J5R0V2WGRnYUl6eDJTdFVaNEEyYnBMeDlQUmxkNWo4cjkrQTNUVS9teHdkaWZ2Z01vYTBkcFFna3BMSndndklLYzNqdWZPdCsyVzNicTJjeCt5WWVoNXJYaHg4VFA1OEs1aTg1U0VqZXNZUC8zcGU0S0JVRVlrNXZDaklVOC9Ea20yT1lpeXlLc05WMXltbUw5VmdwZ29uYmUyenhmSkhHNFpTbTdnaC95aHIvN0Z3V1BVa3pBVmUrWWxRYUdHcWZjRkVMUHlOaHVkN3o5MEF6MW1kNGZWT1MxWVh0ckV0NmVOMDIyY2RwaVdXYUFDWjJNSUlRNGUxeFFNRHVIakhmVXVucWJDcDFEZk94VEJCRURUdEtFcGFSMUNPVWlhdDlOa1lwRndZNFJZS3RGVUJDUHFqempjaU1YeVF0WlZuVCtZN25ZUXZIUDl3QUdBZDFySlh6QmhkSWJLVklzQWIzZ0hjOGNmTzdKd1g5T29KUVJicHArSzBPZTFyQkhaSld2TlZ6WjdDWXJKa2l6T0RCTFF6VWpzNkcway9pRXc5Q1JXSU8weEdYcnR0ZExyVXJOSk16T0JrV0wrQng1K0pTQ1pIL0w2Z3JuUnErejFFZXJ5cElMMWRCNStpWVdUNzVSRHVHSHROUlNFNXdERUgrUk1kQmFJdHRYbW16eFcySE5vdjcyZDF4ZHJYYllpeFc0VmFZdE9qSisvMVBDNjJUSWZQVnJPYU9VQ3hVaVRzeFh4MGNDeW0zRHNBNWlkcjlVUUl6Q21adzVYaDF6aW5nR3JKcnBvUHd5bjNNdGV2aURIQnpqVkErTkZXeUFuUmdoTzJtWGtTQ1dPY2RkY0EwdTUyaUllWldPQ0hJd2R3cW5YbE9PZkVJeXlzSFNQZVBydTBERUM5Q29CTTFNSERGemx5UHJrVTVNNjR4c2ZINTJPamVqNEYxR1k1SlhyblVldHpBN2hqZXltVnh6czJjQTFkS2xuK2RRTlVZSFFQRGdDdzg4TXZEK3c4RytFRVVzRDRyMm5EM2grWnJJMzc3ajZ5MlpjbTliaHJOb1FWMDNPNDBkc1RMQ3pXbjcvUEpHYVlwS2p6VlF6b1VpZzNscndMa2xiRFdqL1Ryd3czdTJQVkhaYTkrMWdzOE1SQVlqWnFhYVVDTkJLT2VDNGJ5YUdrNnB0dXp2WFVVZi9WeDZnaUVFOUptc2MwVzNNeWtHYjdzbkpQcXRzRXlFUnNTSXFWU3BCYlVkbTBPY2s2Q0hUT1ZOSll1Si90bnhtYVlweE9lZkIvNzBsNFRmdlIzNDRYY2IvdTd2N2diVStsb0hhbFViUEozL1BMbTRYYzY2RlRyWWxPYkNmMXlkV1VoQ0hqYUdwUFJyYU9oMTRuZ3ROREFjN2tDVzJWTVFQQ1FLcmV4MTU0cU1xTlpRYVZ3Umc2UWIyNWtlOGlOVldxcitMcmJKZjkwWHpxTmpSQzh1S2FVcWtoSjZiQzdRZkR4VEpUZDJiUWx2MjRaU25ZV0pmNXk3RVV4Z0tQUWF6ZU5UelVOUi9qRVhLZWVKMUF2cS9SM1lQMVE1TWJGbFlQczk4RjR6MGlPaGJoTzNsdEVIVjVUUExXNHNseW1sbVRLdmIyOUFrMFdMb29Deks4dnNTSFp4bHo4RWF0YnI4SFA3S2cyUnY5d29wQ0xqT2FBalJRMW9nQUt6ck9va2hMOVQrdEpRUm5RbTAzakZyOUc2SC9yOGlqN2twVE9mNzAwSVZrY1F6QytCNmZTYmlTa2VLbGczOS9UZExDUzVicWduY3E2TEhFYmgrYmdYcDZRcmpVSWlXWnRPdjdZdWozNUV2Sm1qSGtXN2RhazZUR1B0eDNTOXFaYVBEaGhNZW5zd0ZkVm54NzREK3htU2hFZzBnaXVIZWFoVVJzTnRoWlhsdktXb1h0bEZ2enFIZU9XOGExdzJZTjdJWFJjMGpYZjhYUUNZVWdiZVJNZFpTMEZwaFNBM1pKUmJSU3RrR0VzdDQ2ZjNoQi9mbDlKQ2gxWlVwbEZRaUxHcHpZUTlsWHBqWTZFK1dUaDNUR0Q3UEREdkRWWlFtaG9qTExuaHB4OGFabUtLckl5Q2sxZ0FFZmxFWjd4V0tVTTZHTW5pWkc4eGNGQlMzTVRpY1ZXU09vcVUvNFE3Q0pKemxEWEJUQ2xpOXppRjgra1VHYzloQk1TalhFNmxKb3VWeVBMZGJ3ZndxSFRSVDMySkk2T3ZDVENUeDdDMWZMc0oxYzRWYzBsRlBsUENHeWp6OHN0TkN3SnZ4WHFtcm1TdWJyaWVYeCtuY0ZoYTR3UURNaHorWWxybzQxUTZ0SXZWNzZjNzFxOUF2cE5JcGpwWkVmeHpKS1JLV2puUjY0bE5YbzRUZUhaMTZad3dBODFMUzJ1WitQMlhqQyszQkdJcHRhb1dhekdTd09oYlZScnVyYkJ4MkpaUkhhNnY5dFVLd1dsV2RUazF4ZFNYME1saTZVbG85dkVDQk5HTUU0OVF3ZkJHQXp6bXg1TG5YMVVUS0dZemtxM1JJNitJQWFQZzVYdFl2cVN2dm1VQmNPYk93Vm1xaGUvT296ek5hUDRZUUQ0R0hqWGpqOThYZm42KzhKZGZEL3owNVlHLys3c0gvdmE5b0x3Vkc4RGtRSWMwUkFRekVUMHZNOFBucFFJS21mUk1xNzZmWGFIUWdqWEpoWTFiUlVWR1Q2b0pUeG5kbFhvaWlHSXZ0TlpXeWlpK1diQ3dLWkRVVXBST3JjNysxNjhkT0ZkdytyN01nMWw0cm9WdjU3UmMrdFI2QzVQRVFTZFYrbkpoUlpjeHRoZEU4bHB3VWRaV0FHSGRubU42N2IwckV1UVN6UlI2VjYxd1pxZy9HVDZEWld1VDJBa2lXTitBcjE4ZitMdjNEZHZER0c1UkdoVzk4cDNtL2Z6d2VDZEhlN1VHU21qdmI2aFZSbWk2MHdwT0c4U3Z3bnhxems3RXlqV1RaSGFtaUs5S3N4THBuTzA3NGRBcTV4elpib0h5Zk96R29YTXkzVEZTRHJyTEdmdklnV0xURlhNcXlzbG5UM0hGUjdXSHhyV3J0UEFWNG4ybW0zSDFVd0xJSDdYckNWSm1FMzc0OXh6NU1pZmJzS3FYdDBMc1FOSzZLVEpPVnRReC9xYVRHeURqdGJGT3ErVHMzbmw4bGdLR3JIQW52UlNPSTVnSFRCTzVVT1lsVVlWaWRjeCtZaXgyd2VvZ3dIT3doRjNDUEVYbGk3QW5ueXRaTzh0alFDSFByQ0JCZ0h3M0svTVNhSEFOYk5teERzMDhIMEROWG9oWHNhWklXOHZXOU9OZi9GalE3akxzWmtjYTdNRXRmOFRPVVhNU0w2N0NxdUQ0eWxtVVVydUN6Y1k2ZlZDTkJ4eTEyTFdZZTdJeXRrZEJLNGNwbUlSZ0l2ejk3eEtlQzNqK1BQSEtCWUpIRVJqNFVoMTFBbzV0UXlKeVdYMFlYSjRSaFB6QytHMHFTdjlPVUYvdkt6Qk9YUWg1cXFGdkFxRS91QTg5V3FKVW5VaG4wdUExVm5ub2lRbG5ET2ljYmxBTVloaDZ6NEFET3dWZ3k0MFJsVzBsZkpzQXI3Q2I4Wk0vVG56N0plSHJqM2ZVTXpFaTdNY1llRDBuenRQM2F6aHRBeDNQZldBL0lOcmdvYmJDR2FzZS9NeFBkOVFYelBHWWhmZmRSUTZEZnJDMCsxdTJ5T2pqTVpCWjlvK1A1OFQzY3pLQ3FHcU9VL3Y2OC90aXZ2L0lXRDgxTmhlcm9vcFZaY2ppUkxCRmVjWGxxRXNDclp2Q1d4Um9ZRTFqOXVZaFV1UlIzYU5jT1BmbnRRT1RKRW9SVW55a0tXRXBSYkpjR1Y3TDBMYUd5SjJ6RXc3WncxYkdsVlk0ZmorNVVSWDJBbllIbFVHaDd6QWNqTWkranNCdGZFemU4MzBEZnZsMTR1UGppWC82eHhOLzkvY04vL1Avd1IvRTdCWmdNNy9UWm9xYkhOb0ZFL2VTS1h4WFJ1bnFZMXhQSE04RkpDM05jeUxubDRXRmE1YVNHRlNSOHJ2WTRVb0FtWlFZd3V1VG5rc1NrQ3pRMXd2OUpGTHlzTTh3UzNZQUJMdUpyOTd6UVZlTC9Kby84a0VhVEExNlNGSklYcmNnSmkxWERpeG1yYlloSWk4a2tIeXB5czNtTUJJbERqWjBwQzRFdHJybjFRYjgvcTNpSWNhL3VTL2dYV0hta3ZCV0NyYXlvZHdmQktPOEtlRjJMeVlvZXJJQlF5bkYwaUtib2pnSlJUekxSYWg3bHF2UVZzMGh0S1lyd2h5V0liblEzR1BYREVXcVlxaitseVVjaVhXNnp1eEhiMTVLaWh0UkNwdUE4bXREY2U2M1dkVnlkSEM5NUN2QlUwQ2gwaFcvSWs1TitRUzZUa1VtVW14OC9sUUlyVERLbktXdXlZdWI4UHhLVXRvaHI2aXpuMHlGY1oyeVNsa0FqaVZOMXJCRWkwdnR4dkJpS2xXQTJFSE14VHhWY3RlUjBwQWhlYkxwcXNhdGlqbndtQVd2SGhpSGM2bk5zcWU2NU9tUGxSbCtCajI5dlhzcHBqTDFKWWRYbHhTSkdzUXBiSmtJOHNiV2lxYTQ3N21pdkl0ZTZKTzgzVDk5YmZqeEp4VytiVlRtUExKRmY4WVlRVytiVHV5ZDl3Mm9BbWRjeXozdkRDNGgxVHRxcFFjL1RoRWcyT3RGYzFsd2J3Tm8wMHBPeDFadzYxUzhleVdPdjZGWXJ2L3IzekpHK3hvVHYzeE1HNVAzZDVoRE1YVDdjK09VdmNvMFhNMXhpZ1ZRSzhsQm83SGlKUHVESlZSSHdELzZVS1JIVk42S2MzblE5Nm9rT0VZaXR4SVRxYlpUaWVRVXMwSWVrVlNYdUVaa2ZGVG1xTTlBYlNSaXFVU3lXMVNTTk5JTDlaYXcvL21GOXkvWkZUcWFTR1AyZzRhNEg2L2QrZkVIamNhQndFSXQ3dWRmUGtubmxyOEQ5eThUNjZEZXBIRjU0T1BYYWRWV3JRSDRNdEdQanQ0YmNtVlBqdGZadVJiVTEzbGc0QndEdlEvYSttZkh6d2RMTGI4OEZ1YTVpZDZXMGZBR0w2MHFkbTA1K1pvVHlKdW1vWUFPVXVvaW03RWIzNUx6c2MxQW5LTkJCMmtjaERqV25Ba3BubGhmZlRERXZMdVhZamxBeXhQUVBxbkJJS1JHRk00bmJKYXpmY1BKUDFMUm84b2lmT05HNEE5RElmNllweFJVTGJRWVlsR3E4OXVXUklXWUYvN3hId2QrL3Y0WC9LLytoNXVGM0I1YmlUU0NlMU5UU1BuQ2lVc25CWG5SV0g4dEcvS1hqYVZqYytDRkYzS3J6SUczaGo0R2pwNVk4c0ZGYlZaK2N5SURPTElXT0drRk1ZUlRtM3ZSdE9qR3d0d1piajBCbkxJU1A4YkNMMnZpMEdXSFBiK2l4VzNTcUdXV3liVkNiNmFVaE51V1VYUEQ0OUVRQTRVSVVZcDJyR1pXQjdSYWJVN0RYMVQxZFQ5SVVadTlOaFM0RitZY2s3aXRXN3JoZnQ5TUlYNzVDdHpVUWU5eEwyaHZCVjkvK0QzeW5jWmVhOERuNTRlOWJ6WDZreFNieEJzSWRiNHY0RGJkemNHZ3RFUmV0SWlsYzdYV2lON1BwV0NPWVk5WXkrYkhpVEt1UndyZlErbWlheFJmaHBJRW00Q0tHcFlhZE1tYzNUalBOVldsL0hVQlA4b0MvR3RwWXJxVXZySHJXV005ZW00UmhYSGx2d1lmNFp6dlhZYkxGV0NXcWhQTVNIZ1BocU81N2lNQ2srSTY0N3B6L0JRU25GZmVLRk9UcFNFN3BnRmFUbEVtQzlocVNsYmRzT1pnZlRzTEgrak52MWozL3pSQ0pkWGRJc25EQ1dhNFE5M0Z4bVFFbytmc2xtWW9rUlZqM0wwRkxQallpdHJ2SnVCdjNvRmJhZHdmWHpVKzVhK0FyRStDc3loN0RreFgyak1Kd0hZRHpEQy9qdEZhd0FiUWNjb0hXaTVXQmplMC8zZDZtb29PYm9xYURkc1RKczErTjNDL0YwTjB2MTRMejRQaCtMT2ZPSWI5S3Y3d0RueDdMamY0VlJRZk5jdWdVWGFwYUVKT29rYklBVmlXa1lVMXRSLzRmRkVrQVFpamtreVhLOFpiK3FFR3FvN3ZLbnI3UWU5WUpheXh0eVlKMVlKMGlhc3lNSTlZL2ljQ3Jja09jRU9US2tQNjdBbFo3SHBuVjFJaHM2VnBMZ3UxUks0ZkMyU3NZOE9haURyWm1sWjBWbnJwT0lEdkh3TkhLZmh5bXc1VXhNZjNpYjN2d0FES1NIaWVHLzcyeXdKdUIvS0VsU0krM1lKSVRmN0RNb1grNTc4YzhPNm5YeHYzYTk5SkdWelI4VHFJY0hmOFVsVkJEaUd2UzFWYktqRkppWUNwMmhQU2pZdHBNMEtEd2o1WVd1eUFVeTZHZDU2ai9JZy9wTSs1cDFRMk1jUWRCSW9kSXdTaWliUm9CVTJTa0JWdEw1Y0R5a1F4bVJxOGh6clNUSUUvVHRKUUl6cTl0WlhNVWpvVzZ5eG5oQ1VoTWw3bGk0UlNuUWxMWWZQeC9jRC8vdjg0OEwvNVg5MnhIK1BpeWM1T3crUzIzWkFhVWNKbGt5KzNTK2ZST2hIMTFFbEx2RThDZWFEVmV1UG52VXRWQlEySFVvZ0w0TjlFWFVSRVloTElrcHljSkEwcGM0SllUbVIwSkh5YjNPQnNrWWpJalZISlhJRlFHQ2hnbU5WNXIveFp1elhWdm1ZS1k3T0dYV0lCTFZlWFVMVEtad0RxYnBWdGRNa0UwODBRcTloeGIwdFlJWGFDZTJzTHJZbktkZ3NTejlTV0tmTzMrdy9JOTJ4S3FHNWFNNDF0TzBuNjFtd3NhK1U2Q3FtYlZFeEx6dTVoT0lSeTZTRzhoT0JPdFVReWtEVy9TaHZKaUI1UmNqV2o5d0Z4d0grdHBDYlVzMEs0cmc4N2pSNHArUENZRStEWG51eGVnMG12YWtaRVloRXliRVZvbmRkT2cyVTJsc2U1MExqVW5LaWNFQWtZVlRuU2tMQTJsTEpPM0pQUHBUQU1tb1p2YitIOXIrV09FV3ZyUUJtZXkyVy9jVkVLei9QRWZMTGNFM0Q2VmtyVDJhRmEzZ1YwcGN2MkUzLzV5OEIrRG53ZUUvMEp5NjhmYzVqWGp5eU5YZ2Ryc3FjYkJRdE5lSTFuWncvMHZES205cFIzbWZ0YWdlMmUyTWEwRnF1cytQMFB4VUx4SlJXaGppdlBpV0xyNyt3Y1NXK2lkRXFoZTlldHJmbWVLQUNxcW5hb2JLTHNFV2diTVIzdkQ2MERzVjZpS2dyb2UremVzSlRTRzJjWWhVZEhITWtmdldaRWI4cVRDL2Q0eFd0eGVQa3dvM3JJYW1mTjg2a1FWM1BNK2NtTGUrSHNDd0Y0bnJGbWtnRm5RNm5MV1JMT1JMS1hwWlMrcVQ0VDhNWnRJR1BkOWFtT0pkUzlCWkVDOThJanFYTWxNVHh6cU9iYkRaZWRXN3VmQ2NWaFdzZXk1MjFMdUdXR2VzK2xNakx3a1Vmb0V6RWI4enFzbk9pMFBQcU9nVkdCajllSnNRaUl2bVd5Mk0yODQ5ZTgyU2plVThWem5iQjR6N0ptWUJ6SGZlRjhhVTBoUUx4WXd3eWUxajl4SGdORkFxazE5andKU3lSSXF5cTdIK0ZTNnBJVUd0d3lDUnFhSVRVelRsTmtzVFRnajlsNWJEbnd1WW0vR0NVRUZkanVEblBRNDV5MnZDUG5sL25ZRWhlSFUxR3VOTkVkaXI5Y3NTY3MxVHN2TWN3dERNeEZJb3FsaVpsQ1V4WndOZ3FhZ0Z6ZzQ3U01POWFaaUpsb2hSYXl3cGhINnZnLy9wODcvdGYveStxMkk3SmJxV0ErUG1jMlk1aExkOU9XNThpUW9QR1lBNE9zK3dJWkVlbGJNVXpCZFVqNUtvVFppdE5GUmlPQjVtRXc1ZDNIQ1laY1ZtZDN0RG14cDQ3WFRIaStGajRYdXdzeFg1L1ZzYWhybk1PakxCclhTTTBuZ2M0Mjg3NFR1bm5YSGQxRnVaVFlOQ1hmNnNid05rbzBDckdhOTZFUWZTZkNQSDB3L1NLUnNpVVlDOXlXTnN1M2ZzblpBSEdNRWpRTHdiOXRieWhiOVFZL1FiQWtOcXgwY0V5eGtUdFp4RzdhZlVTNnB5cExDNU9lWXdtaHJzTUVkc3VGd2txS2ZKVWlyemRBYkY1MmFaL0tnZURGRkVOV0RpVXI4eTUwdFFsQlJUZmtjZkhsRkY3NG9nMFMzc2QwUUp5VXZWdTM2dUlYU0J2TW9SU1k1eXZaVDEzeVhMbHdFdDdJYTl6SkJ6OVBCdW5yVkg0elF2TG9RZ3BraFpuemt0QzVVZ0dueWx3b05lYUpzWlE2VnIyU2UvcHpQK0JGVVc1VFEySElsTlMrOWF5Mmw3OS83NmJNNXprd2pvN1BqMmxHcTBDY3RuNzJJSVdJMUJLVzhCNWdHOVU4cVQxWHgraGtheXladmJmZjNqWTBMMDFyRTE4TkZZZm9vT1ZrVjJzemc2UnJMUHZCY1UweUxKR1cwa2lzTUxuZEswbWY3Rm96Nm0yYVFaVFRhZUg4WW5uc2hDOGIxeWp4TmhsWUt1MUVZQXNhRS9nNDVFbTZWZkxiZ3puZS9aZ1luY3JzdVhmcyt3UUc1ZE00Sjc3dmJDVjdybzVEWGNyMm81dGMrazUyUktiNXdyUkdqdWRPQmhTbGdveEMyWjVmOFhrYU1yVGFvclZ1QUtmajhEV0hoT2RLZUNSaVI3eEY3bHdSUlZuUStzc1JhU29WYU0wa0VPV3dSWllxbVNrdEx5M0hhbVJiajNtR3M1Z24xK2dMaUNpRDc5VmtrbzZrVm9VSnNjU1Nha1ZjaXNub0YrUEJPSitMb0ZSUGNrMVcwTnpiemVidGRWUXJWZTVLRzQwdXhRMVdLWFFESzE1UlllYytEUmQwZHM3dHpFeUJlUnBubVJBZmw3cldpamdpREl1RVdwa0QzYXFIZ0NNWDBoRkhsSnlhV0JFb3drbGZPdktTTUU0RHBSVjJyMHFEdWNXWkx1eENwYmhTODFuekFYSkJ6ZWZUODRSQmN4cU1UclRxQ0NpcjJnTkozbFlhNHNUV0FoVnpWbWtWU1kxOFBUenZoczdlRC9SUElLbE14WlZCZHF0VXhEWkx0dk5ZOGs1bUxKR3ROSlRicWRCcFlvZ3JzY05ZMDg5ZUo0RWV4am5FTURjeXBqTnQrV2NNOEFZdUVFenNDM2hOQW02ZWsvZlJ0ZmZINkF6VHU5VjgzVkpDVFJaRDFHZjNXbE95OEdnZlZQNnJ4eVFzcUl5Q05WNG1LTkJnWTd0Nng0QlBuZEVhSVZjMi9HOVpZTnRVc09XSm13aEFUSHhzMFliMnRwMzQrcVZGa1RvcGVXMHRRWW9wMmtVRDJ3M0cyNDdaMU1Ta0tkenpnSmxpUzhvMnJKZmZIT1BhSU1NVGVvN3pCY1IzNE9NS2hHQk5KYnJSeGNIbkFucEVLVnZ3dmlPVUIwdnNzcTJnWUpTTGZvWFJZRVQ1SXVYYUMzdm1hODlPdng0aGRmTTR0V2Nxd21CN1NCaG84SXp5TkVMdVRnNDB5d1JLRVJEeVJKcGV5YkNocHRNTVNDenZIVURGRFJIRmdORWtyUlR5ODQrZFBkTGhpbGVsWkNXUkJ2WHNoUXB4RFl5ZDZIclM5V2ZzczZLV3J0dVhCMW9xNnVtS1pWbnRiem5nQmJ6WTNqSUFsbnN4RjAvU3Fwb3pTVmhxTm96S1d3SHFZMkNMS0NOb3kzUXMzQ3pDZHE2VGpXWE80azJzRk1XS3ZRS1htN1ZLckxJc2Qzc0FiYXZZYnVRMnFEWGhjVy9PcUtFKzhDVERJb1ZkdWpCdjhIQWV1Mkg1MTNtY3R0ZC9Qb0hYeWJ6N3Q5ZkEyWm1DTzU4YzUvMTE0UE5RT3VLY3FzdG5hdUp3QUZjSGRsUHdCaTZNL2h5UllVVEgwdXJRdlVjZ1ZDSWgwMGxSdzY0d1ltWGdSem1JQ01RNllzZ1drRlRSSXdtUXFYKzFWaUw2NDJuZ2xBVVlMbUx2ZzR4QmFaNSt2Z2hRMVRZckswbCs2cFJUSmRkRk9mNjAvRnJFVWpjd1U5alJlU3o3SGNsTzV2N05RUkMxT0lqYWQ2ek1yUzV6d3J5bStXTlB1UGVCWE1VblFzT0VySWVIcmJXTGtYdDMzM2hTcWZ0ODNGcTExT1RtcmJkejhadzVIamZ2OGhmTEo1RHNUdlBKR2JnaVZFT0pCNUpXQTVLeWd4cjBiNmYzSzh5ZFpwR1IzR2d3aytxdlpZdytzVndUUXdKQlp4Z0NXR1R2L2x3YXJYMzNtandNR2JKYTlhS0wzMC91QlNWNUdzekRpcHZFTnVEbG1tVUlkOG1kczB6OG4vNkxBLy9ULzZ3Z1BScGFqYXducDRhVGM3NE96RzNENnp1NWU5dHFTQ1hUMGl6aURjL09Yd3dCRHZrSXIxY2ZYaDlzVklIa1RSOWM1T2VrQ0ZuaWlQNHVST1lBODIyZmEyQWNpVXArMHB1aFA2MDhaQUtSeCtMZ0w3WGczcndGYkNDTUFFOHIwTks0MWw1RGpHVWlra2pBTVFhdjR6amQzUTI1QzNZUHUrZVhqZjNlZ1BmdFp2cTIzbmovclNUOCtHWGloN3J3MklESG8rRExUdzJsUE5pUXhmakxpVUJuQmR1a01XR2NCTlhhNENaMmFhQ1grR2hvK1EzbnBLY3d6Tkk0N2IwbHBSNDE5QkgycHFpTCtVblFldlZvRVVqK2cxaGpHbDBKcUpLVVE2UlhGcVhGcnRUejFYVEFxY2NOeUE0eTFhS01UUmtLUEhJRk9sODE1clBKa3NBZ0IwcVo5Y2RydU5GdXovbkxKUlNGU0pOUzNsaGp2enE5K2hxaDJveXEydU1OeUFkM0laTVJKZ1RYZEJwUmpZL091dWJpNHptUUxGVGNiWXk4enRlVmVmSjFCd3FPODhVODVQZHZueGdqT09XYmVlTVp5ZkVLakJEUm5zZ1RsZUVIdkgxWldFdmpYemZXOGFmS3V2RlYwZFBFWnBpZ2pQZWZ5TS9acW9xejNBcGRGVk1sU2dNN3ZjUkJnTlFLWmhWRGRvOWNzTWw1OEhGMUpmUERUOEJXbTgzSDl2RDB6OFJqODBCK0VLM3M1MEkvcUZ5ZGFlL29OSEI3NXVQM1h4YytPZzJvengxVzl2VDl5VkQ5YzU5NEhqdEpwWTdEeHU3ekV6Z3RWZWNnMlFGWWd3L2laYnJ5MzUwK1VVUUVSUkdvVUZhMFlSVnNNOHdOSHBIM0lUYUZCdm5ONXRwcjNEZXJqNGVZQVpjYnVhSDVLZnRGQWppd2daNm9oNU1YVFVVcWJobm95MHRSbzdGWTVQQjVxd2kzTVBMelFWREpWRW5KbnI2S2x1QjlrQzdkOFVzWjlJNHhxTTlhcHFOMTdzQ3NDd1BCcFpMTDhxb1lwU2k1ejArQk14ZVk2cEpHaDRaSTN3WHV0ZUR0N21WcHVxOU8zTWlqWlh6ZE1nYXYyNHpFemVtek4xRnZjQU9Fa3FtdStHUnhqRDQxbSt4UEhBNXhEQ0pWVzhTSVN3QjlrVFU1T1FWYTNSYkpMY21MWmV0TW5ra0xMKzVTNDJUQ09SWWN3QW55T2w4SCt4UTNCaUp6VlAxU281d0lWWmFpbmd1MW0xRzFCUGJwZGpyamV2M09zckR0Z3RCdkZ6YTBmUi9XMjlkZlFEcVF1MHdSblovL3IvSGVkRmt0MmxTTmczYzI4Z202NXZUSno1d0ovSkdCMDlXRDJNZG45b25SeWR1K2ZOUnJScDZhSFM4MUFZbDhjbUVaWUdrUGxEb3hWZHNxaTF6emZKaG4zMnE1Z3F0QTViZjZ4Q3hpRUVNT3dZendWcHZvVmJma3VDVHR0RG9nY1l1VWw4cnpKclo3dytNZFlKU2R5cGRXcjRBOERwajA0UDZ0b3BZSDJ2dG1OYjh2WkxTMCtRaWdwQ1pkYW1JZytBK0NHUkhURitxTWtxeXJ4TW9zODVuUmpLRTRTRWNBb2x5YTFrU1Awak9zVVByMlBSOG5CMmNOdWVjZGF6WXlyTTFURzhlOW14WUNTQytPVXh1d1JJQ3RsMFFVK1FrZ2V6K1ZUQ1BPVVA0Wmd6WHM0ajlYK21ZVi9kekIvVmNHQlROazVLYkFhZ0NOYWJRcytidmQwWS9KYTg1TFhhV2EwUDcwNktNQlhjSW8xV3BrTyt2U3RkZENnYzB1RXBRUGZjMjgyNG56VzJjRlRyUS9qVkEvbkhTSFhiV1NJa2kzbSthanFHeGpKQnluOEFscXBGUzUrYWtzSmcwQnJNS29RUmk0NnEyZTBDeXlkRWVxVTd3UWt3WTVGaU9RUDJUODNSODJGRFN1N1ZiTmNYRmxFd0dBZ1ZFbWhpRFp2LzRxT3VmQjJudFNWeGVHaTFIdytjOFRUNXpZUDd2bHJQZHo0clhZK3ZqWG5XSDA0eGlZNThTdjU4UTRoODA1QWJOSy9LaW4rdE5KeEZ4dXFQc2x3ME11MksvbWFzSkE4dUhJSWQ2R2Z4Wk9BVTYrZ250ckpsL0dxYnFOdFJpVlhNdFNtVU5rWGFvMDhPL3pvS0dtUGdORHVqNStjK2FGRnMzZ0lqSWlMYnpHVUd1TXFUMGFWclczL0VWRWxMRlN2QmI5MlFnaXhGaFlGUmFWMnhQUUp0SDFYZHp4empnd0QzRnhDS3k5eWVDb0tiTy9lbXVtbUc5UUwvd2txR2htM1dVR2h4NHRZY3NWLy9KZjNueGNZKzg4Qjk2L1pyU1VqRk4rREkvZExaVHBESVh3RW5OY1RsQkxFRlBNTWUzRGhqUHYwb0hYZ2xmT2dkZ2Q1Vnhld0RwYUgwNEt5RHllREllVkVVUUdCTHJacEp6ZFF4eU41MjQ2eDFpNmFHNnFvZnhLdjl4QitDRE03L092Q2RxOGxZRWlXMm1XYm1RMTdxL2tUZlNSbmFqL09BcCsrWmJ4NWUwYUNsdFB2dnNYZTl5Y1M1VlRyWHN1bCtZTXRDYkxIV0ZFWmNxY1p2ZklUVmdIeEw3R2paMFY2dXNDWW1GTkkrSmZJT2puT1JZK3lWSVhkSXdjVGNBNXdGVmZWcmVDWExZWXI1U3RtMXhmTzRXeW8vSGsyWjh5RXJJaUU1by9NYmZCbHpYMnZuRGJvbk9lRkxzMklNdll0Z0lVWTdzcEtBOHV4TisvSjd5OUYyd05hSGQzZjd2VmV1Yjg3bHhETWVacklzczc5NTc4b3hNVVVGS3hSMStYUWFZaTFqNXRFRytTQXd2ZE5lWC9Zb0U3SzFxTzZEaVdaNEMwWVpPaFVSV1dEL294KzYzWVU2R2ZsYVBSeTc1dkhGRXU0OVpwV0Vla29GSjQweXFQSWpnb3dFZUYraGhka3FHTDdkRXBKNlc5YkExTmNUTkViNERZcVFFb1pCaXkra0lLanlacS9Lajg2aHRtZjVIQmhXM2ZrQzNmUEdoNE9ka0xwQTNTaHVwK0tUTGNPM2g5aWkxckVPQUo3ZEJiQTQ2YXpEdTdBMGg3eHptQ3dRNWxZUTQydTBDbVRHRllXNjhseU9BQmtvOXZPdVZSTndEMGlzYytUYUhTRjZEc2lWUXQ5ODV4VHRSMzh0Z3pMY0ZxakdhSy9DdHFJenIrZG1NY294cTk3bTk1TW1aZk9BeDVmdUxqUlVhK1BoSmUzOVlGNlBhOTI2N0NOQXBuZW1qUHVTekV2bjhBSHdzWUIwc0p2eC9Mdk1XeER2Vm1OL2RLV2pmaDZBU0tuY0Yzejd0elRvWUN0TlN3VnVBVU1KYlVteDgwZXVLSVVyYVVDMjV0RXlEUWxTTnNyc3FjR0ZxQ296Y2s4QnBubEJQTDRBMFBtbXRBaVFzeTJrWHlLY3VsbUF2VmxEMnhRaGdpMTE1WDRySjB2WU5MV2kwRkI3R0tlRlFoQVRtRnA1cjVsQ0E3akwydHh4V3NxYmNLMU1Mb1oydkpNRmxWeXJ3cUxkZHhSaVM4T21kTXh1OGZHWC96dHpmcmoxSEZ5RG9QUllvM2RZR0xoc0NYSk53YTBRcTVoak1TWldQeVlpaTQ1MFNPZ2Jrd2xvbWZuWjhMc1JEaEovMUlFaVMyZVoyNndISlJ4TzltR0Jlb0FlS0RFeTNxaE10RVFZQjhQS1JUeEMvY0xGU1NveVdpQk9ybVJrV0poYmdvRUtNVWdwU1JRdHFUOWFxdnFDRWxFUVB4Uk1VNktVM2JnUHRLbU0rQm1kVnhaeTRCN0RMdUdjclZoQ0FNYW10UUtOU0tSNWxZQ3MyL1QrRGplOFdSRTRML0pBY0NDSmtwaDhyZlIyVFlGQ0pPWm5rM1RLekN1WWtPY3M0SlBZMms0RW1aaUsxdXFOUjJnZTUwbGV6dFFIc0dXZzQ4bFBMdEl6YTNCTVRFN2ZHd3pQNHRxYmZ2T2dXRTh3ak93TmlCOGtpNDFXNitYMjJzbWUxVjdWaVVDczh0RENnNmMwUjRsbFpReWcyMzl6dFFtdklYOU14TzVlUVFhRS9sYTdVZGc2N05QUUZKKzNET2czT0JJRXV0VlNsc3RUdWN5WGZadFZPaG4wZTdKcUxoVk55U0VOR2YyMGwyMWdwSHlSdFFvdjJXWDMxd2Y4NnRlRDA2MG1pb2JXR2Q0WWNzMzFOOWhUUUtWUlVOZlJERU1hbVd5QXZQS0p3R3F4aGlMdGJRWGhXaWUzUTJuSmtESlcvQVBKbWpuT0RyaWxDc1VTSDRNVEN6Z2NpV21NSDY2VkUreVl0Yndmc1BCZW1wdmF3NjIvT1paY1IzczM0N3NrZ1FsQlJvTk1oY2E4d1JJN2prT0R3L1A3MjhYbjRvdjA5dmVYTGN5cFRTb1hMYkt1bnZ0bzFoNkwvNTJ6c2VYemE4ZmMwbWlOTXgwRmFzVnJFbFNzbFE4SDUvQWZ1clc3ZkRuNzhadXdyTDdWNUQ2NXQvcjNXYWpQbjV5ZGFrM3orQlU5NFBUMWNNWDNDT2FjcWNiNG5PZFhnTTlqUnZzdmVKY3c3S015bmdLM2d6L3UyaGFSU21tSGdUdjIyeVV3UWF6TnZOenBkdHZoNWVEWUsxTFp5Ly9Jb3g2VmlNSWFQWllRNzg2U2dCRnU0RHk1MFdyb2txRzdpcTJrYUJOSk96ejEzekVpV29UR1g2YjNDYkNGNGFmUTRnc0oxM1VOUXlJSVh3Q0kwNGltaVVsWWJiTkFnOVBtS3ZQeDVKNVgvWjlzNTdnNlV6VzgxR0VkczJKODJaQVZwVGI0ZFNNMzc2UThIai9vNldFeXVBeWlEWXNKQlFiSFRQVEdUbktjVlFzSFBmRjN2d3c0NW9lalZWMDdwbVZ2ZWFTZXhKQWFiYVp3WUxVdko4a2xvemhyTG5NNmpOb0U2dWtIbFlPVEVpanN5ZFlON29IQmt2N2pvS0ZHMjN6VzV0eDZ3VzZxU1hKa0ZKbVZHVXcrL01uYzRVUTllS0RlNUZNRlkyNXFlQTFEUVhDcGV1blZVOWRiQVU0QkFMME9pMHRGOFM5QU1rOWQvbnd2bnErUFlKZUJYcDJ6dndoeDgzNUJLMVVrM0N2aGd2KytTNG1xeGdMZUgyVTdJY21mVm4yQXRHV2diOEdqc1lsanVVR2xqQW5obUx2bGloRVVIUmd6cGxGZDJIelhkVUljOHU1cU94TGdqYlpNWUJPQjRKRmhMYTJtWUFsSGtjU0xsYVNkOVlyT25rb2Y2K3BhT21LR1VxRVJ0RFdnM25VZkg3Ti9IeVY0YXphcTJvUk0xWmpXM045SVpjdzdaU3NIenMybzBicU4wd1NhZ2o0QjhWa3d1aUNwVVA0ZURHTHU0UXU5ZDRBSjRsWEtyOVp5ZzJVUHRzclJOcmZEbG1aR2t2U0ZsclgwaFVTTUZ4bzBQZjBRaDdMYnFqOGhrWlVmckVHMTEwa081WS9vbDZqQzhIaGZGM0Rob2lDdVBIZFdldHNqU1lIOHlPbjJiNC9IcFVqRTVMWURTSTBVL1NNUVFjNkx6eDJ0eTdHcmt4aDE2cUxkQ1ZKcFpJa3liQm9TcTU5QTVnR2IwMzdibkJuT0k2elJzWng4SytkenJ1VTN6OUc5ZDhyU2R6b1FmMzRQYUZlZW01cWxlQ29MT01TbndkR1NkYkNCTUxNcnA5cjZwMThUbWx5a29oYWw1RGZEcndkazZ2SnNCYkszaThOK3YzLy81RHhsM2xuUC9pWC8wazVzYkpWTWEyZ04wNUNEUjBheGhDMzdBdUwwWWZmLzcxSkEvRk1iQ2ZPMVozY0N1RVJ3Ris3aE9meHpBUjZGR3lydFJBSDRzZEZibGdNSmVVbHBvT09kQjFsc2JPWG5XWlV1Y0FKRnd0VU82YjBkVURJN0JTbHlOZGFGMVhLTlp6WnoxMXEzaTlkb1hNbGNjMmtSZk1YM0g0UyttUzVodVl1aEcrVjVCbEFyakRzakNtdTVOUmxYVU1lODZvQ0lEaTRvK1BjaGpEdVZ6ODAzdVJQdEFSYVRNYk1qNG1nUy9aY1RuaFljcVhnT3JpellkdXBBZHVEVVp3OWJ2ZktkUXViVEEwdjdPVGZmRHhZOEd0dnVOK3A4eXB6ZUd2YkVBbEFCVnEya1RjUXdkN1JzR1hHZFI5SmFaWGNrSWR4aFh0TWZtZzVVUFh0QXA0NERlWU15SjN0WklyYUM5V1FKYjRhWTZrRjBGQmxtY3ZVU3FGSkt0OU1nOTB6b0ZqVnN3bEZHQnl1cnlGV1hhVVNDNlMyOXQ0Y0pORXRoOUpYakZ3YWJzdUpwMGcrUWcrNE9XZkcvSVVKcy9uckhWZXV2dVhZMktiU3o4MkNSZVY3dWhJMWtIbjE1Zm9KOUhOZ3Y0dWhYYmJLdDdmUXBBbjZ3M3N0YzhGS1ovQWpDakN0bFdVT2RuMytnVWNnN1NSdTllZEc5RUdheGcvVG9aaGx3TVUzVk5oQ1Vod2U4L2xIaWMzSHZpOXMrOG9xeUhoY3FnSlMzYlVOK2dzRSswL3Q4M205dEVxam4yZ3BOMFdOOVRFNTU1dlFCRkc0QVhrWUpJSGNKSUJLbGZjRyt2L1FXRVNVdWExZ0RaOTBSazRMbGZtSnpJYVVJdHorME5wT25TUEV5R0hraDdqVXVwR1Z6blMwTm1UUWFrZ1g1b0pCeEFqTDM5dFJPdGRGejYrYjBTV0pGSW1TUTFjMGkwUUQ3N0NMcEk0VlExYk1zVlhsUXVnamIzRWxZQlNFZTVOaVhJdHhlcURPQ1pTTzNQeDdwWW5RR04wTHdKOTloM0pRWjQ3c080bXZad09tSSs5V3lRaFFremVVWXZHSW1POUc2a3MxNjRtTUEzSmF0STNRSG5ETldOYzNQQVpnZksxVkZQUEdhTm1ZaDNHWW1peUcxcVp3Zm92eWVoWGgyZDNDdkVTbVVnZXJldGdpeHlEVEZ6RDJNYUNoYzdaTEhQUkxVMTNUbFNPa1JPKy90ancvcmJoRDM5b3VHMEZqN2RpYlNwenVpRUhhdVRTUHZQNDdQajExODZhK2JHd1B6TmV2ZUY0SHJZZmpxT2JKL2h0SHhnRERJbWZDZCtQQXZNRk9nMjBnMXBQVkJaZHhsNG9ocld5SWp1RDg1MHlxcHd2NUl4ekpnNzlNK2wrcHFQT0pST0hHUWluRzBKOFVWRUZwd0NPZW5MbG9lTmVTMFZoYW9hZ1ZmQTY5WDQ4YXQvTFNvd28xaVdFei9FWGMrbVZtUkdNaEtJekdsVVJDSG1DVjNtdUtiMFQ3TWw4dkhRYzROZTB0cFAyMEJJQTJPdnRyNm1tTThFTXpneXlpdWE2a0RJYlZiMjNhZ3E4M2JqR3Y3N0IxbWE5M2ZEMW9kVnhrdDhOakdveExWUXlidmVHZXlXWmxUTVhvamhYd2JXTjhGbzBmc01PS2pURVJqS09qYjR5eWl5bzNlaUNvMVZqWHh5VUxzWWFkRENVNS9TcExqQjg2dVhWWlBsQjJxWlVnZzVHaXZtSzUrNWFZK0k0SnZiZXNWdElwS3NVQmdGcjg1S1Y3TjVubExleDAxVXNvR0FVa2lLZWk0TXhuR1pQWkVsaE9ESVhiOHFQclVvcjBkek00NldDSDc2NlhPYm1xNTAxaHdrRUtuaXVwbEFhTy9zYi9ZOVh3bDY3OHN5WlJCTGZHamZQRDhDUFo4SGFMajBxWEFIYnRiemZySys1ZFkwN09xM1l6ejd4ODNOWlBlUG5Ia2orbUpzWTgreUwxdjZMR3Jrcmw2NkhkMnYwclpZQjVIOGVBeSt0c213RTBhNjEzVnh2VHJUY3lOSzExRlo2NnF1TEpXb1hCdjVUb1MzejBBckxvMEY5TUcrZEpJY1pNTnVnMmZ5eGhqdHZ1am1SaVNpaXBPYm5XbnN3QnJtMWtZcjJPRThMK1pkWXVaQmE1cjBLSitMZDB5YmpjVnFIQ3MyUDVUSFI0SXRmbnNRUzRBZmVqL3ZxQlYycmI3UHpYMGYvNXlRNjFaWFVjcFdJOEZYTWJ4RzdXNEJLNFhwbnk1SlVXWXhmM3ZqRkFhTXZsWWQ2ZUtIcWVpV0lUeXFYQkhpaVUraW42WUpQNE1IRStVNU9yVHd3NC9wbGxEcExWNlVoMUZTL3ZrNkI5aXBZOERNdWNGb0dOem9qYkRkZ3ZoSUdyaEUxenp5bUxiRlJVeXNZYS9GUFVrZUh2cXRPVmhiMTAvb1ZNNXVuRlF1S0szUGN2VjlsY1FXMDRSLytaY1h2Zjlydy9yVlkrQitZWVl6NTRUTGtISGg5dnZEbm55ZWVId2QyYTJuWmNad2VUUnY0M0U4c1lRQitlUzM4OG5sWVJQUlVodUJBditxM1kzb0RHL1RCeUdIT2ZJeUk5VFZIZjdBeXdOWnF0K2paTWhSOEoxKy9BbExFUmFVVTlhZ01keWM5MTlrbTY4dmpXTzc5UjdnVzZtTi9BbU9lSWduTGtodHcxeGJKdkUwNUI2cUV1QjdFVkdGRjJKdS9IQVIzdStlUUo2bVhaNmFNWDVIY2ptUEZZMGFraE1NUTRIL1RBWURyU3BLMHJoeUk2T2VpMDlBWEhtL0F2ZmFJZEtsRSttM0xlTnhZd2ZQbHZSSjR2QUNZVEdRVkUvdXNnMVREcG5mcHRGVlJqS1lMKzFsVXFYQTluelRPTzNsSHVqcUFEdUVkYWdacUYwZnRYRTZQR21kS0hqb2FRVmxJdm0vbElKUjN3NGprUldEVFN3U0JCZU1uN05ZQmR6NXd0SnE3UENXNXhRcmpSVzRua0kwQStCZGgvSHd0dTJ2dUplbGhRcE9lRTgrYmZaS1ROb3lIWGFJV01Bbmc4bGFYUFpxcElhSVI5d0x5SEZqaVc4ZVlCbklaKzFLZlcvNzQ3VUdBenB6a252LzRHSmFMLy9xbDR2TmJRdm54d05zdUJpTTNUaTlzYmd0Ylp2dk9UOXYwd004djRNREV1VE8vTmlYRWcxcFM0K2hqSWdLSVBxSUtnSXhKV3RidGhteUNCNUUvQllJZnVEYnZkVTdCbkp4Y0pwelJyZ1kwQ1ZSR3MxV3ovT2ZxcURqUmtWRVVWaHp5ZXYvNTI4VFdUbU1qSEJVWVlsWHo2ME9STXMrVGRaZFFCS0NxNTNwdS9sbWNjTTFabkU1QXFPNktzVURrcytXSXo3RFlKNElQV3A1b3NNQzVDdloxUXg0RDJ0SXUreUw4aU9TWURXM00yQXlJVm8zYVZRbmhvVlA4K245YTE5UzdRQmJYTzhGTFFobkw0NDd6UnJvclJVdGRqak1OS1FuaFdCSGxFbHJNcFlnY3BkQ2dDV2MvQ0JJaC9nUmo0NUloaE1oWUZhLzNIMG1NaGtRZEEyeUlJNTFQRWRwRHd2andWcVhCZzBwMGVVNDRaRWlhalBwVUtHeENBY2dmZGdwTjBSOTFoczUyUTRyU0svVlpMU0FJYzJzRlAzekplTnUwWnpLeEpELyt5TkQ2ZG85bzJ1VllSRTNUdTU0NGo0bWYvN0tiNFgzc0wzeC9NYS9kKzJIVXE4aGtjSHg5SjhmM0wwZkNPWFlqcU5tSGx4VEdSTFlNS1QxNmgyZUgxbGowVWduc1ViTDNlcFNQeTVPZWVFcDJDNm9icEVBNVB1TmUrVGxPbG9HR3dCVnBscEptdmZNNVgxZGFKTWhVT0U5UjhyaFdEaG1CVGp1WVV4WEtQTmFWYUZ0OVQxNTdiMDhoeXpPbWhaYmZsWUIzbHRHY2dzUnJlSW94c0RJeVRpOVVhQkd5bDA2SW9Ra1d5ZW5acFNHNW9IM1d2dzg4UHdxMmZPTDNQNTM0dzkvSTg4VWQ5ZmFHTC9lTWU2MTRlMnNtbjk5dFQrLzQrUVBvcTZHaTRYSFAyQ0lRRk0yNElibW4yc0lKQnpZbnJ1MlZHWFU1QU9UT0RvWE9JUUE0RXNRdGdXdlpqc3dyNVVNb1NFdGVQdHhCWnVIZk80ZmF1M0d4NVJrNVFtK2RXbnFFTkk1QkpiUDN3ZmFrVXI3ZUFLQ2dXNWl0bFNVYjNEMlBhOE45M2JQS0JXSTk2QU94NFVjdzFNa251L1lBQnh4cWpGcGh1Yk43SlFCRVIvZ1dKL094L1pReVBhS3JYQzRFdStRS05oMEpEQllHc29YWHRwT1g5M2dCbjdlRjJ3THUxUTBadHlURjJ5ekx1NS9UU0NNK3pvRnpMR3RzUDVmdXdoWHdkQThSUEFJandTZVJZdGNvQkdIeldDUEtYZ0NFaHg2YmNVNUx5ckViMXQ3eHErVUFkbHJxS1FsUUJKRUtGZVB4emhtNHNRNktXQU1CR0ordmp1Tk1tR2NHN3RISkwrYmpGR2xFWnA4QWhvRzRaTE4vT0ljTnVEcFdsSDc3ZXBJR09QbVhndStsYXZjTzlVRFBlV0FwbXJFT2VzeGlmK052eEhkaktBT2RxMUNFaEVtR0srd0EvNFRYR1doY2ZqQmNMaG1DL3JpVzE3ZWYwU1U2Mk92VUJ3REkxNVNUUUhpRi80d0pGNjFqQUlKNHhMWDZXQVlpUDlKU2hQUWtuYUk0M2hBUjhtSmdjMnJ0aHBtbGZUZW1QZG90aHlKbXM0ME0zTGVFZVd3WTZiQjBESFhPZ2UydXJwTlMvQU5MWGxZY2szNGk1Z2pqZkQ4NWh3VEFGZ0puUzhMN0krUCtudkNXYjdpOU5RTXcvZUVuNFBIMWhsc3BybVFCVDFmQkRUMjZIOTkrSFJieE9mYU04eVJqM3pGT2F5ejA1MTlQSEI4REw3VjRmUjBMMzAvZzVlMVRSZFF5TzhsdWpqVWhwbEp2SDRxdFZuVEprcVJxbytrcEZWUVMwWVRNRXVqTTI5Znl0NlpDeVVzOEVjRWtxTG1QbWNFS09ENG1RakdQSUZSQlN2SG9SeVJRR2IySkk4bkExWGU0L3pnM1E0aytsWDJHc2lFblJRYkpzVklsLy9zNlU2RFROVTU3U3JnbHlza3d2UVAwWnR6NktVenF1VFFXS1lmVFpnNkttTmNFOEkxN2Q1L1NaejdhS2J2dUdjSmg3TDhBLy93Y2VIK2YrSWUvT2ZIMU5vRDdqemcxZis4emZOdjMxdkE4VDh4MVlEc0xuUldPZmFoYmF5K2R5Qm5pTE5HREtVZXlvWXJodjhCS2lyOS9YeGk5dTNCQ3pRSGY1eCt5UkU4QTRBTFZDS0hmMTdVdFAvOTQ2SzdMS1MvTE83ZXhkeUdOQmkyaWM3SWtaWVFYb0EzTzc1QU1ocUtEMTRKQWlDT2E2b2RGcVE4NFdFNENiMW56ZjRXYUZvRXd2dHlDNUlJb3lteWtLeFYvK0ZLeGJRa1Zib0ZPek00NmNOOWJ5UjZuNnVuNVl2WEdWWTBMZEd0RW5uZVRaY0dnOXZtUmNHc0xyN1BpRFFuamhtdVowNUpLY3d0N0phUU4rRGJzOUdidHpjWGdaV2VJMWM2L0NaenNVWWc1RVo4Wndjb0V1SGN6RkpMLzdURW5MWGd0Wmx1TXVUVGsxUzNILzZFdjNUWURiVEIxUTB5RVBNVnUrZEVUd0FNUDN0T2doM3BpbWJYOVQ5K0FyU3pVRFRoZUUvZmJjakErVlVhaFVpMlZDN3dYejMvcjBNS29XRGlXNW5jNnRxUGEzMXBLZ2lYV2x1cHJFZEVZQ0plMlQ2eG96U3RjUStIOHJobStGTUpEanc5empHZG1ORWJWSFlvWnVvM2ZuRk1kS3dob0FseW4wTHVqaFpHNGZvQXRXSlNIZTBwVE9YVW5XNkdHblNwNUtlcFI3OUdiUzArTEVOVDZXcjFtWTVoNzErVno3UGwrb2NFejZaVkk5OGVSZ3k5Zi9kR1pxbk1RMFpDeXdDRG45dXdvQ3VuUHRFaDFlVUxNZER0UXA5a0x0NVp3OUl6RlZIRFFUUS9nMkFzVm9rWEdUS21iMXp6ay9pZHg4Yjl2R2UrUGd0dTlXQzcwL1MzaDlvWE1YT1ZXZzFjNDVsanlveHVhK09OejR2TTFiRitjZzhyNHRaOEc1bnMrRi83MGpYM20vL1NkTFY1ZlkyTG02TkEzQWFHVEY4NU94ZWJFa2lRd1U4cDFlSGNibVlBMld1NXMwS0QySGhidXNCaXZVNDc4ZHRpSHhaUm9ueEFQT2hEa1FDeHZuQmxtZkNPVXRqeDFLbUErL2UyaGpIZzRiSG94b2hqWlhYTElpaU1KRXZLRkl6MGV5Y2RlTXR4QUlFblNERjZBRElJRWJ3TEExZVJlZWhhYjQ5VTRrVUVjNFh2SGNubEZsekJhd1lvWHFIaGVzYXNUM1lzQXFGTTZzQStDbGZzNThNc3ZDZi8rangvNGg5K2YrTTkrYXBoLyt4VmJSb1JYTUpoZTdCTzlicmpadWdhMnJPdklwTHhOOTRRM3lZVHYxaldUMXZoN0xzNEtRSVI3WVhvcWpZVGhFTk1LQ2YvRkdyOTI0Wkx5UDc1WEtkekRjNDh5UGk3RU5HWEJDS0dybVNvaGdIM3lhS2w2aldXWG5CRjNQRW9pTWFJRzNkUG5jUkRJbHluTTJSaEVKQnB4UkE2a0l3a0k0Z0RBaWFMdmhoM01CZjdsdmVEZU50UmFncmw0cVdmdUFFNGg4SFBxWVZnNDhscWJhNnNGOVZid2ZtUEtZRTRPOHRrOXoxdFI3cEd6bVVJMHoyaVBZdDd5N01OQWI3ODhHY0xmVjhIM05kRUgvSHNTL05NWjgzQXNob2JiS0Q3WWVzL0RXOUg0UlMvR01hRk5QR1JjOFByR0dBd2xueWNiYkFCNGZzQVVkbExMV3VoYWNvNU8zbFR2UEhaMHZLR3FrMW5Dbm9CdEIxNTE0TjkrTHR4K2pPNVRteGppQnVqSjA5aEtvbzI5cVc5K1pVNjkzb1dzMzFGbXhqbzliUE9HWkovVkdPVXZRUG9lNVZ4K3pRR2NBWVlFeVNTdG82UGtrSy8rRUlZZXc5MkpzcThsWkxoUXNjR2prVzBqa3l5SHYrdk1Rcm5rSzVKNFR2ZTJnRkk1RCs1ZWphaEdTQ2dpTm5GUE1rS1Jjd082YUZqVHFHS2owL2VpbndXbWxGMFcwSTNEeWhSTlNOc1Z5YmlVQ0U0ckE5bHpYZUhRQ25TenhEVlRrVmJubkRDZktFYTk1T3lNekpuU1dBaGtjcW1vbUlaLzhEVGZUL2VPYjliSkNnTGsrZDRGUGVRT1EycGpjWS8yQzMxa3hoOStiSGk3QWZldG9OMnJOV0M1ZjhsNDFJcmNNbEJMNU1iUjhQazZzZEFKckR0WU8vN3h5OFJ4VGxQVXB4ck9QTStKajgrRmYvNCtEQnc2MTFJcUQraEhoTWJIb2dQREthVFQxRjNXUjlXdW5naGRJRjNZOVVydkltUGF5TC9mSndqTzBtZUwyd0dlTmhKSXJTK2k2NkhRZk1FTXZvRWNwYTBDRHNzWmlqQlN5QXVFUE1QMENPMkZIcG1IbUFwWmRSRnIvWHBjUEY2ZWYxeG9rdTNCQUpGTWIwaEprNzcySEVpcGtxWmZuNDlHUlFWNWhHSmVNL0ZSQTd4U2RONDBPNEFuY0F0STZSNDZDU2IyMVMxdklqNFgyRUNldjJzOS8vS1hoWSsvSFBqMis0Ry8rMHZIMy95dTRoMFpoWHdud1JMNWR1S0dabFZEVFN5ZU5RUDNPMy9GZVIyL1lnSWJqZVRQZlJwNDJYdnAzK2FKVkRzZ3NySGV6UUZPS0NJM2tZcUpEVS9QM0RiNGxqd3NrVmlXb005cTBHSjJPRmp4N2hLbG43OHlwOVVXdjQ1Z05WdFdXbE5RR3ZNcExZRG9JanFKYTZ1ZUhVbGs3Q29hY0JTR29pWW5SSjcwd3VqRHcrUVM3ZzdXQzBZa0I4blVWbENTLzNwUzdvaDU2b3dTUUNrbE9pVGlKWVN5SWJhZGphdmxZb0lwRzVCaVhMcVBwcUtRU1NQS3U5dzQvdFBDVEJGQ2VoNkRmWjBIOEhvQ1AvL3B4RDVobm1qVVgraWtFeUVSVVFLZDdvWUdPZTFqd3cwdThjTFVBNVVDQWtCU2hFTW8yY0ZobVZFS3R4Q0hNM1VrYkJvdWNYdHJnNlJnRzBNSDlNckM0ZE5wUkJsYmgvVlFmUDJsNHVlMjhMdXg4QWJFK0tPam5oWHJoc0JYWkhwZXVWYWtFa3g3cFE4QzFVQmxZajdhYWh5UzBWRTJqejlkUzNEV2REUjlGK0J0Um9tZEZBSzNsQ09ET3dKcld5NHBxamdXQWdnZnpHN01aV2ZSNTk2VnY0NTh1c3JkT0k0bDh2Y0oxWXhNeXRrVHJYR2RudWZ1TktyeFd6N2l6a2psUXN1YndPUVFuamxYNEx3eU5DMkpzb1hNRG5XckJ5NmpBV21lN0lnbEFwbFo0WTF5Q0I2YzNvOUJZRGpKZ2FVMXF6aW5wWWVXTzhRZ25mQnJseGU3SkhDaDJ0eDV3M2FuSk52M0hjc2pXSjNWSkVQc2pzZUkrYXlOMklNZjd4dStmTWxHcGZ5NFp3THIyTldVbnZNeGVDNE0vT1U4c1VRUTlVLy9EQnl2cUNUQW1QYmVPYnBWbHZ6ekw3WjA4UnBNVlIxcllqNDcwcjJhMThibTFoVWpDV2hXaXNzYzVXMExldGZ2cFh4aHdwckVIVkRwdXdyT3V4a3JxYk04Yll6T1hDdS9TK1dhYWJDclhwMnNrRE9qSi9QaG9rbzNSVGM4bCtiazRxSE1pcXhsdWVTSVpyQkJSaHdnTkxMdUpmM0dsUSsrV3plb0E4TngzVG1oUzVTcUNaQnZDdVY3YUJsdHRuVGxuY00vU3dVZXdsa1hvRmZIb296TldvN0JLdWVkUndOQnYwMmdKM25yNGhoQjZFZEVPQmd5NWhqdS8zLy9hZUhQZng3NG05OTMvTjFQTi96K3g0VmJZaWZFclRUVHAxL3VGVGRGaGQ5K2tIRXVjSEtsMmxaUFN1cTE5N3hNcVM5Ri9ORDlRaURBSGxDbGhNWHVlaEVMOHN3eldxWG5SY2t3bldMUngrdDZwQWh2MElKMGhaTVZlZ0wycDB4UHBLRHlLK3lnSkZVYngxcXhIblFmNU5NZ3JhZ25DYWFVRHFZck9SZU9pY1FkbmpyUWR4bWRMNDVxSmdWc3JjajJua0xyWUQveGVVNlpwbDdjNzNLUmY2VkcrQ2E1a1ZDem1qY0l6S1BTcWxFeXZuN2Q4Tk43eGc5dnc4NVRLMUgydm9HQllWMlRqZ0hqZVg3MmhNOHh6Y01mUjhZeGtzZzZFckx5U1NkREdQTDJRakZMMjFBWHNpMGs0WUNUajMrMWprbFdMY3pDMTlobEJxRUd5Q2JsOTVsRk9yQ1IyQ05TR1ZOa1BUYTJEV1ZDMVFxVDNQZWRudUh6T2MwNCt5Ly8wdkUvKzZuaUw3Kzg4SWUvZlNNNTZCRHdaZzViYzgxUTlUdFN2bUV0R2dweERPYnRrZ0E3cDlvRVZWWXUrT0ViR21zeWo0WXNtUlNnd29KczRld2tBVUd0NU9ERGJtc3RvVHZQZFNqMUZTV1YwYkZJZ2s0b2FwMFJlVzIvYWZjYXZkSVpCc1ZVaW1zb1Izd1ViSnQ3a2hXQmdqMWtQRVdvdTNtNlJiM00xMlZmaDBGcWJ2b1dVVGRaZit3dzVnRm9XQi95S1BOTURVZ2RHUnEvcXJXMEYzVm1KY2JDdlluWk8rU2NSbkl5TFF2QmoxNEZCYTVZNjBBcVJZc2pTMDh0THhoWDNqQ2g5emNydFZ6aUt2LzJHaXpobWduRjk3TUp5bVFsWnU5dkdUZHhaTGRXTk9SQ3dYdTA1VW42NDgvZThjdWZYNWpZNE8yekM0Wnl5cC80UEU5VDVKODdWOSszbzJLdEo3NS9kNjh4R1Uxb05VZXBXUzU0aldUMHpjdXBYNUh4N0JFU0I2Sm53SUJmM29wVVdUOXhuSnpEa1JOYTZsRWVtWlZlRWlEenFsd1hPeC9PYnM4RFdSYzB5Q3Q3b2hnQmVNYWxiZWx2a085K1VLSjdPYXlIMmFWd29yMXU3TCtVMklsemtXOEJpRkQzQ2xrZjJmMnI2ZTFHaXh6SVpOR0hEeFJnQTI0MUNNSlZiaG4ranZMNWlpVVFSRGpsblN0RUVva2l2L1lJUDI4YXl6TXZqNGE0blkwZ280NHJkNEtvRHl6c2Z6cng4N2NkUC8yODRlOStmT0QzYnpKaWtkQWFJeXozYldHK0J2TG1DZXdEWVFnZFpETmJrZ1Z5Z05sK29LR2pSZFNnV2t3c2FyVjlBMDBQQ1M2Z2xvU1NnMGtxcitWZ0FTMk95SWw3TGpCYXNuTDAzR1lhYWgzbmpiOUk4czVOZWlzWlB1OGxoVDhYWFJvWGxYNWUyS0RhVWY2MkZJMTYrV2FuOVV1aU0xbTBiMDFoaTdLeE1ZZFpXR2RwanpFbDh6ZjlyVklxZ1dDbWJsZWJ6WUxNdnBHUm9GSEpSaXo1ZUhxN1pXdWQrTHNmRzM3M2xVcWswZExUZ01TQ0kwMzJ3c2MrOFBySStPT2ZKMTdhcTJORzh0ZHpuRFU1V1EyTk1EdmJtT2lFYWZKS1FvdzdMc0RCVVVFbktOOHo1NkMxNnlxaGsxTWU1VjNDbTIxcFE5MWt3R2haM0lYTHV5Zk9BZk5IblI1dW5raXIwakJCUmpYTDhzUi85ZjlPYU9XTzc3OENQL3llVGw3ZkYxcWRXUHNMRTNjYWNRTU1OYTBHekdnS280UEN2WGdzczZ0TnJvYTRYRGVqVzdyZWpjNTdkY09abjlLS1BER2lqdi9TTDhWV2RpVk5QU2lwTlhheStyelBlWkVSS2RwTmtpRXBsODRCaTNURjFSZ3JxeUp0emI3VG1pdCtrbEdzRTRxM3JndVkwUWcvNWlrc3laVUdFemx5OFNyUkRHZExKRXZlenpXbmljQWdpamhvK1E1bGozZDd1dzJUSGZaVkpKV0dGdVE4K0h2NlRqUURxcGlwTTBVM2t5blVPVHBHOFh1L2toWE5EdXdXZmlXNit2dTNqcjk4eXBCbFQzK1dWR29uM2JjTjcvZU10MXZCL2ExUmdHL0FPc2pDZFhRR2NNOSsyanI3OVdQaCszT3dYWFBha1pWeW1hK0pmL29BZnZuMnhLNnJlblVRb0pTQi9WWFJUNjlzNFpLY0RaWTZFcURWdk9sam45aWxaTEhJOXo3RSsxMFNlM2xMMHNUOEM1ZVE2dUIrSUx4TVk4eHJxSE1SWEtrT1hCNjlXRkxZTmN2UU9yckxha3hJa2JreGtiTFRySVpkSnlrZURsSzY5RDFIcEdBbGgvd3Y1aTJwYzZZek54WVVlc2haT2dPQnpGOHoycVFtUlVJajFpOHR5dTNKbE1xZ2JIdW1UQjU1TDBwUFNoZkNyNzJFQng0YlYwNUxRc2NJSU8wVVprQjczelhETXFwZlJYLzBmazhaWjFSVEU5aE5NNG4zcU9INzlWajQrR1ZnZjMzZzIzdkczLzhCK0lJRy9GeXgzUmR1d3FhSEd6WWhFWXN1aGZBRURjN3hXZkZjektIM294dWcvTnZKNnp5bkl0aFg1S0tYenl4NXM2N1lWclQ5MUUwNHdHQk4vZ21jNndPZ090aVk0SzZtSG9QcFBDS0VaMFpWSDdHeVFsRmtlVGt0Si9HZE02K1dsRDluSmRlSXZyRElUQS9JZDVKdWxkbFpVTFZSdGxKUVdpSGJIRlUzQy9zMUtVMENQMlZ2M3RMUWI3cG5uOHUrVUR6Zmp4TEdGS2JITFhtTm1xSmJiV2dMZVB5WVRNQTh2bVFVMjBCWkFKU0o2Y2hha001eG5oUDdtZkRMeDhSLzgrZUI3eDM0T0pZUXJDZUdwMXBMSWJpRlNsak5PR2c0d1lTYmFoVzd5bnhJMGlGR3BjYm1MeGhvSlJveFJING9ubzZwcmtjRGtUNFczN3pTcjlIemVERUdkSWM5Y000Y2ZrNi9OZ2hTTXRBNzgvQ2Z6d00vL3pIaC8xbmU4VDk1VzNoN2ovZ3hPVDlQb0dUeXdvMGJVanBETTlNMFFLMmMxV2dUSE15RVZLQVZZK3dZSXVVb1E2YW1wd3hLcGZhV2dnL2dtNkE4eXpkZGNLeFA1QmdvK3NiQTViWGxpR21WaGtYWTI0eU5FaCtsWXZjQkhmNEcxZnl4STIwM0I1ZktweTVLTVhseHFQWmdJYmJFY3hDKy82b2I3eXVwcmJCYXptcFRydVRkK1VUSktpOWM0anptenQxQ0c0OWdXTEZaVDU5bUZwYXFPejkwanhOdURSb1JCbVRjNzNzeWxzVmxqbjlGMFgxTjFhTU02Njh2dHRqT1VQZjVPZkZ0aUFpRTl5dis5MnB6OFBZR3RBU1dwNzA5UENxTjgyQ2xSdjhFenM1NS9QVTd6LytuUDMvYWp4eHlrUGJFNTg5OTRLVis0cnRUeFNwYXcwWmI4NXBwNFJxLzJrN0w3c1dVd2w1NGo2MnhGS2tKVExxUG9iSmFrU1ZadUplT1JGTTVaRDZ2ZGRKUTJXK1JWNllqOUNEZ0tVck1RcVQrV0RQSWhRbDZpMEQ2MU90S2FmSzRsUFVHRGo0aXRWZFNxRGlpRzJmeUVybk9NWEtGVFdVZXBXSEpMVzhxK0RoeUVKeU1XT2RzakNlbmRsdDRrQnZsMG9vYU0zb1ZGTm5YYThXYUJwd2ZJd2pNa3dJYUplTnFYT2ZzRlNSbVFHeEFVSU43aWdRZXluY3hRUG43eHdSODZ4UGZqb1QvL1BjZCtPR0ZqN1hoa2FyU3pBM2FkWXdFemttY0dVNk1EL1p0UCtiQVBFN0t5eGR3N0FraldDaFJoL1pEMkRBTXpUcGdJSGh2VjZEODNLdEQxbVJ5a1JTOXVSRGhSc3hZREF1dWVKMkJMbHRIb2x1bVdGSk9RdDIzTkxENnk1NUx4RytQYkd4M2pBQmtEWEtYaHlocmxibUxyUUZ3NmxpZ0l0bkNyZENSSjI0dEJ3MmsrTGVyRDFmMis1dXVKSzZMVGZaWmFZaFFicTdJRGZqOUQwU2czOThyRjNhaHppZ2xCVElHMVo2ZXo0bm51ZkRQejRYLytzOEx6M05ZaWRwckFrZS9FTGdqRlhLNHl6dWg0ZE1LVEJJbFJUY25nRXF1ZEI3TERWblJYdklPZ3pkTkliVGdMNmVnQzZlSjQyZGN4U0thSWRxTDVDdUZaOHBaZ0szZ1ROWG00ZHJ5OVhBWXFRdjdwZi94NXdONC9JSi8rUGtuYkkzRzNpaEFPdm1iZUoxWTk0cUVIUWszZVA4Uk9NeG9GZUlkOHBBbldiQlNwVm95YTZaYU9IYjJwd09PR0hXYTBXT0tnaWNIU21sR056YVcvd1c3MjdsSDNUd05IL0hjWjdiTDlCSkNYbWdScGlBQVhWZER1aUxWcEhFY1dLa29KMWxvR0JWNjlUbDcvRWpuTXJmemsycC96TURzTWFLa3JUZzVGaTRsVTQzbUl4eS8yTXVTQ1BMVzR6TnJEMURoVU1PYm9ZakZJQUNRM2MwZVNPdXA0V094TFR0U0tabzJCajJkazJ2NnVYZXNKWC94a2JFK0txWitaOThuVHV0SkRqeGZFLy9oenhQbkovQTVnMUFrSzlYMHV4OHFicmVISTZxcGNITDFlZkVENTBGZTgyOGZKNDZkd0xFLy92bGxlMnNva2JTUGpQMGNPQ0JhMHBOQU9MN3YyQ0UySDJGY2RwRVFhUjQyM3E4ajR6MG50TzFHSTBrZ3lUNlpKMjJwaGlhSTRiK212aFFSRmJXd09nd0t3Mkl0TmFQWFFNZkFHSlVldnI0ekk2YkVzamY5RzhKR3FjWS9TTC9tRFBhL2xYQzZUQTUxZG0zWGd2L2tvWHJ3SEZFZi9WNnNmOSs2S3RWMXNON3dFclVwVWhvL1YzSkV2YTgxMWFobis0NVRCOTdnWGZoV09CL1hvUTdrZXlBQ0F4c2xZeU1IQVBCS1c2YW9Lc1Y0Y1BlWFNPWGc2YitEQmlCMDBUNFMvdmhjZVA3anhOc3ZCLzVIT0lELy9nM3pIamw1cklaWm1oa2R2NzZtY1JaOG5ndFRiWGFmcjRVZFhXSlpZK1VhaFB0SzYxNnA3am12WWNrVjFIMlhzSjU3TDg1WE1yT0lsQ09hTHBwUlh5UTZvOTR2YVlLaUZsQ1FtUDNUTlhrbEttR0lVRmRvUE5NN3ZCTE5ZT0hXZ25vYW5XalMwaklHbkdFMWNCTDNyRnpqWU8xd05RS1hnZFl5V2x1bVVMY0piRUh1YjMrK0J1QnBDWlNZY0NUY3Q0NlczcENWVi8vcGQ4Q2prZUVxdWs4dEluK1hGTzVJbUlPQzUrT3o0M2xNSzMzNUwvL3RnVy9uWVQzTzk1a3d6c0pOUEtMSndKd3pGRHBQVG0rZlkwUnZoMkhJb0ErdEZhTjNHK2ZhR3JESUZwWUZlMTUrYnJYbERKQ1ZqM2ZNZ2JlZzdHT2dhajNja05DVXM1dDVVUkhQV0RjQXhOd1hpaTdqTU9IKzg3N3c1ZnNMLzQvLzVoY0FQK0wzZjdOTWNaZTBNTVg1dnZZT2xFSEx2dEhyWFNtYkFveUVZRGVoNUVRM3BkMEU4cXJLVnB4RVY4TUozaU8xZzJETEV4WnFYdVV1c2hRVG1jYkVta0tGbVgxN2E3NFZkdmRRS0lyVDNNcVA4MlNIVWlZRTJYZWs0WnU3Q0NzUzVTZUJLdkhVbWw1ejhxUUlzVndaNndScXpBSFVwVkljSGxoY0VsTEQxN2txSlB4UjVDUmlja3lLZ3NScU5NMmpjM3Q5NEdsR1NsNVYxU2lMem9EeE5uVDAxNGg3MDVxNnZSZnNaN2N3K0RrWG5wMUsvUy9Id3FuUDMzUEM1OHpJRzNBdjJjcmQydjBScnFKNENUQVdQajloeCtzMWJHK3RjUkk1UHJoLy92U25EN3pHWkJqOUFKNVl3b3JZK2lkS0hGUDNxcFFZTlNEM0FWSEtCTHRpMC8wTUhCTm1DRnppTDV4RDdVY3UvMktNaDhueS9IdGY5dTl1NEx3TDlpRTAwNHFhZUwzdmprYjBOUWVDKzN0T05kT0pXdXNleXR6ZFpBVFNuVVpNa0sxNGFtWmRNaUZUK3ljMEprdGlGUm1MYnBJbCs2a1JXSkdsKzB1c29va2xFTUEwR1FOaFVRWkd4RlVKTzUyeVhISHRBdVZ1eWFuSDQ1ejg5eVVWcXEyck9mWE9oelI4WlNxRjBURW94N1JQNDR2WDFKalRVRnVKMmFyRktucW1SeHMwbjdNdml5NTk3eFBIZi8wei92VHhpZi90Ly9SSDRPc0F0anZCbE0vVDV2TFh2ZU04RXA3ZjFMcTF3MG9sbjJlMzZ5a2JaUzROOEl3NmwyZ0hPK2tQRjY0MWhTRzh3NU5RLzl0WU5CNGk0WVlYN3NYRDdpRlhjZ3JCVVRJcy85ZENTanBLMFhHZVdnU2k1RlFEaGlMdnFmQUZFeGFsRVFCVEtqbTVrZW5SbmNNRjBWSTRtVnpIdFFJVlZRUENwdlMxVGpRNzZZbU1ob2ZRZWtYeHFDZm83VGp5SFRNRzU3NWwvUGcxNDJhNXJpOTQ1TW56QXRnYVVibzVaM1I5LzNncDU2OUdERWRmV0VleTNNakhFL2oyZmVIZi9Iemd6NjhEUDNkR0N0WXpHZVl4SWlNRHdlYVdMOHJTWDEvYVdhNm54bEt1ZnVxN1FlVm8zbTNNc0lOWmpBaUdYbTNpZDhxaUIzcHZUU0YzcGpvcUJEUnoxR1VCa2VoWmMxd21uZHhjS2VCenZuaUFNMjh5bHBrYit2aDI0ci8rYjZqc2Z2enBRTTZiMFVlbVRTRTM5L0Fudy9HckZKM3JBTmFOdVRwNWI2anlGT29XYXcwTkhTZm0zSUhnUnZIRktHck15UE81dFF1RUFBaFNtQm9XY0ZJT2N6cUdOSXQ1TUZ0M3VGd0s1MHdNcTFleFdoV1NiZ0YyS0oyTlQ3QmtHQWpEcS9YbnVmZEx0ZTI2OG92N1VhS3c1OExGUEJHMHppVVRmNktVMDVWQ1JNRFF1ZHc0MEZvU2F0aTlrRVJOb2pRQU5QWlphUkEzQ0xvcDUzRXNnZjRTeGlxT2RqY0Q5MWdkenozaDg3bndlVkloVThCd1QzMjVBKzI5NEZiZVVZcGpIU1E3VnNkK0xIeThCaFFmeDNHY0RDY3JiUGh4N3RpL0QzeWNCejdQak5VemRsWGtlUGU3QTBHNnRhWlQwRjY5MEZvS3FyWE1wQU93bjUxbHAxaTJ3Yk55dm4yNUlCTTVqNkZwZFk2c1V0OGNVVStYRi9GYlVXcWJHekJPaHFyNUJWKzEwY294Q2JEcUtBT01TNHRna2lpdGNOYVVhbFZ2ZXM0cGNsSHpHYzZmVmd0bHAwckVuQVk2Vk5zVWhDVEExSHlIaG16djR0Q3cvdVhaMDFIOFcxd1AzRVBCWGlrbHF2OWx3K0hFclMvZWkrMjNoSnNNZ1JxMnhuWFc0a292N3p0d0RpRVpZNno0ZmhnWVM1aWo2RkVpZzBibnJNUU4zQVdFUFVvaWY0R3ZBU241bno4WHZ2MDNPLzdOUC80Wi8vcnZHLzYzLyt1L1k2M2VPYkFmd0srL1ZBdXo5NzFiaElwOEM3RzF5NkN6bXNHanpwVUV5VSsyV012RkdscmhuNjlZT0Y3RVBwWC9rQnFJZG8zSTlBSXU3ZmJJRmhic1BsU3VMV0loRVIvUFBWaXVnbUZmQ3kvVEdxNEpEZFZLM2RBV3RnMzQ4cmdoaVhQNWZFMzg1UnREMU9UZktGYkcwaXFWTlJlSW1vNjBKU1JtUlVGRUI4emF1NEdlbkp1RUVsRk5vZnZIK3czM3Q0THNmcHRXeUdadDlhQTgrNkl5N1JOOUVwMTVES0NmeVN6b1g1OFNIc2ZFODNYZzMvMjY0OS8vNmNTZitqSk82QmVTS3hhazVlRitINVp5b1dvRmhzM2xzUi9JWkJrUUIvMzBDdmNBSDFLcGNvT3FsZDhVQmF5cWRDUlVCdnFsLzFnS2FrZ2trZGxRdUl0UUVxK1I4ZTZ5NWJZQmcwanNTbUNHdmkvMUl2QkhUUlI4ZjlxZEZPM2IvMWVwZjhVL0hNRENnUi9UeG52WVJEemlnbU9iUUQ2QmV0Y3UzcEF3YVh6NEJrMEhFcll3eXN4ejMzbmRHUFpmU3dWSnJucEpHK1o2U1h4ZGM2VERGQVRSeXJsV0g4TzRxU2t6WGVtcWFBZ0JJVThaOHFYblErN3FraC9HeExoUTlWV04rS3lJSXdtMFZ4QUF2Uk9pa3RGeURzU3hyc25SNkFyZHV5SG9ER013WEV0eWQrWjJRZnlTaWNFNUhMREVnY0J6VUVGTVB4ZXlLSjJMWExPQUwwZVVhN3hlNk9lQjR6VnRINHlSTVZlRUtwTVkzcDZ2SGI5K0o2N2k4NWc0SlBpeEFlMDlLVExDVGxTNUVvZnhVb3ZSaitkTEhwRWJOeDJyZHdDWkhjdE9LdXJ2KzhEbng4SitrRDdxSE1iTXgvVUw2RjdET2hMUk5qMHVPaVVpUUNLTmJMUVdyc0E0T1R5Vis2RXJ6YUdsejdUR01kQmJBbWJYdnFzeWxnb1dxbmg1emlzRG9JdkpsVW1hcEtaT1l5SUF5a0NzODlreHRTLzFjcXdscmNVeFE5YkgrZDJ4R3R3QlpYcUtCcEhSS2RnS0k0TnplcGt5ZFlLL0h3dEFkVEdoSHBVaUJOYWk4OUJ5ZFRROTI2N09BTzhhMFJqUEUwb2RFVVVvZWp6bVFsZFRxZUlPWkVKbzdUQm9JbHFxZTQyVWhDOWRoSHRUTkxZcUI1N0I3K0VnY0FHY3dlZnVkRXEvZlZINjh6bXNVaWh5LzZJcS92eCs0ci80WFBqVHQzK0h2LzNoQys2aXFyN0pnQml6S0dVYWFZU1kwQ1lETHFQUzhWQjNKbm5uZ1c4VXNDYkZEWiswUk9MRThtNjZ2RUY3NEVETFlxR1hlMjhacldSVVpEUm5LZG9TRnExQisxd3pLUzArYnVlNXBoVVVSOHE0UHlxdDJuc3p5L2I5RHFSMDRQMk53cm5QaXRzZFZuUDY1NS9KS1Q3V3hOWWEvdjczbFpHQzRsNFhCUkluWFlzbkxmelErQUszazlvMFNwbTBDdnh3TDlqS0J0eUExQlIyUHJSWW5zTnllbkVNSHpNY254UEhtTmpOTXdlK2ZRRGZYNGQxbVR0dzROZGZUL3o3UDNmOFpRRFBJMkdQREl4S2s0b2pGeUtjZXhtZ0FDSHl2Z1djNmFSZ0hXcEtVZWxGQnkydGEvblMwRHp0SWpGOERpcTFNTjZpOXQyNTdHdGFLbE1ERGJXV0xLTFNxdFpBMlV4d2FiZHFmSHdEWmI4V0RIV1grdFAzdzFEeEV5KzgxdCtpNHhQUEYvQzNmd0J1V09FWkVEb2xYTVFPcERjRHpVWC9RQWU4VEw2aUhYZkxON3pPNzNMMm94VkR0RjQ5Z0pjOFVjY0JXT2cxZ0dzNUNRUlpsRzlXRGlpOG9xbUlWekZFYkdYUGRwWjlIVU50UzZjWmErVk9MekxzWms1Q1lEUTRaaXZqZ3FHSXlNcFViM2NYeW9IVWQ4R2psZVAxeUF6blcwaWNRc0gwc05WT3l6QklVLzd5UXZLb0Q5TXpaSEdiSTFqQWtoSlBKY0s4cHFpd2VJNHhNWTV1YTZpL1lKMEpoOVdRVjd5NldONG0yNGlPWStEWDd4MHZOcCtnRXVaRUtVVEVQYW1ESWN5ZkIvNzhzdCtrc054M05CVEpxNmh0ZjJMaDllM0FjdzNNMThJeFQ1eFNpR001NVdvSnF0SGc1VkFLeFl2TG5KdWVsVUI4TFdRbnBIQ09Eak9VZ3d3b0ZFWlBFK3VRWTdRMDlqcHgyRUo4UEd3Z0pLaWNSMkoxakpNdjh3dmhKYXRVa2dZbHkzYjF1K25DL1cvVGRGa3pRZDNHSEVMa3dTLzQrd3Q3NzdVdFZGTEpZRkJJYy96SjRYRE5aRWMyNk5MV2tEZ1JnZmlTL3ZOZmoyWTFYai9HTWZYQ2x0ZHBZZ3dxK09LTCtteFUraWRrdithc3Rlc01pQ2xSODhUOVJYQ2lCQ1dzaDZDN3h2UlVxdkdtUzNMbk1LZjR6ZmRDby9FMVZnRG80T2ZyK1BNZmdWLysrR2Y4NGU4YjdxbGh5emN2QTQ2R1IzUG9oT1IyNkZhUmtTMGFYRStWbWFqUHM4SkJVdVlPSGt6WHd2NEVYaFRUZFZPU21LQzA4QjRYQ1ZaTXVHYzhTcmE4ZFM3UmtIN1pwRVVvWlkxdUY2dmU2MUUrb1lSMFNSbGZ2allMY1NNbi9QNmUwTjR6dnJac2svajJhSVlDdjQwcVh2V0UrcnNUM1VwZE11NzNoVlJBNGNoV2d3UWgwYUJncDV5V3NkVUlnZTRXcHV0dVhWcEU0RjZiZ2NDMnQ0UlNDMHJoV0QzUlRXZjFSemFDaVg1TXBCc3pYV01mK1BsWDhqci9lcHc0UGlvK2pMWVMrSndkNjh6NHI3NE5mSHcvOFR4aENuOTMreVl3OUNoWWdSdklXbURUS1RxRHUzZy9odDZEaml3RGE1Z3lieldqdGkyMnlLVFNkZ2M2WjJWNGN3N2lHcUdiVTJBanRCSGQxbktvczR1M2hTY1MzaldQQ2pFeVRGOGNIekgxWGpaTVJkQnZkdno2TERyTDhmL05xWGY4L3N1SjEvNGovdUZmd09ab1BkVGdlZ2RHU2NoeklPV08rdllENE9RZCtST1ltdzNVK2Z5TzJralM4ZHFmREJOcWN4UmFuc0M4Y2lCMHhmOXE4TEhUbUNyUVl3NnlvcFdSeVFRb2JBMUJiSXVuamtaQmd3dGMrcEFDK2p3d1Y4UHFoOWdoNU0xNTEwQTM0OFpVMlpLNEVxYnpyMVB4SlZueHBQWjJyNGpIRklBcWkwWnJRWUxCYVZiTlM2WENhbFU1VGdkVXJZeHhka0JHdzVwTUF3alFGQ0k2MnFQS2l4cVllMmR1eVl5WFpPZGI4OFJySDhabi91eEp4Z0lqRUgvNjlzS2M1RUkvNThBYzNRR0FxbUpvUUNvTXl5czMvdTgvQjJidkJOejFqbjUyK3NXOFZUek5TOTN3T2s5cjJESUg3MjJuZlNtaWtpa2x4VC9HR2lPUEd0d2NYTXNKTVBUNXZkTFE5aFJod3pJalpTd0s3YzRZcVVwNFl5Kzd4K2RqRjQ2eTVzY1VTd3Qyc2VUanRNejc3NU9VeE5xTFY2YVdEQjVLZjE2VmFDajJhSkY2T1NMZE9SanhEQ3FIcEhYbFFGenJoVTlNeWtKd1hlYjVWM2xLK3Vsbzk3aWFMSmwxQ3ZBcmRrcXRKV2ZKR3hlbXVzRzMxT2JYYVU3Y0lhNmVMa0RpWk1yNGhvOVRWQVdaTG9xYy9hSTR3VkoxeVBRZndpU0JHU0pQcUdpa1FIUXlucEx6Q0hqcmJTZnE2YzdJU2dkR0J0VnpMbFkxQmRzT1JnTCs5SThIQ2c3ODRhZFB0RWI1aFFGc3N5TEJtMVh4b0FBWWhpR281dUVzZ2o4K0IvRFFSVVorVHpTRTBlN1V0UzFEZVpuQ1B6cFlMZWZYc0hENnZTdzhjcmJuclNRcWsyanBqTzdrQ0JCVlpPVUFiQ2FrT3BwUTFGOXJRbjJ2K09GV2tHN1Y4czd2elJRVDJ4KzJhdGR5SDhBTHc0QlFRTEhIZ2lTU3BxWjZZS2szTGN3dGlkeEYxQTV4ZEd3NVZ1U1Y5b1llVmh6cVhmeDlHZEwxUEVtSVVqOHlQcDVQNjdyMDZ3Y3d5eDJmT3hmTzl6NXdUbGdkNFI5L1BmRDllZUI1TUdmK2NnOHNwazJLQTdTYVBkZW13Tk00UFk4VmoxT3NXWXN0RFVQcDFvSzZOVlF6UnN5bHd2UlE3aGljQzlYTDl0R3habkFMR04ycWhOTklFM1dxa2tIbjhSeGxBU0I0VllTN2NsRDRpckRCYTVsUVJ0Vndhbm5wSDU4ZHBNbnJ3UEg1d0I5Ly9tZjhtLy9YaHYvdWYvNFQvdTd2RWxKbHZubDcyS1Z6ZnRzSGFua0RKbUtuejlQTTI3NXZZdjQ2Zlk2aktjdzRDZVJUMlNDR2lsazZlRSsxcUw1ZGh5SllPVWxyNUlMY2FrUk1hakh5bEo0WFZsNnNIcEZkSHBEUHBZZVRlWHhjNmJOS2drc3Fka1FjR3U4TFZrTGg0RE9pTXpsY0t1bmRMWVF5dXMrbm11b01ZUEw2bHBpOFZuSHBPTkdTQkpvWTFMeXFMK1ZHUllNU1FmVXhMYVNOc1dQdEE4TVV1WkZkbThJOVB3NURtWDk4RHJ6MmlSYzQxczhCbkQwVFhEdkJ5TVhTYy8yS3Y0QTVVRXZHTVY0NGpveC8vZzVUNEI5amNBd0dhSERvSzhaajllbzR5eWxRS1IyU1k4RkNtZnVTQWFSWVRWQW1LM29JQi9IU2dQZHhqQ3FJQ1FieENTcmRKN0N2U1lNdE9EWHhIQU1iQ3RIWHdpc05meDl4TkhUZGIvdE4xRTBoWWo3Q0FXOEFZcktqdDNoZWpJcEplVWxwUk81WWZUK2JsN09OOEtCLzIyRTVqTjBwaGQxUEV2cHM4N3g0MjQ0WnlhSE4zUjFDUXRmckdUTlBCK0VKWHhIVXM1QjhEZ09SNzRYNFVKT3ROUjJWNzIvZ25PenJjTCsyYjljUjY1Nm96eWw4RjVBbEx0NG1TOXdQRGVrVVgwZTFFWS94TzFjS2dSV0hwVWdmbytBZ0g0ZUNBK1RrMUxnTFBEcnhRTUk5Wjd6NndvN2hZQ2ZuOThjLy8zSGhoM0xnL3RpUWEvSHZJU0hMR0dHNzFxVEVXaDJMbnZSVUR2eDFUcFRLdG9zMG1NaVcxbXI2RFNlTzA3UWlKK1ZMRTE0bWRIZ1Rqd3hqYXJxVmhGdWxOYlFCQkxJcGRMUkZ2aDR2S25LU3BOeUFHd3EyTGVPSHI5VnF1YWZKU0VjamRveVJVTkc1ZWM4VHEyejBTQzBjMDdua253dmxrYkdHTnQ1U0xYMGx1dHpCTklJYVNYakZFWjV2OHV3WittQnB5dm5KWk8rNDNmSHJ0NmYxTE44L3VVbGZ6NFhqZk9GRVp0Y2xrWmZNOUdTbnRObndIQjFIci9qVG40R1BOYW5NWjdMM1pYU3JGS2txdEV0UUdiTGRHWld6S2Qxb3FjbVlZRU95ajBVdlhUOXFUdFpNcFcwRnpmQUlndHFpV1loN0hHQ0hKczFyS1pVQXNTa3dEaUxzRjl6YnFvMFRXSytteUxNdnV2SHlKSnB0anB3R2JxbWlHb3NXZjE1Z29LZ3Z4Y1F0WkNZM3lucGlld0wvdEQveHh6LzliRVE5LzR2L3hlL3gvcVdpZkdiN2Q5cXE1V2hyK3dYbDlqdXoxWE5WaDRKOWlxQ0NuZnhXQVZLbFVNbkl3YVBlbVhNZHh5dWNIckRNSjhPQlFsR3d3ajc2ak5Ua0ZHSDlsWjBXV2R6VzQ0V0VKaUZFajZaM1lPd050M2RUNmxRTHg0MU82SEx1RjRYTWxjOWROb1pPSXlyS1NUc1gzNDh5azRSTisrV0tjYk41aXA3Vi9KckdSaVFvaDl6VXZqQ3RvRnZqNDhIazdBbk9oRGo0ZVdBSG5oTllCK1poaVcyT3diN1ExNEcvZkh2aDQralk5NDZPaGVOSWVPMENiTEtzalJTYVkrSTVUcHhxRDRtWk1hejBydUExWU9tcm41L1RHbGgwNDFIdnBrU2ZOcWJMOEFXWUU4ZnBSZzY5TEprMHZFUms1NjF3RXFaWWNJdzVLcHBYVVpya0FlTG9hK0NYbytCTEd5U2x3Y0JjK1VxK1ZkZzBDQ1BqZ052K3Bvd2laUktZSTZ4cVA4UnQ2YUk2TllBMDBwSkRnYmdmeTlIVmNYMHhxYUc4c25MQjN0bzVEc2hJWWRRb0pHSzhHZmFDVGpjbzV3cjdEbHpPay84S1FOZVBUWDJpeDJMcEhicWlPdDc2TkY4VEZ3b1E4dEJja09SeWtFYlozcnMySCtvWUptOGJZR0MwaDNzVGNPZGlJdXVWV1BaU2psVFNCRTludGFsR0pRNGhXdVpIVlNpQmttSmFWYTA3dDRFd3B4MTFVVStTb0MwYTVKaVVMTlA1bTFBN3R3M3hDSnpjZlM3OGNVemMrNDZ2RlZqdE5CRDRIWDRTYTlCQ2ZWQXk2cWtCcnhnNFJrSFBkR2I2MXRGbWdyTjNqNVROS2s2T3loUnhTaXVFSUxuT3E4YlBMTlNpZXZ2ZWFyYlAxY0tBVExQbTdsb2s0Zk9pTHZPVXlkMWNDTlQ2NFN0d3k0MTg4NUhkOGx3czVtZEMycm8xODAvakVIRS9jSDZjK0R3VVJqYm1wb0VzOHBZcDhOVlBYMjVJQStpMWFIZnczbFBSOTFyMlJSdzJ0SXlWN3krMlBhTUlQbGpHMUJmMm1TemY5VHAyODVDUGM2TFA2SllFSkJQaWZYV3JKL3o1MjRtZlA1aWJQYlU1QmVHV2lRRjVkZ3p6TFYvd21hSE9KVUtkZ1d5Q0xzRVZMODhWK1JsSHRmcG9LeVFFUDZnUXdscGpaelQzNnN0aXlKNzlmZ0tJa3NVSG5Xb0E3TXE5dVU3RHpRWG9BaW9HQ1hra1hHdDdBL0tCNjhIeGIzNFRPWnVsdTBWSFBYb2xGc29kK0QvK24vK0k5bWo0MngvditQMGZHbjc4YVRPZzJ1MXJ3L2I2QzBiN2dySXRKQm1rS0M5SXNsbllHaTBGYXEzRE51NDRPNDd2eitBZUlGclhETlBUTTBTVmFab3hrNmhHQzhxMXZNd2xtMDVSSWt3M0VRS3VrWkNpcEtvQTJNREluc3V1SnJDeUJFR0V3U2dNR0drZzh4azk4dWhMWFVZSy9uUXM3ZU1VWVB6a0hiY0dCUnByVEFuQ1VoYy9LTCtQazN0VW5UMndhTEhIdWhxbUVobmRHVHZHOSsrMFZOYUI5WnBZaytWang5SHh4ei90K053WFBsOGRmVTZyNnZCK3psNEM1MHBsdDN1NE9RWUZYYW5RajUyODZYLytEcEVtVGV3RCtQN3Q5SldQNGVGYVZvbjhCczZ5citSa1NVRW5PaFZod05KWVNhWTFZVFI4NytrN1RpeDBZaGlRVTc4WnhxMytPY2NrQ05hallDTEFjb21XU25qODdvV2VKNG1VR3NIbGpBU1piR2IxZ0pzZEl4cnAyR3RSZmhqZWVuYVBQQ3FwaGIwcDBZeEozMG41R3JxUCt3aEJ3cjRBL0YxMytvcFN0cmZJVjRiWFRHVW1CdkNDdGJnV1c2bzQ1M25OeFMvVmR4ZEh0a084OWNOQWRyNVZsNXFkK0I0SU0wUlJuVFJ3ZEFJTjd4bkN3ZkJQZDZYbk1TNXlVQUx4dnlhcW9sMTd5Z0hDamZTbmFmZXFkVGt1dlduNXBNK0VJYk90cldWMjhibDRUbzlZSnYxR3lSVnRuVGhtNE9hZGVmbzVwdW0xUDZDYm8ydThtUzI1RVlHbC82L2RMcFBXYWVzRHo1TFFaa1pCaE94S3plYlorUTgzRWZuZlVuUVo0NUlJRmlyOURFTjVjNktLWDNvckMxdmhZeGZnRGlnV1NxeGxzT2xLYWFZZ3Zqd1Niam5US2tMMEZ4eE05Z1VKQVhQbTlNeWZIZDhNY01hOEpBcE1rVThMTXhEb3NYSXlvZlR6ZWVDbmV3TzJqbGxFVWtGWGlBandJZDU0ZVhWWUU4ZEJVRStmbnVDbWtqNUh3U21oOHpvNCtLL1BlZUVsN29za0tkOEg2UUQvK1R1akh4OTlZQVVCa3VxZVp5QjE4M2xGYUNJaHpjbGU2Q3R5U2dVemNtNVJmRVlsWEl2TjQrTjl3OXN0bXhmZEhuY2kwNDhPTExMZmpjNlFWZStNWnV4SDUzZ3JYNWo0QkUwTlhZQUFqSWx3Ujh4dWptYXZXcmhVT2pWWDNBcU5GTjJyYUdXSGVia2FaaUJuMGc1WEtyMHc1YUx1Y3N4aDdTenhHdmo4T1BIdi9rUEQzLzN0SGUvdkJmL3dEeG45L2dQcTlnM2x0RmdQOHUwd3pFWXFXUVd5dHQxRjBhamszRDdSWHkvTTBZUEdNbVhVcmVCMWRvWFVoOVhSenhiRUdKbXV1WTB4YW5aQkZBVXRnZjZSc1JVRU52ZDZCMUtsUWRBRktPMkpFY0hLY0dpdERKbXVOU3dzUHNxRWE3N3NSa09KSEorUy9rNDJGRkY4cUFNY2R6aVZ3NXBFZ1VzNFJtMWFJSUd6blBIaWtRZW9ucDd2TTg5OXZEQmZPOVJxekN6cmNaNFlmZGxhL2ZuUEwxUG0zNTREeDZCWHZtZ0h1TmVKL1NrRmxxeDhpWVl1TXlIbWxaOHZXSGorMjc1c0QrNm5vbCtqazZOeFR1VStIVzJ0SmswbGhhZW84czFBd3lMU1NRemowdnRUdENsNDVZTTNFNmJJR1UwTGxzUWdDUlRzQUZkQWIvbHZZV09KYTF4czBzRlhXeklSVUdyRnRMUlExSnhFMFJTUDdIdlFRZDJNd0Y3TFdvdU1kM1M5cnZlRW5Sa1JYZ2pscnM5SXlGK1o4Y0p5d1hFbXRBcmttZjBVVkl5RmNxQlBvdXZYRU1hcEZSTDNyS0JsRFdEb29qRWJBTHU0M2lqZDBqeGV5V2RTS3VoZ1ZHdklBWVdIem9Gd1NtUkEwU2FTOGVQUGs1SXdDWlkybml1NFBqb2pjM0VONHBDZlVYQWRzelA1MlptZEw3OWdrOUplT2NXblRYUnNHTUlqaE9SSURzekRuL2FFZjVrVHlvMTlPWEpKVEJXcEkyTDFUZWtKL1hNUXVMQnl3V3BEQWxad0lCSWlNWlFYdGVOaHVjVUNvSUJ4MEVnQjNpcTkrV1RmWlIxeU5RczV2QnJ4MHRqN3Q5dENLVXNiVE9DV09XZ0V1UGVSWkZXTlU1NXR4N2VkNVN0RFlJcXlFbVlsQmtCNEpaMkxmOTlmSFcwVTYwMWVxdnUzMGtrcTNjemlTRHJYd3VFa0ZXYjJUM3B0SzJIZ2liRnVlSjBiUHI0ei8rZjMxclZZbjUzSTlyOGNBMy82WFBqbGx3UEhKTkpVOGJXd3BEV2gybVlVMmhuY0NGVjZQbVdtUFl4UkxWbnFJZGlHWUVtZ3FXV1hUY0tweGVOWjhOZ3FpaXNWeDBsTWhqbmh6UWhHYks3aW03Z1YzTVVuRHJhK3BRRDBwZ1NLa0d4MUlpdlBVK3pDays2ajQxZ0RXNnVtc004WEYzalJ3cllWMGRreXNBOTV3Ulc0KzRJckcvQlpCUHc2V1I0MGgrWHp2Z1A0eXdmdzllMk8vL0svQWY3aFgvNkt2L3U3TC9qaEMxRHJnZG9ybXcwOUVsTFp0Q3Mvc1ZveFVPTEFpZldjbVB1Sk5aaGFLY2hJTFVKMlFyUlIyQTRncU5rcmlzTGJheFR4a1d1ZTRGWi80VEI0ZFFFMjNoeUVxbDNaeGt5S1FVQVhENFhxL2llVmZya0JJeExwZ1EwcHl6a0VMckhUT1B4TGg5OFBzdDNURUIzbkNpeEcxNXpJS3pyV0N3L2tvTjRVd0dDdWdmUHpGNFdZRHZUUFQ2SDRUNXduYVkzL3d4OFBmTzQ3UHA4blBnNWdhaUM4eEFsUzVzY3hNZlNiNTlUakt4TVZQQ2VlKzhUbkVGM3c2UGorcWNvRGNvRnpIUnRoakd1R2NEYmdaQ2xaUGNLMThzVlBUcjlMMzhscGNPMmw0clRBcUNuVEM2UGdwaUVVUDBNNlp1V2ErNWdvcGxoWTNlT3NieGlYTEJMbURJV3JFNGsxcmNLWnE5TyttQTRiSjZZV1ZBbzllOEhBcVFoWjVGelRJMFFxQTA2WDBMaCtYemlRdUErRWx4a3lOdHJueG1lMDU5ZXgwSWtJb0F6cDJSdmtvTm8rZDF4Skl0M3RPVWgzelZFeCtiQm05M1ZuMzQwZkNaSW5QWStVa3ZSZHRPYUVINno1dHFnYncvUS9sS1Z3ZDJVVStCeFgxcnNsUXlabzQ2UFJUSkt6eDhnQlE5dVcvaXJvT1ZscGRCS1daVEUxeDN2VCt0RGtPRE1sSFRGUm5UZnh0YVRzbW9lOEJ0UFhTWUdlWk9GWWdILzdYUGliQlpRN1NieFdTZTdSb1JLYzRhaHp6MVVDMjV5NFJVaWMzbFZDTEptVmJJRnl6d2Z1S1ZLSU1LL21hMG40MmhKeXkxNm54OGxPQlNQN2h3M0pnQkhMSEhrd05LK0NBZjdPYVQrc1RlZ1dOUWZSOStMSHQ2N3VQeG53M3RPb0tQa01obGFWMGppajFkRjU2amRIRmMvbWhxeUgxUER0cytONE9taUUxSlNEZ2xRYzBmUVlGMDdQNVdITkVNWjdnbm4zZnhtc3N6NU95N1lwdms4UElDTmRjak9hWHlvSzEvTHlPT3lXYmRDNVFRQXVOblhpNHZmYVFHczM3TWR1RkxGYlRkaHVHMjRWN2lXaUtIellCME5mWXdhaU5FZWxCaU0wTGVQdFJpcmNVb25pVmlUQnVTTlptLy9RcXRFUjN0RGtpS2VNMWU0TU9qWnlpWS9wRVFJaWFvOWpXR2V4dlErMCt3MjViUTRvd1h3VDRPa3o0UnduTUtpZVZqcFFKdkRyWjdKaC9md3ZIL2kzLzY5ZjhBLy9LdUh2Lzc2YTB2M3kxdkIyUHBEYlFOdXFnYUx5TWV5OGZaOXNEdks1WTk4SFZ1b1lXek15bUtJaW1LVGNWVk4xZmszTnpxdjdGYmhUTzNGbXB6dG5zNG0wUWxCT3BWUzhVL05KaTNiT0lrWHRocEFyOTJ4ZTlGeVRHQTVzM01DNWNCNUxVYjF4Q0FhZmd1WGtTcmxEbUc5WElpcjY2OG8zUzVYdVJOMTZoRGlMUnZXQlJRWTdHVEo5UDdER2dYSHNwbUg3R0ZqSGpuNmNXSDNRTTU0RC8veW43L2oydmVQakJieGVqTnd2dW9VU1VsU09yNE5rS3VNYzZFc1J2RlZObWU5bnhqRXpBVzZkbk9yUGtaME53MnVuR2JFNnV5UDk0K2gybDFMc0lXbGN0azNKQnAvSG1xczZLZEpyTHhyWDhHdVpibGtvdkJlMWJVYW1ZUkY5QU9EWEVWRVBwako1M2x4cy9RZGxrWHBvak9uUmVZNmpVbjI2aGtoeHJveFVnbEd1Mm5WbGtJdW9YUHZhKzNlbm9oY0N2dHBCL25oK1BuamJ3dU5kRnpLZHkxZ3AreDF5T05NNDdXUFl1aVM5TmkramR3SDVITVd1MTJ1dFVvRHhReGVDckRnOE5FNE16SlN4Rk85ZTZ1VTdwaGtaTzRBdnRWai8rNStzcktiaTE5blpFbnBNT1J6dzFyT1Jrb3lTVEpOTGxkd2RRdFpURTlSRW10d3plUXRiK056YmE3ODVabkM1TENYazYxSjhNNG5yUVhUR1U1RWVyTVEvdVhsLzdwYVR3ZyszVEwybHlHaUZJNzUxQTNyUCtZRDgzOEVBSmFFVWx2dENtcmdPdHZMMVB4YmdpK1dlSnM4VkNON0lGZXVjQmxadWlTSDlMYVBLb3B0QzlXWk4vbEFQYm1uMG9Cc2Z3TzVSdzRnY1lyU0ozRTlQd3VMdTVYZ3BTMkRTdGtRSFBsRk1zOS9haWR3YStvUVI0SzlPY0ZrL1kzTXMyOEFRU0k0NXU2bnQzdnV5N3l4bW1Oa25lYy80eTVxbXpML3ZDL3ZKR2xuTzBSUU53UkplWWNsaHorNXRYU3M5UGFkZUM4TlJya0JpV2R0Rm4vSzgybzJmMzI0WmQxOWd3MEVvWEVBVGllRWdOVTNwM1pZWGtaVjkrdStnZ0hTbnBYaXVQa2QvSUdFTjdHa09zQXlOM0lGY2JxWjArMXE0Z2Nkcjd0amFqWFBWeDRYVmJCNzZkOTRCTkZzZld3R0N2N2ZpMTg4aUNUdlExTGdFNEdKLzF1K1lmZUMvK3E4SC92My9LNk9WRzM3M3U0Ui8rYTl2cU8wcmZ2K0hqTzM5amRVVktaa2krZmo1d0U1a29BbkZtK0NtcHU5cU9BUmptOERVMkJSYklNcExrdTUxcFJ5ZXVkL1JpbHcyRTZkVm5vODRHVmJ6VXREQWF5aXZPOUdSUm9BNHhubktBQnhpODZOZ0RSU3ZGSW82TTJIOXd0K3BEc285WStNTWdzZXlqTG0wSnZLUzZwckpnYWhxV2pGRi96cEVjM2dZMkcwY1Q1dS8xVTlHMHZwcHJYRy9mM3pnMy8zeHhIelJVUmppNTE2KzlyQnc3Z3ZuQVp6eXNsL3cyNjg0a0ppK0doUDdTU3JWQTBEZ3BDb25aK251UjdmSGN5M01EcXl1T3VhbVZFdWlFZTczdUZ3MVlSRDRGbHNveG05eFQ2NmNMcjV3U3ZUdWd6ZDlHcGJIMWVzaWU1SDQvejFxb0o3ajBlQUl6UVh3RkZoTTNobTY4dWJERTAxcW5ETVIrVlZFZUFCSm5meVZ1ODFTUk9FTGhDTHZZZTFFNXpIRStmeTNzR1JFS3gyQlVQZCtCR0I0U1VtNXdTSjVYUWRUY0ZUT3B0QmpEQyswcVJ3bmhDSy9jbXlrdjQ1WXprcVBSRTFXdEVWbWNGRDk4WFBCTFh1TDZZa2ZSc1d2NDZTdUZHN2lRbDlwaGhVSDdxYndzWWZzVndwQWFpMElhZ2ZmV2VxQ21TTkN4UG0vNXZ3eHhja3hmQ1JRK0x0VC8vS21Sc0xyK0QyZWZlSm5KRUFrVzFYWXRGbzA0UVU2NUgzM1FlYTRtbU1TY2UxTFN3Vi9xWTJKNWY2N3JlS0w5VkxuYTBVY3M4dFdxSHZlM053NTZjKzQxOVdYZkU2UWlwa1d0WmZJcWNFYXBsNW52S0xZNTA1a096ODlkTmZvR2VWV1VXdEhyUXdCRDRYUUFOYWpUdTNpZkpKVTR6a3EwdWtkelU3cmMzd2NzWWFjM2U0VWlHZG9vV0pLTVE2S1ZYM0dESUUvcjRFLy9Yb2FpdkhWaDJlNk1DTjh4ZWRCY1hXbEVvellnaVN5STJVOUh6WlFxK2QrbHBYL1BSUmVhbHVKeUpRZUwvSFk3SXhrUGRneUpCcktCSVpqSVRxQUc3dXByZUhDS1Ftd21FMlFPMjE3bVpBbk8waUdrNnFCaTlJSWtiQ0RyVEJaUWNhb2hTaE9tUEpRSGo1MzRQTmtCT1c1eUVSV0sySGdYMjUzNEFaODdCOFdNUmptT3RKenFoM1ljZUlHZ2tyTzg0WFh2MC80NHg5My9QalRKMzc5OVlINzE0NnE4ZXo5NEJDQXgrTldzTjhIR3FvQW54TjRuekl1RExuTzhkb1hadm5BV3UvV1JuYkJDU1ZLakxKdmtmQXdKQVE5MWhtaHRlTDUwN0p3ekIzOUJDcHVGcFk4eG1CUytiWUJaMFlKZUJVbVcyakdQdlhKbU44QlpMdm1sQWNRcXc4RnV3b05GZTdrQU5nZXlwWkxKdWcxVDhzckIxanp1VFBkc1orbXpQdlpNWTZUeEI1N3gvNXQ0RS9mUHZDbnYzeGFlcW9MVGJnV0ZmYzRnWEpQT09TeFQ4a2RMOXNiVnErZWJOOTE4MURaSnZZWUZKQ3k0ZERYeWZUUW1zWnhUWVVobzM0a0JHbmZrc3NTWGs3NHRRaW1QQjFUNk1VcEFWdkRXOFdLTDRtNHg4bHJJaXBnSWZ3OFRTSEkxZ3VIQ1oxa1NLdVlNWEwyTEc4ZFFZZFU2T214VjBkbTljdlJzVUxjUmhnYVN1UEl5SmZJVnFPZzZGcm0zNTNUNjhTay9sVFd1cUxMV09nY1BaVEFHb1NTNVlrajlCNTVlM1o1VE56VHF4UjBnaVZrMkZ6UHpiNHcza3M5VW40NjR2bVMwU0tmcmpDNEc3UmJjbUxkMDQxMkw2d0g3N21Fc2F1YjJmU1plZWtDNzJtcmpKeVhueDFaRGxzeG9yRWhBR09VaVc0QURtLzJoQ2kxMHpocC9ubkJKWXluSzlFOEh5NFRsckx1SVp4aHJEUnNmRDk2dzFrbUdzMUV3bmNDR3gxbjg2TDZvWFhld2FPNnNpSEtQWUEyQ0UvLzNvb0lXaEtLcnpibGxPZFFIYlgrcmZBOEVhUWw0N2JwTElJK3pxT3pRNUdFN3JxRU5CWmNIblloeEdjaCt0ZTk5S2FxTE9PaXFSbTNsTEFMcWRrVGhINU9RYVRqeEFNam1USmZjK0gxa2hnd2NFWjJQbWVWcDVCVWdMU1JrUXZ4TmRzNzhPZHo0VS9mT3o2UGdZKytqSnNYdFVnNVUxU1VMYUZ3Y0l3U015WG1vYTUxbk1FSWhkVElwbVNWQWN0SDM3eWtrVTVzcGVGNW52aGFtM25idFdhTTNrT2pqMjVMcEtlbW1XZEozUExZbWluZmc3a3FXbi9NZXdzZ2xEMXZrN0xzc3Vpb1diVTRiNFZkMkVyVnZTVDJJL1M4L2V2RnNyRFhQQ3cyZFFoVjJvK0lwcVFpZkJXZTZHYzJxcyszcndYb2JDdjRzYiswNGRUWkxqWE56Uk03RHFRWDRFaU45emVTYkx4MjRQV1BFLy80ajA4NzczYmZVTzhGZjNnZnFMZGlhL0N4VlZNOFA5U0c5U21IZXBBL1lkNFBuQytCWSs0TnJSQWtCK3dZRHJPdEcxQWtjSjNPRTB6K0xoTHNLQjgvQmV6VXBwZUljZGE5dG0zSUxaa1E2U2NZWVNuQ2R6YUdlQk02eTVJV3ZZMmFzM1kwNTZVZjhoN0hZQ2dYRTYyRXQ2OXNwcmZQVlltbnZLaytET2ZoYllEN0RqeVBEK0RzYk9CeHZxeVJ5SEYwTXNHZGcyajJuei94ejcreTVHeWNTV3hhMVlUMjgxZzJCOWlKVy9HUTdiSGszY25UZkIxZzVjaE9GRHVWdVF0cEIwNXUrT2dIcHZNYXJpc0dMVTlia0xiM1hmb0hZb3poYnZmMDlkVFNUM2xGVjdtMEpycktYSE9CRG9YcWd6QUZZMFI0dUM5QzJ2d1RmRGxZMTBnVHpmTEQwaFFsbU82bHpvc3k4eUsxNkhOMW9TS1A2R280VkFKWmVvTWtZSEdlbzYxcWt1d282VUlGVEdYKzIyTk1yNFlvNGNVVGxCdlhleldPb2lSeVRocUh2eWtGRGprdVhZMGd2RkhlL0hyUXNmQ3hISzd6OUYyUGxpUzI1MjN5b2c4QSsrd29aOEt2eUxqbjRJcFF5NG5JUlVCZWVJWnhrT1RGTXRVMVR5OFNaYlF4NmJwL2UvY1hBcHV4Z3VZMmIxbThKMExBajlNZVZVMmgvUHRsdlZ4NzBoUVpoNk5nWUFtQVBVd0huUWxvMjRIcVN0aTlRVk16NHF2OUhJQURaTHNHTUY5UlcycW9FZ2pCclFEdjk0cXZzb1lTQnRGLzdyMVdXdDlhdzNhalNhR005eTA1b1FPR2w1d01OWE5ITk41UDBleFhTTnRsd0xTbmwzSFlWY25UeU5FcmJGTk5kQ0ZRaldIemt4dG1SOFZBOXpDUC9iR2hnejFFS2RnZ0FZZW55VTdmWVNoaDhxQ2pEMjZDbnc4cDg4K0JUL0JlY3Q3RTRjZUJDMjdpRWZscm4yVS9ra1IwcUhibjJMQWNwQk9Rbkoyby9PMEd2TjBidmVSS2dleE1CTld0dkJtR3orUWM2WGNMejdjMTh0a2ZETytTOTVtZUNzT0hNMmhvSGFRWHdUVHlXd2Z5Vjd6ZjNQQ2Z6eGREZzFxeFErOGhsY2dGQWs3cVFkRGJPY2hGbng3MFh2Y1BBTUI3L1VwQnRFNjd4VG1zM2dEenM3c2hTVmFtbmYyb0IxUVh2MDFpQnA1UDRKbnc4WEV6Ty9mdFBlSDM3N3ZkdzlrYnRtMmlIUmx2YnpkOHZpcCsrQWxvVlNRVzQ0bTBiVUFURmV4d1JUMnc4Z1B3SENCT3JPTVVNVk5qVGp4cDNiaFZ1aGdlbkN1NXA4L29UeW9FRGVIRU1pV2dJbHQ1S0dWcWpTZkI2K1pnRXh3cGlWSzRSaVNDMU5WdEtWMjJVS2FIcXhjdkhRN2s0M3kwa3FuNEZ1VUJUTkZPRzJlTEd1d3Y4N2lQZmJkbzBaLytDUHpqendSTURqUWM0dXJIQkw1OUxGSVN6K0dBSTl6djFiMFF6TXprWkljUTdvcThPWUR0dFBHUUM2RWM1T3dWNXppQXFLdVhvamFwck1sYWwveW9qYjBMTGo2RWo3YTRGeGM3cUFSNkdzRkprS09WcUhuT1ErSHNJZWErT0xJbWFvVHl6ZlpQcE1JK0VpbjRUb1VGQ0t6UjFJN0hUSHovbkFnUSttV3U5SGgxektBOHVkLzdOUW5QYTc0ZWNZLysvVkM4NE5wU3N5RC82a1NjajVvalNaWkF6cFdpd0ZLd29lLzBwK3RlNnorYU53OVNyTEV1MTVmOVhCYzJjbm5xanFORndvbHFlK2xZdzFJL055R0xLeElldWVDNXlPMVJWSUszMVJ3TWxtYkpGSHZrRDNBTkhqbGhIa0IzZXR2RkowR2RyRDNuMFI3bmUyOTBjTzhGNFFxSGpYYTU5aG9UNlhwQU9mWEtjVWJCaDFiVys4eVF1bzVqSUtHNWQ3bGdlYXUyQVVPOXU1bXVXNkg4RVdmSUNXcFdNY0hqYXNVTUtLOVZ5UHRkY3l6d3RwR0cwSlZFbndtSGJYd0k2Q0x5REpQeVhCemI1czM0QjE2enNLUFJaUDdod2wyUFpaM2tzaENGVlFLbXoybjNlRmpJN2tRTTZMSjdqVVA1ZW5jQnROM0hpaERSOUkyb2JrSmpBaDl6NGVmdkU1K2ZPNzVOb2lqUGxaSEhKTFZxVGxFdlVTYUNZVGVPV0tLeEFkQVRrbnF1bDVJdm5HTU5IS1BQMTRrNXV4SERmSG1BUXBsenBQSHRwdnlINnNBYnNqWjRpVHp0Y2ZyZXNiS3BWQXFxQTJKazVRTlRobGFnVVhNaVZXckt3enlRV3ZTN3drMzR4RXhEa291OEJNcDNOdTdNVStXOFc4bms4VFpGeklYKzgvT0pSMnRHR0xLMWhIMCtnZGxSeEVWZlBaNzB0a25BTDBENGh3UEFVSzV5ZjNsSHAwTFE0TnlSMHpEMnNaLy9NdEd3NGQvKzI3L2c3Ly9ROE1OUEczNzYzWW5TZ0krUGhwOStJalBZRHovZTJLTStMOVRiQnJ5cnZtc1VwTUZhY2ljdWpUam1BY2d3V2dLKzVTV3VjR3owQ281ZG5ISUNlVm9rcFNNM1ZaWmNXQ2dWUHMvdWFmTVJxd0lhUjlVSmErQTd4M00rUmZTMk93VFVyc0ZKaFhJd2lkZzE3SjNOVmM3bmdYbTg4UGw1WUowdkE2R2RmZURZVC96bGx3UC85RE1zc3ZhY0hYMVV6Qk00SnJEdnJBMCtYanV2UTN2eXZHYzB4ZjdjWUgycFpPMDFPbDVhOTRldmt3UzFrcHdXaFZxRGdyZ0xkNUtLaC9kemRMOE9XYVJtUUhwK1ZXaW9pVzFkVTJpd3dEcUFqVTZRYjBDSk1Ha3RHZU9jVjQwWWJaNGxzcmtQL0poVk42WEl6VnhCbTIyMThDNS8xbEE2d2tQK1FiWWl4cmhRM0NzTWpZWGpRanFqM0xDK0grUGloeXY5dFlZK2wvWEYzeDVqQkVWcllJcmNNMWU1cGY5YzZDRTlSdEFiZVYwNnZzWGRjS2I4ZnE4cHh3aERyM2xOWjYxcmp5OFphUEhjZHV3QW51Y0Vjc2ZHczFLcEErZzJTME82YmFxVDVFSkowMzhuMGs1Rmtxenl4MTR6U3RTaTlHNEdWd05MS29reG9KSElLR3RjSlNiYjdTQVhrVi9ydS9wNUd2T210NWlmbjZ1Z1Z6ZUVGdjR5WjhpWnBOaC9pUWtpcnkyUjBHeXNId2tYbE1VZ2w3YU9DR01jWXgycUZDdElaMDZHS2FRd3VNQlRHY1lHZDc5Vk1Jb3JLd3pBOFBLUTA2ekI2SDQwR0M0L2QrV3BVOEpNa3FQT3lDT1NsVXkwY0hUNFVkNDVHcmt1WjhuRGluQkoxSVQzVU5vQXlTSFN5RURrZldSeVYwcE5hY3c1WWNRMkg2dmo2Y0F4MkVTdzZtN3ZtTlZxdWlqS2hyMnBxZlVQeDI3UWlvODJmME5FRmxrTElrV2NzZGFzTUY1amg3bkFxeUpwUVp6SFpEdkhhVXVJQ2pRTE5YME1uQ3JaeU1HNWdoWnhzcmcwTG5qbHRQU2FJZDB6NlE0dDM1M0ZuKzlybytESTNjWXhKN2YwbDlYSys0MEVhUWtGWFRnTVEzblZDZzVxUlNMZ214dThuQUh3THNYQy91YzRrYXV2NjRianhiVEhOR0hhN0p5akx4eURobFh6L0ZvYXhuditiLzdwUlB2VGpuWjdzM0Q4YlR2eDMvc2Y3dGkyaDFVWXRNYTdldjloSXIxMm9HWEREZHdmTCtmNk0zQlhTemVrclVvUVZLSGRFOVpaTUZkbW5qcGJuM2Q2WS9oZ2ozZmJmdzNySENoYmlYaXlHMUV3S3hacDlVdmtpdTYydnA4UVpDdm5lU1hrNkZrZWFuS3ZqWXBoSGZROHowa2wrM3BpblIzUDg0WHhITVk3Znp5ZmVJMWhkSzcvL0pjVDM3OVRtblVMbnhObDNTZU10LzBVeUUvb0VKWXp0WXlXTjg1UEQvRFgwUS8wUGFGM05XM3BTL0lnNmRFTWN1Nlh3dk8xbVpBMjUrUU9rTjF2YVIvVE5YSVVDTGhvb1FzU04yVVVSUitqci9VY084WUJnaC9ueElqZmthd0JrZXE1S0psSDRGUXBrYU5WTGpOcXdWZHo3VWVIYU9Wb0VPT3lJWHBXZS9aQThxMUtYbnI0R0lFQmlEVDNaUnppdFpEM0JNd3hPcGtsNThNRTUvdGhURWhPeVp1VzhoYm5oS3gzeDhMNEhyOTQ2S0drMDVYYU9xN1pWZUx5RXQzazhpVTZxT0hhWjRRSlVGSFo1c2xjUG1qSVp6Vnh1UTNncnU4WGdZNExXTFVsUTVzY1ZIV2cyZTlhblRmblVRNmY4N0huUmk0Q1lvQ1M4dHZMcHUrNjl2d2gwZkc3dkM0QXNwMDNuTnc4ZFc2aDNOUEtmTitqdHhOY2Z3aytCNmpkODQrMEFrTW51VEdmRi9iVHhCNGV0NHdKRnhDaWxFUjRsaUw1RHFZZHZ6a1BvUytIMUpNRkRoa203TGQ3cFJLZVlJY21PbFNhNGNMTk93YTZHdnU3eGJhRzJlV1loV0g2N2lWQXFhQ1pRTTVvRy91bE14WkJCYnA2OTM3bS9DM2xya0tQT2pkSVdHUUN2MGp4RTR6WEtaeTRpWlZmNXc5bFcweC9tUlIwNTVvQlprdVFrT0NFb0xBQ0lOdFlaWTJEUXV2OFR6V09FV3FuUmN2REtTSERDbU00OCt3c2svcFM3eFQrYzEyVVphMDNqRmxwSWMvaGl3UkQrZjFtZ01RQ0QxaFhjSzQ0OTB2ak1qai9pV0NNUlJBSWMrZmF6alZ2N0tRMjNXb2tLbjJlSEhlbFZ5SVVuS0pkZ0x1Z2MwdkludC9idFhtZUg4QTYwRTNCUGV5MzdrbnRZVjNBakFHbzlDT1hpcHJaN0NMZkdFSWZQaGlqWVBRREtOV1UxeWwrNXhQVEFKQzdvcmFQTlhEdUZhKzY0Zi8yZjZuSXRlT245Ky80Vi8vNkN3RGdMMytzK1BJRGtCSXhhOTNLeWdKczFadnlqOXNkN2NmSHRjTU83cXc4RmkvTFRQelJYR1Y4dmhvS1hQQzc3T2ZqbXJ1WXppS0dpZFFqano2bDVBYnBXTmVjK3J4U0E2dHJ3Q2YzcXVYbEVzWXhUYW1yVHpKZTV4UEhyNmZ4c3o4L2Rvc0EvZVdYSGF0M1MyZDhmS3A4NmRUKzdaempYejVQZFh3TFVWNjlkckx3OVB0SlBNWEg3dFN0RTY5ZXNJK3AvTFJLMjlOdit4dGtNQ1d3S25pb0NxbmxhVkdvc0VOWEFKbjAydFdOaERmMWdLWXRrTzVZQXI5R0dEMUJTbjNOaU41TElwZThwQmhCUjZlSTZSR0w0NTJCNHpXQ0ZUS05heHZrTlRET0ZQTTVnRUhZUEQ4ZkxxK2lMZlRzWitLNmpuMTE2Zjk5WWIwY0k3UTk2OUhuTmEyUXIwMTNaR0JFWjBLUkd1bk0rcnh6djE1VEQ2NXdvdm5OaXJ5OUlyN2hrMlJneG0vbzlmaXN4c0RQa2FLbnVSUW15Y3pJRnc5NEtmZExyejNURXJWMEkzWUpDMlUwbEhGaTk3UWhCTmJkYUNKdzFVV0Rxc3dIRk5CTGVWdU1uSjJJK0hzWGkxd1BPSnd3QlJ3ZkRsV1c4VFRsZEhram1ZUldWS2V1SHVoakJMOEpzUzlSOFNBQVBDcjBEMFdyNUxLdnFMcDBjbzhUV050Q1hxTHpqSzR5NFVGT0xtUklJYmNJTjZCclpzWVNYM0pmS0xWZ2E0amE5UUpVTkd0cEdORWtZR2FCM2d5MTZpVXZYQUNEbUdEZEZFUFlPUytjZWFMbFdBcWpNOTZTTUJtK0g2cGdGZVQvdkxDck9hTVBnRGF4VHBXQ2dJK3hHS1dUOVMyZEhWRjN5dkk0eWxrRlFsVUNVNWFzcmgzSWQ0VUt6YXNKTDMxZXlSVGkrckk2dHNzRFhwZk5iY3ZZQUd4bEt3Smd1TnhhOFZrQlAwNWZYR3VJbjdtYlliZW1UcWZ3VnZKMHVFaCthaUdJU2lRY3lnVVR6SFY3c0FrREd3ZGtGQmt2ZVN0WUNNT2syZTluc2FZUm9qLzkvbFNiN3dXUGM3RjM5ZXpCRjExU1lWbU9HUkRSak9OWXpEdmN0bUxlZVQ4SHhtbTVNNWJOMlJvTFlzenVqS0NMd0NiZmVGMTVzVzJDelVVQXRIcGdPeGVmNTRWLy9OanhqMy84Qkk5aFkvZTduekwrL2w5cytOdmYzNjFVMEd1TDc3UGhCYUR0SGYxVHhWazJSbmZrOUF0R1VqRmZ1d0ZKMFpTakVibmNXRDNSbnNYV2ZFbDNyb3NITUlkSG56clc5SmhjcHdHYWJrQ3F5cnNoZWtRRkl3b0RqWjVqVzVON2xmRmFkaTZicEd2YnZ4ODQrNG1QNzUvNDlSc1Y4TmtYOWlPTFBoUXEwenh4N2pCYTE3MTc0Y2FLM09hdFlJZzVyTGl6aUJzK2poYytYMEs3anlLRlZLeGthdThkeHo2REdxZGNuSjh3QWhtQmt4Y2ZYaVFmRmt0S0w2QXpLb0RvVFVEUWJlVE5jVFVnTHFXOFlxV0xzWXh0S0pQODFoelFsTERWYk1iaTdCbHBEbGVxd2FaV0sxSW90Z2pyRGdFa3p5cERUZmZxSHJRZTkrVy9Lc3dTTCt0Q0hKV0NSUERTYlMySHJLU2pGblpveUJ3N1djajhMSWZIRlZBY3l0dHJjcWE4ZEF6SFRDV3VVMFk5d2tsSjBSSFFaVVFFVTJUOEtDOHZTZWd5aW05UjBWN2FHVVI1TVFmTlVlL2RWOUowSjVNcDBJeEFIaEpzcld2WElWZmhRb1ZiYklvSU1Id0RzSGR4cmN4a05LNUpiSHJLZUpIQWltaDk5Z21vV2kvOG5XdEZrcFJCTFRDVS9uNGltSVY5NlFSSzBvbGw3TXowdGlhSVpCWVhiNVczWGpPMWRObzZNaHBLQ2lSSm1HZ0p0ZklDVHIrNFM1MU9nRGJtbW1vdldOSFVBN3VBQ21Yb2MxUEFtR094ZzlFUTV6TVBsYUQ1aXNsRXdDMFJCV1NWeHpTd1M4ektFWEwyTTZ6QkVQeDFTSVFaWlN3TGRXYjBCa3hWKzgvQUE0amRLOWw3UnNUVU45VTB3cHBHWU85Y1FDVVJJRFFpVVdTUmtSejVxK1QwVDV3TjhVeGZuVytOb3o1YlVFaTlkNDJwZWN2VFhMQjVMYlEyeUlUQ1ljemxhRnM0TlNZdHpLUEhFbkVubWFmTHlFNHZtRWxrd3R6NVJGWmprbjUyZHNuVGI3YWlKanp5ekgyVEhKVElCUDJNazFmaTdRcEY5MGdTV0IySCtQbVZtR01Rb2FEVVptUDcwU2MyME92QlVTVjJONXdyazNwVStZNHBZc2JlYmhnUXZXZDIwRXRqZWlDTGpkQTlpZ0h6MEcrV2NYdVl4NGRLeERua2JkMFVjb2VTRi8vOFIrRFBQNy93SDc1K1E4a05kNFdCdDFJdHZmU3Yvck9HVWg2WUdHUjJ5OTl3ZDJWZTZkS2xldWVhdmlYY2JtOFl2VEt0YzFiMndZYWhIN0ZodzhCQUJVdTJ2RnNheGlEZUJKMEdRcXVBVW1yejdCVDdha1F5TFAwUTRtck5nZldrQjk3WHdPZlBFLzBrQVBINThjSmZmbjdoUEFqQVpBT0oweFQ3K1FRL2N3S3Y1OERSaDBObjRhSnYrZnJQSGRXQVNzQ3Z4NDVqNzNqdEFzQk9ldWxyRnB6dTBTUnlUUmNEd1hVQTZkSmVreVp1Y2cvVjdxMnorNXplaHdOT28yUGN0WFFvMHN4V01rZStoVEJVSnVaY3dnY1ZwNGVWQWc0V3NleldCY2o5bjd5ellHMldtc216NHpVR3I5ZTlxUFhYRzVtc1lYU3YwUnlvREpSUnNBaXdDNVplMEZEQkNxVDM5ZEExeXBqejdsODU4NW9sZy9RNTd3dXVsRUc2ZG5xNzR1YkN1UUNTem9HTHd5TlltTUNkVThaRHRzK0VuM0k5dTBESmwzSzFGU1c5UG5GWGcyT0Y0NUlsUitheUZTZlpnMmgzcWtZOHIwelYvQWhxV3pSTDBjM2Y1T1FCNmY1TFpBZWhON3loQ3hZT1RvU3dYQUVjbndtQmpYRG5qczNFS0dQVEpNeE5lWk9NSFBja01QTXBmTkk1Wi9TN2wxd0ZQek5WZGhhVGxCV2FxZ0padGFRY0EwaERpTWZRRDlLRURHd0VTMlFiNDhmMjNTQTNqcENxQTV6U0MraGZXTkxTU01OamdueXNnOVpLWVk2Z0pDblFLRm54aENsOHJ3TWk2emVMVWFHTVBMSGRtVHM4TUozaEN5Y3krYkhWVnFYSXF1MmFIcmNCODR5Q25sWEF3OGtrVml4MEVXbkxvNlJBK201VWZBVzVMNlFjWlNmTUMwOTlsaUYyMW9zeWRVRmxIaVZxME9LT1drVWhGeVNRa3l0cUJNTHdkdHR3TDd3ZVJpUk9zVUl0c2RoeEZJOXhPZ3JXdnQ4MWR0Ti9Lbk1ONUJxS0diNjRMTmVWV1FwNGYwTmRMN3hXUnJzVmhzeEdZM3BHa1lTOE1mek1pTUJ1QnRiQXphNXRXaVJqWUt2RkZGSytxNXlvWlRXaXlIaStLR1NPeVFWZkV5c1ZjaDhZSStPSnFiNjhMNDhlNHpodWdKVEtIS1N5RmMrZnNaelZ0dzBWeFV0TEhGV01Wc0sxNkpCaFVqWURjeW9XSVlGMUlKMFplM0kzZEpqQXI0bjUrTjR6V3Axb2VRQm5RVzRkajVyeHovLzB3dTN4aEZkb0ZzdlNQUDYvaXA0QXVxMFYxSTNSaU50YkF0b2hWcjVFd3lyZklVUW94amRZZk9tMGVZcTFhTGo2SjBQcDdRR01mYmY5T2t2VWI2Y2dCVE1sY2RyZHZUQytENXo5dTVXdjc0T3BwYi84NlJlNzgrOGZKODZEMU1kenNIZkIyWUY1TFBPaSsxam94OG1VRDdoR2FEaVVFTWFpMFBwOGR2eDZUb3dlcXRVNWF4YmhTYUZDd0h4b1NQRVZ2QlJJSXZOUkMwbVJjSlEyclZSemVTTVdUT2RMRHlHbzB0THNiWW1UQmpJbnljVVVubm1PV3Z5eDhrVUJieFZvS2ZLZ1MzcWtGQm9HVzJKem91UjVmMi9mdVNKVjlkdGowWk4xcDJOZWxVbVdBWk1oTDA4dTJ5bHJwVGd1SUdoTUhCZ1o5ZG1JSTBMc1ZPVFhrRG5pQ0FDODh0VWF2eXRXVzc4WGhoTEZtU2wrZS94dk82VFU5ZDJBMU9jd1BTNE1wV0dlUlZvaGFKYklDZENSOGV1UjhGWklZSFJIS0Q0d0NtRnlxZytHdE9jbzNGZEQ5MU1LNzg2WFlzeW15cFNYcDcraU1pcEdKRlp6WExmckJUa1lycjhtS25qMEhQZmRFckJIQzlqcm1ma2RxUWZwWGUyNVFEZUR3anVuT01FNEo3YWlITXZNV0FKRktkdHZZWVo3TnFBYUUvbVE1K3g5YStHVWp3bmYvZ0xjLzNiaFZDMDJRRFIxdVMyMEZaNDdnd0ZDUlFLQWIrYVVuSFFtaWtRME9FQTM5R0VTZ3FNVENTK2tpUVpJVms2VnNIQ0Vab25pUU4vUTRzbXV3Tm1acjlmN1JmelF6dVA4a3VYMXE1RDVzcUxrR2FpMFpjb2MyU3FxUUc0ckxURXRRYlN5aW9henM1RkNNc1A1SU1IdUlQTzZ3TVpDLyt6QTJ4czN3K2owTWhJakNSTnhUQTh2YTN6c29sd2JJbE0vTWo3SHZKUnZZQ24zVWh0dXQ0cmtTeWtOdEhybk5pclp3c1JPbFZtUXFMZ2xUSk5LUDJoMm1qUlZkSUFOWElaRGdzZkEvanF3bjc2VHdiTEJyTGEvN21tSVFuaVVCbGd6anhONUhOaTdFTGtIdzJldFphelhZZWVKME40RjdDY3JQQ0pNclRWS3JNdllIWmhkUGRJRGltdVAzVDNmUG5FeVgwTVFhUzl3bU56OWU4ZjlqWVljUFoxUC9Qa1hJS2MzRy91M240aForSnMvRk53ZWIvQmp5dzBZUm9DUFZodW5LMmUyYnQyODJxQmk3ZXB5bHJLRnluRW5sa0h3WU8zVjRQc0hEcTNWRStQNXd1ZkhqcUdjNDUrL2QzejdSYjBLWHZ4OFh3Vm5aMU9XTlU0Y0ZuclhzbHlJcm5EQnlhQmlnNG5qYytDUFQvN3FRTko2UjNpVHpXVUdQRnFtVFVuRlIwck1iaDNKdkU2N2VKblVKVHllbUxmdW5RYWRSeUc2bWhwRkRoWnpzRzU1b0dndEZUTitwU0k4WDA0Kzk0bHJHRGJSTzh1M095T1g4d21vZzkydEZSdjNRTHNqRkpPand2SFhsVnNyYmxmcXlOSEczeFVMMW5Mc2kvMEZxanFVV2RiK3ZXTGlranFqRVo4VDZmT3JXbzd2aEVJRzlLaC9seUtnY1Y2WEJqTlM1akVYL0ljODlQaE1IQmQydU1zUnJ5T0MzaXZ1VHlZUEZXaEEzME4yT1dmSlhCZ2w0NWlrVy8ydSs3NjdNOFl6Kzd3SEJiSldWZ2YzV0JETzBrRWt4b0s5MFAzNURMbkNWRXR3cjdyQXZxeFdaOGZtbG80cW9qYkZmTGdjY0tvNXBzZDJJZlNQZElyYTlKMThpbHVVSXRsamNkNzFzTnpjUEViUlo1TGVuNkl2UEhUQmhaYmpOVnc5V1cvNzdmbkM4ZTg2L3NXL2ZNZUJTbEtTVElLWmxuZGdCMTVueHBjdkE5Ky9DemJBTG0wcWsxdlFvUUdxOGlKamtlejd3c2pBTEJxc1NIU2hyV1RvNm1NRlc5TFE1QTBwNEtrNllmb05HZDF5dGxUTVNNbHlvRWdOaDBKQ3YzNk9XTEFwTVNjZGsrczBxdnh1a3NVWG9TNGloQjM0cGlZQlFRWXhmWE82eHhKOXlaTTYyajN1cmd3dEo5dzdpV3JHN0FJb1JtLzQ2Wk9wbnVROVdCbkYrRWJvN0FJRmVVa1pmVEJSZlpjeWQydjRjYi9wR2RBWWhHSjRmUWpJd2g3MXVsNmVzOVl2Ykphd1NCZWFhME1xbS9PZVdwWEY2NlRsV3lxTnQxSUxVYTltVklMMzBUdk90dUhjNmRuaUdDZ3BtTHRZY1Nnc0NBYkJNSHZIVzdxS3NQSWJxb2dUeTlabDh6RTNRd1ZsUXlxMHFJRVpOSm01cVZ6S01TTVY2SWNCUzFmdHdTdzVDLzd3UGFFK0dBMXZmaFY1dDFYMnkxKzQ5Zi8wTTFEcUU2MnFQc0EySjJHQXowRjJxaC9lYitaOXQ3YmhoeThWOTNlMXhkd1J4L2NkOWFlSGpWdGJFN3RGbVE0WDFoampFL1Axd3ZFRXpqbnc1NThsMWtZM2hmNDhDSi85M0FmaUFNNTlOeURiUGxqeWZYU2dLQTRXalZFS2pwbU5vT21YN3huN0lxZTNhZUhrNWFEMGtJSlRyVks2U2JGSGlxdkk2SzVBN3BoRGV3WWpvbFErcDFTaVFZbmFKNFkzb0JtUmYvUmNiRi9zN3BqTHhvNTZLd2M2aHBmSE1xWUNiK1VhT2M5YXRIYjArblNkTXR3UFZzUWlmRGJlYm5abGVsRnc5MlluZFlkSnhpZGxZOVF0UndTaE1hd2MwU2FrSzNqMlNoaERaYzV4NHYxMG5URXVSQXBydVVmdGYxZXNRRlFMNmJNZUNZaXhLSHhGTFVLeksvVHd3UFYzUGE3S1BtZk5SWTdJUm5Ec3hMVjdSUFZhenNmM0hQVFZ0WjQrTzNQcFBTLzhVT1hWRGhGNEJ3TWNzL2VNd0pJb0t3VzJ3dlhaK2VyNGhtSkc4RGtrWThGenZpWWR0V0xPVUl5dnQwQk9Oc2VLR3JudE9sMiswVEpPQTlpMVRqZE13bDB3cWRRUmJLSjF4WDA3eVFkb3QrbEczUGxvS2FxamtwZElMRFgrejlpeUFGMDVlUmdoWVBxcWFjMEdXQ25JRG5BYnRLNzdBZno1MXhPL1I4YXNzVndUR3Q1dU85NXUxUWJxc1FIOUNmeEtUMEJtbFZPdXFtRUZ1YUxWODZTb3JHemltSzdRazd6eEpGWTNla25WM2g5VTh0Wnp1eUNyaGFWVCtYbFR0SWVWcUZIQVBrMm5GeExhbk1ESHg4Qno3L2pZV2ZvMXB2TGhrWFBoN3RLeG55ZWc5TURNaTE1TDc1NkFZdk9HWkJ1SzUwa0k4RkUvdERsMTM3SWp6K2NUQUQzTE9ib0pjYWpqMGxUWE5ZRlZ2VTViUXFtU3Z2QTRXRWFrM0dvYXdJeDZkMVF0dEZ6SThyVldGRGdNUlVET1dvQ3pLeGRuaUJGMzBkQTJiL1N6VUpxWGlSVGtWSVREeU14M1ptNlVMc3RkWm12MEVZQjUvQ1RwV0JYOW1FcWNiRUM3VVhqc240RGxhanM2RklrSk13U25nR0IwQ2psZlJWUlJaQWVpVWgrNis5b3FOaEUxSEVlMitiRk5OeWZxalcvc3J5elF6MkJKM0FGVG9QbGs2bWxrTnJmNUpTZVVKeE1UYnh1VmhXZ3FzUGVFb2JWMWY4dG9qMDdvV0Uwbzg0NjkwMUE2TWF3aEVhK3U0LzcySXg3M1pMMzJ6MVBJUDRtZDl5OE5iL2xOZ2hIdU8wakJjTTJkWW1nN083L3ovWlh3YlIzNC9OUEwreUZRSUw1Tyt2VzJmcG1mWHZjN1VKTHVvTm45OXJIaisydmd6OThtWHQzcmJSZlhNdG1abE1iSXFOV1Zla0c3SjV3anUweEVHeGtqWlViOWJLME1EQzgzOVJyZFFIOTZTSm1nS0tNZVZndmhtWWtXVG1FWXd4V1YxbVNmQi9PdzVKZldlWVZ6MFZFck1Eck11RXhGZGVyRmZsR0FWWlZoWnI3aVdCMG5YeWxGYVFVckUvdXR0L3Jxd0ZZSVVPMHpvWGRicTFHaXlGK0tESG0wc3ViWUtrVHZpdHhyNGFlQnZ3TEw1QmlLaTdwM1p3VHpQNkZrRXdLWmt3VHV1K0ttd0h1NzBMdGV3WVBwOHFoUFhkRCt2L1hRWFE4bHBHdEtQUXA5UXI1ZTdxbUxwUlJ6NHBjajQ2Y3Q0WEM1MWRYbnd3WDFvcVBxWGJmejlHNGJ1UFNUT0pSaWxkZE1CMnBOYjkyTHowVUhFWk40bzQzZ0xNMEJ2YWJ3MkFNcmxjWFR3cUFhd1pTYllaOEN3QjZ6NE9EQWhSb2tYbnpTRS9DSkZCYTRXYVhoMTlzYXpXSEoxYW83aVVNV2poakZFZ2QrQko4c1p2ZWkrUWhWZnZ2MUFMRGg3UWJjYjhtc2ZjRWlGU0hZOEljdlFIOEhmanhnekd2c1F3NjhlQW1DSTlSWUhINE5uYUVmRSttV3U4MG9MTFVLcEdSWlYxcEhMVmNzL21YaUJvT2VTMkx3c2FhaUdzTlF1TC9zQTRkUTlHTW03SFA1d3ViOEZYSlNxTnROMUxZamVTUTB3bndyd2NYSVpKbUN2RFJkWFFraWlsU2NsV2hpeVNZK2poMUE1T2lHN2llUXJ3aVBHWjRHQ2RTd0xiemt3STVFb1Z0U09FQ0k5U2puS2c1RlVzNVQ2TTJqNDFSZXFFcThoRUQxY2hpT1ZUK1djWllmcHJEWmtDUEdQWHRPQ21NRXQzSWM0dGZmVDI2eWtURXd3M3RyN0UrUVRSQVhGMG9VbXNlRVd5ZGI1LzJYMXV4elh4NFozNThXTmFERlA5a3FzbFNnTkRmMzJNaWt2aWM4UHpLbW9LajF2V0QvZUFJeXlqQ1RsWWIxekh2WlVzTStpczNhMFlmQVVzTzYrN1hXOGZyTU9QYU03UUdzbm9GNmlDa0tOTUE2Y0R5N2xjbzl6NDd2djhhR1B2RlNLVVlpdGlQOWFnTEtVU2VsY0J5L0gxY1A3Y0NCZi81OGhaZXR4aWdqZ2EwOFhmSmd4TGpIVS9TWk9ZY3Y0Ti85cGJPam10Rm5aamtFZ2N0RldyZzlLaDQxb2QweldSUWJLWHJuQUY3YzJVeG45QWdSZDY5NndhU25MdlJ3c0IxTVhWMVNJeUo2L2NWWjJhajQ2TUduaFpZbTI2VUM0RHNqS0sxckpsZjIxbHdteUhQWCsyVkczamZFWlR5SjFBT21BNnd6Y1MzNjNrV1JXZVZXZkQyOFVZRm5lWkZYaEZhVzgxUVlYclB6WTdnU3ZZU0FCZlliZml2WEl3WDlhdGc4NmNyaWxzSjRDc3JiZFEzTlp5QmZIQm1HM2QzYnZpcnphRGNhcjhSeGpRNWNsYmdNdVVpWlhrWFJKWmZlN1UxMjZ6c09ZQ3NUdlZUaFphSkJTMTNBRUovQ295VnNDRnBZckV5RHZ0ZzZaalRheldZOVBta2NrSkZVaTMycFIrMm0xSkFhbGxIbWlsS2tlQlJPRk1HRnZBUXFoYlpvTnlNRjQ0TE00eUh0Rnk4eTEwdVdzeVRXdGVLdEloTU9MZDdxOHlsS3p0cVllTmFrWFVMNGhiMkdyMkQ4cWtYWHpiOVR5QlhXdHZMeldEZytFcmIzaGJkR1IybWx5SXhWeGozdzl1WWhwb0YyQXQydUJVVC9pZzNzZXFUb09WNEVnTWdXQWlLUXFTakhuVXhJMkdOVGYrUGVlMUFWSW1wa0lzRkZQdTd6bk1aQ3RCOFR4eUJSSjBhVXVRay9MOXF1SU04WkFYaUpXdGdrd0tFbWZNd0l3MCtWNXVXU2ZkcmlQVFo2dnlEalYxQWw2aDc5STA2azRPOW1YcHJxZWdOODJBV1BqR09yRWs3bnlXR296UmFrTDlXdXkvRGY3OHBaZGozSEVrbURYd1o4SjJkNy8vdlRjOThuNWdwbVFpZUVYV3JpejhWVEhEOEFaUEkvMVVjMlNzNmowMnYzd01pMnNrVUFVdkcxb052TGhoNE53YmdjMlh3aWZXWjhEQ1lSYm05M1g5L09KbWhoL25aVExpb1J5VjFxUndIcm9GdWxTL3pERHh0K2ZYR01vaVpsMDEwbFY1UVlUNENWWWdQN1dmSGxqY0N6dlU5OGVSUmJLL3NuNHcwc21PdjAvSGRnUDc1VElMVXJjQ2JOaGRlNVd6dGRsSW94UGdDOEEwWmZ1WkJiVkZ3Yys0NWpCMTdIaVlwbUFMemVOdlU1T0RHWGp6VzMxRVJGYmMwTlhiTEtuUjIvZkp6NDA2K2RkZVFhejVwWVcxOFNhMlMzTGVGUkVtNjNndnFXb3R3VGxydTBTTU9yNzhCQWNJMVBVaktQSUU2aExMSmMrV0NVeXp4YnBxRTJKckdqQ1VuS1FzSVIxQWYzaENRYTFKYVowVVluL3ZDNlRTb2RLY2VZeHExVlY5azR6Z3dVTDFtTGJudncwbGRzUUprMHpQV2RrbHllT2JkRkFNczJ0b0hXdmwyQzhTYUM5R2JVTXk5WDN2eStIQW0yTVdVbVUrbEtCQk5tVjQ0dGgyTWUrV05hemxkUE9ieGx5U3BQZTEwL0oyVVFsVG5zMlFwWnF4N0dGME5kR0FLWFF3b3ZFTzhwcm1kR09kdVF3N0ZzYnE4WWdLRHlEdjl4cGt6RFZQTFNvd3NsVHhkQlhPdWVMT2tJUFFqZ2VaRmJLVElBS1d2S0pPdUdCNURqZGJYSkVHcWUxVmgwNWlTWFZjNVdWSWFYOGhMQUd6Z1gwNkpiSHZpY1UvaTBTSG02ZVl5VjlPZE9vemJPY3dGVDRlM2ZiOERkS1ZOTFFnbStBMnpLZXljb0ZLVCt2RnIwOUdTUUpiYUNZQVZWdmJVelBYSXErWWxWRTlZMzRQa0FIZ21vYi9RNU9adFgrNnVraGxwT2dWQUV6ckoxWFRpWWRURHNVR09CNWR4UXkyQTd2YUxUeVI3M1ZNUHEzSHlQRER5M2pINnNXQ1NFcW1zeFQyQytjT3dML2NpWTNGVDI2RWphNEZHT2RiNldGS25uVGx6d3drTjB5aDRramVPNlpzMlFxR0JLdlNtL0o2NWpiVmdCNmlLUEdEV2ZWK05lRzEyS1RLRldWM0lEZlEwYmc5Sk10R3ZqRGZNSzA5aVY3OHZhWE5LeGFXSU5CeDRWQ1l2aEhyaDViZmxPUVRUSUZvUGpVeVVjOTJVcGkzbnMzZzRYMWV2Z2ZaeHNiUG1IRXpnVHZXMk1nVHk5REVnZXBYcUpQeGp5b2VLNHFVUFpkZ1BHMDFHNmdSV2x3SmFucHZENWZwcGcvZjdMTDlnSVVxT1hvK05XbUZ0eklFc2NuTmUzQjhGZDk3clE1WHB0bmhkY1JFTWpQWUIwQUMyanJSMm5XQ04yTkRMYnpXeUpKVHlod1pLWk5ha21rSnM5ci9kcUthM1lKQS9MaGI5bXhiMVErSCtNRzk1TFFidGxuUHV2U0ozWDh1dWZEK3lBNWV6UE14TzBlV04rdUE3L3hZUitIQkorRlFVUEoxbkM2M2xhcWVDdnIybGg5dk9jQXFOeHY2QW10RTJwbFpieGRlTkMzZDZZVTQ0YVllRDVQUEU4Qm8zMUdWVTBFUlVPQUNlU2NCU0RYUDJzRnNrQ3oycU9WT2U5YlpVZVZUOUZaWnpOQXc5SGg2czVLSzF6b0xaUm9uT0RmU2UrNXlWZVRaWkJ5WmYraGlZVHhoWHc0MkZrUFFaNkc2NkVKbzNyMmhMNjBjM3hHRlNBa25tK3J5ZFFRdEZGWGo0cVZzSS9ENUlTWE1rb0FaZFpSTkdMbUdtRU1vOFRTL0dzNEdTUGN6bDliSURXSkhTVXhyamt4aU9YUHJrWGc3aEhEbHBFQlgyc1hBSGx4VFNpeTdiZ2c4MUI5NHVvVDlkTTJqcjVMQk5sSldheWt5UEpxU2lIaEgxZlRIM3RZK0duWXpCQ1hSZFdIOGozbTMzdlhJd1dkWVhXbnl2NjE5Tm9pSExwa1JjanNuT3hteVNVeWd6UUh6SjkxcUJ4OWYxREVJYlEvUm5CS2tyQVh4S1JUYlRSNDlONHJoemxMNE1sWm4rNGMyQytyMFdYUHkvY0FyU0ZXcks2UkNVaEhzUGVPd1VhcWlyZVQ5emJ0bUJ1VnE4Y1F0dVhIazVnVkNhcVYvTzdLNGhXSnBkRnkzQ09WbEJXMXZOK0p4RHFkck9sU3VIK0JndUw1em9NTUxmTW1sL0kzcEJGWVBha01vUzNQUEZSUUpyT0ZYbHc0NmtUV1FVTTFUNElmaHBjaG5NRmU5ZUZuWXJERldBT0gyd0R2MlI1RXVJcmxyY1lzNkpSS0dCNTB1cjBmbkpHRXpHTlF1d2VQZzVob1pFRHYzODkyR1BYTnNlYXJJZU1Jam1HWngrUGF1OGZCMXVidW5WL01xM0hIdWpENFZCTGZicVhYWnNFSTFHL2lmellBVm9CNE9HcXZXUDJBL3R4M1lEZWV6MWg1N2pHRGtkeEl5bkV1K3Bpd1hEN0d0Z2wxYi9lR3VyMnVCYWNZRElOdEFIVjB3cFFyL20rU0hURXNiU3hPWjZmV05yb3dBR1ViSWJsN2EwaEwza05UcU9jTmZjdW5QTkNzcGFmaUhwbTZMbHFKeXd5bkc1b3QyRUd3dVByaHZUOXhJbUVyN1VpdjcxYlBUakEydm5uRHB4ajBJUG9RSDR0Vk5FZDcyWnM4UGZPWDM5Ri8rRmg5OWUvUGZINmllVjF4NjhkUXdSRHI5a0pmcmVOQndMWWRxQnNXcmdDbnRiYlJNT0RDbVVDSDFaSHpyWDRILzVpL2NzWnNab0QzZXVlRFZER05mSCtWc3hBMm00UlBlcHN2WWUvZkE3OC9NRngrK1ZUKzFJU1NZNGFqWjA0bU9hU0V5aVZJZFN3R21QbXhMR3VKZFovcVRqM1R1NTNaMmRMRldrNjdjaENvU0pVU1ZGeElla3VoYmNPbHV4aGpuK1dvWmJGR1dzRXRlcHIwTkEvenRQT2xRUGNKWWJFeVpSTTRsNXhCSDlHeUlTUUFtTEZqRmRvVUJaZ1NqYVBLSWR5dzRFNG9hVXpzR0pHWHI2dUpRaDFlTDhSWnBjeTF5WGJjeUwrQTM5MmxjZlh3ei96V3lSOEtkeHJPVmZrY05pa2lxdDhtUjU1WnFXUXJyeXhsSjg2Z3U0WUVVaWRlcXhxMEhVc2tqWDFDdFJMb3huS2JyL1dVekw0TzhnOCtUNFdibXZnL2puTk9YeDVid0E0RWwzajUwYm5DcUh2RWRhdG1pb0tJcmM1eE14S0pyV2tpcXJxdHhpb1NodzZmNWJSTmZ4dDZ0ZEFoR3JrWXRJaUo0QmZUdzd6MzkyNEFENXZCVjh4bUxQb1UzWGFrK0d0ZFFuMk9lZXhCdDBSMWNDdEx1VUltSHRzS1lkTnBiODVaRzBkd1hwVWJwTklhK1cyV3E1UzFoV1BtK3N4UHpycVRWMnBHckMxWlZibC9RYVVMZU4yQi9iZExkcGlIa0JkaWNKaG16aEJ3ZjBsc1p6cyt5RmhBUjVKQUpsanVKYzhsYmN5QlJUMWhpdVVxbTd6c3ZyRGtreGhMcWNnaEpnUmt4STJ6UG1OdzlLbGk4T0Y0VW9rekhEL0RiNDNod1FIa3ZLSk1xVG1sVEh2elVoanNnRVRhU2dWUE83S1l3L1llNlUwblo4TGNZMkZRL09UcDNmL0FscjFzQ0tGMzZFR01HZG5RNHpaaVVONGF2d3o0NStSRXRodDNmQTZ0Z3ZDbGVGeGkyOW5lWEh5WEJKYlcza2dockw2aVFHWVlqZkR5U0l3ayt1UFRVQUlNR3NOZnBBN3hwa0x3dUlkZzFiOXh6SHM3KzFtSVhmekxJdlhCUXZKbllzbFRxTWNFWWw4K3ZMZVNyNXhYSm1wVVM1NTJia09nWDIrOVE3OCtnM242REJlb1ZLWmhDak05eThVMXJGbllrYTJFOGkxMlgyM0h4cEtJVW5RN1NkZ3E5WFd6Zk1HSFBNRjRBRzhQc1VTZkFNMDVxa05GR1J2N0NHZ3poMThCanozNzNnK2dUOS9YeFptSCtkRUgzUUdvTDFZTEVlZDhHakEyejJobGFReERVSDZwejhURDdCTFhYMWN2SEZQVWNsUWpDTVliOFBEVkdoWTZsQ0c4am1Hb2RpSmVuSGF6bXBwTzBTSWxXQktGMVdxM0lrTVZMQ0ZzZkNIY3FVSXFKVzFPTytGNXpqTHhIbUFhYnM1TFczUysvVDhLTEtMeFN5dldIdmZqL0R4QzRxUkhnRlphVUdzRWFRd0JCNnJySStrVFdVdTlORkoycVR4QUVxY094V0puNkNNVGlVMFpEd0xjcE9WTHEvcjkrTzVHMTFqZ0dEZXJFNG1Yc2MvcnpueG5QTi9uSlV2bmdzN29QR1g3Rm1aUmtZQUdybDMrRS96TUdSZ1I2RThWNWJXc2dDZXFTK2dCTEFYV2NqNGlaQ2RpN1M2YVNUOE9valBlTE5XMEp5RHVnYTlkUkYxVFRkZWxxZHlvdkZZeWNHSElZd1l4MFVVMDdjc1owcGVlVkNtNnZ4ZTBvd2NQZE5YNU5CRDBRUnU3a0tOZUNhYU9yL3E0djZ1RXZmNy9VNmwxVXBTdWRtNndOR0NqaDBlNzdjdzI2TjZEVGdSd2xWcDVWSTBvU2ttWGZIejJLQnpZTDRFaUVvNUpsMkFBYXppcjZpRlpMSEJMSFg2eGtOdU9Td21FSVQzZW1VQjF3c1g2QlJYVC9XTlZtM0NmbEJCenNRSG5oOGtJS2puUW1rTGZ6ZUJ6MTRzWjFXTld6bk03M1ZKS3ltY3BzbFZsNTZ3alBYSGwvOTZYbXBPR2hLY0FRL3JMS3poOXhVV2NNNEZWeFNyNStFRjRQRVFuZ1B3a0FRRTdEakZwdFRuanR5enpwVkMyS0FRQURqTSt5SXlkQ3l5a1RVVjh2U08zSnJ4QWZTVGZkaGJWVmg4UW1oenNvUDF4Vks3dlMrVW1aaFMyZHlqNk55eDdqRTUvNkZTSkdOTUpCU2lkdGRVZnE2cURuV2d0aFpLb1U5TXowQ1BpYnF4Y3gzRUUrQTB0OGZvSmhEMk0rSFdPbnIza2grRzNQdFludkJHYXd2ZmhxMFZNdEJ0b3FNOXBkakhvUGQ0THFTZWdGdUhGL1ZnM0xCcUErYUp6b3ZrNDBFemJJeU8vUnk0M3plc2RiTFp5VlpRY09ENTZ3ZnlmVFBYN09NdnY5ckV2UDM0bGMxVE92RDQwZ3lRZGg0N0h2Y3ZlTlNKMFUrY1RTa1E3RlNDZmNleEpIeFhoSWZMRG90U3RZMTduYUZpWHVQci9NQy8rYWVGbjcvRGZtT2U0UVFRaTBFaDAyNEZYKzhQaS9MVXpGRHV1WVpwNzErZm56aWV5azFPTnFyNVpRZlFROTNyVU1PVkdRYXFPQzU0YUYrbndsRk5jYTJoZkZqQ0dVR2VpUnpHOHhXRkhaNmVTc0RjU0I3Q2FGWlVJMTFTU3RGVlQ0VTRPb1lwODNQdkZyR1lScVhyMnMvVGV3TWhzU0ppVlJpakp0dGxHU0tROGJCRHBQSnlZc1FyMHNwTDhrVHh1TnlZN0l3d3JkRG1WRnB4Z3pRS09hS3lZQlFSeUVwblRhZVBEalYvRGUwSElPNWFpcWJxSEo4eFo1VzdndU1rVGFwQWpoMzRUWlBZTUQ0dWszTTFCeHprZTRVQnhocUJrM3RZbE9lWjREd2dtSzVyb2psWEdBdkl6a0xubWcyZmZRQmxPbUVWQ29TQm1RVFp4aDFFeW9BUjVNaEQwQThUcGlzSlVTOTlHZ0M1SktkaTRYWUNwL0w0VGprYlRkNFFDajJZUmVQZnVOQ09NcXp3eTRzRzE3OXE3aXJGeWwrRGFGRUNaZnhJdEFTVjN5a0lYRm90aGVRbEtpZnpOejBYU2R4VDVKZFdjb3RvZW5rRHltcXhrT0pSU08zdWRlWGk2Z1hUQWJoNngyTWxYUS9rY2lVRHRtd2JLVWUzZHNPc0Z5Z3ZoKzRHL0hHZndLOGRMelRVN1VSOU1DL3pNQUVlQ3ozQ1dmNjQ3Rm9jT3pueXZJeDNRdHhRU2c1eTBmaVlJQW1MYzY2SkxFNzA4TWhYVEdKaUc5TXhCbk8xREVIYTh5b3ZUU3pHM05oVEhNZVY4M05qN1NpQmFkcms4d3lNS1JLa0NPWHRRK1Z1NTFBWHhtbm5MRXYzbTdvcHlOV1o5enhNbVU4MjRCa0VGb0tkbjFTWG5nM3I4UDVEeGUvdTcvaDg3UzZpU0FReHZPYS9ZYzVZM0IvUEUyVU83NlNLSks4cDZadTUzckJVdG5ZZW50TUNYcXRqU3pma0xXRWV3M2VmS1ZTc2hZK1h0eHRWYWFMUmVGWjZTUUw3NVRrTUhKbG5yTXQxeUt0eWtYTzR5emZRMDVPbE5jZUlzakxvZWFIaCtyamY2SjJsekhiQTdqbHRHdzFRU3hjWk1BSGoxMDlIb3FQVzd5cHZ2QUg1TkdGMW1yN3A2Q2ZGTEVzRDNRT1lLSW45em5OaEdMOXREOVNtb1JBbTd0LzgrKy80NDY4THgzbWdIOHVVejFoSmFhTEFYcmUzaXJleTRWYUxZVnU2NU1DM2J3cy9mLytnc00wWjNZeUxydVlURFJ6Wk9JYUx4eHdkMVFSUTFTQmZvMHRwUlo5d1Z3Ymg1djBXaEpXOTRzVnBYUUhuUHJEWExucGtVYjZNRGtCZU9oaHBqS3o2Y3FOUUtIelhiMTRyamhYK2N1eFg3WDJYdXpHV0N6SDJTeURaRWRpVTRLcFFUbmhaL3FVR2xURjRUSDgrbU5LSjMrUVkvTWVPZEUzODhia0Q5WURmMUpTbmdEengrcTRjOHYrSkh5RUQ1WndqSEJRYUNkR1lLOE5qZ2xja3ZBeXZ1TloxamZJSXROa2hJR0YycFJqNEYyR1pVUnpyRkdmekRtMGFiMFdRRjRGOVp5b2lEdk9kR3pvVnZtYVRJcFNNQkRCbkwzRndVMGxjMWxwdjdyeEl6YjdmZ2Q2cEQxdU9WYXRJbU5ENWN5R2k3a1hLSnk0U0tYSlNDbVRnKzB6NCtiVU1LSGQwa0JyVHlpU1M1WkJ2SzVsM05YSkVlRUpmSVFaNEhRSmdKRnQ0TFNoT0Zhcmh4aW1WUUxyZUoyWXFNbTY2VHV4S1Q2Vm1aN2RCRlJkaWRFWHFhb250cUdiRUFwczZWVC9jOWlyWU50WkYzeHVRYWpJSzJjamhBMGMzbFkyLzZSM1BXM1VWanpiQ2s3alduY1JHVUJRdnNLOFpLREUrYXRXSHNHcjlDOTU4cGpyeFN5U3dMbkRmaGFzZzdBc3pkYUZhdXphVE42dm8yTGFHNVJHTDdBdmRhaWFKcE4vQyt0YzZNZzk3NUJzSzlRZUJPaXJCNjdKazFtWGVaU3RKLzg5T0huUi8yNGZyYzhCcE1TeUgxeloyNWt0SkpBeVZ4VmhoU0hEK2g0U2JNdUttVEFja2FKVUxidkxPTVpUVWNkN3ptYkNzSHovcjlyZjNHM1RJZzVMM2NOdnNjVU0ybmdHalBaM3FTVERKWEZaTHdZMUxBM1VyTkthQ0tZMVBwQ3d5NCtMQlNQVTZjSTR1a2hOK1QwdmN6djkyZjZQMXV5ZDhQZzlzbmd0OTdjaWxvV01ZUUhVaW94bndxMlBzQ1o4ZFlNYUV4MGxYQ0hFNVFKMHN3MEVmVE1lVUNaZkYrZjVBYWNIYnNPYkFmL0ZmdmZEemM3ZjY4K05JbUVMMHZrTGxvWmxOeUpSWWNkcmlQdkVTME8zYnJ4L29RbjdYbWJERFV1aXF2eCtSL05QajZPeWYzeXpNZGxVekkxV3NkQUkwMnNSc2VOa0laSE56NVJmV2JtZ3BDQkVONG1PUzA2Q3F1cVpqb0FUd3l5azZrZE1WbCtKYTk1ZnZKL3FJWEt3cnNvWXFKSDM4cmhEdStxd1V0ZmJ5aE5jTlVrSFNnSkVYbm9pYkNjZHJlZTRQcVc2U1M5Nklham9sTElZdTJIOWpYYU96QWNKVlZPbTNoenNueGdwNVFibGZ5OHVtbEtNc3FPdmhubnFRMGVvYUpFRmk5bk1LUHlYN3pjWThScGFTMStWLzBwdGgzVjFxMnljNlY0UjZ0R2h2cnF0Mzc1YWNkNTMwdHJyVEdZU0c4QWxtME1wTzl6RkhzdDl2QzloRTFRdE4zWXJPbWFoQzBTemVpT25DM01qQ1Y0UHFGYmN2R1krZFViK1h3QUdFTHRFQnF0QVQ4YjllRXJ4eFEvUnkzVHZyQzFhWS8rTUJQRGQ3Z2FVb2htYUhiZGdnMmVVQXZGZUZIV2JDc004dkNnSEhkWS9PYXVHQ3FJUGtnN3p5aFdhc3E4T2pKa0g1cXRJSndQUEJnZHlPQXlTeWVRRzlydWlQSFVqMHVObE1UbWJSWldQYkx2RUtlVHZBU0EyZkJmaWJmdUNmUHltTUNpTUhWNXZoMG40UFYxUnNpdHlVdWhCeG9nV1NjMTVnM2VobDQwYS9tMWlvV0Fwc1RWL3NrWGYvYTJRTi9tLzN3Qk5Vazc5b1BkNXVHVTFLdmhxTFZqaVpKY2NGalQ2d3BOM0hES01GR1NMYThEbnlxK3JlMHgxUDB0UGdXSnlqR0RFWVlocTNacHU0djRBLzQ0ajgweXFtSUx5RTZYbXFGR1pOSThmcGMra2lCL1paOEQ2QXZTemNoQW8vOXRPNTROalNWY2pVZmQ4RFB5SStxTnF5aFd0enJzWmVOeHZ3ZW5FZ1Z1UzFpTWw5blNqeVRub0NYR0xVSEtXRkZoTVJxUEFRNEdoZnB5bDExSXIrN0xoOWFTancxTlViU21rU2x2cmVhd2Y2RlBqeXhPczQwQjFndHZjUWhzcEw1eTBZektZRC9RYThZUTduWTBRaml2Wmd5aWtydFRObnhsKytUL3pwbjNkOHZFNzdEWEl1QUFlU3VOZVo5c2pxRzlUdVZXSDZocU1uQTc0OVI4ZnorMkVZQ2hlQ0l3KzhCbkRPUWlCank3RStaMWVhU0NWcmN5SzFRcEJ0Y3JGL1pWUDhMVmtDRWRSVXBBR3FUSzRmNFFyYWxVT0dKakhhN09xSS9EcFFhN1BIVkpQd1FCeG9ocXAzWVlCa0NDVkV4T1VhR1kwcUVFenRYMXlqQ0RteElVY0FaQVYyNC9XUDRWNzRoS01EbVpYTVVqWlI5anFtYXFQek5WS1o0c3h4ZlZuWHVzTHJ4Vi9MZDZjTFQzc29kd2NReHVmK2VnMTZ0SWpXYjJoZEU1dHc3U1pKVHprR1NITVhEa2VRbXlXOXRnS0RwUE9ybjhnY2VPYUc5N0NQcnZrV2o2RWl5dDl1YnZ4azlpR1pLa2tLNEhQZ0xVUnlaT0RUTXdFTjBZWFVtNUUvSkN4SG1KRFk3VkdIU2p4UkU5NXVDeU4zbkpQT2RiZDBDOGNaaFFScHZOZ0poc3RuV0E0YU1DbTlqQkdtanlINy92eDk0dmRmbE1YdHdIdGxONWdjRFdySjROUVRNQW8yZVZnT0Q5M3FZck9JRlVDdHZBSGJsalc2UUZoSUE2TURhNXdrc01mUXJaY1lQQWVYZUwxanZDQWlFeTV5bkRRbVVsR295SE5ydVdvUk1sZDdqc251TzZlajlydlNUUnlUVDJzdnZmRHoyYkdlSHRweUVueGFUbE1Sa0RsbzB1ZUlVaXQ4cXN4Zml0cE9yTENWci8waDA1VnQyVG5lY2UzNUhPQkdOM2F1bTg3RDdxNkV4cGpLNFdTMi9VUEZyUTZ2Uzc4aVNiT0Q0U3E2YUJKbGR0aS9YYkFPRG9HNDJiVWxnekdZMmNNSnZPYkFPR0U1ODEwR1hpblptd01wRDgyTkZPbWdEZWRKRmRMSlpSQ05IMnZGT0JYbHFjRytORkh4TVlIMzBiRnJZeDFDOTdyMjlpekM3WFpESEU5VTVHaW9zS1o5NzNNZk9GNkhVTGlpTm5nVTNPOTN6dWN3TkpyQTB4Ykl4c2ZIQVI0Rjkxd3dIeHZ1cldJYzAzQXErK2ZDc3pmTHgyZFVIRTh4eUJVQ3VENTZSem9pWGhZSDg2RTdHUEdvWUl2VmlFK0ZVQjEyejFPMTVLeWhCd3dwSDBmTmFCdVE2elR3RzVEeGwrL0xBRjNQMTdUdWRzODU4ZXdVVkoxbzNsQlFkYkV6WEpJeThWSTN5MXNPZlB0UWlOS05pVG14ajJ5aHlBRVpTZFBYRWttVDdMK3hqS2F6MG1CbWE5Y0dyRkRZeUVWZ1R4UFFDbWs3ZHNqUG1Zc1dreDZ1Qjc5amVjeFFiajFVYjRUeERYRFhrVkxWV2lmcFZoOHZLM002dWhHTFJMM3lWYW5wTVlSMlJDV0NLejArRittdTladGNmN2w4bHl4bElSRGh2emY5TVhBN3dSTi9wY3RlbCtZbnZINnZKdytPaXVTcG12ODQrMXNxU05HT08xNlBRMFpBaVh2engrZ0dGWEl0RGhIVkZQVVFqK1pYNlNJUXFZdXUxTGVCWkI5V3FudmlNeFc4MWV5R3pRV2ZnelQ4ZmhteHpOY1VTUlZwVXdXajBwdU1kQS9OaFdOVmdnQW4wOGd1aTlIS21obEdmMXNMTTdPMjZJV0VQSk5GS1BPNk90bVRhTDh3YnJKb3lDUGNKQXZwbWkvUmNlVlJYbXBOK21jQXQwT0FrR1FoTVlKZ05xQkJIcVFHR3llOS9EV0c5UVhla1BCdEF2Y3NnSlRhZDI1SHdaN0paVHluejRmbFNTbFF1YldGKzR3cjlOVllsQWVzMDVIQ1RwRERDWi91WFNJakpseWViYnlKT1RpeGU1L3NObVplK3hCM0xvZzYxcWI5OWZ2QUx3ZHd2SWI5NXVsaHNocXlsK0d5YWJueUlxckFXaEQ1ditEeVk2dkJVTXh5NHhtK1JDcnlqSlc3Y2tzY2dSWmR2QitPZTR5UksvS28vYlM1eVNnMXh6eXI5QVdJRm90SWpNRFVWdW5kYkVCVnU4ajlvRGNlTmNIUnBVMWtGbUU4ekNubE0waytzbUM1MSsrVFZRdmo5Q2xwVmlzT1JKVG5WT3ZYdGZmb1dleTg5SFBoODJUUjF6aFBLYTJNY3BWNzJDZFErMEl0eXJKTnNqWjVjNHY5L0xEN2ZNTU5vKy80NGFjSFhuaGdkcnF1MmQwaERNeDlLZytuRFdvZHRiemVtR21mMU1tZEwySWNLY2M0K3B4NGdTVlkrL1BFcTU5WUVySk81dk41QUk5dHd5akFUZnR5S3pjQzZoYlF0d0dMcVZ2YXBxSDRzb0hBbVdLQ216bmg0emc0UFVmQzYzT1NmODNUUXFpMkwxSGRlTlN1WjZ3V0g0ZTRHVjY3a2NZOGo0bFQ5ZUZUZmFnaDRlb3c1RDRIUHZlS2V5R1p3SW1Nc3p1dUpYayswWVBiMFJURFdQaWk5VnJPUzNpYUFTQm9OanVVUjBQd0NFUjBHd1JHNmhIUjBJTmRDbWZJRFplOEhrVUtEOVd4SVc2QUwzbjNDTUlaVU1Dbnd2MmNTa002Q0JDMFQ0U0RkQTNoNWxCV0JXcTlDczVUbjU1MFdpR1g1L0oyOWI2bTZPV1ZKYU9kUGVsRk9Sb0c2SEJsaE90NWRjalkxMnNwVXE2WXlpdGY5eENVdjdmakVnUzVhdHY0SXNjeXhoWi9UYW1IWjc0b2d3SWNmZjFNOGtmeGw0UndqVThoUXYvQmNBcXVueWtrcmdPNG5RL1FLeUxjcWNvT1ZGNUNTRXRXQW9ObmkxKzdjcGNwaC9WSVRNWHRZZXlpT0tNZ0hPd2xQQzBrOHlkNVgyWmRlRXVreS9uV0VrcW4zR283V1JOL2VVMmM0a2s1dEcrR3Bid25hdUEzWW1MY0U0ekc4M3J1T2lkWWVMQ2Z3R2Z1ZUtPblRVOGZEbHRYSzFZQVRpejhXdTR6ME5KK3JzRnF3dzZzQ3F3eTBGN1ZQbWNoM2tyMHRxL1FkS1pvL0k5RXpYcFB3RFdrckh6UlJGb05lWkZWUzRNWWRlR28zQnlXaDVKQWNLdStESUxJY29icWdqellGbnpXSi9Eeng4VHhLaGlkeXVrNUI3NVBha1NOaE5xdlVyanp1NTV6bVF5SnFhZHdsczVMVVUrcERZaFlCR3RRZXhTZnRldXhVbnhQTXhxQW9Lc1ZyVndwYjRaNGtNemcwdWc0eXNLdExFeEdTbGkzVDM1MklvaExpOEFWQnZyczNPZzZlZ0dxUW4wMWc2ak5XcWdjcDlEeHg4RHJwQkUwckg1ZithbWM2WFdJQWUyNUx5dEhmQTdtbFIrMUFFNnRlRXowTmEzLzlpdnNlMng1OFZ4TDl6WTY2Uk1CVWI0Q05WK1I5cE5PTmRBL1VlRHBsb0ZYN3dMenBXZzgwVExLckpmb1hHd09scmNoVjNycTJyakwxTGR5elNNaHR3ZnV1MGhOSHczMUNSeEhEMEV6T3hJcW5nZWpFYy9QZ1phWTg3Zzk3bHhicjQ3WG1wZ2pZOGlQekdoNFFod1A2c3NOWjZON01lYzZ4Z0dzRU9xb0dadHRZbTJyZlFJUVNNM0h5QWhqRG55OEprYWYxRXNJL25WaU15SVZCTjNEaC8xMkkxSjZnWTJTVnNXQkUxUFhGWWhvQ3NJOHc2dWJ5eC9qdlBGSWtTd3BISnZnQ3RhSlR5OHhiQ1h1UFRzaU9SdG5IeDJENmJ2NGlKb0IxVlJRSzFNb3VWWlVsYzVDNC94NUFzZWhWQUlTdXREUEJjWEpwQzVCcjBwNUcrMWZDL2Y1aXM2cG1NRkFGdEcyNGxwRWFjTnBYQVlSbGw4cUhaTkVxSmhPSUJXTWFwRzUxblZsQVZtZEh4d1JDdGNZNEJLYzE3QXBHaWxINGVJUURtdks0cjg4K1JqazA2S3RWdGM5bDFOaG1VV1ZVN3lzRXR2Z3h1OEJOSlMraVZyd0FOTnBpWWg1VHdQa2hOcFkvSUN1TlhMMWF5eVZtM21LcktPb3E1clRuRStFZWltQXl0RVc3Z3FsWHdSRkNRcXg3R0grRmJpQmo3bnd5c0MyQ3I3TWhUUFRjdjQrYWZ6UEFYeE9HcHJQTk1WNW9oejZiNnNPWTlSbVNwZXhkZDdobmhsNk9aSHd2UytoMUxsUld3WktINmFRRzNKWUNwa2I4aTZQZVEzMmViM1BoSmNZNXg5TWkySzBqcm9YckkzS3ZMclVEV2dKSnNMdUtIc0ZEckVhR1dDQnRLZ3p4bEdrRFVQZUxLeGZPTklwTUlwakF3UmtPRGpaWDc3Qzg0eW9jNkZ0M2gySlljWS9mUXo4NmZ1T1g4NkI1M2NPOG5FcFVwZEZGcjJUbFVyUUJIcU9LZXlWYTRRbWFtRk4rRVFMUWk4M1h6RzhsMjc3S2NKeXNtWXZSM2pzUXY1bldhaGVzNW5VdXRFc01tM2l3UTFyeWp3NlMxRzdreFJpckpNaFJvWjlaVVVEVFVhRVc3ams0VkdZdll0NGFBU1l5T2lDejI2Q3VsZDYwaDhEZU11d2ZQb1VyL3YrK3NUellQVG4xeldjR2xpVTc4bnpsWXdXMUJ0UWd2M1hzQW81UzVsVGtOV1VzRjdMTUJiMzk4WlE5LzJHMTdOREIybVJUU25HY0h2eFdXMU5mUHhIcEVGQXdGek4xVWNzcUVQUGpsZXJtSDNGK1pjUUFsNVFXeXBTVXJwb0RLQVdvNFJORCszTnJlSXdrcG1KNTM2ZzU4TFUySXZFRWIwMUhQSWVzNk90SjNFT2tKZlQ1a0xxTzRacXo4Y09mTXp3ZnRZQVhxZDl4M0xubnU3MTlaaEx1M2FoOWpiSDZ0UTFMcVZuRmFzd2w5N25NZ052QlNyWXZ5OTJNbGxDNXFFUHlaOGxaakNoV1JVWGx0cVN6SW9Jamtja3IzaVdLNEVLcmxzMkZKSWIvbE15Ui9TYzN2aXBsbzZTMk80WDFhdjl4SGltVnJGRElJWExUMGVKRWdYNnBmUk8xNVhZSXlBTnA3ZmxlZDFEVC9vdEQzOW45WWxJd3M1b05rS0pSWWpXb21hSHhsWFJRWlBuY2pNVWRWb3N2VXlKNjZtcmhXZndXdnB4eFFScFhWeVBrRXNwbGFEVWhUQlVLWVdpR3hFbC9xdXlLMnl2S0oyTE53TG82VHBzZW9RcytFMTBLZHoxbHp0Z0ZEYmxSSVI1MTcxcmV2MG8rbXdrdjN6OXhUaVlxTkphV1U0ekd6ZUJJYks3Z2pnNGVMemUwWUZ6bkhnV1ZUbE00RlBPd0J6QUxnVStGTldaQW54WFJzdlRGYVYxUWVXNjFTVWFVdVVZdW9iaEVHZTMrbWRFZHg5MnhsQklTWGxUTlVjNzZRMlM1U28ySHc3QVBQWDdXRmhsQXJQWkFqdlF4YVZiQmVpdkFyQmttN2poakVyRFhRNWdsaE01UllobTVXaUtrSlRqamNiN2JQNHcxaVROcEFUQTU1OFRvdWtHTU15VGJuQWI5QisvblhpK3FNejd5RVlIZUk2QzVKOUlBZ21sN2xITVdJZ3prSnREb1RDUlJRVXRwQjZSUzlCSVJyVmFJRXVqMERiTTBBbi9RZDNvdUphTHhIT0JXTlQ1YXJKdlhVT2hzQ2dJZE50RlZPalFXN2ttZW1GOXhEVXhwOE5Td1pwUkVGU0lyMk5pbngxekx2TldBeUdiVVZ0MndTT2tMZm5EUDVIUjlvNmNXUC83N0FSZ1BtZXdYT1VDMUpvNVpxV2l0b210Yk1nbHlXc2ZhS1RaUTJ2eUZNNmgwT01OWXo2eGQrQU80SHl0S0pZcUNUTnRHTWRodUltMEpXeDV3OTdsWWNlZTlKSTJic1F3QkM2Q0x6ZWpMcnlRcE14NUZRaVJ2K3RXZTM2ZUhmMGtBVWgrRG13M2hmaUZadDQvRHd3em5Ec0Z6eXc0ejFQNkxTT05FNmRuUlVaQ0t0N0c5NGJIVDV6Yzd6dFRaMnZ4ZTZObjlNbVV4TWRuNS9VdU94dTVHUW9CY01QM3VIYzR3N0JIbHZCSXVTL2x4Q2V3RDRpWkVHSDgrQ01DMEpsYzZMTHZkbFJpMkY1TkJIQWlVazFSa2F3MTZNb0pUdnZzL1J1Z0k4QmcyZjlZZXFZdVlwcU0zK0JpZXpRVVFhZDNrb0Jmckt0Y3Q3VEVzYWFEL3B6WFFHai9ndFpJZTEyejZ0Rjd0SElOcjVuUnlGSVMrVEJRV09vWlk4TklnL1puemtPS201aUxxRnlTVjFxTFV1b0pyYWU0cmtqMUNpUzQzQWxDYWpJNEtraXpqUGl3bURjVjdhSlJubHpCaHZVYXloYnV5aGVrRWpJSEpZZXJWbnpjRWRsUXgzaVpIRkJKNGF3WVVleHd3VDhtTUxkZjRsVTNGQkZ5TlNhMVJJVGE1dVFlbnJ6OUd5TmZJWXdYRk10VStraDZORG5IU2tRQW5Zd25xR2c1UDRtRHJldnNZYXlFL3JVeEhkSkpTOER1VSs5Tm56dWg1L04wTHZjRXdFRVA4V0crcnZlekQrd0t4T1pBS0pLVjJkRGt4SVJqaldZUFNGOVI2S1liUWl4NWFEdkFUaXVaTUNwcm1kREtKL0E0RDl3YTMyOGo0V3hxZjdwa0VTV0kxSDRpdGpKcGFRdFNzSE9wbkVxTkQzU1BSZlBwdkNBRWRmMHlybFNHeDBtZ2kwL2l5ckxNbEl2NjVUdndyUzh5aGZXRms4ajdxemMyK1NTdU1JNEpSaUdHeGw2YitqcXo2YXJJUS9BaHlzOHc1REhsRUdtKzZaQzhqTWZMUkhEdDd1UWNXYW85c3ZHWXRQaFNEU1luTmJpWkZFNlJaNFVQbUpRNUJzWlpjRlNnZVhaZ0FqMExQTGVTWVJQV29LZW12THFBUDBTVmgvVVM0VEl2bStxVDRiL2RDRHNXVHE3K0NCRWVFNm15TEc3TmhOdmJocTF3ZzVWU2VSc3RFUVE1VC84dG5PZU9LYkJlN3dPOWY5cnYvZm1YZ1IvZU50UUdmQjZrOWIySllHZDBSdGh2cmVFNHZRaEdIakVPalcyV3gzWG4rUFREYjgzdXV5c3RkVUpwaXlMSGxIdEhLRm4zVUtkRk5mRDVSQi8zaSs5N3pvRzFENkEyZWdGRzgxa05pTmJYakxhOFNCYTZyNFdpNWY0ajhPdjMwNVRUZm5oc0Y2cHpUbmFEYzdFaGoyWHA1dUNxS2lSdFlwV2Ixa0dFLzFSS0tLd0E1MWxrUDNRYzVIQnJ6VjhBUkJvM09SRVQ3bUd4VE11alFMWGFISWY0QXE3ZStRV1hMUnlEa09IeURDTnZMSU9oUU5jWlZjeHBSZHZPTFpOcEwxcTNSKzUvbDZSZGN1TUxNVHdSR2k0RnRRaC9FajBDUFVvVVVVS2pEUTVqTW9YVXV1VDNjMXVLellsNXp1YThzdEZVWnlvc0o4bkFhaW0rTUZ0b1lFczJTUDVPUXZlS3FMdVR5Z2oyTHRuVUJyWUpLOC9VdmlmQWpqRjZkUngyOHBubzZ1aVRVK3l2V0FWRHpXVHV5MHRCY2hrYUt4TCtaQWk5dEhiMUtJS0RCdDNCakx4NTVac29LNFU5TjUzM1E5RTdIWE5jS3JxMEw0SkNQQ2VwM2txQTlGckJ0MiswMzBoYy8rdWF3aGZqZjZ6TDY5Skc5dk1VamduN0RiQy92NG1IUzBmTUt3L0JRT3liZVhHdzJKYTV6bERXc21YOEExZDlNaS81M0JqOG1lbWxsMG5FTmpkZThNdjJEaThSbzJXV296MGhSUjBYUUlTUmVXeEYxcUE4aVhNc1ZDYVIwTXRBcmNDV3EvMTJ0Tk9sTU1vWnhxZ3o1Zkh2WEhCc1JNOVRZQ3ZCQmY4OGVROXpndTN1NENHOUdEaTE3YVNucjlEUzUwSGs3emdXbmlOaGR3dTJCRThSVGVQaDArdXJVVHpzQ2RkOGp4YXFDQStpSnBRTWNFc0wrVnJlZmkxQm04WmRubG12SG1RSWw4NUQ2emNvbDRUYnB0aVNrWXE0c2VSOEJGbG9lSGwrdVlSUkVTS1lNbVFONGk3eXdKakZVaEFsekdmMEtlV1p1RUdpaldxaWQxNUxDR01CLzRMRzJNRlNMK0JGTDI4Z2xBSURURmNGa1dxamdkRVhhcXNpamZBS2pOUHVxWUQwdFIyN1J6YndjUlR6M0ZPRHRmYXM3VWFnMmVFMzQ3RjdvY3BuY2lPU1k1VUhXNGFPcVUrVGRwUGFaR01kcXhiWUVvNmduMFRINW5tYVlGbG5va1VrNy8zWlBhb1VYa0lSeTlkeDBnUGkzWENIbFpralZUYUlLaStGZTNTa2pwcnZXTmp3NTU4WDVxbUdvZDU5cXNRK3o5cjcyVklLSjNhVTZEaVJXUWt4d0x6M0tmVHduSXA0elVHV05ER2dqUTRkSzVEY2wvS2wrSXNHSk56L3BZUlFBdmo2WEc2Y3ltQ0F2cWgvYTZPd01vWUNWSjUrZUYzWkZVb0psTXhTS1Zpb1VhWExpdXZEOE9Mbm9CQStyRE1jbzF4TGtVUGZzOXpXTkxoellwd3Y2dDdobjFldWZHS0pleUZoaHVzcGhWWjVmWmV5dXlxalpFdmN5NC9hOEg3ZnpDQTdCckFiVU8rd2UzcDE0WkZjaVJVQ2ZCMjBWamZPQ1ZWNllIdExLcFJ0aWRmS1RvdWlYWmJXcUVrS0tUeGExZXp6cTduQlFjMW82dk85UkE0VXU0cEc4dWllcGI3V3VIdGtKR1ptd2FmOVNnc0lYSzdrbWlEZy9VWUlYN0plNUZCeEdqdm5WbE9zWFJYRGxVcWRsd1o3SnF4T3hWQ2M4eUNGUVo2a3BOT0s2eWlMNjVFKzdzTDA5cmRqNG93WUNEMThYUnZTOVBSMnhKWThPakFWY285OFlBd0FYNUdBZEQ1eFh3U3BJQ0xId0V0OHVBL0w0UVI1eXN4Z1dLd0xVSUlTelYvTUlrd1l3ZWdqMlJVNXlSTXBrSWJnQnNzV2dxWGdQUFI1OGM0RTNheDVnendQVTZ6Q0RhdmQ0b0ZNQWhOYlRBb0xtaUthbUU1TzRrSUREZ3d6VmVsY3psWnpmaWgwaUVGMDRnZ1VpSGlLcVdTemJRNlZ4UWtXTWtKZ1NXa3RqcldEQ0QyMzV1T2N3dUpEK1BDaG5LL1B0UUJrWlM0UGVPWEx4c2hpZ0t2TmkzQW9jVXRXNkR1WFMrT2JDMUJGOUJRNVJYdy8xNFhSRS9LNmRzYnJIa0xEWkttYWRsZ2dsczNyWW40dGFQVUFCSGd4cmU1emduMU1kQ2tNcWNRSVVjb1lyTnNtWXBNaStsOXVmR1YwR2IwWkFYcnFZNWRZNHNTTVUvM09kN2FDdmFXQ3ZiTjBraEc3WWptdXNXaDVqZ25jakVxMTAramFJVVRDWUNPYmFPb0g5SVFES21mUzM5RVhEZ2xDenluZlpPYzNLRTBWb0V6c3ZhQ09FL045TTQvcE9BZTZHNElyalBBa0MyT3NHUnpibGRHT2lvMi9kNTVVUG82azVuZlVkS1plck1kMjJ3enBib3E3RDVHS3FBdWpJY2doejN5YXNINTFldWx6ZWkwMC9JaTFHUGtoZjEvcklRZjVTSUt0clRXSE1DWGcrWnlQNEZJSExJeUR6Wk9LVzUwbFVDYUtweFBkMDI1c0tzVW9wVUtiUmJKUkIxc1c1MHRZWEI0dTczSHZwQnMrVmNYQmc4WkU4d1lrS1hJcXliL3YwRktoRDhmcUFobUdwOHBqaVRkRzMwL0VBOWQ2TStYMEwzNTN3MTF3ZSs5VS8vRWl6UWthc0ovTjFtY1RtNzBiUlZ1MmZjblB5UWxLaW94TzdYTWtMeFFtNjJmdUF6c25TdW90REh4WDZsUFBrLzB0b0UzVTNFSitnWFBZSlhCTHBFZ29Ud3FSKzhHWDRiaUJTMHcvQkdsUVlNZllhL3lCR2NPSUtDOWVrREdvS3BpYjMwU1lmQkh0ckRtODRvRkFyb3YyL0N4czlIOXpveUlXdW1PbDVNUXQ1d294WGJZcWRhVzcxajFkbTZRVkZBd1pEbGcwT0hSbjd0QUUwQnhJY2FNejNnalZMbGMvRUh3UkFrTDByejVtd20zQXZWZ0xpM3U0dmtxZ2w4cWJHSlFWVjZzY0NYMDRXdzV3T0VPV0NSNzFuWmEwMjZXMDM2ckNValZPT0xzRG4rUWxld2h6QUlkN1R5cEZDSTU0WUpqQVVYaFJhUEpvbkZKdEltU3FzSk1Vb3FYallaYTFleHNLYVVVOEhXa3g5SG1aWUo0ckZxWmI4ZUUxUjZCSmtuaGxGeUFUTFpObThLclFvOVpjUThBd0V4ZlViNzM1U1FGVXltYUxXZ0U1amNzVXoxRFIyaGM1d3lSZ2FXSzU4S2FWUFJhVklDMGVUb2VOQ3dsSmdDa0ZuREgzNmF4d1VVK0t5dHhtVmtraWMyd1g3dmtoSVgwTzhyWVBqYUVMelpLOVlZMmpjOHhiSmUzdEpQMnNCSzB3NXdNdExmT21NM2tZZU1ZRjVYd0hucDg3dHRzRG4rZU9qMTgvdU9Kdk55cmhNK0pWY2JnL1ByQ2NTQ3BWbElLSWJEU2dta2Z1Umx4bitjbWtjdkJvMlQ0VzhpZUF0NFI1Tm94MFNPZ2xuQ1BoTEF0bG54Z25PYjladEpMREpEZHZtMWEyeTRCaVNsb0dtUUEyWFNINTNsZGdFZHdEUlFqUDA4S3RpWVoydmR2NTlnVTJ4ZEh5NzNBRmJwNGdudy9lMTJXY3RLaUNOeVZkOThEMUVMLzVpdHpuYjJsZVFxYUlaejdIUjVUenA1eVF2STJ0Ri84Umw4UFY2cWtTeDZDd2t5Uy9MRng5Y0FCOFBuWGZWREJ4azJFTXE0N1owZU1sTkVhYWpqVlM5eks5MVZPY0ptWGM4c0JxQzYyeW9xQmxna0QvOFB1TXJYQ2R1NHh5bDJoRHhVUm5yNE41NGpnR3pobkNvaWxQZjFkMWlad0x1dExlOWxPcTNFdFIyMHJPeEdsejM4TUpVWGtoRzF6QnkvR1VrMWRoSHZlSEFUUFpDMlBLMEo4eTFFb283UERJTDcxWmErQWtFRjYyUnlkWGxJVmR1RDJJSjdwV0t5UEZtVHFkTjBaSGpMNXpYT1JtUXB4cUZNL3g4SHFiU0k0bUVpcDFGKzhseVlIelRwakptU0tEL1UwNVRQTzZ6MFNDSnVTclhDbnNIRWxQUDBvQkZUMkpaRzdsazc5ZVFoakhpbWRTS0RtcFRFSVVrZWZNRmhKOHovQ0xCcTdkanppSnFhQ0cwWG1aTkNXZFJIZkt2UHk2VkpaTVV4QWNOdkovNXd4R0FEeHZQK01taGl2MDZiOGYzWFptZG81dTkyQ2daYXZVZ3A3SG9IbzdRMXh4bm9nbUJoT0ZpMHZIZE9hcUtlK0JsVk5FR2tjeUtINGxCZjl4cUIwcFg5ZldmZXJlWXFGci9DTFdvZlJDNGVBeGQ2aS92M2FNY1pnbis5ZU8yVHNqRExXWUlsOGlRNFZ6ZG1jaUpBYUVPTDVVUkp3NFJpeW9jNTl1bUFsbmtWUWV3M1RDdGxVeWY4bmp3YVRpOW5YWHB6eUZFZW1TcEVHclY0dlk2dEZMNmVqcFp1UTFtQU90RlRTdnE5ZEc3Z293dk5jSTJaRmtSNEhHeERCNVAzaC9xVzNZVW9uZlQ1RmlpWituTWovUFFUN3E0enNlanp2WGxOcHFqVWo3NGJNdkNsd3NMQWttdGVaZ3IrYnpBYlFLWVN2RHNoNU1nNXhyb1VlNW9zYVducC8zVHE2Rjk5VnE4VHdxbnVkQVhrU3Y5MzZKekNtNmt5ODF5dWZaOEdFSzJwdmZFUGpYMVlucVBHZ2hUQ3hGVWNTWi9odlo0dDU0WklqNWUxZXViMi9MUEpYYkhTSlNtZzVjMDc1VFdGQWR2dlNlNWlUSC9uTExYVC9FKzhnNVIvdlVDWVdQYWJSNnh5N24wbTRPK0JFYm5YdVd6d0VNbDhzNTgzTEtSSmtFWnlWUElaaUxkdVUxZHhtMUFqeUhrdlJJRUxHNmJtVXM2YktiOENCLytLSGdwNSsyQUdxZHk0eGRnR1dGWngrTS9IUWE3K3o5VFk2UVV4RzViWXZTdzR6RS92aW5pTGcwcnMwNHlxOXpDTkFJT0FZakw1SkZHbTg5cXZrSTBxVnJmRlNaRE1jUUJIMnpnMzFyaVhYZ2o3MzNxMU1pVEJSMXR1ZjhmYTZWem8yTHZuam00dHk0U0hnbmMvbEpsVEpKUE9FaDA2TU1XVUdFU0V2b2NWVlBVZWxJZEJDU0svWkx3eFN1TnM3d1lQV1gxbGFBUWxUR25LOThVdEgyUEtMb1N3MjdyaVZ5S1puQWRUdC91TkNNSTBLOWFacW53QUdmN0ppVkZ4NEFSZ1Z6azdLU2FwQVdjQUVJdEJCNWUxL28xTXhiVXI2YXhyWnZDclhMaytlajhHS1J0cDVKWWIyY01BVmVDd05vWXZhaE1SbjB4c3lxRlVHQmdBdzVzUjZ6ME9nUW9JdEJwWkZVTnVKQ2lRcGJPZE9DN0RtM1FIcjZueFpBL0pzdWh6eW5nTzBnNkk2dVl5SnRJeS85cng4cEZEY0tQVlc3djZ2U3Z3aE5sZERJODJHb1VKZkMzQzRTNTdJUDgyNXB6T1ZJNG1Ga25JTUNwQlBBRXR4YUV4Z0g4NXF2STdwM0JjQ1FQbEZCVVR0TkVnaVJsbktSaVU1OHJHSGhUZ3hJcUR1bHJBTlprdm9LSkI4THp1K2MzWlJzSHZLQThrQlQ3dGtiMFgwZzRjczl5b3I0WkVQYll0cFNhd3BERG11aTRqM1MvU2l0aHZkd0FzQ3VjT1VkcjRNLzFNcEVOU05Cb2ZhVXNDeVVIQjVILzlRdjFpbHY1UW5nTGdXZFhIbFJtVUlHWUE3RHNqcG1HMFExdDVLUktyMVBIY0pHZEhRYUJXeUlzZm1DVDY3TThmbWExaFd0bzJDZW54RjltTndMbjJPU2RoU0hlZnV2Ulc1ekp6NjVIbEdab1dVZTYwVk1iMUxrK2t3b0NvOVNjZWpFbDNDTlRQbkJOYVVYQW1ZcXBlM25kR09qcTdWbWxXSmoySlE0bE92ZUltcTVGdFRFZFV0WkJucVp5NEMrVE5tcE85VjByMVQvU2FBRklZcnI5em1EWUxKbXpKN1IxR2lrZ01mTjFsMUdyUk4vODJQRDMzMXRlSHRrQThHTk1mRHhYRGptSWhYeVdPZ25nNHluK09IOXFEV2hkMkFiM3YvQ0kzcFpqV0FZNnUrS3VrWEt3ZThobU9BV0pnbW5GQ05lVXVJeElhNzBMc3VPaXBqVmZIclV1V1dRcmZKWFpaelk1SUx1ZXRIamp4ZzRXZGVDN0NuanFyQ2wrUmF1YldyRHNkT2VIRUNMNE16RlVlUVJySjhqc21qU2k0aVBCQkJUb2pMS2piWGlyMGFPQnFoN2RFTUdpMnZzdVdJbXZBeXVyMURvUUJoQ0YvdHBFN2Y0S1FyU0VYb2xRRm9RRUViQXJqeVhXY1czbUgrQ0E5d2YwUGcxdlNhZDRUY2hyMDRsRTNOYVlmMzlsRlZURXFJMEpTTllFYVBmZUlMeWQ4bDFZblphUWl4UTZFeEl1UWxOaW5rZzE2WVFpRXFlVWxGamtJVWFPVEI2eEQxaGhuNUZ6UXgvUEExcEZHalZXUGdUWGtRNFpRbk1JSWRnazVCOGJkMFlhUUF0eXQvUU5HZ0RhcEgwdVp3QkRzTTlEbm9TMTNDVkw3aTU0ak04NUxoRWlSQmNwMGVrQm5QSWR6RUJUc3dCdmFjc3JYZzFRSHhGcnprRXlBR202aWJQbGRoREh4N09VOW5qTE1pWmpHeDllaWhkT2J4ejJwcnNTRkZ6VEVYT05YTUpnY0p6ZWxUbW5RYk5nQU9NSm9wV3ZwUDVQR3AyV1JXZGxrYkhDV0JEOVdpRjFvdVVqT3FBRmZXeEVIa2NsMmlSYkRpMUsxV2taNGdMZnE0SVJjNE9EQ2p2MmUzSGtkWTl1S2E0aHJueEpSelBZSDZVNE5DZWF3MWJaYzAwUW9GaTljQWowSE9NMHFhY0lzM3pmVGV3SENsTTBlTytSc0VwN29EWmlUMDU0UkUwMW93RDZUL0szNjNMeDBUZ094Q093MThCYnY2bVZlYTF0anYreVZKRkdyU2hRVERqSW1RY3VMQnVyYUxVeEhWVUVqM2xHWFBySEErMTBmZ3QwUStjcFpSbWdNYWVub2ZaZ2FGNFV0eVBjdmlTV3h5SFBqcXJOaUtNZ0tZeVdSWHZZRXQzdlA4QXZKZUN0M2ZnNjIzRDF1Nm9YeHJ3TVRENnNHamwvbm5pcExmQjhxYkZFc1M5RDNwOU1tbzNpa2ZkUytUMXd6b3RBQlNCMFNBUGhRNmxEdjFlaUxPcGcrbEtIaXlmcWhtbnhsSkhHR1prOFl3NjduUlIrWnEyR0xkck8xYlhBd21aR2tpUmxGZ0xFOHBYejZnNDR0QmVnYnlJUFlOb2tFTnMxRTJqVUZCUjBzRE1RRUJMZ21lMGVvT21ZRnBGdXQ0TmFnb2tlaUZHV3ZzOW1CR25ETjFkbjVPc0Z0MXVSQUtBMEFrQkFIV0ZxamJteVR2TWVLTVRzWmkxQkp6UVlBS0JsazV4Y2crWEhSb0FhREUrU2phaG1hUk13dEdjbUJDQlFBR3VacHdVc05iT0xvS1lqVk9HR2lUSUFleHlid2ZyVXRqUVVlaTlnQTMraDBCOS9uVmZLTUZCb25Hd0FXUkVJV2RFY3hRcEVPVXBhUERvZGF4eHFlVWNDVkdqNnZTVEZqbTRoRXIwT3BCRHFWK3JDMktNTlVaUnozK21pU2JpaDZTOFloSHdwbEhwWEhJK3BUQms3c0NmZHJ0cFRrUFFBc3VSNGhkQjYrRTRJQ3NVZnFtWjFnYlRMS1ZKWmNoWGllYWZTVGdNTm1BWmZVVk9ON0g4cWRXS1VpYVdGRVFlQTFHakhPaHBya1UzVnFJelVYUmJrZ1c4Rm8wQzlSTXZ1czVTZFY5WHBXdm4zemp3Y2YvMlJJZU1pNWFqUVFSeU5HekFGb1B0aCtuUnRibVo0UVF5R0dvS3N3Tk9PTU1nZTUvb3g2VHh0RVNZc2hlYysyRjdxWS80Q1NRSDFLVUFCV1krNGxMVHJYQ3AvdzBxNGlESThNNTE5RXk3QnVNREM4ZHpNTWFnRG5qSUVwQkp3ZjNzNlRZSnAwZ2poU0Y1VFFlRmNxWENpcmNpOG5mTmwvcS9RWnJqNlhNOURXZHhHZlFzOEZuQmxZc0JNOGxuU0pGMXI5a2NGMGJwZFA2eDBNZUpNY0JqWnBHUFpMN3Z5bEtOckQ0SFdPZVBoSGtXek1ZcWd3YnhVdGc2ZExaTXBpVmtVSVpBbjFHaVZOd0pTc0JtcVFEZy9WSHg0NWFONUtyWWZsRzN4M1BIK25YSGNRQi9PaWIydlJOVVNjVWdlVGZSVDIvUnhrY0hpUkZHVVQyOEgzZ0IzMlBDeWN6WjhXbnJ4Z2RVVVp6NGxpbDFsNVVsTlZ0UnhYOERIS05wbUpkcmpkVEV2R3JYeFZUa25DUUZrM3JVTlduZVY0NjZiaFR0VTdIUEtkUWZ3QXpkZXV6NDBCMDV3SEJRNnMrandkL1d3SDFsL0NDaFVyWkM0a2NDQ3RDcTdrRGo3Y1JQeDRYWXh2WktSQXNSdUthZUVaN25pcFRUN3NwNkljNGRKZHJTYzFmWkRLeUw3cWorWWh5WG12UzRpR2l6cHk5SG0xdDE5Tk5FSmlKR3Q0SjBVU2xTbkdxaVAwdldWaG14U0tBSlRTVmNWSEVRVjRVMU11SkFMcHJjNkpXOHMvU0RMR05nYVZoR1RGeWtGaENJNmpHanpDRnpZUXpGNnJzSU0xWmhibTZOYkFRbFErY2JickVxNWVwV2JOZGtTRHRjUjlnWEZQUjJ2clpneXk0MElsZVBvV0ZhcmxyQjhRczNPamJHR0tjOEF5NmpsWFEvSlpOSnJSVWcrL3VpV3RYY2xlVGU3aEJlWXFDb2cwNzJUZUxzYTdWZzlTQlVRTG1EbGNvbk1Edm1LaHFTSVlVT2RIWTE0MkYxdWRrczNzSmFIUHNyamQ2eHhvbmo3K1o4RG1JSWh0bUZzMWlUQ2hBUjBzb09YRnlENjI0QTI0M3JLZFFNajNNNGRXbUFjb0NLRmhtM0NNV0hLV3NLcER0UEFVajhvbjFEY2hhRnZoMWtPQTVnZHhCUUh6ZzNWUjhNTVBwaGF5ZGh3RGNYUGFuanZCSkdweFZBUlNpNkZBU3Z4UWNZUS9nUzhjdklzZy9pRENEQ0VyTTdrRzNoMlJmTzB6a0NhSGxsS1RqT3BtK2JHYXM3TEFtM0VVSko2UFhmbGlDbEsxRFRuODk1ZVQwcUliTHZxUUNlSU9pZVg4ZU9SNjNJUGdZUXphdEM2VTBhekI2Y214MkIrM0FiL1dxQ3FEUnJaZ25yS2FNb0tTT3RpcHhESUZsN2pQcUxtY1FCb2J4NzF1QjBBVk9sZFVJRUZDWTIvdVpINEV0dCtQbzFYVmpraGpnQ25nZnc1NzFqM3lmUEJkVnVEeDh6dDYra09GSVJ5MTAydzZDSVAzYkVNS3BuaDhZZXdRM2hjMzVGZ0V0dThOM1lwTXNObFlFWlVSRkZaZlFid25wY3BOeWxBMVBjczBkeVF2RUhpc21qQzhuN21VZUk2UXFjdy9YSS9odDBhSFh0RVIzZGp3bjhVUFIrUWIxTllKUll1K0ZieG42S0tKT3VCWEp5bHJhRVh4T2RsaVhGM05WZERWTGtxcG9JZ3FuTCtBUndNdjBWSnIxNnZWbUpueFRBR0hxc2dhTzdnbFdkN1VhTkZ2U0RxUllYZnRvQVYyK2VWd1ZaK0Zwd0kzNS9GVWc0UjZQYUxGV211MWJvY2Foek1RZmhWQU9IWXhaYXdYbEpTVU9LUzljY2dzRExLcmhJaEV4MmNOTHBpNlA0TldqeDk0R2JKc0ZMOUtxVFlFQzE3QjRGNHJrQ3dldXJNTUIrbDBQb3hZdlhNcWZ2bGZBNEVHbHN2d0hkWXdCSklsRW5BQkFTT2liU0dLaVBCeFk5ekxCU0F5SW9HYitvTUNtTUxzR1ViQnVmaW5Yb2kwbHJ4dzJOSmtyQjZmZXRkQVlRbStEc3FudDFwZW5BTld0UzRTUTNoNVJDTENndnU2djUyaXBYZ0hwaWxIME9MSXFUN2JGc0NxVU5JT3k4eGp1S2NRMFFUd0xvZnB3V2FUZ2cyczArUXNiWUFxamt3RmNxNG0yRzBnSUtqUjRuMXRrcGNJL1ZrVS9IY0FpOTMxbnVKV2tReG1vc2xCZzhWYWcwZ2FVNGJEbEV2NHlvVXdKZmVsRHNZaE5wY3Z4MkFiSm1oK1ZpcC9FMUJJZjd6QXU1ZTFSV1NzcTR4bzhvMVZUVUpLYml5bEdBQ09YN25DRENwL1NPTDhyN3NvS3Y1RW9wLzdaOE15SjJIaG1MaTRpYTVOOXl3ODBZV3QyWHA4d0tVbnlETmNaVldCd2pIcG80VWRCSEluVzBuK042UlVFeDd3RWxQZXFzb1Z5MGQrNFplSHpKK0p2M2Fubnp4ejB4ZDd3R3BCTFlacmFmckRBNFZwUmJyaEc5MGxONHdnVndRMWZqTUNpcmNqV3FVOFUwTUpKNzZnTURjVlNsUGJGaUVwS0QwbjdUSXlLREdNT3JacG1tSTBnNk5qVEhNaUJjUGtRNlYwN2NSWXpSK3drZS9LdHpwL2RDYmdhSFJaQWFwSXNaRWo5NmFac3ZoL0E1Z2U4QWZveFlCRkRzNG4yaklRbG50ZG1ZRnNQVm5CTEt0MXQwYlhPbFBQc01makR0NjZIbzQ5Si9uZE1jcVU3MzlhWTdLOWZ5NUJKT3VsSWdPU0ZGWWJvdVhNcERRekE5OU9WQ1Y0TzNpdmRxdnVMNnZiR3AyMWZEWlpDRVZrdnlNb2FIdjVSWEYzOTh5YkV4ZWhVcmt3UnBjSlk3Vzkxd0lndUcvOExPQWxNUWp2cVZwUjRWa0pjRW5EeGF2UlNQcmxERDNzOVlFcDYzTTFtWndWWW1lMXZMQzRqRklyQlREaDNOc2c1ZGh6b1FSYmcvQjJrQ2NDVkFvR1VtYXNwcU9iM2dYTlk4TU93ZTlacUMvcS9oOUlEdzdpOTRIanUyMW9ES1ZwWEZ5cjZrQmdvOXloeWhUM2tWSHQ0Q1ZvbDdLdlNpT1d4Uk1uUFpqR1hKVStlZVVOUmhvaFRtZ25HazRJZS9GZGFaRHkxaWNzQmYxcGt3OW00OFJJelZqMXo5b3dRN1ZvWUZ0eVFrUjRVcFR4MFVsSHUzMEhZRldOS0dpaHlBbWdCU0RZNHBxVVFyRWY2ajIvZGZ2M2JlV3dtUUhRekRRVC92T0pmbFRmZkJzYXlOVks1QXh0RnBlRkVCY3A5cFRHVU1pZUxZeDBFOCtkQWV5Ull4Mk1DajB6UGZSK1QyNFFCVy90OFFBR2gyNERuWVhFaE1aUVRMUlppZVNyUjRYV2psWGlrYlNqNmtFSzdHc2toU2dzSjFPZkJ5aGFEUTAyQUlqWmV2aDBkbG1GSlN1UFRTOXp4Qy9GY2FZWDg5enVubFJEbWNPWVZteDB4WERvcUZBUEs2ejNFcXoycHNpRXZZa0hwWjYzcHlhUVRGNkg1RzAvVkR1SWNjdjRlS1phbktuMHJ4REE2bUtsNzdubkNRWkZBOCtIQytlSDVvUkJqWTFrTGx2VHhIMFlWcjM5cU55bW1hN2hzRW40UWZKU05ZUWdkdzE0N2pxMFVvY2FuR3NpU0Q5ZjNJN3diY0szdnA2WkJDUnpoOGtjSU4rUjdSRW4zV0l5clNWMWNvMmJYWlRHaDBQUXFCbjEzK1h6KzRMc1poWWlUeGVpWTV0aWJJS0t1emFIbjlkQlY0b3FCRktoSlYrN1A3cVpvNFRXYkN5Rm1nd0hGUm5qWnlVUnQvcVFLSjQxcTFsRk5VRXRTcUoxeHhNYmlwZXZqMnd0b1VDMVhDL3lwa2dRRmEvQ1c4VTQwb3VNa3poU0FWQnhVeFEvZFM3bHBJL3FNVktvdEtROHhRTWN0UWYvTkJocXJ3MGtKZWVKNHpSRHQza0JTUGdDKzZSb0dOb2ttR0t6SFZBSllxNnhNc1Jic3Q0THU3TVlqRjRpQUdURmNFUzByZHV4cmx5QmVtRkVoL2xYMUUvMjhaVkZOMGhwWEl1N3BWbERCTW9vdFJLaGN1NjNEaytPbGN1Rk1ualE0cFZJTGFhczBlQmdld0I1RlAwbGd0VmhkRWE4Tk0yMThHRTgvb2xtdmxleGpvMFhmWTA2c29IcVlxR2EyUXdLWlVqazNXZmJkU3ZDT2MwTWZxMUtiZnFUbGowak8rV1BBNkdFcGNFOW1SMDRCNVA1ZlVFekw2ZVVpUWJCajloWVU3NXF5R2NtNU56WGhXd2RtN3JIZjN4cko5eHNpR1ZnUFNpZk9Ub1cyQXJVWmZKZkVjc3NTZko4RktyejZDWVN4TkFDekg3R1RaaTAwYWlzeUY1SVVUd25aUll5NDVvMUtJUERqWCsvZUpjWGJzVXg0UmttcGpLMDlYcHFWbVJwLzRQQlBtNllqZDVFUTA0U1pjR1lndnZiZFBnUXJEbXlLcXR6anVaTG5BOWR5Z093Y2gxS1VJOUJ2WDQzb0ZnYnVBd0xFNnJwVWNNZ0tkcmVzYzFNaExzdWxoSGljdDdhVnltYkdHUUxPV3BvdEFpSndCSFpRM1ZoWkdjM0tHM0lrMFZ3NFJMQ0ZFWnJsUVB5STZVb3JTVE1lT243NVdQRXJCMnozTEFDQkc0dGdyOXFQNzNBdFk2K0F2aFo1cnhuSi9XdnVraDRXa0tGM3hGQTJtS1JXZ0RuMGs5WUJaRENVU2cxckQ5RUFjc2VHUm9qVHhha0JGUlJEWEhtdlJoaUtoMGRYMTZwMkhEZmhYRzdORVJGN1BYYi9FR3JqS0FFK0Joc0tNUTBvdERFQUhwQ1dsdUY4VDY2NndlNm5Jc3d2WHM0UmRJaEFjcUREYi9kNHhWN01Pb2c4TUQrdGpDL3lIS2ZMN21OaDdTTy9yc0RySC9UVnFHdGlyQUhibmRFM0ZDT1crTGlWclNPSmdkdXZBZ0VxUnMwaEFXSm9PR2tDRSswb0t4cWJPSU5IRmlrRGk2OVY1bWVsZ2lSWlJ6MlBEc2x3TW1VaERlV3BsaU5NMlp4enNSaFI1TzkyOEsydS82WnBEMVNHOCtGQ2VzYUQ4TmVkZkJxZ0k3VUhGd094YnJMYWdSNjJtM09zYUdIa2lEWEVjdTU3aHZkbXhBbngyV1dSWmo5ZlFEeEhsRTZxTkh0Q1JsVE5sT0k1SFBHZDRMdTZqMXFUWEwxMHd4RlhmMVJid2hxMnkxVlpsQWpob2I5bWhTMUVFbGxQTmMySFdnVVdZdnNKOWxkN202Z0RKU29pQ1ZzUkFITjZYYXVlVU00WDlkRXZlWjFCSzNRR1g5dnNWMERwTHRRQlQzT0NhNnpuVjMxM3FEaGhhbU1FbUdFZlV3SjU5NFlZREh6dnduanBRdWU2NnFYbU5iNkZ3N1h1c29ka1NYaWZYN2duZzZKNEhJUVppNzFxSEVQSExXSGdlNHpkSWVCbU04dlo4MFFSWTByWGxPTGtiVURLdGNZSDlzcUphdFRFMk5nY044VjNzWlNIc2dDcFExUGw2b1hlU09SRTZLbUVjQWpLT3lIeVJYQ1VYbGhOZWoxQ3c0VTVjK1JxaWZNTWVwc0xzUEVMd1hpbUtyeDZ2UUoyL1VlYlhzRzlnS0Z6Mk9ObElvMFVad2pJQzNwSlpNNEJ6U0FFMmtIQ2VhVWxVRiswdlAwZGtVczNNWTJNbVhuUElHR1dNZ3NTb3BvWDhhUGg5TGJnVkdaR3BrZG5mQXhEcUVnbWs2SVB1Wmp5bTRXS0dYMUh2d2I3VzNRSnFsdEtZRlNvQkhZcVlNVHBSMVd6SFUzQ2xGb3crd3FFcVFKWjJIME41WHNtd29BZ0paZE5CZEwxM0lSdlpHM2lSbDJHTWRRM0pYOVZTTEtickVXbTVhd2xrd0lhdmE0WXl5ODhiY2dXeHhKZlNEQWdzV0dRRHJPZi9sMGJuZ1owakc0cTZtbTNWckswWWd3SThVS1RiaXBTNXEyeGlyM3FoK21oaHdTaUZFNm5WRk1WT09pS0NjelZlb2krSGZ6aEtWbjg3dG43anNaSGN3bmVFN3pXdEZjajVsbjVUVHZJYk1QL3FSS3VxYm52bVlwYm1TRVhBT1NtUlhERnRvTHZRb3BOZXpSdzR0R0FIRjZZNk1HVUtPNzhFNVpKYThHZkppNlRISUNycTJHd2VMazg2VndyTzh0a25nWjdSOWc5blhSN2pOM1FzWkZnRVNZV1BvYU1oazhyc05jMWljb3ZUeG9LbFhHTDVoeU1wYzJ1MExVcFRCQ1VxQzJLQjI5WU9Vc25sWE1vTlNJSEs5Y05yYVlNcnZwSFpEdE41aE1rb3QzSlFseDRLaHgxVVJCNUNMQmk2WTlZNG4xR2V3dHBLclNIZlJBbFZBSjFBanBjb1kwVlNKS2ZNTGhKeWoyZGxSUW1FOGxhcXlIUG1xd2o5MmhkV3BRSnFwc200YnZqYnpOK1BtUzJFdVl1cTlkc1QrUEpGOUpWOU91RU9SaWVSVXA4aDlLdHg5NThHdFBwOGRuU1A2bVF4NHMyQjNVZzlTTFJ5bms0cjdPWU1oVUxYR2g1RVBFZmJYYkI5YmRidk9UVEpveTJ0Y2QxL3VWVjZvblllY3JidjBMOHZQYVY1bm02bFRJcWNpRUxKamNiRi9CU2pENEZTVjVRazIxak91ZUk5em1sSUFabisxMXB6WVA0MVVveXI4ZkJYU0dpU0hxOFluNERSL0RXUW5iOFcxd2VGU0RHSDlqNjlpR2xDVk9XdWF2TWE5dFMxeXlCRVUzMTBrMEVFTmFGZXlzMUttUjQ5UXF2bVA5dm5tZmU5c25WbEdSWmwyL0JUYmFDajU0UTNBVUJGNE16aVNQQ0lETzZPZnBiTGUySVJXd0wxRm4veGZFY0hEa1haM0hPdTJUUzZmYWNKVUtkd1lYaXNTdjBVRDZNdWxhSTU2WThiWjY3WStXSlVwTmp2SmNRUkRDblhJMTBWZGh4WEpiMSs4KzcxL1hnZXgxWGNLWkljbUt6NGJjVDdhK0V2SFhpY0N6OWhvaHF3TW1PekllSzRuNW56Z0pROUZSWjdZWVgzVGU3N2lZcE1XdlBwMFd0dmdoU1I1NGcwcnNBR2hGbjhHK3J1NndIVW9IYUkrbDdCOTNWbjBmdjUybGY0WWpYUXk3cWlkblJ6TS9yeUxoY05tYS9scStsUTBrUXVqZWN2R2psdnQ2bjgrN0lZWDRyd2kycmhNUk43b1YvWklTL1dYRXpibE1Kd295U29tYlJneklwZG5aTjQ1Y2hnTGNKaCthbHByVHQvTWY1bGdVWEtRSkU3TTJPQXJnVm9RcldIVElvbjE5L0NKVkpRQ2xCcm8zSjNsVmdndnVNWnpGckQ1N1FBVTZNYnpFdEtYVGlkcHE3TGxHYU44VklONmJJL1owNE1yeEtUaERPSWNneHZEb1BaRDNWa0FycDdaQjRtdk95dmpubG05Sm9rZ0xURmNvUXZSNVRhb2FKUWVFaFJoY2NnaWtYZHBwU00zSExKUlJISzlFSGhOSWFZdFJpU2xzZkowR04vQVdqMGJPWnJSMjVBUDAvTVJZVSswWG4xYVVNK0Y1N256ckR1U2pGSVdxOFliR2ZhTlE4Qm10S1lTZ25QYVhNUzQ1OGRzMEQwUEZaNDJhMG0wbjVtZFhWTHNUYjM0OFNKd3Rha09qK2lKSlVSclNXR041dGpyVVUrNkpIakhjcjhQM2JJeS9Zb25EYWU1TkVWd01OM3BGQitxOHhEbnExTHYzNC9FcTg1Z08yL3BRVmxtZFppTFc3eGNWRWswZjVyTWh4cjFuaE9HaWN1KzBUSm1qSkpwbVJvK3NaUm5iM2JiSlU0aEtrY3VmNHE2TDE1V3Eza0t3WWFLYkFtcFN5OEZjY2REU1ROV2FzTFdmS3lJRWRMWlVVY0I2N281MzZjamg3WGExcW5PNnRLVHFOeFdCZDRUeXFPZFZwSWkrL24xYTJPZjZ5VCt5VzAwNVUxSlM4eURFS3ljaUl3VFdPeU05bkZjQlB2UWg5L3hUUG5udEYrOXdMMFdBZFh6enRLdHZRNTREK3R6Rk1KNTVQZnZkYXJJMm5jVm54Z0xrWHVzUERjRTM2OEtTbW4wenNSV1ZVWmRrSkc2SldnS1I5cGliQUhPTlJzTEZVQmdVRWNoQk5LWFFIbksvWjdEcWJWV1BQeGVIME8xTDdBNVV6RXNvUXdTTXJpbmttTXdhV1dFL2FER2FFK2dDUzJ6RmFpUDNxU0ltOFJZcWFROXB3cEluOGVmZG9tNzc1QTRMbnI0VGwvK0hXbndtdEprMy9xUUJUTXZ5Rk9hZDFjOHltREhsS0UxaVNjZXc4YVdYYnBvbFgxZVE3TGlmNDhGdlpqNEdXYklnVVFpQUMrV0dRbFdSN0dmN1NtV1BCQjJPT2JQVmlqa2pvaDFzS2FmS3lCOExYQTY0TUFKNTM1ZVlLc29zd256UWhSZWxnK3A2bC9zd2E4NWVURHpXRHVJQnNZRmY4aU1MRFFWL1I3OUp6NXNJZm9pSFljUFRMOHcrZGFtOWE5YjI5bFdlVTkrUm9xQ2NYVEc3VmFEbjNDUTdCUnlqRVZkdXo2NXB3UUp4ZC9aQklOcTkvU05RL1d1a2Mra0pHYm9XSTdPSEF6YjRvNEpNNzVDZXhyQk1RVEtSRFM5TGdKNE5NcWJjZ1JZVVpYeVU1MEtvekpBTWFRY1JWUjZUQ0E2S0JqaE5HSFhJR1NCOXJXVUdpbHl5TWUxaHQrM3dlT21iMy9GWElKcXFzK25FYlltMkpJQ3V2R0EwMmVET2VTbWRMUTl5L3NYNWVva0k0TGFOWkFnQTZrTGVsQ0tlMEdaWkVSR09md3owbVpCd1VzUThFWElmL1hhV0tYM3N5LzllTVVBQ1lZa3E5QXZPWVJIdGZod2lpd1JabHJnQ2tleEdDbHBaeXF3SmVTTzI2TXplUXlRUWFFVFBHZXhMbG5qckdGSFRIVGlaS0ZPNVJEVkdScHRaS29QR3FLVU8rY3RuNlFHdVhDNkN5NU9rK1RHUzh4STg1WkFkRElTU1g0ejBzS3lTNFhRUVphUlorZHZ4RXR0VGwyL0VkMC9ITktidTVCR2poUk1SRHJJamhETUZsM3ArZFVpa0FPWlA1dmpMWGZSbmNRajMrTjl6MFVINjZlYkhJUDl6ZDVlUzF4eVRzSEtmN2xuR2d2b0w1UldtejJnUnhkbGJLOEc4a0g2TGNiRUlEbUNtekh4Sm9aeHdITzlWVGFjc29SOHZ5NXJ4dnBvVENYWXgzL3A0NzZHaE5WU0hkZGpBWk5meGZNZGh5SUVMSnZJS1JNQWZLMlNSY25vUFdFMk0zWG1wWU1oSURIaWx3Nm1DTnRPU3ByanhsQUFSUXFLdkppQitvUzZvMU8vVENETkVMSU5oa1BlcFNwSFQyOXRmSFVBeHBSbDNxRXNNSXBCZkNuZlZuT0Zlcm90Z2ROTTVVNVQwOFFXV0lvTzlmSzEwR0wzUG50bzhOYURFd3RPUnE5NExDUUxjWnVIM3EwaWxUcmRTeHpFSE40U0RLTDhDSFE5SHFkTDhyeWQwYTBpbHNIcW9SWEtyVHlFNWo3SGF2YmdveGF6WUhVT2VjckZmRUhrUEowb05MN0h1N3RSL3JtYWxHelRDdlZ6SG1uTW1jNGZDMHM4NG9wYUNQVXBzVS9GYkhSUmdpbHVGRFZJS1E2b00rUGxYa1AwUmFhRkpjcFNDODRUc0o1VEQyWEVzaHBZQVJvTGNvN1ZTWVhrbUk0a0ExTGFQMFRsNFBDY2ZxY3hmZ2tyek12b1FUZzNtTE9oblBZQ3BVNWI2UW8zd2Z6eW84NWNZd1JaOHNiU3E3NjVKTUtRR1FWa3RqQjlCYzlMZndJZm5oUjczV1ZUN2t4bU5KVTJXQVlsbm9iNkFHdTFRSVB2TVFLUVJLQ09FTHhuczhOVDcwQTQ3eEVDQU9CSHRJcERoK2U4TklEdUhueE9MbjdJMDBYWHpZRnRKUVg3ZVRsaDFOWERDcWlvWFZUZ0ZFSzdxRE1TVVd1eVlFNExtSDhZREk4VGRnemRkV3N0VE56NHlreEpaQWxDb0w0U2xsN3lteTdyby96eExpQ3UyV1FNRlRCc2JpVXN4Rm9DeEgwK0Y2RmdKK29IbjI1VmpFaGxQVFE1MzBONDBMSEsyTWlGb1poYXZ6Nmd2OWQ2MExzamRHM25vcGR4cHc5aG9zZFJ4aDJmOTBBbU1zZHVTdVd6NWZweFZyUjRhRFFuZGR0aklsdmVlSFlFcjRnWTlaQjJYa21ZQU8yT3BHajFOVFhxQ0kyQ1cwV281WmVWQkpNcVp4cUNFWmxIbGd1TVk0S1BuM2xhYmp3THZ6MW95cnZ4aHEyTkxGS3Z2THVJaENIVVZldDF6MGhMS01GazlEK0xjUGErTjBBcExyb1lnWmNUM285YXRKcmVFc0cwR2kzYWJtNm0yVE43QWw5YXV0dFFPK1V4bVBFak1ZRVp3VFYrRFRsbkszajJSUnFQT0ZXZ3ZhQm5YRGludWJ5MzRMcWNiVndGVWI1V01DZkQvRWtqeE1yaVlVdUtFLzEzYWlwWlozK0Nhd29wL0xHK0lINERmWkZoc1dyZHpwRHl3OVVNMUFxTXFTb1BUS3lYRERnY3BCanVxTzFvc1lXb0xLOGpGZVhNaW1jczYxR0ZNdkR2T2JacVM3ZGpLVVVuajU0UDJFeDI0OW9jaXRXanB5dmgvQWtMOE53bEdLckh0R3dQL0tMTC9qM1hOQ3FxWW1uWDY1bUpyOHBNcHpzOEZ4QVBZUnpyR21vZEdUdzVIMU1YTWVOVWFHK0FWTjV4NzR5dzJUaUtqZWZMamtJcUhDOFl1YTVRQlF4MkJIakExQWdMemhhT1hpWmcwZkFieWpNb0ZxU0FIQTFscnlmNDVqWSs0SFBuUjN0MW9od0k5dkhaZ0orOHp1Tmt2TUZaSzJkYXluTUpaSUZMKzhxRlVrbGg4SG95RHRGS2N3bkR3OTdqMGlSVmltaUdmbzE2ckN2dGE1UkhSNDFxZGtMemdNdEh2c0Z1SEpqeEllazZYS1VWU1h0bFdEeFlvU2lNNG8xZkUzS21IVGdyNVBQQUl0aDVNblB6eUdDR2QxbkZpaXp1cUVqSUZUcWZKNERHdXlsY0J6UDVHRlpUKzhIWUxoNDNYY0JibHRXSkVaT2svYjcyWmY5ZllTTVl1cXFDZHR3Vm8ybEtMVnpwTWg0ajhCTnROZUpaVzZLVkhhT2lmYlljZ09JTW9kR0t0eTdUQWlqMmtzZXRUN21pSEpaSjA3eEJSRkhyS3Q0Q044bVFGOXhSSFBnTU1yZ3ptaWNLR2lHK2Q0MTYrRkhHQll5eFFPOHJCcnhuMCtHMC85dXNmVHNjZkxidS80dmZhT1hudXZBbG9DMzJsQXlqYjZlS3o3endsQ0w1Y1AzckZhamRPQ2w5MGVLdlJDWi9nc053SXlHUmhkNW5vVHFrRVc4Skd4d1FVUFBHTEFvNEw5NjZrWmJTRy9vQWVCZWdiYzZZcXVhUk15UnFOUEZUQW13ZStYQzNVU2h1V1ZhUGNrM2xYSmdYbko1Vk5aQXprSWVaWFUrQ3Bhd25DNHNPeGtSQmJoVloyTGk1S2VaeU13MUdmN2t4Z2pQTENoTEUzNCtKajZDT2hNenRkOFFaOGl1OFhyS1dNeHM3WG14SEVOY0k1VDZUSnptRW5Od252SWdWZTcwdUczSUhzbkl6RnROdVQzdUVVWitLT2hUWitCZTNQTzFneUN1MDNBQVNmWGl2WlA2WUY4TG9UcWoyNTBaQ0Nzajk5TktNUW8zZkNqcnJBMC9RL0VZVzFaczRpdTcxQ2dtM0tnWGg0QkhLNzVib1VQRG9IdTZLdlFBaFNjbmY2aFhKaElmOCtHZXQ0TG9rcFo4V0FNbEZScHo1OEsyTVVkNVRJVWtSWWlVRjVVNGt3S2EreWlwMGZNY2VYV04wVytyY2FZRHBYVGRNVTlWbkE0MVYvdXFoOUNWQ1FENmliSFVsOThORGRsYVc3MjdpNHJRb3htbE5WdkVwMnhRL1RnQ2w1d2pQcDZDK1VyZHJjSkxGWXBYSjZkaUQrN3lTMU9pR0o5RTQyS0VkK2I4RStFd1JKVkhGaW5QRlM1MUhjS2MxYlZQWnh1VkxHeko2S3U5U2ZIVUdZaVRHUU5SOXVvWW5qR1VIa2hpT2N2T1FNZ29Xa1FUTmVPRjRlYTAwRkJZRjFHRkVES3czV1RhQm5Ha3NHSk5mZzA0MW1HWUo2Y0dKektrRWg1YndVWnZQMlRuWkNlL2I1K0xQT0tHNXBaQ0x2QjBHN0M2YXBPQlV2TUZaVmZrUGVacnp3WlZMSVhLWE5BVHA2OUdSTjJrMEowb1J2TDN5cnNPNE5KNk9zQTQwNWZZaGFrdmhJTXFsTnhZU2tYbm5GakIwMzZ0bnJnZXZyWm8wRjJySWlJUGYxSGc2ZUtzanhXTllMNkw5UEh2ekVEWFoxVGE2ZCtwbmFtVUk1Mm9ENkROaFpZSFZyN2I5ZllCbkU1SmphVnhjL1VjOXlMVFQvZ1o5ckRRM29zVU03OGxwUitSN211M3RlUko4SVN5Z25VaHRqa2kzSWdsNmszbGo3d3VOQVB2amNxck9jZDRUaGp1eEFTRUFGdW14ZVBvK2FMV2dMblNNMy9rZWVrWjhCUU80ajdveHB6ZEZBczNzeFpiaCtld0NnRUpxMSt0TXQxNVZqakxVYjl6Sk5zWWEyV3NvcXZVQmpsTzRKK09oZGVjamdaMk1BMzZ0VkkyOHFwSjQ1TVY3czVWRitIZ0R6S3dxUSt0RUdvWnhmNGE3bzhic2hERndBdlBFMUxZN0lTVWVpZlRVK1RQMGMvT1RhaFF1ZC9iL1diWFFLQVE3MDFnRGVWajBhNGdCUlNVMU5GVHdVTFhvb21NUnlCYmh5M1VQS2NoeSt1Y0dtUDNRb3Z5eEYyYktMdUVDSklRdXdibVoxSytoTXJJdUNlWGJuVG1BUDhxY05ETnF2Z1h3c05rZnZrRVVGYnhIQ3VXbzdaSEV1NUNOSlpGbmZWb1YvQzdaMXpUUUNJSVUvM1NheXB1WlVmZmJUY29UZWxHd21waWFiNFFPQ01YYWtFU0ZKNVVnbXFwNWJrajhBQXk0T3o1ZmxxbS90b1pMRzNnRWZKdWh0eEEzUXJxQ3NGVkJDQjh2bHgxcGl1MyttOFBlU0ZKcUhzaDQrZWtnU2pEUDhkRlVVSDdiOGExaGdBRGdyd293QStpMnJqNmIzR05DdUdMNktTRXZrVEpDNi9qUk1uZHY0ZFNGeUFlaWRPVmVVUjdHTTBxbWYyOHBjeTlLOXNDM0FCZ2lGeEdkelJQdXh3eXNDYVYzb3hvV3NKMHBSWDVYamhoVGtZekh2ZHNTT3FiaW0xNjkxRDF3UFBWc1I4eExpWFRnd2VVL2xBVHBaU3E3Vzl5ZENoQ0tjQWZhbkU1UUpseDBHQWJHYmdKUnpWdGY4elliMUxlMnNFZUxvNjFISXJ3UW9peUZKclI1M1RQM2hZMVNzeWl4dnphRGUzSzlhVVVVTFQydmRhWkIySlMrMXdlZW9tVEx5Q2lTaGtocjY1NWV2ZVNiU3lPQlV1eC9vYytjY3NMWHpJanlzRTJHV3Y2bGhhT0Q1aHV2T2NGM0Y3b1o4WTVlWjZuS1hhbzBaU2Foa1hwc3A2Sk9wYURKL2tUcFhCK0Q2ZzVkRGVNMmpzTGJrOWhsdnpkdFZoamJVSWpQSEF2NDh6YXJObkJLaXFoZUh6aEpMMjFISzFIQjFCVGVGbVB3cnpOam9tYmwvbFdUVlpMdUdXRjI3aTRsTFZtUS85WFdUZzAxRGVWUkp3empNL3FRQlhuL0I3VmxOaUdaWXY1VnBNTGI0ek1XYmkxakJmVStFREk3QlA4Mnlmd1R3UFloek02WC9zSGJ3cXduUzZsVXlDWGg4WEdOTGhyT0VHTEtyOTRwc1ZkR3ZXdXE2SzAyNFgvcjIwYitucmg3QWtwcy9hd3RTMDJoZkdtWjVSNk15UnBaK3N5bFRZbGtiWVVXZWxBZEg4akhlR28wM1JheFkwQ0lYb3pLLzBXdVpLWnRCR2tXREFIVnEwQktwR2JmTmpwMVZyeml0SU1tcmtyNGhSNUpzdzhGT2FYQlJ2Y1UrZ3JlMWczUFBmczZ0UnJna2x6dXBtWE5EQUNGWXBwNk4zc0JvV29Xb0V1bDcvVzR2emtNc0xDczQ2Y3QxYzBjTjNMaEpKWDVDRmM3cVVoVDlCMStxRGhhWThzVTV2NjlyclFQRHBBdjltamd3WWpXcFFYSkFRVTdpYXQ1WVhVTXZMYXJGWVk3cTJZc2Q2WS81V0drUk92bzJOTXBoV2lSREJBakxRakZER2FGK01xRU5EYWd3aFJJbzlkdmIvMUdJSmJjeFFHaElkTXc0b0pXUVpnU2RkZm0zUVhHVU82NitpT1ZhOWhTV2pzdVFYQ0pZdCswWUVaZ0o5dElaUys3aHRERnlUdUErOEJjTTV4TVQ0dVBJWkw3NWs4S214TUpIcmdyV2E4VmVCV005NDIzb3VHUjcwTk1ycEtVOGNTdC96eVduZVdGRzczUko3MnZ2QlpzbUUvbWxjcVphQUk2ZC9VRjhMMzdSbEdsdGZoZWwwNUFsVVFtSTkrblh0MGwydm5kQmtub05lVk5PVS9kdVNTTC9uaE1RZkhKM0xTd21vVjdzOFVxWm1yZ1Zod1BSU2RISTRZMTV4TjN4dmdFUlZYYm1XTEtWUEFSbUdsRnZHTDZCWkYwK2R5d24xRjlHUXZmREltNlFDM1EyV0JKWnNlT1ZiQ1U3N3lJWm1XMTFJN2FhWEpVdWIrR0FVVGszaW1NSWlpV3FoM2VtbXFFcXUzSE1qUzBQUVJNdkZtK0loOUorWHYxSVVMV2RiNjcrOEp2eXZBMTF0QzIwUjdkMFFOTTRhYTg5K3liYkszbk13Q2hXOFZDZEZXd3Q0dFdSa3BBUXZmVnNJRE1LVk91VnB3bXg0bXBxQ0lQRFlKWUpyQVFZLzc0UmtrOVZIUHRoQkxvbExmMVRZUmc0dDJ4N0ErM3NjUkpRVXlYcnlyajJmTE5Ma0paVTJHanJVKzVlYXozbGRFTENtSVE4ZzBWdksxZkc2d0VmNUFIT3lpdGpDa2hJKzhJK1dHZFZLNGhRZFM3RzlNVHhod1RISm1EcFJyb0Y4RjNPRDlkRXlVR2VHY0JSMGw4bFFPakU0Ujd3eUFXeWhXS3F4eGJYaUE4TFdRTkE1ZVQ1dWk4NVRROVFIdm5qYVcvSGVFNmJ6c0tJWHl1dVpudGRDVk1sSytWSmtuVSs1SHA2THpPeVY3NzhJZ0N3WTluekxSc25BTGhWVWZFczhxbzNKbFBzaTVQU2JMK1VaR244ditJc0loNys1SzUzZ05OZXZlS3BXRUtodWlMRkJkb2VTWkpveVZ4ZW9XTElzOHBMU2dhMGhray9OUzBpeXlqTG02VncxZzdBdXJ5L05LdkVJS1QrZjA5M25tV09wbkl3OHBydTJaVW5ER1J4UVYwMU1XVjV4Y2VGak9qamlMNWxUcGlOQW9ITDIvMmdQOXI5VW4wK3c1RGhuVFNNRmFLYVBWVnkxb1o3SXFYL0xlTzk1bFg1dWUwb0Z5d2NyeDNtcDFwWTJRWnNOVmVUQ2ZHUWlLUHBtSG1Bc3FVcU1CVm12Q3JWRitsdUp6Q052amEvQjdweUdqQjg4c3BlemZ6VFhoc1ZWQUtidjN1ZkJNaVhPWkZlblI5UmZFOGNKUUJUdkVwa2VEQVJibTltWTh3ZnNReS9UYW4zdWRVM0JmempXSFQrc2k0M3I4dGd4TGU1dmhaVGtMcXFUaVhzNk9LUkdtYThMM2pXWS90TDkrM0ZIblZMb0JvaXZPVXFxUHVqZmlobWU4UHBYRlBvV2xQT3pWc0ZhS0NwOU94S0EwUmJWUHZmZVpsY3BRaGNRcDBPOCsxeFh3cGdZNkdObm1NMUljR1NGQVZGYWVCamtoN0h0eWNGQlFxMnFKWWl3QzFySEV4clpOMEF2SXJDR3JEdDZaTThBVmpiVzd0M3RDYWI2VWZlY09XYUNrTDgyM2d0dVhqQzhHSk1qbUxSeUthNVl0WVIxTWlHOXZ5YmlwVC9PZ0tzWTRaZG1ycENpS3VISDBpbFFpK3czbDZtcEtocGJQQXlqbGpRc2xTcDFrWVM5bUdzYkNyb0w1NDlRT0wwQTJaalJjMFJTYWdJekUrdWtJMnlGN3ZpZDdtMG1nRWpyalBid0ZwUE5PYWwzY3pnMnRoU2ZpREdoOTl2aE5TY1BlZ1pyUFNDSEJYKy95OUJleUkzelRkZlBVV21OeFgxSFg5QXJFUTRaMGNwNlhEQkxOcXZlWDl5TThMamZDOHJXMk1qNkhhRjByTmVaSWJkZmZhMkFPUmdFdXVTVVhIUUkweFJIR0Z2UllVK2E2Y3Q0dVVmT09LNWtPK2lWUVNxRFN5QVc5RDFucXRPRHJscjJzTFF3RVBWWEptRWZjZWMyVHlPSXh3d0FhUUtETHhSVG1sTXVUM3c4MGhmSiticWxIWDN3ZVN5SGY0U2tFbE9CVXlDNnVGMFlYNjVGN2NTV3AvcGtSZ0xHR3ZCZWc3MEJmSjNvMEg0d1VDNk05dndHZlJXcVNUM0lxTWxsNFRwY0FRWVF4bzdvaVZ1MjF0aHhPUWUxR2pMeFF4SGZpU05mcnVDWVpRbG1zY2dVSE82QUxuWWFNa3YwdFZTckpwU2pNR0VyNUJWaFRCbFVnSHlibFMxVktLMFhMMXdqNXJobTlLR2dsaUVUSkZEZ2poL2VHTDBoNGF3dXRFTngyUUZ3SllPYXdhNjNGbWd2LzM0N0JOWXdDa3RiY2dQdWU4RkplUDVmTTZoa01OQUNubEdiNm1BTEQ4ZDllVGpXU2NFUXJsSzBISm9JZGZ0SXdZZ0tPenk5eDhvUXd3SC9Mang1L3VLNnR3Q1pSeDhRaWlZU1FIaGR4ZG5vOVVqSjhTdjBDWDhzUjRmbnRjUlUzY2s0aXZqSVN3K3hIbEMxU1QyWHdOVG11TzNBSmtWZW1aUUxuZ01UR09tSG9JNXZzelFHcE5zd1pIY2h4dlN5WEY0ajJyV0hPMXB6bEtYa1htOElabTFrM2IwcmR1V09kZU1HOWRKRXBLSXorZnN2SWIxa3pBQjViRWloQzRaT3RJSDNoREYzTXRsWlJra0xtRzJOQzdiYVpva1NCVUp1VVRWbTFoUzBYWDlUWTVzTFlxZno2YUFSK0ZPQnhweXB0Y2RNYU1ubjhLUGg4QXZ0T05xOHE4QlBteE9ja3pQNTN1ZUF2TjNxTm5HUXFvRTZQaVY1ejlDb01jRnhvbXd1aWZhYU1PWHIwQ2RkWGwyaGwyMWdZSHI2Y1Z3K2tsQ1o1UlRDY0gxN2JYMnVMY3FCd29HVTRETjlZZXU3ZjNiaGhObDUwZHJIY080Ym5tOXczQXBXdER0OGc0Vkd0WlFiWWpNOWNqMnU5YUJBUVhZNHdqbUxTUWpEd01jNGZBaUI0cExOZUdTdTBrNzVHWmRnSFJteXFLR0daUFpEVXltL3VCM0IveE55T3FOekZERzlUZlFVOHhlTGNCU0ZJZ2pobTZUOC9ybldoRzdLUkV3MnlqMTFab2hhaUN4b0dwaEJ3aS9sL0thb3psRXJZK0xiSHQrVGpNYzN6NndQb1hRMC8xcldDSVJETTFQSmpFZzhUNVVCTzRqTWRxQlB6YzJsUXRQU2RtTGNMK1VMTXNZdUV3R0xJODFoTGltcUVRSTUydGxmckxuZ09OUERYN2gyNnZoNGhZM2lZRmZHYUhsTm5MU2VQL0J0eklsZEZGdXdoQ3dUWExZcFdXa2FhSGw3WG5uVVRxR1cweHYxNXUyZDhLWXhXOHBib0NSNzd3RGtJenB0S0RXeTU0c3lTS2FGNUtNTk5pUmMwS1pvRDh2eXhLd1F6dE1HMUtDRlE4VlJMVm5WdzYyUGhOYm1QWXZYb1lWN0Q3MVA4aGYzVWZ0SzZpRFg3SHcrM1h4bitjRlg4OEJiQlFzbVBxWlJHeUZIUGU4ZFNpbTBrU2UzeklnY0NmTlRyT1pmbzNhSDVrYXZzeHJIT0l5cm9CRlQydHhjbWh5UFVadzZuZlVvdlVuMUg1UUlCNTVvc0dmcVh5RlIwS0oyS2hGMXBFUnBkcWRuRFlERWNnTWticGhSVk1Cd2tLMW1XV0ZsSVUwSjZCTkJKaU5ZWU11bnRlMHQ0YkJrL2ZxVnhjQURZRnZBVTBuZFVscmZzSmVOMkE0cEFSNzhtNEFmK01QUHB5RURoalRiYlJBMXc1cldjTWZMRHBFOGdjRFVMQWcvVUwxVEl6Mk9nbUMxQnk3bWlvTHlGS3NmSXRKUnRvamZVeDJEK3B3OTg2OEQzYjJ5VitaaVpwUVoxNGcrcmliaWZJZUJmWmliMXB4YkpsYTR2ek1FVlFsOFdtMnJRcDR2MHJNY3dPUG84VUlyWFM3ZklBeUlCUWFJUjZUZ0VpQ1RoMnJFdGNydUxDM1F0MGI4eWQ4eHhQRkJ5UVZzUGpGcFF4a1RHQVdRNFYzcW9vZUg1eHhSQ1crRllJRUx0ZjgwYWowTUxWdEdKYVl0VjE3eThQTWl0bkZqa0Y2VWNyWFN4ZkdqU3hCS2Zjam82c2tKdGwwdVppVjNORkhLTmRFOTJBUkY1VTlWL3A3cGhESVpCeDJwaWxTTXpJU0MyTmJHQ2pVVTh3bFJWUmcvcVR2N0ZsWWN3WHRGbU00cWZrdkx1b1craVJXd2lzbjVTQS9EMjQzM3BYNlFVelh0eUtjZ3grS0wwWmRtVHNreDgxTHIwN0w0ZkExZHdiR2poUkVOM3hsaHFlVEtrcWJyekpRekxsUWdrQnVHcTVLV005VloyWGFTeWFzeFk4L0g1MzNDNUM1dERRQ1hXWDFtTGZzMTZiNnJkc3RlUkxUZVl4MExMMFRCSmtrTitpSm9MRlVRT2Y4UzF3UjBobFd2NVBEYzVVTGVTY0RlSGczWkRyWlFYNDV4eHplQjNTeW9tZTlwa2R5OE50bWFsNE5GRWFDS1pHRE9ZcjBrMDgvb1RqcDNlOVM1Wk9GQXg1Z0VGU0tIWWpQUTRGWDNJdDRpRjlxTnpQVklSU2E3YTNnbGluWW4vNkNGUFUwanVheFFtQ1hnWDVlTFhlWFRwT1pIMUdKVk5RV0xHNTlHQkx6ajJzODVRZEU4dXEyT0JYcko1Vjd4SFVEMEc1b243bmYrVWJuT0RLMjdFTzAzd2NQcnYyQXBUK0FVSFZucWFSM1V2c3lOaC9GV0hvRXFCK3VCZDZmWWtiSEtnR0dPamFLRm1ld0x6em4rNFI2dFBibjdsbW9xNjEyUnhIUXY5bTlmQ1g0elNNK3I2Q2hlK0JwWUFuYUhRVUJiYlZnbVRWUG1pQXFES2doOTRiTXhVNUp4UWJobmJscENucDRLWmQrZzBSOHdZd2FQYTl6OCtUdFNobThOcHdLb3ZobkluRUsvbkxOUXQ4QU9BWHpJdFI0M2EvNmV5ZjJHV0pNblJ4VEFBN25tcXVtZDJML2VLWnZyL2YwMFVSZEpFNCs2ZG1lNnFrK0VPU0piNEFwL0I4MVNiNU5Xbkl6TXludjdBR3g4NGdWUmFkNGQzQUNweGZnR0hZaDc4V3VKVFpleEhGZ1R4QzR3MSt6azFKWWM1a0FRdGNLMUFPb2g4WFJjNnNkTkh1Z1MrZlJ1eWR3RE01Zkg2UGhBc3VKL1F6RzlOVGNsRXNWeDQ3NGdxZWs3VE80a3pXaXU2UVpOYnZyUE14cEpBMEJYM0FsRko0UmI0MGtmZCtIdmhhL0Q5S3hVTEprdG5PaFFROEVxTU9zaElzYTJQeDNkWUg2d3NJbzdmYklNSll1eldxOCtpaVBiVG80TGlBaTRXbTJBR0R1OWMrUnBUeXY0QUI5aVEyTWFDNzdMY2FPbW5YeHNrRFAwVE54S1lGc05pdEN6TXU0SXpObHdhQzMzbTZMOGRTaUlXV1lHc2xJaUFQejBqL2NsL2RkUWM4SWJiWHI1eXVzQWJZaUVwSjdkNi9LWTRiL2NSUXNBckZ4THh3djBHVVZLZ1I3OGI0Ny84SHRTTXlpVVVIbUFJSVplT2w0SmdjNVN1UGdYbTlpR3ZRRjZGZ0Nkanl1ZjFGRnViODM3TXN1dDhQSkxoVDR1WFZ2NU5RaXhRQzhJZnN0YUZ2dFNHNUFiRUxBZ05HR2V6eE5qNHdqM2xucERRMXc5L3hRT3QyREl4Ymc4ZGJTNVR1alI1Z2hndGxIN2VrdWlLUVlNd29YM2RtYVVRM3VIQkt4aFNjMHNhOENXcVd5bXdGSG1KK2tmd3M0NlZnUGtDL1lmcDZYaFNWVHRIbXZldHVVWU1rVUcwUWZZakhVdWMxNHk0NTFYam5NY0tWNDZDVnc3eDZpOGdtTlp6anVNWkF6UmpKdzNVMGJBY2VBK201VDNVUUViUjR0Mkd5V1I5N09LV2dCOGZIeUwvN1g4YWtFUkhVcnFzR1E3d1dwUHhHSUJIZEluSmp1SFFXZGFvTnVaUEw2UmZ3R2hDalVCRnhwdjVjb3Z1d1JLZ2M0cGFpRDA4R1graU1lVGZZNlFKNUNPUHV4bkRiMzk3aVA4Wjh1Ky9QVVgya091YnlPZW55ai8ra1R6K2N6eFN1MTJZRk12bEtTN2hmSnNncUV3aEl6WEd6bW8vOUQ4NUJqQk14RkNwYUFKdnplWFZkOC9yVThianprck9DbVZmdFZ6alZqamI4L0dCNGlGLzFrS2FjNzU4N2RObSt0T01abnJ2RWEzNG81VHRZWGlSN284VTJYWGZwb0grWmFFRlNyMitRc2Jzek5Xc295VVptSG5BUHRaUThXQTlHVFdyMlBaT0psVEZabUtJeStwQ2FwLzRaYko3cmlVZmN5SkZiN1hjcnhRS1U4dlZBZUVrMGhTNnhhaHhDSEhzMlVPS0w0VlVMR3BENXNNZzRHWlZyNDNGRUF1WkJRTU1PWnhoVjJwQS9xSWdORWZBOXptYTFpN0E2UGVWcFZWWEtPcHFTNEdDSktIZUpGcUdyVnE1empLNitpR21TdXRKZURGRUVtZ1FlajA3T2c0eFNtblpvZzVNUzYrR2VGa0xCY3hUMjdWb3BxUXI3cTZ3dTY1M2NCSzFTRUdLOXhjL2xSdVRKamo3Q2hMNWIwR2dwVkhEbWJnQmFuUWNLVUp4aCtYMnBVT29mTmN0Z3dsN2lVcTVTTFczSUc3SkNmaGpTSFVhb1RKdHlJWE1DbE1VaFBMMU91ZlBuMXUydS95UFAwT2Vidko1TGN4MXVGNkdJMWc0T08wdDR3MENzUlNyNWgzU1ZMSFdONFFDelQxVmtFb0RsNmxLbkVOR0NPQ2IwWXFaczduN204Mjg1YXdoZFpQTGt5b0ZZM0VjYXdqS0VYcFYrZjlUYUVRTDNNNmF4WXk4Q1FlZTUxdjB3bGhiY1UwdkM4RUg1dU9Fa3ZzeElxMTJoTnFUZUxCQ0k1SEgyUTl4OHduU0RCRTNLazBob2dDN0VsVE9veDIvZFVBVVFJaDZNMWxWQWYyaEpyOS9mOGovL1g4MitmZVBLVEpTRFI2REtXQkRUZndEbjh1bjIwek1XS0JZaDZja1JhbXdCM0RCUkJXUzFZSmFESFc0ZkpQeDZxZkxnUzB2bXBvbnVZbmdsdDEzYXlnOU9FaHc1NGZJMkNiaklmS0h6OWRDK2VHWExQY3lpM3BRU1BHOVpXdTgvTFN0bGxyYjVnSWN3V0NPWVJrRXBkQjZGalM4QUdKRXhFakNNVXhjOXJ2djBCSTYxV3lVMlgydHAxd3JHZWxhcStWaXJwWDU0YytkV0dhMmtybVVGS3laU1JBTTV1cUZERHB3RDg5UjNBUEhhdy8za3E4YWcxTVpVTmVPcFlXeC9Odlkxd05sa05vMWNsMEJOSWpWdnp6L0tKT1V2M1ZReW5haUJJMUp1ZHdwSUVBVFUvRzk4VHdjLy9BUzFwSTI1NWF3bDBhR29mZzNYa2g5SEhzRXJERzFETDIzWDE5TkhNQWJOM3RCTkZkaGRvZGJNeGx1VHpPdW8xak01Y204VjZUZzhOeFZwSVphU042ZkVlV0RrTVk1QkUvWjhnMDRBODRZQnVLKzRWQzBObWI4UUxyZFAwY0JsdHpQWUc5Q0FUODVnd2NqMGpUSmNUNlhDbHZ6cy9MNUhjOWhyaElQazRlWURKdnBuc3pJNndURkdwbG1PNnlxc2lYRG1iTUVFR0M5azI5MkIwa3h4QWlUMENWVkY2V2k4SWRzY3hscG04ei8yMHdCd2RMbE16OUl6RDczbG4wdCthOS9QbVV0ZWNXQTdOaTg2d1BDM1FRZXgwdHpTTXZWRlVzQWZNZzE0OVFaL1oyV1ZkWlB4RmZWSDNzdXh5OGJ4V3NlV3BIZktub29tVHlIZElkaFRBaGkvUHErWEs5b3BEdzgxS1BUS2l1V2tNYkVEK3g3V01CdmZjY2pCRTlReEQyTURJcitzUFFmZmFLeVp4aUNEcGs5QmhwbHNJNDdmc3Z2cFI2WWlPMFdKMUJ0OXJYQjhIK21CZHl3cmxTcGhrUWQ5OXUzSWIrUHpJOVdLTHdmNmJ1cTZ4bFN3enhFeGdOQm1PQUNZMmJkYXdZdDRNM0FvdlZSTmJTNVlCNDNJMmVpcXhOZVVkUjViR0NVWW9oTW5TaURxVGs1cnkzTGgwekx3aWZQS3lndGFoUjg1c2VIeVJVRDZHSXVmNnhMbnAvMHZYRmRNbERFd1lsZG5CQ1dRMFcySFJNY1JCS21FNXNqSTFFTlFBN3c0Vm53dllZbGNFaklVNjVlV2hEUHIrSys4eG1PNTlQT0tyRUZ3L016aHBpWWd3UW82U1lycXpLbitaNVI1UUp4R3N6MVNnMHNUOXJPZXZWTnBlOW9idUp4K05yODdQY3VhYUlrNllZVTdYdmhFbHFNUEk0Ym9rUXFmZWdVLzh0YUFVQWZwTERDYkxhMGZJZWFPYWVJZ1dBYUYvemY3UEd5S3BUWEtPR0l2MDE1UENaSnlEV0tHRkpiU0JzbzNvYy9aRjErNEE1TVBQUENIQml5bDVkeGFvWEtDaTFpZmEwdDZaRnpDVCtaNUVtNmxhYlVjc010V0tMTzlSQ2M0WUhmNExaQk9WRnFJaFZ5T1JpbDdBNFhsR051T2pWbXpiSzNROTlNOXdYMXFzR1VJMFZWd2pSeUpPRVZDbytNRVBINlhFeENCeUxFSVkyTk8yOTRxSHdibXBDOGc2NmtMZm1YV3FXeC95eTN5TXh0V1B3dU5YVjZ6cmNtY1FlbjZnclFYVFZSN3JvUFhuVWw5cytRSDgrbmVQaXJZRSs0bFpEUTBydXFwUkx6UXk3NXVXL2ZPV05WSE5IcnJLd3BRdHVaNFlHaTQrVUgzWXBxT1k1Q3ZrRVNyNGErNzVPTkN5ZVFBYU1ZNzY3WVVRQU0rci94bmNHWlhzTHBWMEtkdG93TEtMTUlybVJBNlkyNUFtWnVLdDgxYWZIRHNHUWZTQTFnWmJzWEV4OWl5ZFJSMitOYlpLVDgyRlVVbWJGVUdFcFZMUUFxMXEvWTRsRkJHWGpHWGtkKzNsK1U2Y1ppQ3BCRW1DaXRVanZBb09IUCtOdTNLZi85N3liLzlrS1lSRG9NTU1PL2Y1L0FULzk0TVJaVkw4bG9ZbVovKzhpODJPL29rUzFlRXMxeml3UVkvd3AydlEyaDFydHozOVdnUVFPTEl5amsrWkt3SVJUWnlWVERuN0ppeU1PTVB0dGJDbjdlL1duaUsrUmZJZkxuOHdtSk44U1I2N3ZkUkk1MGpTRXp5MTZLTWEwS2kwVmFrQnlla3U4bzI0V2dGOXZGc2NTbWp4eVZ2U1VHQm52QjRYQUhhRzJSeHdpeE1TUWF1QWVsMG1rVHpJQUFKTzVMOW9zQk9IMWZadFFneTBxRThuY3Q0bnh4SWFseFAvckltR05jK2JCUmRkQ2hKV0JOWFI0dzV3THlVMCtCaVd5bUd2YnJUa0FRSzQzSlJVQk1TS0RlWVNMSlZIb2JTcE8xNEhJT3N6TEFOSnBTZ2ZNSjA1aUVsSVRCK015cWxQaS92ZktPdFN3aEh0MGkxUXRlTEh5RGN3RWs2TnYzbVg3WnFkRHBwbHcvcjFldzZmSW9sQzlmU0FXVExkZHl1WGFJeTRXKzFYNVByYzhNM0xGYkIyTS9IRFdwYWFWUVdzMU9pMHR3amhDZE83RDZOTG9XNzdSd3FOT2Z1cXNYcWpHbmVOSmNua0U4TGtOaDF3SW9DREpXT1NES2lvc2pVNVl5V0ZRTitQMDFGYkxQRmNjaDJCVEJuSTBPOEhndGMvVDNtYWxPR28rU1FWdXI4c3BESWhaTTNTNlhoVXg5aUJvMFJkT2tQOFo0bkpDbkxOOXliZUREVHhOL0Rwa0sxK1ZVR2JqbmhsUzVWc2kvOWlWL2ZENWY4K081QnhEeFZKYlRPdGVnZ0VHRndST29QcC9PbEFBb0R0Y3RydE9ET1YzUCtVNDJhK1ZiNTN4WDFiNzIwOGJTaEdmVkE2T2RMSnYzNHREejd4eVRBQzhKUnNnL1RCUFZWSG1vd1czc2tURENobU5uSm5FbE13TXcxRytxb0NWS0lCNE5ab2dKelhvRVgvK2FmcW53NGFmR1VYZTdMQmpkdzQyZldhWEhSUDcyM2VUZi9vNXJxYWMvM1ZRK0hyUE1zSmsreGdBYUZjOUZNdTBWR2E4UUswd0VnQklKWC9oYmdjdGdvS0xjNDlrZ0djUU8wU2QrNUx5dXlUYUF3aU5yeVdXV2VaZDZkOUNvQ09TbkxQbjhzV1RGZnZuYlBqL3YvRTlGemV6TVo3c3VFRmJzczBTSG9ad1BaMmxUSitSSTR5bXpidzlDckNrN21VRVZJNG5Zb05wWW45eE5IcXF5Qlg1UjVBS1BqeW02SUZVNzNVUGlYTWdxMmllTkk1WE55VW8wN25mbzJqejVtSVA0RFFGdlp0Q09FMXU4Q2V3ZVFPRnkvRTZMMmVhUnZYNEE4eTlwd2lNbVdnV0poQ2x5b1ZuS2RBR3U5eDFNbXdpSmFHMGNWVFRkTDlkRmsyNkxPZXFCTjJFOTB2eE1uVFpsLzgwU2lrM3NnMEpEeElaNWN5Q2pnZ0EwekZjallkU1JqT2t4czdoT3VhejJsdWZsTDcvcHZnenZ6OEJMWEJNV0l3cDZ2V3RiakFzQmhkSUNSSk1tbUwyNDA5eE5aNkNFTmdHNkxEVzlZakEvdUlOWW56Z0d6WXVNekt0aXhHVjhMQXVXWWkxbVNKRy9GVHRiZVMzQ2F5cWg5cTJ1WThBN3QrNE9NSHZCV3c5TlFleVcxcDhlaGE1R0JVU2xoV21MSTBqc2lDTEhjUEErait3UFZRSTZ1Y2pTSmZNMWc3eHpFK1FtWDU4dW55dTV3aHd3c0gwMzJiZHdhUVU2aE5UVTUwdDUrdU16VGNHdVV4d004SEk4K2lHd0tXS3NIYlMxRlVsUkxTaFhLZngvTkNVSWw3Yk1GLzlGRkF1RlcvWE03aGg2Q0hBOWE2YlJ5T1dsME9DODdPRGQ0cSthc1JSYkNsL0NTN1EyQWUydDNmMk9lQWJzQzVlcGQ0NkJOUWF0eVByUUhTVWdzOWdaNkJtajdsdUo1ZDdRUDhobG5WM3F4QS9LVkJDR3o5TW1wRVBrMnh6eTk5OVZmcStBa0pEdmZvUEl6RnFNWXdSUzJ6TVFReXpOYXI5L014bGp5dENTUDFDb3l6Q3h0Y3kzTUplQkNCdXBDd0NscjhlQ0JrVkdNTEhRUHl3eVZXNms0UE84RXQ1ejdVZ3RKWklBN212SXRaZkVrcW8wNUs1bHJ0eDd5Zi80MUJkdTl1VmFUTUozTkhBVmFpdGswdEhLOGtuZU0wZzRHcWlDUnJrRVFyeFBHTURmeXFqREdXV055ZWZxOHZQSGt0OGVJd08xREFLWVRIR0w3b01LRlc5dUZsWVpnaDhweHllTUROUjdycTRhamF0aytFRUpPWlNUTUJEcDdVakpjbHhmUzlKbS9LcmoyckN3b0lCRjNaZktBc1Yza2dmbEU2SHhBT1ZYUUFEei9uNklFa01VcVh0SEE1RmxyU1RmMU1BZGZkUTRmMk5Da2N4Y1JSNnZIZkNUK2tZUGJLTEpCVFZlcEdMbitwb3dzWnZKOXc4VVBKR2RnWnBMNU1kYUdHdGFMNlBWQzM5STZBV21EaTBFSjhReG9xUm9GR0s4QUdoMldVNGlTRXlFK04yTXg2SDVVTVlBMGgvNEVsWUQvWnNWZVY5NjJ0SC9yRlpselpkTFgzdWRxajJkTkh3UjMwd0kzcVBHN0c1YStMUmNHbHFJalptdTlzM29IdHdvSmdRQ1NuTTl0bk9heVBJVTFnZlQ3OHlraEZBUmJsd1FtQWJyMHZaRUJpdDAycjFrRFJOL1h1SXc0ZTZWdjVXRjRLR2lsNGk0UVRuTXZ5V1pKYkYzdk5KMFYrUjVlMDl4VjNGRFJnZmpZZzdmTmEwT3RLcG9Uem1qVUhhMDREaEVVSXVPdHZZcVJWZ2dQSmk3YkxISzVPZ3F1TGJBYVpxZjg5eWdWWURTYVZOUWNZV3VkN1dtalgwQ3FsVUdjVDdDc1paNExRTXZteGExY3dkNnlWem1Dbm5DSHc2aHBRUWxqenNRbVRVVi9ncGxEeDlrZ2lneXB0UkFwT0NZQjVHbnFJQ2dnSC8vM2VVLy9nMzR3Q0JNMHdDQ0Q4OExmVnI2Z2tjY3FiRG01Mm1KcnNSeGJvUjlKRU1CMDRDWkNDbFo2NGI3QTBqSVkyZmluNmM1cnFKYmY1K0l0RFNSS1pFVjNWQ3R5OE5TTnZZbE93Wms3UFNUeTFyTlY3Vjl5NStYeTQ5UGtldFNXVmpBRzVIc2EvZHNSVlZHM0dMaU5zeGtqNnBkUm9sUEFkZ0RLRW96WjFCWlZpZWlnSEFKZlZ0Z2tnd2FjOWtJYkhyY1pISks4dzlWSzJSSzJxUVVValFacHRZZjNvRlJ6VFMzSVdDTDJPRkpxY2M1NFZnRUhNQU1FV2ZVMjhiMVhXeXpYQUVzcEJ5WE16YWRmbnA0WWxsK2tENDBMbVpUSThFQ2t3RkFEdnAvNERPcmgvMTZJZVU5UEZVcUJvWTFueDU2eVVKTU0wMWxQcFFwbnI0SStGSldITXNDUWxqWWtvczhheE1nUmVYN2J5WVBaQWVzbjU2d2ttdVJwa0x6Vzk2d3o0c1pUa01PdWlzdEpNRmNkYXN1WW1uUGxZZTBIR25RL1k3a0Z4dm5LakFRV0hOKzc3cFg5cHM2UENSR0J0eURxbXEraFN2bUxaazV2RGtGZkJNRm01RnJaS0xHZFpoS3JQaWFhbk5QMW1td0pOZ2xoRUVxKzVnVlBGeUxZUkdEWGtMSk82WXBHY1c4eDhUUUR4V25VMjR1bDJqWUZUWDh1ZmpBVGdEWCsvS1RoMXdYMEFqTHdWRnhSZmtScUlYdU96Tm93dVdTa0g5Y2NOZDU5dEZ5RjQvQkZNUmEzMFIxQzlLYWhsMklSdVpmUjV4UWthekd4dXVGQkNVN0ZzUUpzdmNsSVk5SVJEc2JLbCtpMTZpZGRJR1NyQXk4RDJDTTFZRk9UR3RoU0xDeUgraXFKYzFzc2ZJWFhFOXFpYnczeEdVaGFOTUhCSVM0d2N5Y1dVZFkzNFpISHpQa0kxU2V0MUR0REVCMDRmc0x0cjltNmhTQXB6YXdoMkQyNmtRcFB1U2hWK3dER1BydjMwMytacWtoZkJzdTM5STVtNFJtbUJoc2pCOXpsajlUeDBPKzZYNFJwQUV3VFMzTjFFdHNUU0FWZ3lzQndWTkVtR0lkazRUSG9oblJvZ2pHaDlGTU5rRk1mWHY1NHlkSW1rdW1pcTJrYWxWbWRDY1VuUHpjTG4rdUxmLzY0Zko4YWhHekhUVGxuaWhIU29Hd21tTWlSR0paTTRpajZpVmpNVU03VTRFa2Y2ZGs3UkRWTFV0R2cwRU5qeVBpbkRWMTUyTkk5M0M1WEJFb3ZnRUd2UjFYUko3azlwWU84bVdFYXMvdDdNZHQ1cWFLYjd6citIVmtlekJYRkJvcHIzV1VwbFhVM2FURXFvVzJiQzRTQU9FT1ZYR1d0bU1FdURMNFNDM05vZWJDUGtSenZ4ZWh0dno5am9FdkpHNis4ek1RQkFWL05OOURLMDJpQlpQY1pnNTM4NzFuTS9xWUMwQW9IQmFyT2VXM2J5TGpJMU5CZll2czUwLzV1YmI0L1F3S2ZQR1J6Rk1qQmU3bDBZVWdHNkxoeVdTZElEQUlET0lrM3NsY250RVIzMVFkL0lOOUIyR1doZlUwS3FVTmNSNVlJeWlSTEVLR3hsTFhiNDF4S3ZnQXRNWTV3UkRSYVZNdEJka0ttd2tVVC9KaTVrUFliQ29aajR5MG5BekxpcEVaODBHWEpPYk5NTnBSd3BtSmdNNUFvYll0VzBjS3JqYklBdWtickpnQjMwUnZIR01BUStIeE1vbC9ycDE5WmtrWmxrTkdCekRUd294aDJXU1RKV2xoUkN2Ry9hL25KVXVnRkRrc2ZHTEEvWDh3WUZRcEtIM1Z0SWplQ2JSQzZ4N282Vitsc0xhVU5XUEExOXVZNzBnRmhiZ2E3YVpFajlCVGZtaTJscW9BNkdhRUtmWWdUdnlCRCtiNDBybGtyNjBPQlNIVGJQZk9XdnFpbktkTnVFbUpmSGpsZzVhd0p1WXRYN2doUTI3K2tFMVJURTJiZ2pGcDVOU1dPdUNpVlZxUFVZM3BIL2ozdjZ2ODMvNmJ5UndKK1RxVmhzNXNUZzNhZDBtZzRvdVFkVk1BelFBdEZIZGw2dEJ1Yms4dDJveXpYRVJBWVBZanFkWWRvUExBZ2xGY2Q5aUhtQ3hadnVTUk8wVERaYTlrWmc1NDArR2Vta3dWY2c1NVhrdis4YytRZisyUWE0dGNmRU5vK24zeWRMOGY4WitqL0x6MFd6Zm1hTkhNT2tuN3RRRUlOTzFxQ3gyekxnZXVNelZ5QWlQUkZub3VTZ2pqeEFKL0I2U3BmSGtIdENxdWxRVDRDRkRKb3BIT2UzZ0lsejdOdVVUMXhkTkdpR251ZDNwTUJROVkrTmFJeGk1TmtQbnY1SVRoVWVCTnZmcVFVSnVEdjcrL0twaU9MM0czM082UXgrTWhad05YYWlBZ0VkclJUUlZ2QzdqU2lYUW5XQUtnNERWWERjekNZUEE3dFhQcWpRQW1tVEMvWGsvNS9GeVl0eW9lamhzc0NVa1RxaUlTT21VT2lJNDN4dm5USkFSUXZib3dEK1BvTWdicE9MU3I3VUZFTjJHd0xHcGRjeUZnMDExUlg1c1FOd3ZvTjBHcXRFTkdJTGJxYkw0UlQrQmx6R2daeEg2dEZvOGxnSTYyb1JJRUt1cnpZeVFkSVRwMXpzMUhxelJjMlErRTZ6VGxzdDd3a1BzbHNsYjIzNWl5TEFUWWlLSlRLMnIrcHRuaDBNYmpLYytWaWdQQlJDRW9FQUlZUStQaWE4bFRWSFE4bU9LSm10cC9YQzQvZjE3eTlGMUNuUytWalJMUUh0UjhQYlNZT2Nlc01WbHU0azN3eDVibkNlZjF5ZERiRnVCWmRBRXFBWVFzdEliZUlXemVMOGtuV0tJNlJRMlpUQnJrOThWTzhRbm4wYlVWUlQvY3ZjK3gwcXhaZytFUEYvbUlqNngvUHg0eWRjdkhIUEpjd2VwNksvaHVwRmVpZ2hMbHFaSEt0OXdETnVEaVlhV2k3MWF3eWtXVjYyTHZYUWlnVEZzN0c4QU11QkI3ZnQ2SGl2eTN2NW44SFF4SXArZkVOZURSem5LN3BEK2NFY2Npem9XN255TGpZOVBNcmlpRmljYVNYbzZDRWxWSG14cjl5eE80TTRlU3NiOWt1YmZldTUvaWpFMUpMVzVUR3pMeFBPOGxES2g4dXRlQi8veG5taXQvZktwY291SWdWM3ZoNnE3RVJjWkM2QnE3WUxHRDd6b2xXZ1JsVlEzc1lTZG1lVFMvWW9XalZNV1BlN0Y3UmYrR2JObXhKQzZWYmIvTE1Pdnl3NjBsNGRySVI4OTBweHV1RWY3OU85ZGhiMklTY3czVFUrMVJ3WDU0WDI4QldNUG9McERvZG1nMStyNWN5U1R0WVA0d0FkTnRVSWN5Mm05bzVjUVRnbFF6Vldzb2d6ZFJkU3F2K2U0a0EyRXo1TllPa2VHdnhXTm1YYk5RaXJDaDJxcDJBd29WTXBmTG9GK050NHFvRXJOcU4rKy9tU0tDdGFKWEh2emIzMUg2MHJlRXIxZThoSWVub0JNR2lvUXFYa01ySlc5VkZVR1hkOE03aW43RUJwTmlQK0Fmb1RrRG1ud3VKbGlPQ3NXT0tXcW1uTU5OMjZ1N2sybjBPSWZPQU1pYXNiNTZ3SjFwVkxuaTBCRDNuS21wMFptb0dlZmFOREhmc251SUorM3p3ZGdLZ3dDbUlYQ0ZwUlkzYllncE1nazh6blJvYWtxU21CQTY0TjFGdW81Sm9OWTZoUDJkMWxCUnhqdjZ2UlhTQXpKdnVoNFl2R25wWXg2c2ZiWVhYU24vK0JseXJldFZSYzA5Wk4zMEsxMDROUFdId1l2Z0paeWRnbGNRUDZIQjdHSm9TVFVRQ1lwcGdybnphMmJlMXlCKzgvdDNGMFVxckNwUktSazgxd3YxVE5IQ0lCa2hzc2pZVzk1NnU5ZnQ2bHE3QllKWFBYVnRyajd3QVNvSDgyWFZVUkVnT3hxQTV5OEE4MEJzU0t1Z1NRTlEvdWtpdmxYKzNKbXY3b2o2TjAzcnNjTnFqRVlGUnIvUTBOMkJxWTNDOTBUZ1lsUTBMeVR5Nzk5RS91MGpJMGUvMlJiUjcySW1xUmxQK0NaWklRZVZ0OERNYiswTy9wTnJpY3hKRTJNRHRBR2ZIS0lOdE42Q1hIbXRmRkd2MnRnWlBETHQwY0JSMXNxMGdmM01ZMEtqQUVSTXJWTGU1a3h3bFcrdThqOHVrZi85SDVmODJGdisrQ2x5aFZYQWlhTXpISmplYlBRanFnYktkSG92R2tETkdZSVNZZ1JBeUZuN0dVeWk4bDhCTUlCL1lvUDk1bVFRVzd6ODZ2LzErWWY4N3QrWlZtRTRkSGxKRStwUkZhSHdmQXpxaVI0Qzdzd0Y3M2piUFlxZlByeGtFREJ3Z21tUkhPQUxtNE1MdDhZK2dnUjc5MGtuTG1NT1VZTndSSkFrMlljMm9ScFY4OWlMS1BSN21Zd1NRT2EwVnRRR0RXNENqbEhvNkxTZGVsVkc4eHNFaGZJRE0ycmJkOVlYR0dDZ2dSSGJSRmpMTk5IZlliV0JFSFpkV3p4Yy9uUVg4ZEZqSGNZU1d3K2tGRUs4cFFrd2hZQjF5UTZoS3dvTFh2R3NvNlh6QmRNMFBTaHdWTzJBL0Y0TkZxYW9ZTE1lS05nYi9mczg2Q3d0Uzkrckt2bzNRaHkwWUdpcDdDUmI0MFdRaWliTk1lUnFOZ2VDNVh0NDViQ1BNNWF5RmpCMVBQR1FCUW5XZlVsUVEzOGROd3FEUTdMQnBlZkFUamQ5eWhnaFlWclFuNWg3WUtvVThLSUVadHk2d0pDanh0YUYwS2RoKzhYOFAxM2sya1BXY25uQzFiZXgvdE1pbml0ZzMxWUFYV1VaU3doZEpWUXBoZG15NURXcmJ0eVd1R01jZGVCejg4SHpzNUlkU3owL3U2eHAremdlUWhlMWRFSk9JbDBnUlFvdG9ZelBGY0g3c0Q2Q3dXcWx2ZDVCM1I3Q3hFREJKSXpGM2xRaXRRWGJna3RZZm83OG5aWlFUZngvd2Y3dkppSy91VngvV0ZtTHBpTXQxaEVKSDNsZk5HWjE1RGpXK016dGpwc3BBUmR2NGluUm1QbmZaNXJhLysyUmpNY0FQNlBUSUhXTWdrQlVSWXBaZ05nZ3Z4aVREa1ZnbEdaZ3BQNUVkTkNCSG41akJkamdkMW9HVUkzMjJMSWlFWmtDVTJIN3JmVWEwTkkyQnNFWW16VVVjUEFoV3pSekJyZktYbHYrL0huSlAzN0lxeGo5Mmx1MkR4WkVsdlN0dWZWU1huRXpLcnhIYUdHQUoyRXFUWkc0MjRSS2JNQlJzcUhXaHlkeHQybWxsbzRLcG5LYXBnVjQ0SnJIeGV1OVhUN0FTRnhvb2dyM011VjZVT002YVc3VTRzdXVTcVpBeG1LMDVMRFlCYlVMWVF4M3EyU0VWSkp4RUhYZTI3SERUTHRQeXhWRXBRZWJpV3hTZ29ZbmpmbDRwc1JwOUV3MkpldmFzbWsxM2djRFlMQlcxOHlEeDRYdklpS080RmVEejh2NGlrU3VLMXdGRlJ2V1VrZ2RIMnhrZlFJUEJXYjhsaTFEL3ZSRWhZUDRBTTAwQlZQVEp4aUV5dG5ZS3c3VHJGY0dTM3Fsck5CTlNyOEloNytZZ1Z1bXpabEliUUhyenRUYldBVkJaa2hnRmE0V3JJL3dhSVZacVBQeEhOcHBRTEJESzhaQUdiTWlqeEFLVWRwRno5NW9XcjJRclBPWUtpclc4b210S2ljdWlZM1VxaDJObUQ4b2xvbDU4TWFpNHNiU3plb2kvcUh5dkVSKy82Ynk3U1B6MHRmTnVKOHVPOWM0M1JjVnFzTHZMS1dUdGZIM1NxMXZYU0UvOTVabk9HaHZBTERIT1NBZ1NJYU1JVHNSWHRnNjlub3JId3lHRmY1T1A4aVFlMHFmOHZwMHB4Q3AwWlVaRGtaZG9aQTVSd21uOUxuWHJBeXI4NXpJbGgxVnNrMUF3ekZnZExGSkdEQnhlanhVSk1UekM4UGsrNHZoUG9pRFVuRkRIcXZGR0tTZ2JESjBGUENhZ1VCK3N5SGZIcGxtK3dpVkpaNnhJT2F5VENVdXVCWVlwWWtBWm16aDZwc0NIOUoyNWpScXNNcU5nU0orQnpMU2J4K0RxV01ndXVFN0orb1U4UVdOTjVqS3BYZXlkMmtsV29OMDdZUndkWGVZeDFoTzFIWVVpbEk0OHZxbVlaQk1ybXVqbEtuWEJIZW1RSlRFVGUvOEVCM0lqZlFjdkdrVnNWMTgrVktSLytNL2wvenJENUdmTzh1cExwaGVYQ2tLbjl5RFlQMGdJdmlteWxLY25iRW9TaGRyM2w4UGZHb25mS0tXZEF3ZjVvMERiVG1ZODVIZytmc0NmR01CKzdzc2Y0QklvNnFZSldObi9Eb0VnSFozZm1Od1Y3Y0gyaWovUGZsRENQdkRqVkN4cXYycWFONkFJQUxqUU9TbzdaSENvaXVJRmtzUEhwYXpacjVWUDdMVmE5NEZnekl3SmxqNUVuTHZBMnBUQnJzVjNPdG9pY0pNa3VrTnVPNDdSR0ZJR1JhcHBYZVVIS3lQWG0yTVdRMGlwbE5rck1va2VWN0VNdjFqUmRVTDkzckR0NVF1bG5vVDFoYmZtVzRKbnpYVExUa1N6SmZ6aUJxSHRmd2wySjVoaXphaGp5cmRLR1JoeHVoOVRoOE1BWWtTdFRZT0duOURpLzZSR1p5R04yYS9LckpWcmdITnhhemVoYXNQMEttOWdpdk03UTV0d1V1eFlFN3dZbEVTV0Q3UTd5VVVtYkpjcGluVFN5Vk1YRlUrcnlHL1A5TEM5KzFqb01BSW92VjNhc2g3UjgrMmNtYVJvSEJCRTRTZmtrRzdQejNrendzMUlad3BZRnJLa01wSUpzd3Fnb3huQVNwYjBsa3JjdWZkZW9qM2o3SzhIZ29CeGc3OVVuN3JkVVFSSTFTUXU2Q09PV2tPRXpsaFlUTzNvM29hZzhjaXNFYVVhaXJRNXQ2OUk2R2M4MnI4a1NCSGFGaXJxaktxS21HQ2VUMTlpNDRFL0FKa0JSNTRsL1VZZG1ZWmZxVStINnhpcTFNQkNCWHlIeDhtMXpQZmY4TFNHNXI0aWMrUEIrYkFWOUh1L0Q1ZG04bTdpT3k4TzhUMFZZenNtNG44OS85SjVXOGpGK3pIQStlQnlRMjFac3NJalFMSUY4ZEVMeE1NQXErd0VCZUl0amlBYUV6cHo0a3Q2cGs3ZVMyWHVVekdnQlFWNVRYSDlWRnNQcVNhRGF2RnNGeVRLYTlOa0JvSDRUQVJnNlQ5di8ybnkvLzVyMHYrRUpHVmY5U0NNSytyNU5FQlVPQklMMFBWK2pMVFI0UFF6VDZaUTh1MHEvVEJFaitab09NRjRrRGNEMExkcW14WkNlMGtLemFDSjR4b3FLaVZyUzFiL0Nhd0NOYXdEcVk5b1BrMDZSWXIyTjFmNy9LeFh3TlBheVFiSXMzSnZwMklUeDNSSFVFNzBuS1pPNkRKdmdWTU9acUdXR21EM3FWaEVCSkN1dEpYYURDRk5WK0VFaXdlUHJXV1ErOWdGRlcxOGkzOHgvTS9qeW8yeXBSUW8wOVE2MmhVc0hKV1VzTDFXUVkzNjE4djJiS0RwdTZPRVEvd0RZL3lmeTR4MlJEZ1hERkQzTXMvR0JraStycmhjNEVJSGdBdlNOdkJ0UUU4NUJRT2drcWE2SGFKekNSSWkxaU1NKzJmNThXSjNkOWhTRlg1bzFINytwS3BHOWJ0TkdwYmwyaTZxR0M1c2FDZ3Z4RGZ3VGhNS3dDWjlLeTNTcExGWkFmalZ1VXhwbXpuMFZCUU9CUGlMbXQ3aEdtdjFKek5rblB1b2hkOFAyT2Z5bnB1K2N6NW1FTFlTa0xmR0pkYnE2Mi9JK1JQRC9uNW1UNXlWaGZNTEJrMzlyRXFJVTEzREZoQ2lIVWc0V1ZoTkFadEZ2TjJhTG5VU0ttcXNLZ1htakxrK1hTcGJUQ3NDQUlBZC9pR0tFRjhZK0ZONDdKRnFtZ2R1eEJZUnNFMmhZRGV0SElMZzhTbVZhenJOcUMrMWgwQ3gwOVhHVCtXek45U2FMdU1LS0JEQWZZVmFlNFpNdkViVWc3aklRUHM4RDV0VFpYLzZTT3IzVVhnSldIaCt4NjVoaTlESmtvb0JEUU1JdG9ra0JPalc0Y1FsZTAzQ3pIVGw3bjk3dytUT1lCZksraFl4WitITEN5QXRVWG1oSG1Oa21veWVQU2d5eWhmVit4SXM5V0hpSzhrU0dvN3ovRUYvMWNlRitJeXlsUS9XVmlCenl4Ly81WlZ5VDZ2VC93Q0dNTW4vWUZpS2c5MTBURkZrYkU5MXFmOFY0VDhiLy9Ibi9MUFA1TTVmbTRURDZZV2dHNktEV1VGS2xnNWVQVWdmR0JvRHRyTzR3a2loLzhGQWZPcFp2QWozUTZPZDIyVmZndEl4Y0lCL1djSWpvRmFBQmw3N3p6RERPY1NLU0N6V2lGVUdRdWNOSXdBajE0ckxHM0pSMjJ6MDVRMnJNempYdUF2Z1VuSXdFdWw1bjJXK3F0QXcyRDBaSlhUUlBlSzdwWFhvNlRlaUF2M2VERy9tVjNMa3F3QmhoeVV5RjI4aUloZ25xN1I0VXNkQkRkazVEYVlUQWR6ZEdKM2cwdEFnK1JmaDU3czZXQVR4R05sK2NyRmlGbUpyYm10VlV1bURLeDBSZ2szNHl3RGxKWkwwM0pLNzkyTzZuUWdTSjdCUFlUZTFaWkNGbWFjbTlMZFJ4aGI5RldMZEdjbURNc3RnNW1qLzF1LzhJTUdnNUZVakVHbmdNWWRobExIa2hYSjFDTVo5dDVscm1mVnIzc08wOVZoUTFEalBEWGFPWmhwY08xbmpxdnZIRlExTUttUVlaWVEwbFVEUENCTWlUakd6MXdLKy92blZ2bDdoT3hMeEI0Y3czMkZiQmMyb0VjT1QwcjM5QkNCY0xYREljVEZ5OHorOHpQbnluYjBZWUMrSHJuTEZKb21YZUNlN2g4ZVhIM0ZMQVJ0di9RYUQwUWs1SytzY2tqNmNEUS9nWmVESHpBM3VQNUJ0eHp1dUNQV29aOWVhRy9KbDdhZndEZUVrM1ZsaGs3bytYYTRjNURDTC9SSGpGRkM3K1lhUkViUUZsK3cwQTN3czZkSVBGUmtaMkRYQTZIcHp3M3QrcnZLZjBnaTkvM3BEY0V1MDdHUm5ybmFlSkoyem9HVUJXZ3RLUElRTC8vUk40M1g1UDV2RDVYLy91OG12ejh5Y09mM21WS3hHUWNrZ0s2MjkxMkZLalV2VXhXbmx0SmdMSzhyWkQ0MnpKa3VlNmtFcWhWQkhDMy9ibnhveW5oYjVST3N4Y2F1Z2c3cGJ4QldHN04wb25sRmNvZHNlWXJJQjVSbkRsajQ5UnJNSDl2bGYvbC9mTXIvOWVueUkyNEFHa2FkZDZtOGwvcFRScnBYelcwTkZhNlAycEl4Vlp5TndUOU9mNS9HN25Wdm96UnNscWdFNGQ0TUhXcTFiVTA3TnJTV1JwcjNEQzlRblBMM2hrUnB2TVJyZG1xN3FnaDBSS3RnSUw0a0FTNm9qVXQwc0tiUksydzFZZ0RORUZkQURBYnk5cjNxZ05mRjRIZDF2TmNvNHVFZUoyb3p0K1BnRWtjT3ZJZEFTajZDR3QwYk1kdDdWNFMxcWpZUERGczBhTjhBRm9DWEFXUW5qT2lkS1dLNWh0SnFmTW5hRG1BUVBGZS9lZ1hHaklrNzRGb0duMGhzbE1Gc3RMSy9PNmd1M3RXYWhyNDNDUWJ2ZlRBSXBtNlEvSUlwaDNzVkNtS3pNc0Vid1phK0tMSGIwUHRaM0FQQmJqWkdNK21iWTJ6Y3NWNVhwaWk2NER1TlVVWmNkd2w5NUg1WkRONEZwSEhqaGxFQlFvVlZZTU9BYTJLTTd2ZW9XSlZ3cVhLa2Via2gzOFVySi85cFcrS1ppY0xoSXM4QXh2NUczQkh5eXoxTWx0MUR4UlN6SDB0bFhhblI1M213U0tDVTE4NzhkZGE0TUdpM0RtR0d1Qmx3UWJXVVE3U2VSa3ZGekNtTWMzYWRwY0dMWnJGOU9kNGQvT3E4R0pqdVUwUitpM3ozQ2wrSkU2ME96MGZHM0VxalVvVG9LSjhPdDVkN2lGb3dJNWQvNVlyNlJLR1ZEdzk1YUxBUVdMb3o2dm5HbVBMaTRXUEpPSE9iSTgzNHY0MTg4MkZWTDFoMGlmd0lJL3d0dTFnZWdqbEJseE1ZK3RCRWVyUE1KN2NaOHYzMjVVeVZ2MCtSdi8xTjVmdnZJdk9SYVdzWkxLS1Fmb0tNdDB3ZHhzRzg5bXViOXhodDBGMjJQTGVMd0NTa3NYR1NNdmZPTVNRWEF0eEd3cllPMnlJYnZrN1RERExRVk9XMTlOaHZXUTFxSjNOT3NlYVp1djBFbzNHcCsvL1hXdkwvL2g5UCtlY3p5MHRlaTk2NnJqYTc4RkhCek5YZ3V5RVJjbHhiUWJpbnFLd2hyK2RXcGUvR1JqY1ZmeFdXb3RIRkNYY2hqcm14QnJ2Z1R5MEtqQVdQeDJuczlGRmhJVGVOU3gxcXFSa2tjOXdQR3RaT0xzcGpWY3Izdk1MQlNQVmN1a1JnQXFETU1IdnpLVWYvak1XK3dlajdZbjF2ZGhBUXdnZVRGdk9ob3Zjbm1mUXFCczhJV0FmS0dGK0c0RHdnUkNCcUpjaXBDZWJtYU1VbU50K3YrZjhOYVo0NkZNS0x5UGFSYThBYjdEcHhBZ1RYQ2o3M3g3ZlN3b0NRdFN2ZmVheVFEWnZyd09CN2J0RW5CSmpCMG9TSm40MGo4SVlnVmx1cGFjRTBQeHpYa2ZZb3RQZEFpSHIrODZiMEJSdVlhZ0JiY2tiSWVvajRYc0oyMWhXQkNaMXVJUHJkQjNIM3FjU0NVWU5KYi93K3VHWVRXMklycmtPVktnVDl1R2taRWNUOEtBQ3RJRW9UMENkVUxpaEc1Zi9NL2JuR1YxUUtiR3lYSDJ1L21QbWZFYklkYmh3WHVrbzAxZlNja3JBV0VrMFQ0NlVVdVB1NllvWVJ4eS8vN3ZmclRQOFU5UHI2eC8xSWQxanNoTmVnV1I4Rlc1Z1pBNnRJTllWbGlMRng5SVgxNEdUUXJPNzcwUVl4N3FDZlc2Sm9Ba0hDY050eUw0Wm0vMzR1ZlJWWEVxNDJXYUJ2T0pvQmNWdGFRU1BmbitMeVRWd0VNTTQ1VmpaQzV0OUY5RjhpdWxWK0ltM3RpazdEQnVZaWlpQzkvdWJmQnYyUnYzM2t5ejhlZ1JLZEpuLy91OHAvK3plUjN4OEo3enFxQUFmeWRMZUlTd2NXZ2M4YmRSMXozdTdYMjNEaURJTm1sNlplWE5oYW50OTI1RUpLbXBHRUhTdXF3Q29IQWJ6d2xnYUMrYThmY2dmd1pGVHd0U1Z5a2FEbWVaWXlmWXd0c1UxK2lzdi84di9hOG8vUExUOFd0TUdSSFVxTjdFaWpzTzQzSW5LRmxnblB5OFJOelRSTXlWaWdlU3JOdFdnVkNYZ1VFZkRjM2RzaDFkSXZid016MEVENGQ4aUNDWkJ6bS9uSll3UkFUS01BZ2t6SlpMYUxFQnNIN3RJSytIRm81MS9XUG0rK05tV0FFbjNVakI3SHM1c3MySVZSMDV4Vnl3Z3JuRXpUdEFYaXVITE00a1FZdzJKa2ZyUVRmeDNTZXNjQk5WWTgybzVxWDhqaEJYRWtvRUpYeitlWURVQW9TTEFFRFhqUG1TS25tT0MrUElQUWZFUERDd2tuSkdlY2doQmhkSUVyYnpMR0VCTVZ0eUV5SFg3VksxTmhOSEdYeDQ2eVRMQUlpRUpyVVdvQkRBRTd6SURXaURjWk5nTWdUeWJPWTBsa055d2ZlVG10b1RxbFFneDN0bzdXeU15Yk1jVTlDdmRibVFNdnc4Z002T1ptcXBHUmlYRDdwYkk0S3AwcmdGS0lvYVU3SnJRWU5zTXlFNFh1YnF1d0pDQmNWYzEvYU5rWkpOYjh5enZYWVNKWGVyd0kvdDdwbzkvQkdCeXZxUElnSnZxRzUwZUoyaXROVU1RYzcwQVBYME1mTTlNQnduWWZhM3BRVHFaT2E0QmlKMVlQYWZoSlB3N2wvbEtSQis1bHlKSkFhVnJjdEl4T2VDYkVsTVJ4TWIxQmFvck9salJLMk9rNG84d2tnT1h4R1lsQTZuYmJpaFZ4TUlsYllYUEloNnJZekRrRDRZMVl3Q0FOS0NsVk5VZW1xTmpmUmVSZkt0TkRmdmdHUlNiUUYzVVZyNERCK1cyWTJJZ3Mxdjk0ZFVoKy9oRDU3YUh5Yi8rVzRmUmxJZ1dTam9sS0dUL1hlN3hCaUxIK3RJbVlqTnp2ZkNDa1MyVFVwU2FPK2lDQWZrYnd4aTZBQjZaWnpETFpMZGxpYm5tZHZjVmp5dWRudnZuS2FaUUVic0cxZ0hzS2FzaGNDQ0Q2ejgvNC8ycm5sL3puejVUQ0x3Y3dmdm1BU2xtSGVXMVVrSjhxbVlON1o3S0c2RWhUa3JoUXB1RkEwbjlmTk0xTTFORzZXS1dOZFdOVnFQR0hoWXdCRmJFcHdabmE1ejZJazB5TWRsSGR4Y3htcGNRemRVa3R4QXJkREtoSkJWbVFjNEtON3hzUkJkUVJUQUdoSHd6djd0UThjVXdaUHRBWUZJYlRDbXpHTkFFL3p2cktUdFpKcTBJdjM5a2l6ZHNBOERoKzV2UFN2MFl0bTVwZGZXblh6bjJUcVhjS3NLWXhWU1lDeTlaZExoUElhVUJuQTVGbVhuWnZSUnlodVNqMzZ4MWtzeWtzU1pSQVlxTEZVUGZPY1hGblJZWk9BTFg1SVlIazlvNG9GdXgvT1pqQnlkUXhlN0dQd2tBN2o2NkcxTTVoOW03dEx2bnJqb2p4RU5YeFdnc2pDNnkwd3B6V0U2cUltb2pCUkJYeGJ0YXBzcTFJOS9WZHo0bkRXM2xEMTdzUEhUbjVyT011b2JCV0pXZ1YvYzJXR3FVcGhDOW1ZR3lrSmo2ZkdVejhESHNKQldzcFVCeHpTOXhPTFVINmtTNy9KZ2d1UDEwdzRJcXNXTmtnZmMwc3RYVlI5QkdVRnY5bEFaRVNZZzhJUmRHK0xFZ0hVcm1ncEdFWUlhWGJjU01sRWRPSEFGWGh2Y0JMQjY3QjJVZEd6enU0YThNMjhyQXFIKzJZZjZvMEdWMnI4aU9aeGhrVHJvMWs1ZzhOa1lmSURwT3JCMGdBYXdWdzNSN2lLTGY1YllUOHg0ZklmejVSSnoxVW5yQVlxamJWRW5VWmhzejVVSGtNUUJyQ0wvN2JoOGgzRzY4eXFOb3hjbE9iWVNBSy92cEFidGVxeExWcmlXNFJuNEpHYmVnMUVJOVdDQ2NLaVEwKzBRQmtxaWcxNDZGeWcrSzRwZFNBYkRMa21DTnRBMUx3Q0pmdC91cThDZEx3L0h4WjVlWFB6eVgvei8vVjVSK2ZTMzVBWTNHSHRBeHR5b05hRWQyaE5MaVN3RVlSZGdmekdsb1NOLzNLbzRod1FYMXlma05iZDIreU9VcFRkbE9XUmF0SjdKQ29FRjJBOUNxcU4zTzRyTkFjRnovTlk0REwxUXp3TVRPTzd5NXpEeGpqbWR4R3MzOGdGenZaUDVpbUJtRmVBNFROR0UzSzllc01oSU9wR1QrZ0tTVjZwcVFSZUtqY1ArVk5PUmMweHNpNjZKRXhCVHcrbXQrc0wzZWtXRllqZzhMejNENXNLNU1lWUJ1QkhzMTY2dytKbDBuK1k4d2tYRUIwZTFZTVNRcTgyNU9RdzhvRGRvSkdKeUtmUFlBTkRnalNJQVJxTVloYzE0U3VYVHRhRk85YklSK2wrUk56L05ldFkyS2Y3VFRSczhYWHh6SmJJZFVaKzNoMDBJYXpuWVZ4VkR2S2xtOTRhTmdNT01tR1JWdXlOdEpjWGJaWWpDU2VvdjFHR1djQXdZam01YytWTVJhRVZzWWE4YnNlQlh6ZW9MRUwxM0s0SkhmTzV3cDB1L0RLVDgrYzVTdGNubGV1R3haMUlaMkVnSkpqTlZwSlNxUWNFK1ZvTzYwbUZQSzFqWkg3V1lwV3hlakNPL3I1Wk5ZbjQrU2NJcytud09tY2NHTE5WUllsS0JteENCcE5TdGZnT3dBaHFRMjE3aDJiKzlxam9TOVJNNE1WTVlqMHVTTGtqK1h5UHlNdGRlZ2tzSlM0YUdtalFjQWg2MWdhSzBUbXZtdGViQWkzRUR0K0YvazlVb1JSRTVtWHloWDVGc3lWUm9IV29USi8vMjVKd0RYazQ5R1p5aVprNld2aWZLakpCaXpvQ21NRnNjVkJuc05rR294TXJxOFgxZ2xvMDdiMjBNSEJQRTJGOUx1ZjBFNFdkRWhJc1hNT2tmSEF4TVI0REpmWWtlZnRLbjZTU0VrWDA0bDJvYThGQThIY1hpNysvL3F2S2YvNDF3LzV4NS9adVo4NVU1amZHOUdDMmlicUtFTVlwN21HNWkwS3VrWS9oMWJFTmhlOERqQjBMR1EyRjNSTW0yQk9nYUtIbldHbjFqUG5qYWRvZnBWNEVleHJiZkZOaG9WY1c1ckF4UEJkV1FZMXBPQWxYVUp3Q0gzY2gxK2FrTnhPR3dBcEs2dzR6REdQb0ZDaVlUREVHUHJRWDh4TWxlYnNadER0WUF0TUxlRzJ5ZUlHK1R5QzR4SmhsWTkvSk1mQmQ3MGFNeSswTEhJMVVTZlZNbE5rWmloY1FNUWhRUG1kOXpyUVJtbjdTYkVEQldtQ3drMkdZQ0ExbENQT2Qzd3ZGbFR0TWNVYzQ2L0I4cnZ1cFVWNThCd3lmMHBPR3RodmVQKy9ha3dPL3lWSUNabEVOOFcrWDRoQzBKakdPWEJHUzhPSnJHTlE2SzU2QUlCanJZcGdTVFRnZjhReEJxdkp3UHJMMDlkTlFCNHVqd0k0elJhZ084Q3pxTnR0Qk9oaG9wVjFVTFdDU0V0Zzh3MmNmUURMOVBRcGdkVXdsWlRQSmJKZ1pxZVNRTmVuajhNZlhTaVNXMmJORGJzOW9ySkJsNlpKWGhNMi8zT3N2aDRTZzZMQVNIaU9IMXZEaHoxTEgwdlVobmVoRlFuRGhUK2V1eVBkdUk5eVlacUVBbXRCZWNIVzlOVE1ZU1hGTndlQlpXRWlKWWFLaFdqVGlxTUNPbitFeTkvc0lUb2wyOHExYTZCRWFQMWQ0eEwzaDZpRjdMamRobE1zakJqMlErWGYveFlpZnp4RTEvWGkwN29IZ2k3eFBvUHVxRWx6SjAzU3ZpRW5lTWoxU1grbmZIUDUyS2x0Z3dUSVdpNmZLOHJVYVZmSTMzOGJNalJOMlFid21CQ1ZQVU4wWTBTQzVoUi9ob1JEb25RUXEyMnl4Y1JrRlRiMnRWVEdGSGw4SUNETVVsOXgyN1c4MHdTV3gvck4zRldUeVZ3b2huQWxzTVlsNjFVUCtJOS91UHp2UDlZTEVlN1BxblVPcktmbzVTSXhiNmtSZHZQSkVVRkpsMEpyWUFhdXR6YnZvaU1KdjFVNTFQUUxSWm9RcTh2TW9yVDZSZ0R4ZTh2L0JHNnpJUFZ2UTFzUVZRTGZWTjF2aEhhQjZUV2dXbE13RUJQTi9GUmdER3VQcUZNY0QxYk8xdHdHTE5pU1dNLzA5MWRFVXZWOWFpNERpRSsraWNTbkJWUmFRVHJhS3JaeDJ3aUtNZzYyRzNqcDdOc2tXUFNsY1FES2QwK3pzQllXKzFBVG15b2ZZT3BnbE5SSWpUNzZtRXdYVzU3UmVDNUQxcVhpSU1SWEpMRnZvQ2hPMkVnOGV3TTR1aUN4NmpTSlhhSklhZWd1SERKZkcwd2RRaS9lell2d1VtQlRNbmgySi9wQXBRdVpiS3dwVGtMK3ZoYjZqenlJc1JKZzVnOHIvelUwb1Y2dERxdHRqTXFMcjZBaHphaHkzQ0hkVWx5bnJLYytabUpkd0p5YzUvaGk5VGdSd25DR1Z5RmtKejUvMGtZRVdLa2FyazFoMHAxWlFtdWo4dGwya1VIcWNYKzZycHdIejREZ09rTjB3ZlMzSTVXVW1EMlBwZ1V0NHJPbjJ5MHQwL2xjdXdRNGsvQ0FhZjFlcjBGaHU2WTY1NTF5WXVRMzFJSm9BUS9oV004T1JEMGpNMWRoYTlZQVdxRU1heFlpRVlYc0lUS3cyRDhGR1ZrYXR5MFlzUzVIWm9TbVZSY01HM3lhODRjcWt6V0JEZVBFOTdXeWNCVzl2NjRRLzNibm9BdTRGdjNiYUN3OWpRdUhVUTBKeDQwc2NVUWVVTFErTEVRZTF5dkUrMTh1OG0wQTd2aGVWMllKOTYxRDV2UGFHVHd5RWhEQlRVVWxFZElzdG56Yit2TFhESXRYRU1iSGQ1UGZjY0hQTGZKNWVWV1F3VnlUZjRqS3YzM1BTUi9vZzZlNzZJVUhzVm5hckVhQ3hGeDd5ekI2S2x6UW5pTHlJTjZ1Zld5eHA4bWNTZUJWdlBDcW55dExIbDdQWENTZlFTazFyaTAvbHFUVzd5ckwwK3J3NXo5RC90Y2ZJZi84dWVTelVxWVVNTFFjbUZaOWVVRHpWZU9FSm13U1ZnTk52cVpJWVR2WUNPYXFtQ1VCSDZobWR4dGVSbFZ3R2NVM3QrK2poc1dCTUJkU05kT1hwZFIvSDIrYWpKdCt6eHpyRmNVT2EySFJMUkt3Nkc3NkdJTmFaMi9LUWdLOXpDRWJIK2FFVStWdjZHY0VldkUzRzlDQ25KcEx1QXlnS1RlRDJoa2FiWjJ2dzNmTFZVWW9YaHdETW8xamY5M29jOE9DeC9NRXVsUGx0RldvV1dua1QxWDVKdU5GZ0R4dVg2amdUOFczSnRIVkFXTFlLOGlkU2dqVStQVHIrUmFUUzB4b0tSaXE3ZGpDSTBmZnVaQXBoOUY5RkJHL3NBV2NxT3ZJNm1oKzUraUV2ei94d2VWTjNocVkrY2N3ZWN6Qm9FVHBlTnNSdTJxR1grdEsyWEFBd0VPMVNwT3FVbkNOcVJLeEpEYld0WWs4VEFsVzQ2eVNkVk1oOHlqd0dRK1hIUkFYQ3Y1VUNkbXFlcVl4RnFEVFFrVDYyamhlRXE0MVVGZENKV1I1Q250YkVSU0o4L2NROFUrWHEybnpRd3dhcXBKaFVxV0lEWDVGcXlKSEtlblFCT0Z6NmU4ZENsSlU1a2JPOTQzKy8rdFFYWnFSd1ljSnVkeDZobzE5UGlpVUdOV2p6WHdxSXAxQzBsZlJ1ajZSSWFISjg4MnBBVGl4UVJnRHd6TFZyVkprME5NVkNORDcrV2xpLzViekI5YTVXb3VSU1JDdGVTakFzbmJ5R2hUWkdtS0FJa2VORDhzYi92MzdrTWRIeVBqYzRKQlc5dysxeXVpWkh2SWkvbnViZkw3cWwrZkRLTElxRnZ3L2hvaDBmYnA4bUwxNHJIMm8rS0lKVGp6a2twQXBXLzY1UXVSN2xpRDg5ckNxSW5LOUZzT1NuVitySk91SGlJd0hvQVp6d2RCc3VOSW44M3lkOHlIK1c4ajhwbGhVS0Q2eFJQNzQ2ZklwVXFBTThUTWtSbUdJeW9vTmpPZnhrbnIvL0tIeWYzNHUrZU9IeUkvbEx5SEdIUktlWndmM0ZqVmh0a1ZoL2xxMFZON3Uyem5OMHZWYkRpZ1VVZ2JvUU5VYkVaQ3VyZUtMM1h2SzFQNEZGalUxZE14WFh6MDRUckpxRktNNGhjVllDbnY3NUJUM01jSlNFTnJ3MldwTEVKZVc5czdzaENMd3pPa2svQ0pXZXZUZ0hTa2NhdDVpNCtNbGdXcFRtc2ZqZnVHdE5HeUx0QWVUUzVoWFE5b1FpU1AxTmtzQlZGck9Lb3UxYUlUQXJjdEkyd0hMQWZ1UDhueWhpUEVWUHowYTl2Vk83UTdSNW9ickdOMHF4Z3RIeFIxNFJYTmJjMDNBM2VKRkJNdCtjbTNTc3cyZk9lZHdEMGpUNEFXNzc1bWFYQWVBNlUyTE9ESm01R2k4R2Z3aGhxOUtaRTVVL2xzU3c0aGNGa2dyM0k3cnMrclhYanRweWNqK1c3NFpFOFI1a1JreldqVVA4SXlSZm1YbTdjbU05SjlQRFJiSXlGcnloWXUvVXlBbnRyeEp0YWVFZktSYURNdmhmYzZFdHB4QzZzSzZpRmhWZVdyamFSM1IwaitYVjBwaDFKcmpxR3VRaGlFMUU0b0Q2Y29RRldkUkcvUWIzREpDU0ZlYS8xV3NZVy9RUE4xWWMvZjdISEN3Wk1TaHBCK2hrR1NsZzc2MEZpYWh1MmpMVEtDNDRpZURDNnZCd3lyR1ZjTmJJQ3NKeXJtbXZwamo5L01yNmRKU0JPZUp5aEtlQi9OT3JZMGRQZGJIUVlmQS94bnZVOWd0YWVXemthaFUwN2FNUzhSK0d3bmJuUGRtMVVldmFtdkFDcTkwbmpRWnFpSXZUcUhsN1JCRmRhNGZocnp5alVjRXdZZzdCZWJENWZzSStXM3RQRENtL0g2aU1MdWorSWpLaUNITGwwaGdvVmprL1JWVGJxZ1lwdHVuYkhrOFJRYTB0VysvRFJIZm5OUXU4aE13cU5kMjhXZmU4eW4wblg5Q1czOXVrVCtlVy82MVJmNmtObFdRdFNIYUxFY2M3QlM1Q21mWXZ1TDcrSlc1Nmd3R1V4UFJJZHN2TUhOS3cvVVVpTmcyK0dwWUduQjIySVFZZ2xaUWpiMXN0T01yRy8yV3FMR0xpanBubWtpWFE1anFwRnRsaXNsV0VmVzJpR3ZMdmNZOCtHRmRLUzcvWGtyNUUvRUVmWW4xQjRxV0VxVWNKN1hxQkEzMkYxZHU5N0VielBTSXNXRFpWOUZXdUNKcnUrZmNmd2ZQQ0Z3UjJndlRYZko0aitiTERtb29FcXlRSkV6L2lDVGs4SFBIemNTUkZkRnllRVZvUitVOXlORENSZDJRZzRzM2I1RnExS3gyOUdDNEU0QkdzUlduSkNWR2piVmgvYk56amd1OGwxQmxhVnhvN2tyaDE1UzFENnlJTWt5a0lhSTdHTVhNWU5SVytXak9LWXBvK0lndHJnQXQxNUFKTFg5bWxTaHhtSFYzYWNFQkU4b0dvOEQ2bTVtVndDQ3NMZVpWODA5Y2xvVHBVYmdFOTVBUWM1VW4rdDBRTkhRSkEzRERCWXJMSFUwL20vRGIwaDAvVFBaRjRWMVorUTZORUhwNEs5WU1JS05ESmc0VlZQY2hOcER4Y3JpdEZPY3pCZlByaW9WdEZUTWlwSm0yUXhXL01NYklab2p2WDdodDZ0NkRabXBpbnBmVlQ2c21BNzlyVStBTnRDZGFtZWRHTTlCVWNVK25JWWtIc2pTc3g1YlBsUVZWSGxiQm1tMjllYTh1V0RETWU0dE01S0M3R1pTN25ZaXJ0OGwvYi9ibllDK2U0enhmVUlFU0FHWkI0RWpvaTVrdVE4bkxuYWswSkY0NVNOOW5mazY0d3R4ZStOOC9FVFR6K0NieWNZWDhhN0NRNW1OdXVUNVowZjZoRzhGbUNYaXZnSS82WVNMZlZFVVdwOFgxaDhNVTdYbk9FamhUUWo3QS9LNmQ3LytNTFFzUzhKOVhhbml5NDdXZ3dyUEF4Zk5UNUorWHlOcTUxcCtKOVZtTG11a1FRZU5WMUdKZ0lSQXpFTjdBL3BLK1d1bEQwdDhOOTRmSkFHTUZXRS9kcDZZTTZxNUREcUEydndkcExPc0NFcUl4dXFSc3BxSnFEZERGaEl3UUVlemt1T0gwQVcvb2pqUWxvUjk0dUFIYTk0U0NiYXNXU3hzSEZ0RUlWTFJUTVRIcnNuNlV0Z3ZHcmNIZjZQWTRBR01jKzV4amRUbzhnc2RINWUvaXU5RlFmaklwQXhpTG5wTE1Jd0dhaWsvdi9oYWl5dTVsNkNTVHFERHoxbWJOZVE5clVLbjFEcWU3bVRuSExZM09TWENyV0FYTjJNbE1OZzRnM081WlJFZDV2ek8zM3pxQzFjRlI2UC9VTDM0aStpRFp1emFQSnYzbnNtdXZPNjBVek1IdjJCQmp6Sm8zc1RlQ1F5RmNzOTQyTkhmSHVxT0x4YmMyMUwxaElROVYrUTBJZGNUb010bVdicnpuZHRsUmRieUpzYjQyc20yblZFeHBhR3Bab21WSisxRkZUN3ppQXhad0Vzd2ZFcklabzdWRG5zOExtdXFRV0NMK0hvUUlQeXN3SDFsam9EUjB4aDRGcnB0cjN2YytrY3dac2MyWjBjYUE5KzNwc3ZvdUYxQmJWeW9zY05jd3ZTeG80bStNdG9tUXZGYUEvaHZYZFk1MVpmQ3dzcHJqcjZISk9lZ2dIK0xnMzMzUjBUOC81SktzL3pILy9TRVJpZ0RpWGFsL3poZ3M4QUo4TU13M1ZFcno3V0l6clRXNlU5bVlXYXNEME1PT2VReTMzcFVYRGR4Zy9tc0QwS0hRcWhKYzVESVJYOUh5VVBVMW9RVUVLK1JmYTRzQmNDUmdVOWlNMkg0eGpzK2ZJaVlybWZzSGhLaWZKQUpUNFR2WExBbjZtNGNNbzExaWdYRXJBa0ltSWlZZWdFV1VYZEo2dnNCdjhMUCt6UDc2QTB6NnVhSUZGaitYeUk5TDVPY2w2YU1LaGZCakpCMFllYURnc0piMFRRMk14TmJFR1VRVWxmSUNUUUNSbDNIV2hBL3hsUkZKNmxHbFlVSDFhYUp4UWtqdWlBUU1HU3BHRTdNTXgxeDliVmxQbStoYTFITFlXT1ZPUEVSSC9tNjNDWGFYNWFPYTd1QUNSRTU2YS9ZT0xDSG5QWHR3WVU5YjB5M3UxcDV2ZytBNEpHcGxEVm9HQlViM2FkUE5uSjBTd1dwblpDV0diN2ZQMEFDQnl5c3hLSXhOVzhndGc0K21UR0lYTkloV2JXOXZJSGpLZE1QU0NQZEZwbmRiejdKUjYyQ2ZBb01jR1JIdVJQUVM0Ymswdi9QdEE4TDFRbnA2YkpIRjRodU5DSHZBbmFBOU5zRXBOelc4aE9ZN2p5SytEVWhFVUdTQ05SNjhRd0JEMUJud245TnNyVTBBdzFMa1BOelpSMnRkWU5LWmZya0grNEN5WDI5WTdnZ1lpeFIrSWRSL3pDbVBnWnp3dTgrd3h2NkptSjN0dEZZUU1JVXBsTStYQnNld3dRdE1kQVVSQ2luY09aaVNZODlUWW1qTno1K2ZxNnA4UXQzQ2c3RTZZNG1rMjJGdWppb1pNUjZqZ2txWmN1cUYzeCsvVGpIaytzWnptakpWREc2L1ZzbU1WenZWZUdyUVpTL2o0QnkwaXdvcWFTNnpvTVM0bGh6SEdwV0hBeVdPODhmUHlqakV3dWlaREtMOHpFZXBNYnAyeURXMi9GLy9FUG1QdjA5NXlMcXhOZHBhakRrYWxQVDJRZ1ZNekRnMW91ZjVrTDgvVlA1clRZbTFSTlR5T2R5cVQzOTRpQWRmY1g2Q2VENnk1OHF1TDhua2lMQUU2ZmRmSVdMT1NqMmowZ29nSlZBdEJUTlVFdUlyczg0OHo4OEZCUC84d0h6ODB4SWZWd01FWkhQYUJTSk9od1NDMnZMK2pVaHZSdXRHbUt3WENFTkszRCtkSlJCWEpHemZGVDN5Y0R1amx1TTlwWlk3NExmekltWkRGQVRJVExFb3dhU3JjQWhCTk5CUXpJRzFmNFVGTWNUTnNOSXY4VTI1ZlcyWCtjSzJuMjBpaWpNTnlTd0RnSFpKMnZUOTdyMTdubWhPazNxK2FtT1V0SzQwY2RkbjVUb2dvSTUzODZBV285YWE0Qm8wQXgrb1RmUVJGMmE5VTVNbTFDbmdiVkZJQVV5ZkZmdWNWNlVDRHdLZjdocVNFcVJ0TVJDb0E5bllnWllWVGpRck1CdFRFYlZaZlVkbW82UWhDaG85c21pRGJBby9Lc2hGOWlERGpNTmFYZUE4OE55T0lVT0l5QmlvZVEwTkY5dGtTb29BUzc2VEZWUWducldiWkYyb2tlSDlUSTBRRnI4VTJMU3I3MGsvS0x6UU1FTnJCWmdRRmh5ajFCc3VNWTFDWVhGWVY2Slo5L2tJUmhRelR3MThQVjJHalJRVzRONVo0dWd2WGsvQ2NZOHRBbGhzQnJ0Z2JzSm04RTgzZ0FEbHVxMHV3WnluSjNvRFNSSFZPRlJsQjVIZHdyZGNqdEZYbm1YcFpFaGY5eVdDV0VjeXUzSU55U2xjYzMwaUpZcUNScTUvWHc3RVdpOUJ3YU9iMFg5ZEU1M1NYRCtRYTdTUHR4enBxd2Q5RFg0Mys4cEZRNWVYd1RKaTRxM0Vicm9vZUUxdjA1TnV0UlVLZmZHOTlmVnJaZkZoTzVpNkloN0ZSSDY0eUxDZHNWanNGend2OHMwdlB0RENSWjRMZkEzaStlTmJ5QWVlN3M4TEFEazc1Qk56d1gyVFRrcUlEZ0x4enJXWUFxUW94cUpCSXNiZ0JST0RkaFN3MjRDK1ZhcEM2T0dITlQwV2VnYlJOV0xiOVJZRXJRR21qK1pxTUJ6Y1Y3VE9kV0hpWm5uMWtpRVdTTXplbVZ1K25pcVhBRTdSdFNvU1NURFhVK25rQlVvWkJpMmlTMlUwOVdHQ3J1eEhUREMzSklSSnVEZHFHSk9KMFhSNm1qYzNUY0pCWVVZbDVHRktBVUlNTkRCYUtvV3hDaWpBZ3Fhc3ZXVE9nV0lmaXhKMjQ2TWhRNndGcmF5OXFVRi9xZDEwb3V1KzZaZG1NQTBYTjA5c3E0eXQrZHp5NzRTS1ZlM20rME4rTklMeDVIczYwcEc4QjNNRnRYN1VCb2VXb21BcXdTSWJaaVpUVFZZc2FDbktna0NBcUowcVltUmFUQ3Nqc1dxcGhZV1Vod2Z6WWdoc2VvQjFSSlVVQlZMWk1Ka0k0RmdhWjBBaWZJZHdiUlJDZ1JKRVNIZTVVd3BQSFVoa2syaDNPUE85TXB2M2lydk5mMEZCa2IrVFFHdjVrSGVRV0tOVjFUL2xaSUdWb05PU0UzQ29XZ3hxaTJBSXo4aGczZzAwcGVkV3BQODA0RjZNYndyWUF4cnRjaEh6SWFFaG56dVo2eFZ3M1YzK29pMVhlMXI4QldrRjZaeTBPdVlSWU5KRXp3VERkQWx4bXUzQm5zSU5adWlIaEJZR1BvRjVXelVONW42UVd0NTBBR3ZVVWZpSHNNdW5adjJHOHJmM0JxUXhqcWVBMi9MZVBVQ1JPSWR5YTRadnRDSjJ3ZjU5ZFN0dDk5VGFBOStQL3JXVGl0VFZyQW9PMGFERCszSCtRVXZIMzNrQXpWTENXQWxVRy8xanBlL2srMFJkQlpScjNpN3BFMy9rdW8wTFFyeEVWczlEZTZpTC9BQ3NMWlJvdFNUb2FMUXNGT1N1Rmg3M3JMcThHeThpZDFvVC9MR2hoRjQxTUNBV3JCSXZVeUN0YkhEYllNdnVGV1hrTVBNUlFSV014RWNoQ1VOS29vbENvUlhsbXlRZlI0cUdCUzZGQUtjZlc4VGRFeDd4eXNwdUYvaXJpNzVwVS91RTd3U294NUpOazVPd1VlYlJJM1FEKysrSWVuY1pNYkdURSsza2gyUEE3MzVIczlKa0p5c2VNdldxN3lHUmZhaGFlZGlyWUJOcE10NFE1Y0hNOFhrUzdhazNwRFhsNUVGRU9mQUpqcXpMRmtIZGs3OTd4QmFEY2R4VkRBR09SWjNKL0E3ME5tcE5PdkFWeUhlckxYaHVFZGpaNjZaK21TMm45T25lZ2lucnBqYXREOFF3KzNmdklzeEQ0WTFUNi9XNHo4RGVlRk1jV1VKWUNXU0JPNzRiOXJDSFRBTE0vQzF3a0l5SXBuaWF1QVg1d1h4SGY4Mk5CV0lPcmxNQ0RyVkVCaEtkQmtjdmF4S080Ukg0M2dwTkg0MUN4UmhKZXloakRwbTZVK3ZBb3R3aEJXaGwwZGNieTBjV2xqNkN2cUxxenlzQ0g1OVQ1S09BbHBSK1NzWTJvTWR4THhzeVlUbjB4Tk1nSVlWZjlHbFR0b05HZE5iVTU1UXlNREo4U2RnRFFZaGF3aVVsUDRjUERlUGhkQVU0R09DQWY0MU1TTXNYaXp4OG9paEdtbktualZwZGMxb3lJWGMrZFRUSE1BUlVYTmY5M2VSK3BKeWJNL01rVkk5RlFBQXRSTzNYUGRsNFBQV0VPRVREM3MrMENOTFZ0cW1NMWx4VktHL2JnM2VKN2tid2NLWlNzOVIzV1VGS1FtdHJEdStWcUtpODdrTEFLVkxtSE5ib3VVeld5ajdGL2ZuYUVNeUh1VHdEUEMweURUdlhFZWo0OE5aZG1PdXBaRUNlSVFid0RobnVoWUNtazRobzdGTktsMU1EV2lsNjF3MSs5V1FzYWk3V3lKcERXeUloRGdSMmJQTkNNdktOQlNDYmd1Qk9YT2FZemtDd2NObmI4VkJEUGl5THBFSURmeFZhK2Z3TXVTb1lEWXpFVXBPdkFEanYvS2dPaFZiaTRTMEFTOHVCeUFsclpXSmo4OGppQ1kvbUEycndtU1RXbUg0VFB2ZkFBRTViTEd3aVE2N3dLcnNaRVNSQjhFMlBDY0ZwMUtDVnFaMm9YRUVzZGV3YmM4bzJUZTNNNE4vNG9veWwzU2hscWkxejJjT1B3aHFjdEtJaEhwYkZibWlPNnhIS1gyUGFsN3RGZzFTRTJqYU1JQVN3Ni9taUVRWHZhSlltTkFKV2dWQUJuRU1qSkNCSUJsTVNaZmpBODNvUzFVbUNCbzIzSTVDV0VIVENzcHBvT0QzRVFYUkJObStZNmFjYlJDdVZEOEJKR0FFdlVCV0NmOWhBQmJjWDF3UWhvQVNRQmp4bnVWbzJ6S2JJdFQzT2dDVmxGVHE1Qlh5NkE1RE53Y3lkZUJkZ08wT0FnRFFzaXRibzNmbk9DR25WZ1hnVVlRVStaOC93K3JDc0JST3g3SGJRUWxzYTVySzJ5U0RsSitFVzcvWmlWVmxJbTFTcVNQSUVlcHM3eTRtNFJGV3hDMkxRSStnc00zdVdqTXg5RDZPcklmTDNNbVVmTXdMdlNvYlJaQ1ZhLzRZWmZzUWFod3ZCd21VRk8vMlNMUXF0YTJqaUV6eGxRSCtIQ3hCTmlkbGZuenMvUng4UGcyWk80ZExPTkRBQzhwUVZaNE1oQlkvTjNKTGdpaVp6ajY0Znd2ZS9YYzdjbXFNWHo5cnRaTzRTakJ3UEw3RUFFNE5WNkFqVlBURkhJTWpGemV1WUdMRk5aYnptU0lnT3Z2L1RlS0NnUkRmSkZOSEUrZkNnUndRSVl2SVVrUDVFYUwyY0REam1SYmRFbVJ3bitiRElPQ3ltNzFHUWxRaG9DdTJPSUI3bHk5TmhESEs1Tm1zQjNjbnlxb1ZydmJGNDlsYVpINjlScVBTcHRSTHIrRm9zZWZlbmx6ZEJ0cmg4L2hENXVhSlMwQnpFUmgyNWd6djN1UWNIczJIdFd1SHJIZnlZeFNGOEp6TzN0NEFKM0hQSmtpbERwR0Y3MGFwc0JiODZZS0p5bzFkb24rQWRYUnM4QXFCTTlGdzhlMHUwcWxnRUMybW9ibXZKZkV3cDdDc1FhQ05qYWU0Q2d5dUcvbVZLMTVTcEtjRVA5ZktmVXFMdXpNeU02VGV0K2xKKzRYbU9HWU9KM0RHZkxaK2ZDZ0JTaWx3c2xDWnZNTzJOa3E4d2QrS1BtZ1kwVVQ0TWtmSkZ6WEFjcThXeHhnRk5rR1pKN3JseXkxZlBaT3M0RlZzdDR0UU42bHExUHhmcVpBWm5TZFhwVnBsMGVkVEQwMTkrN1hRL3FXSzhRTmpmaTk0MlUwQUxiZ3RWQ1NOTXNNRk15TUh3dGg1QWdCczdNQ01FcDVWbHl1aEtjbFlQak9pV2pkNHdWalJENDNobU5iRFpXM2xQSmRZQ3pNSUE4RmhPeXhoVzVXSlZ2NnloZlV1Y3lEa2V4Y3haMytCeVFhN3lGcVdYbHk0OHpoOElsM2RjengzOWJ0Vy9waXBEQnJMd05wZUdzSHdhTFpjVm5aN0sxcjBHY0Q4MmF1ZldnMVdwZUFTK1lBUERJclZUcDRXSVRQQVUxcFYwQUVySXRqZ3cxQnVJRW9NOWd4YXFvbDRSMVpWbCtRckVqMFRQUVF0c1d3b2dDNzhBM2pncGRYdldSbjRDek53cmVKSFEyK0Fyamt3R0dhWDhxU2FUcnhYb09ZODVEN3ZyYVRtRVl1Q1ZXR1pqWUEwaVFMbWdoSFAvZEtydEFOUUpRaHlpTHFhWG1aeDEwRUhudnNhS0lpeDVSVlZhTC9EQUNOK1BoNWg3RVJWV2JWRnNpVFd3Vm9ianJtdEl4TWpGbExZR0x2Z2lXWmQ4L21ueXJ5V3lIUVExaWpBQ05HZlhvUFYyMHJUcWNHcWQyTkxQeUhRTmFrcUVXUXAxQk9uVXNtejNwVit4eW5xQllKVFJ0VXlENWlWOTR0MkVJQTl2OFF0VStMZ2xZZlRvSUEvN1dpS1BCNkpkdldrSVEvdmlVQkZXSVRxSlFMcEdXczZLMFdIUDJPNFRpTzhzK2VKRUtRdmh3bm1VOEQ1YVBJSk1wQ0hGU0hBNzN6UXpReHArNEtIQmczcXduVXZ2eHpBNXdrSllqdE1Nc255MjVwZmJUU2RoSlRqZGVLY2JCTWhPUytmTlVKS29PWUZTMktxb0IwcUliczVWOWdZamozZEMwbExMcVJnWTFySzNuRmV0OGZoalhPaWJKRUVFY1RrbGZxYW1rVm5KRjg1bUIyUFAzSDdNRldBQURFbmRrWUtFbUpYVkNkK3RWUVh6T0V5cXFSK0xld2FJb1NIdjEvRU9CaGxrTWp0Q0FKZHNpbmwrYTFWRU1kdzFvRERoU3lEZDBKczdhb1dqMzdCUDM5MFVmcnJPSXNUWHJyZ1p6TDZjNXBCc2xyc0VDNlMwMU9LVHVybEhaNUI2VDNsTjJHbU9EZWhsMUwyVmM1a1dRd2d3UWV3TldpcTV2cjRPb0FscTNFTzBDUWE5OUpMM0RBa0YvNERnN2VYdTlmdTNFbzYwbmh6dUR0d1dkNlpGYnpFbG15bVUxbDRBcWFSVWlEenVIcTR4M2FZUWVsaXFWV2kxUWhsa0JrdjZFU2VsVEt0RGlWYUZRSWg1UWJSWHV2ZU5zZWd6OEhaNklqNFZ5SU9TbytJc3VnRDk3dkNTQ0dOclMzeS9LdzJGcGtiMU1RZE1haWdqR0Z2TzVzTHoxYlI4TXdJZjZvS1BkNVdVRlRJbUlRb0ZaUUdmSGhWMDQxVTZrNFRzTFMyalQvcGVoZXdBU3VUQVp1bk9FQmJmT0dVQklyNlJTZEJNWFhTTkprc3NHZ0lKSUQxc1NCVlBlYWhtbEQ4by9vaE84c04zSzF6dTIvbGpPTzl4VmlRQ1JYWUdHa0k3T0FFZXNJWFVydVlJQ3U1cUpnVW1Da0hNU1Q2QzRJSU1nbzhaclRPbkVrc2RrNUNMV2dLN1dCUURFeUkzT0hadjFteFg3SXNvaUJUczBGWVNtbkVWSEUvRHNTRkV2R09RSlRVVXJaelF2cmJ3OUEzYjJRcG1zK2NBZVBVTjN6bHFhN1R3RFBqL2hJVWxPQ3E4MW5QVGIzOGs2R056dTFYb1U3Y3pLbEtQbUFNbHByMmRwYXk1eHJwZkgrTXBBemRHNVVMNjVrY0RLTXBHcG5RMEVIUGk1eGNKUTFFbDRnMFU0eWxpT1FJUFBuSVRZb2crSnh5ejRKcWIycTJzdmFBMWtmaFB6WmdPeENrUXVBZTBkSXlncGxjT1M2V1ZNbEtRQ0kreUhwazU2K3FYOHBYMzNlSjVmRi9QaUhCL3F3cklBUW9LUnpwZ1BJY2JMNUJ0cEIwN3NTbG5vcGJtZXVkYzVaU2kxazVPa1pwbVJKWFJiVmlxcWFnVGxTMzBWSHlDM3d6blVLa1FLMlV5Wk55NGR6VUpOZ1Fmb3JYMXBCSlB4Y1dvWE1MM2pOK2lFalkxNDAwb1lpV2RvUzdxY1FnejRHTXBKRkZCd1pCQzJHRHpjbDNRN0E2c2tLQitSMGN0VnNvc1NRYUUyWGlVUEJUYU9KVVVsb2RVbXZKTVJqSTRBbloxTksrSTBnN1d0V1FPS3hTNktPdUFWb3kzUnd0MmFnWDdOL3hSVDhmaUVyUWxNaWFZZWFnOFAwTitYQ0NXRmQwSkluWDdlNTFwYXBTNGovbERqR0FHY1pYbWs2T3Z5dnhkUGxDamFuVSsvY0JLVFVJQllSajBTRWRObzgzQWxVQ1ZKVWFVZG5tV3BXNmgzWmhzYzNHbjJZOFREWDFBTXpXRFEzdzEwMVNWNHd3Vk03Q3FidTh2cWJUWDZZNWV2bEhKTmRpUEZNUzBTMW9ZZC9xMVl1U1dKQ2JJS0Z4VGk2S0syTjhCQ3hhbU9JNmgxKy9VMnVONGhwdEZGZzBrS3BsSGFwNnNQcWVpSWJYQXpDSjkyYU00SmJoRFBxOEhpZTFaT0dWUjlXOGYySG4wRnRvYzNVd2VoNkdKS2FocHdsV3NXVkljZ3UxUkMrOWFIdDVad2JYYm95bEZKRll1WTZvUlA5TWxFOHBVUE1rVkNxSEl4THRFWFBOSHliaExROGZuWm5VaUtSUUtyOFpzRnRjUUt4UTF1QWtPTFZCY0twVnNjd21TbVVQb1RDZnA0czN5R0s0em5CKzA3a0c3QTFxZ1V2dVAwRUtNMjU3ZmlUaHRRRk5rVEptandBNEZabW5yTUpEUlk0WStkeXBwOFk3dVNDSHBySnpiMW1VUDNveGdZUkh1WmZWQ3A2SW1qSWxEdng4eEZZWm5KK0loM1hvS1lRRFF6ZFc3b1RTUE81K3g0SXlMWHNXWlk5UkFpVXB3SGVFVUc1b3JNU2g4TU1DV2xpRGdvdml3L0d4a2lIRGI0WHAwN1o1V2xGT0JxY1lzSVZqQ1NPdURsVXBsbHNFd1NJQU5TSEdxYnpBY1ZWRkh6MEwxeXNIbldmU3B3ZDhDd1BrdW1TbjlKVzJDVVoxaktnSE52YWVwYzRoc0xiem5INS80Z2Y2NE42MThVVVJqbnJXMklzcFlPU2MydHREL0djNEFsWWllU2lhQnV5ZmNhOWxkUWtXZGk4SmZ6NkpDbWt3QjJNV29wWVYzY3pRN1BxWFI4UFNYejRuT1pCQlBLK1plNVQrTms5TW83UjFpZnNLOFJrZm1HclVTNmJkMXVFNkNmT0o0VEdJaTQyTnJ3Y25aUVVOT2JHanRQamh0OTFEc3Ryb20wbitTZnhtQ2hCU1VrY1ovcnBiVG9SMUJ6ZEpLUzYvRHFDM2pXSmNTSG1VVUkwVnhyT2lJYndjRERwcGM2NGl6ZlZYaS9SMWdYZGxkZHcrNDhoNzBMbkRzSFJFVG5HWFUyZ21yMlRDNWNTeUQ1RmprQlFMYUVWeUZWRDhpSFpQb01nWlQ0UmNjRW9Ud0pDRVUxbnMvZ3loM2NrSEczNkFJeThiNHE2Y1Z3MExrR1M2bUR6RmJZajVGUnBRZmVvZUo3MTJXTFZVZytsSGxwT0FDb1lSV1RtMDBabnZ1aTZOT2dPdXR6RkFqZHFERkxWUStBMjFMQW80NjZCOEZ2Z0YyU1laV2hZdllNcTJTUllseTYyVVZxa0Z1NjlqYUZVakw2QmExQTF3cUFIVk1LNEpxOXIxWUNwR2NCejBNcWM5WDlBbUpRSGRRa3Biem5GNnpuUkhrMnZrYUZjaXVuVU94cVd5dWpiWEtjRDlnUnh6Q2dLRkh6dHIvc1YwVW5lekRpZDl4NU9DckVCQUgrZitkYmxZM3N3WG5tS2hSdlFsaTI3Y0pDV0FVVnA0eWczL0tRc3hRVnZCZTNENWttRlZ4ajZxbVdZRTJUTWNhZ0lLZHc3cWdrSk9hcG1uMkY2dHJBWDg1ZHFkbXBpREVZWkNLa2RlM3lmemZjd2haOXBYdG5MbzhYK0V5SUVWZklwNE1rVkhRM2I2bzZHRUZPNTgyNkVNTm1tRWhCRFI4NVFWVGtSRmJtd0ZmYW5WOUZTc3RPeWNIZ1VsczcxZmZPZEprVG1pdGQ5eGxMUVlmMGJWdUIwSEtmeFN6QTVxUnF0SWZkMGhOam5OMjdYV1lXTmtDdnJDdjB0TGpaRjZFSWlDa1lqODNmV0VEMGZkaEVwV1JzWE5jTnZyS25MQzNjbWRMQkFVSzFpOG5vY2F6Zi92MklBUDVqR2JHQmNGRUdjNFVmczNTak1jM29pWjR2bmZRZ25LNEw5aWlhZFhLRkpTZ0g5V0RtdUk0NGxNY2hOZ0tETlpCWEN6bkFNS3BkeFBVa3hZZ3I3aU1RMVpCbFp4SEhHTXlsNkdkUlVBaFBqVy9OeFJENjhHY0JCemlYeDFEdjJReWM3d1h5d3BqY0xZbjAvZWg4dE8zZkR4TUhuT0plRnExSkxEeU5vVUcweFRHSGMrNHl5cmpzaFhBVzUyd0ExZ25yWjRyT01hbFMwYTZBazF6WGV6d3RFQnEwN0hJaUJ6MUxCeHJha0VyWkpsVVBMKzh0eXFEeXY2bnhVV0xkcExIMTNIWVo4Mk5LalJ0dytpVUd0dU9VZmRqakF5TVVzelFxRFdHN29YRlFkOGhoL3YveVlwWnJyeTFSb3ZJSkp0Zzd2aU1UQ3pTWDhKR3crN00xVzhJdEtXbHErS24yQ2RRcXNobVdZQXJla0VZTmxPdTUvQVN0S3dzYThZMUtHOTBrcytDdjJsRkpLR2xXcngyOHVTa25xWjNXb2xYbjlKUVJBeHl4Z1h5L01FYmRuRE9KdVZUNXRmb1JTQ29RVUdUUnlqUmpwS2Z4SDFVQmFsVkdtSXY0cUdPby8xWFVJVFN6VEoxbm9pcTl5aE1JT29aWVFjeEtQMWFqNW5hT1preW9VRlZ5UUNZaGhjbHRucitzWDJGQklXVU9pZk1KeHVqckl2NHFaR2g2bkVkMVY1Q05XQml6NllOMnJJUjRkNU9TWmlFWHl0d0R2MU1FNXhhd0VmTFBHODF5YWhjNTdNYUhTVGxKbUxKVXpZRmsyUE03cFFLdVltYitUbnVUK2JROGNFeHZvclBOeW4yYUNrdTFjOHRyVTVsR0lSZnpaRjAzRU8xK3BkQ2gxOFlmdzR6M1NCOHJwN2ExczNRM3NhYWMyZUxKa002R3VFUWpjRk1xb0FDOWlaQTRYOWlyZENFdHBYYnh1aHd6UXVKNElGeVJxdlIwVGhudFpnNDRZRDNydTlndXVkMUdGQmxLbVBjTkU1YmNHWUVoYWlOV2FMRFdObVBzUzRVaUJwZmdmbmFlajBhcHZabTd6QXJBSE9Gb3lhdXhzSSsrSWVTOTcyWmtyU3NLQnh4RXphTExac1pMQlFTT3pRdnYydForR2pFVm1YaG9lQjQwZVVRNzVqcUJYd1RHSE1YdFNHR0NYMmhFd01kVTcwTGdkZGRSWU9FNDZ5cXpIdHR1b2ZzYXhvVWhYYkhkdGFDT3hwcEJaVmJKSkpFRXkvWXFRU2d3aEVNdXFPU3pPKzFSYi9hSUVOVzBzRUlDdVNxbkxOb1ZKUmhjUkxyNjJzT2Evak9CWmFCNWZ0aVNCOURFWkFGNWs1V0lOTXNvYzV2TktyREI2TjhqWlRJbG9zT0ZWZld5Z0lvQ0ZMTERveWluUXdZV2hZMGRoR1BEUVpQZjh1dW5xSFdKRW9FcmdqNGs0c3dtNWh4dUltL3JReXdZN0FFT2hkSE1IMkdnNjdkOURzbXZvVG5scGpkclFXZXpUUlNROSs1MVRGQVdGb2hWd1Q0T2NmaEFBVnhZUkFXc0dCcHNuWXZKbUJqQUZvMUdJd1NwOE1ydXV2M0FETkI0emowWXUxaTJ2dUZOYzVvVDRkU2dZOG1PN3FXejFnRVhzdkFTR2dWZ2xBeWdaMWZlZDdvbTJieWk2cVFGVHNxSngrTjJuUDNicUFGL0xiV2NzOFIzRXpFUk15WkhReHdZUkFmL2NhY1lkMmtqTDBNNGp5SXd2djg0ZmE2ME04bWxUM2kwU3ZkYlgwSFJRSlBZY1MzU2U4WEtucE1PdU9uTjdoT2d5dXQ4WVRvWUN2SzRFbHE1QUJBZW12c08ycmNaNnVxWVVUREdrVUVzMmtlSUZOVmhvVUU4b0VmQ3EyZU5ScU9sS3Q3aDNObktLQ3NsYVppTnJnWGdraHFSNDMramM2ZzBPREVCWTB2M2lzb3ZJbUI5aWdxWk43NUFlN01tZTlCYlJEU1lGMHdoZEhzR0VGdmdkTEVtOEM3aURMWXRTUnYrTFUvQmdCVnhCcTBzRHBUbUtra1JmWHJXWTdoN2VYL0lsMzZGNDFDUDc0UkdvdGdQbWVqZ0V6OXpBNEJKeURSQmlhV2s2NGk0d0ZDcmFQR1FzT1V6WTNGcHIvQm9TQXFheHFZOVFwMVZnSWJLenZTQjZRVml6QjFZQ0dqeXBvWjZ6ay9Ka3lGeGxTZGN1TnJnaGdNYzhqQjhPT2F0T2hKRTZOVVlVUG1QSTNmeU5zbHJGRWZXZVpvOHFjaFltc0FzV21tTUJGU0JOUTNmVllTeDMxeTc0a3cxWVBXRE9jMjAyZkhNRzlCNjJYeUNqS1dvV0lEcGtha0RMSGNjeHZmTi9TMXJkanZXMXJ6UUVESXlSRHFYRzdETWE1TVNRbEcyOHN3ZzhScEZESkNFc1hLalJlNjM5bWdZWWREb0dpb1VRQ2VpUEtwbWRmTnk1S2p5ZVlnUkVDYXI1eHFKZmNuNVJIRHRzSlVqdHhRK3JOQktCYnd2aldnZVovVnZPQmZKWDU5aDdjTkl5Ry8rOW9JNjBvWnFwbkRtZUZBdHhYQWFoVERTQ3VPV1RJT1dEM0tCTXpya1dtZGNYQm5WSG9jMnZuZTFKVWQrMDJocDBmWmtWanJPMDd5Ui9NZkZ6TXRFRmpwT0RiZThBWWcrNHNvMytOMEhkQmN5WFg5RmNOKzk0L3ZVM3ZudFJodHgrN2g3NHlWdHdJRUFxYS9ZMjFHY3crRXFTeGJJcHQ5Sk9IaVhyNXViQjMxNWtObVV4dExGU0NqWURBM21DanYycGhZdEpSUTB2eWdOallNL1VvTkcvTkJrMUhEWkdEU1dpOTYwaEFwZVlCQmtjRDZPQ1FiQm5kU1A4ZGMwV0I5aStBcjhZUm9NNkdOY1dEYkNTS2Y2Y3graXB5Rk9COS8vRTZhZmZJYktsZ016ZEFHeU1SQk9aOTExR0M1Y2ZHRWI0bHphVFl0aGwzWDFya0hxM0lHa0RvSmlvVlBVUVY5dEl3MDdLY1IzZXcrNFl1c2dEeXptNWtiaUZneGNxVEZEQVE3Uko2SEgyZG5LeUFrT0JjbEIrY2dVUU8zeWFFeWw2TzFNcHZkM1UzMytweS9BY0QrQWcwQ1RLZHpSQTV5M1loalk5bG5oRFdrTWhxWklRMVhmelJ0am5taUJyK21FYVJueHFhUDVjYWFGdWJ5RTZUUmNjVFhUWldtc2xRTEVHbC8rRlBJcC96VW9YQjlTdTFCN085S2swa3FabDJEUks0SFF4djA4RjBSTjNxS2lodnFHeHZ1cUtPa2Y1ZDJmbnVpZW1JS29GMXExeE5YbGFsMllWajBQaVVDTWE0dTFmUzB4bUJjNE84OG5CQms0ajExdGxza29PUjBaTUVoYk14cmgvbjlzSkVGUDFQdW9PK3lKdzNVdXFIbUMwU3R2YU9zQk5pZ2J6QjIxclVaMzI5STNSMmlVd25veXNwZmVZNVJ2T0s3QUpSbVlGNjMwcitkckJKV0ZHaU5DalBoWGt2aTFzNVZNemdNVmFibXlHT0ZBcVNnOGZ0UllZN29pUlFndnFuS21CTmdQeVBUT3pVT0NHcGtyaFFPT1RWUy9wRTJSQkNYZkpoMnZURU1GajZWYXNHOGNkRkltaW9xWTBrRnRmbGgxVEFLSkhCaFV0RCtlRHdxaU13UmErUkdPR01OUHZXcDFBYlhGWUdRR0VyOVpTMEJGOUE0OTVaaXEzakFFVkdhNjQ0MlRYQmRML1E4ME05S2xhTkZxdE8xamU4S0N4Z1o1Uzh3NXdOV2hSUFJUa3NsNjNWZFc0YVFWQVZLSzRXZ29VQXlaa21kaXBuV1hWcFJKWWFRZGwxMXFsSHd3RDhYcTlpWTdaNlpNaHcvNlVuVS9HNVF1aWU3Uk51Z2I2ZEpKNklCRGREM0cxSDFaeGN1M0xzNG1mcFFxWFFMUEVoMXJPZFFpZlZnS21ya0RUUVF6V2hBZThZbHZ0SkhzMXpGUmZsN1VMenVjY3VVZmhEVlcvajErMTdYZU1aVU5PbUNNQWErdDZaRkRQQzdJZVNvVFJpT2l1RmpqRzVMamcxSmtYc2JvYVhCTDY5eGdoZHdhdElIaUxHcnM3ajhDRzJMTkx6YXEvRDE2K0NDaTZIRlVEQm9XS0JOV0NpVGtRa1dSbkRTaHFWRytpUy93eS9GcElobXgwaFZNcnN1aXZSQzIxdXAxb2dUSXh4bVVpSWk3cTRWY01sREFxWUUyd1dseUxHdEpVdS9weG5SY1V3ZFEzWUlmbmFPS3VlQ0MrdnA4NlJPQlhwMHY3YTYvWTVJYWorejNGcEtJQW5iMGM0OVpPRDBhWEthRllmQUdPUHpOSXczZkJCZUJQd28wR0pXZlJGVko1WUJiZGU2Wkk0cGF5Mk1qN2NnVm1ydzc5ODFvRXpnMlEzUGFxZ0pybVBLbUNZT3dYTlJ6Mk5HRE5xMG1jK2tRTElFODlxYnVjRVMxQmlOQ2Q5TUQ0U0xMRm9hbXhhSWwxYXcyK0FjeC9NVHhwaEtNZ3QyV0ZwSWxWcDJIRGorTWl3RGJKMnd2VUgzNEpldWxHSS9GakpzeXQ3ck9KN3VCVkVyZ1dQdmk3U1oxK3hXMGZDell0djVFRnppK05ETHR2WkZjUWFIMGtRT211Zk41MTNwYmw3b3FJVk5Ba1dsZUNEcGVRUEk3Qm8yN1k5K0tPSm9Udm5kcUNoV04xbVBOME55TmVucFlHR3F1b1lwcjBVWVdLOTNuZEdYR3JaTUxTUEJTb3gybzEvdUJJSTUvT3ZvRkdoSmJsc00vaGJXVVFBb1RCdWdTZytCWDQxbXcySnpJRng3WDNKZElUODNnaTRpaUEydnUxTkRCczIwZ0JCRkVCN1hCYUZFZDRpVVorbzIwdzFCMzNEb0ZzeUVWdGNnMHpUcTVmU0JvZjhHRllsQ3hucU1tYjUrOGRlV2xYZ0l1L2h4NSt1cnlYaFFRSkZ3OFpYWGFTYXFZSXFOdWxkcFdSMUh3UUhPQWZyZU5xaXlkYkVlL281bUFtTlFDWU1LcHc3WnVpbEw3cDJwU3hZVjdCYWNvV3loZU9Zdi9GMzh5Qy9oMkl5c2JrZWtOcll5OTc5SDB4TzVEb3VRekJPL2UvWmowRDFMeTh3UU00QmxZRUJWdmRhRUZqRFRBRXdyL2U3VURBWmVlL09KVHZuRlZBSUxOMEtyMEV1K0V2cnA5TVUzZnpjSmlFR0RnaW00dHppQ3VOai9KQ0lhSkpLR1BySHhobmpuU3FHVzZZcHdSUlJnUjZjWFk2WnBjenltckF0MW9JdEM5a2pvSGdVUHdCcjBSbXdITTdjV2tPc0xHdW5vcnJKd2tYVmF5VTY4Qi9KY01rNmwxUVRXSmNERGlzamhMbHlPTDlPaGVRVVc2bTdXTkxxcUtPQTNVeTJ5TktJaC9FUWVxMEFHaE50elF1QlpNT0hBUGRVL3c0MkFLcE9OaGxlRStHa1pjNjk1T3pQcWtDWncvSU1ybmJ5K0FhdTBWTFBHb1BjTmlZMjRDZ3JYdWJaR1hTL3ZnelRnaG1DSCtjWUtlaFZUWlVjS0dxcU1mbWtNOUNZQ2Q1ZnRLU0IzSTJKTkJBTlJhVGJBRml6SlNzMWNzN3dCU293YlVzcjFXTnRNZjlNeXo1L1dQK0FSUjBJbGpqdDlqWXVPWjJoSndQalhvdkhNR0dDMjAvd0ZnbjV6T0V1TmFVZEg3bkV2ZTZOeE1QbWNjREgvc1VYMndoNmxFRGlnOFd6eG02T3hFVFVKZlQxU3M4UDNVTDVYZU1nMEFobU1qSmh0YlRvbUVtTUdFSk5BSktHR1hTd3VBMEZiOE85eEN6aFJ3eU4vMDgxMzIwQVFOeE56a2F0cll5MmFudnlQS1Y1QlRWMTAwSS9XSm5jTGJ0SU10Z0hwV09JRXVlbkZ0RTZBR3hENnJLNDJaZGF4YXl2R0cvbStnTUFEdmo1S3p4WlhlbS93TlNuZnE1a004OXBEZk1PY09iWEQzZ2JUc3NnQUtUZ0VZQ2FEK2RrY08rYjY4RzFERzM2NzZtSHhVbWdQTm9sOUhnNVl6OFBrenE5SGdBNkZqTTA1WGxDMWE3RXFIcC90c0JDVUVlZUdPYXZjZUFvSWRYNytUaUdxRTdzTzNVTmhXTU41REhPVGhjWlVOR091dS91bWdDUDRmT1c3SXYwTVdndE03a2hMMmxnN1p5UEpKVU5DeWhWcVNOaHJTMjlJdkFtRjI2M2dZUTNSYks1RFl1L01KdWxhTGwwZ2lGbTQ1QzVKcTVVejNHUElJT2gzbWEzVFZXVnVqMGJRdW1rRHZ4V1RvenZuanFwUFpnL2ZiQXR2Yno3OTA1SVg3a1hEQ1NEa0xVZzBJbzRNR3UvS3QybFREN0JzU2pnM3hIbmdGcjIxODNxUGtFRTcwelBEUlNuSTFGZ3pzOGZsdlZIR2dGYmV4ckM1Tnd0T0YzT1EyUFJONkJwS3VoQ3krVm40WEdkRGJwWll2RnUxNmRlbnY1eUdyZzZFRkNTRTRFV08wKzlhM2k0RjN4aW9Ua1d3V0dXWGFLK29RN1BwMStuZm1KTlZVTU5zNGhnRWdlMHRFb1F4RlIyQWZ5UnpDbHpoeDFOZndERlh3K0xXQXE2WkZDdFl4UWVJSjdnblEveURPOGlkWE1JeUhlUmhCc0tjcFJRTlJlVXBYOUtQYWg1aStVa2Vpa1haNnR6UmxBSk5Gclcwczk5NExVTVhhNHZRbFBuYUp1TzJURnRZZUMyWGJPTytEcE04R2hxY2FqZFREZ1J6VFJINWRCTmhJQm5pQVhMQnJQRE9kUGlOZ2xlNWFZNGdHamE4bDhtM2g4cW53MjlvSWpxbmFGRUdPeWQvdjRybk9jSFVKMXlZQzNqTUVpemJPMGZBemFKRWhBbHVrYU9lMndpVzlPM29kdFRxVG1RMmQ2MWEzanFWcW1vVFZyOHdIbFZGV1R1Q3FRVFpEaVQ3eE1DQ3RmcE1qamx5bVRXYUtaUVpLNHQxUzgvQXJQNUorbkhHWFdiUnJISUhmaXdYeDBDT084NGpnRWcvZThlV29NOUxCaWdXL1pyKzJwcWNyY2FQZ2lxSW5rTWdqMEFPT3RkRXAyRlZQc0l6TFN4YThtNWl5b2ZLM2lTMGdmbTROTGNibGN1ajVoWEcwMm55MWdpUU9uWlROLzBhU3FVaTFiYk5ueWlvb0d0N0JrTE5SNTVYaXBRaDRFK0pFN0Fqby9wZFpUbk4rUkdXQWliV0FKUWk4SU1Od2Z4VzJtaFY4dVZpTm1qVFRhMEVPZmZlZ0tET2pKRXg3djdSMDIySjgwZ0IvQXdLSGdNTWRJdUpGak0zRGJoN2pEcXp6a3pwZFlkMUt3QnlSclJRMDlHZ1ZMTVJaQXpESjlzeDVxY2JsRllCL0UzaHo1c2F2R0pMdno1Uko5bFZmWjJWQ3dRZ1JmVFJJY2ljT08vM2taTlJ2a1hZOHJOcHk4bmRsNG84Q2pDbUpMTUJuNFF4OVlibDYzQStJU1Z6UWF5UnRuN1FYQ0Fwa1ZLVXRjSlZZbFBTZXNxV1AzNUtrck1vWXRRQ00yZ0taRDVpQXdyQlZpdm9TWHVxMTQzMk5waURMcVZGSDNJdS9Zb28zNmtwVUxSQmI4RWRST0NMSTQ4NnVLZ05rYlBoVGx4cXpaQ0FNVG43ekpJUkR4TzVVbmpKVHQzbG00ZExHWDIyTGQvTkhWb0N6VGVtR1NHNUNEVUpIMTNJVnBYSHJkZ3BVdit5VC9uK09rU0hpK0U4RjZIMFNCTno3aGhjb0RzeUFFL1hZbzY4a3VBNmVSVXBJS0ZBVzlVZkRTTlJaOTN6cHFHN0tiVUpJcnpWTUdsT1BCQlZDQnYxVUdRYzFNaWRtUkpvcVBsL0NITkxRaWEwWDJXS0VvV3Z1bzZTRDRxWmxtYlBqQS9FUFBpdVZFR09SY2VIMXlET003VkNsVGxtdW5PVStmUzlHQ1lJK1ZIYm9JV0dtVFpUTUFQVEtqMEovbUVJN0VQRXpKcFp0SmtWeFdUTDdxYkxVekhBSERrYTE3WnhET2k3MTU1SERjQXI5eURGMGVqc1E0a3h3Sk9qdjF2dXFqbnFNaUNLTVlLZi9kdXlaSG82RlRzVzlBaDl1NEZDV1pwK1dqUWM3MnNqR2VwYVY5R3pMTUtqVmRITm5SRkRsM3V6M25XbzEyQ1pjbTBWUmVreUlJN05DZWhmcFh4bERCWjF3andLTWtLT3ZaQXVOejk1TFZnR1AyS2I3MXkvRHpGS2phSkt1dDRVcmFxSHpycmhxbDRNWGEra21henhRY0hDbzBkYzliYysxeng1ekFFMm43MVFseUxORFNhU3MzTjZyQXZtSWEwZFYvSXN6RFE5Nnh2UUZxb2gzU3hzNzJYalhtdFN3Y3pSZElTWUZsQktkdURpbFc4MVVYZEt1SzR1YzZuOHRLZE1TcDZWRDcxOGlHT1IrUFpDUzFzaDh1Y3paQzJ2RHRjeGNZOEpzVEphbWs5c3oxM1J0UTlGemtpMENTVWNPSUNOTU1DRUpTWTd2SytURnR5RVlzZXIwd2VJY2JVeTZKcFk5REEvREN1UHFrSGtNZUg4VytxdHNwR25yQ1ZycEdNd1FKem96d0hoR3VtWGZGNUxkREQvT3pZMCtWbWxTb3VnYmZvQnN6a0VEZFdlb3FOZXgwY3NGUDF2NVpOSUJOMWxSMWtEeWllNFBZTVR6UjMzTndSTjl0d00xVE5MOVdna21pd0V3bFJGV1dBbUlMeklGbWhZeVVXTjdTMzJMa2dFVCtoSE9wakxSSDQrSVJsOHp6WTMrdm9hbUJQQlQ2S0NxN0JVbUticFRrQ1pQbzhZS3dLTmtDQThjTi9BeisxRXlRSVJaZ3lmV3FQZGJJMlFnVG1RK0VMYkhGOGhlZlhnTEpYUzhCNzdvMHlLNGZnWmFKVHIyc3pCZGtmR2piYlV5V3llREJIaUxOT2o2ak9ESVNLRlVLM25SZ0F2K3RtTHJoRDhnMFEraFlLZk5iK1RzVFlXaHY2cmNqMGNBM1pxTWJrejJNOEtpMENDYzRyMU50NURoQWlMUzhjUDhxaFpIR1ZvVlhMN2RhTXIweXdndElCRnY5RW5YTFBEdC9XQVpBWjRVYUNJNkFGdkZDSEk1RGx2UU9zVTR5NUlFNXl5L1dwQ0xFMXpkT1BCa3NmcWtxb0UwNG1UcHB6akUrLzFPSHJWU2w3a3BQbng1cURtcFdqcW90aWdScWF1dkx0cGQ5QjBBa2NDTk1mQXdvR0d5VlEwRUtzYXlDUUtteE5TbEUrSHlVL2xINjRFUWp3UzhoVzQwdm1ibFhQUFpQbU5wMkF3TWNTTHlQOWNJczhWbGY5cFlxQXlIL0FyNmJzTmMrOWVGaE5CRWZRYWRQQVl2Q3IvZ25uTEFMREJ3VmhneEd6dWt4Qjl3eGJOOUxrMTJIOXFKUklIOWhlOVFNNjRiY3FIWWM0cG9lOXhERW9rTnhKQ0xPUFFVUUtHd1gvT29na0gwS2kxeDJkejdsUDR6d0kxMFgxb0JkTEZhSDNRTDRQbm1qQ0ppU3paNWIySllqQzJSY1EyRlhCSyt6S0hNaUw5a0pZamVHL3N4aldpNWJhN1ZvZytBb0tJMnBmaS9JQUcwYlM4RXpNYXhMNVZPMGovcGNZWmhFK0FvVUhMelh2UUpxd0NrVVJ5RVl1aEdIc1FMd2pSN1QwaVBaUnJNZVlvWDNjVmZSTnF4enBNYkcwUm8rV0IxNkVtUlVLSnphU1FkRERVOWhtSWJtZFVlbVA4emFWaURtaysyTmNiZ3FVRWM5eExVS0NRQmViT1FDbHJtaE9mRDBLcjdWM09pekcwWERiWkhWcmdWYXl5MTBGZ2ZxNWdPQUlzSjJhTTYraGVZTVNqZEpOdGEvd0ZOK0FqaWRTNDFlVlAvenV5SEp5OEpQMWZNaUN3WXp5NDVvdVpXdElhSURPRzkwcDIvTmlEek5oQ05qVDBMWnU0SXZxbGRzdEdEYk9sMlRMMW5jTE9PenFsUXpCWVZOS0VPQWxvWlRGa2lhNGU4Q3BtaEYwbzhNUm9wdTlJRjJjckpQWHVkVHhUbVZsRmdKVWI4UmNxeU1jQ1N0cTRINE4yRGZybG1kVE1IbXdMc3RCSDdUWTJoUFBwN3NuZkFib2Fvbzh5WW8rb2JPWCtqRjRLVThmcDkwekdpcTFGb0lKYTRpUnJ3WEtxTERmNVhGdWV5MS9TSXBlSlFmQ0FOdWlqT3VKMElkQmlWc1NKNWw2RGdkSFpWUTZnbFY1RHZBZzl6WnluWkhhYUJodXVjRFJ0YmFCUDFBYVpPMnZia2tIckVGT1g2OG9KaklsSmhJRm9rY2NvL2xHbXhtUXNEd0FGdW1LeXFveDRJTEorWlREVkJnRUpMVmUwd3hVeWpFaDBLaG5vSnR0bHNYL2xrcEFQNzhWMHZNRVNZaHNtYWpUNVRSUFJiME9Hcnp5ZUppNmkxRm0zbExBaVV4ZFNGWDU3RjI4RWszNUZFSXA0TDlzYUI3Q0F5bURBaVFvSlZBT3dhQXNLZnZ1UnZFYTZHUnl0MW82TGl4bUkxMmE4aDhIM1BhYVdrQ2M3QzBORVdESHo4c003NTViaWE0L3RaeUVORWs2T3g0UXd1UXdhZlBaeEs3eEVEVEtvZ0tqSlZHa2E1Ni9hR09OTFZFRnVleCs2VW5LMEpnN1RsdFhla2pYUWUyekkwSGJmOTNFTFpNOTRXb1ZNYy96dzI3NFdoYkF3Vm1sRGhzblBUUWhVZDZFWUhlbW1ZdmtvcDhLSzQwZzlUM0NtN0srY3B3a0U1RmgvMnVNdGVON1I4RWgwaXo1ZHJ0TTFRUUF0bWNOa2JjNVQzK3luczNtOUx5MC9ZOUw2cVlKNGp6dGxVYytzQzZWdkdNcFJIeGYwL3Vtckl4TXVBWjl0aXRrNkpJWTMwQzJ1ZldrTlNKeGFoQ0pLYjFibXJkTlBmV0NvVjkzeXl2eXdJTzc5U2JlR3Rzd1l1RVNubUNVdlkxQ3FOcmVCT1NHWGVRbm1vU01IUFJVbEU1VVlTYVRCR0dqQ0Urdm1uTUZPQUdoS014ZURuM081RFRDRmNZS0lzTUxOQ2tsbXZnRnBDczFqYlpFcjF1dnpYbmtlV0VwMWpzcTlrbllCR2Z4S0hxekhKN2VUT0FOT3JDT0dHNEh1aVh2SzloWUZySHJDRHZaQUhUR3QzTUl0SEJRSE1TZUlqN2NhWUkrcDRsdkZBMzN3Z0ovemhrOE1nMWFHU2xZM1lwaWxpVDkyK20vM2dnQzFuMkxUeERWaytVS1FWc0tndXNNSEx5bzJtQTJBK3hVTzhReVJGVjRXbTUzK2dOVG1FS25uVzJRK0hzMk1WYTFjRm1tRkNYY0VTTzNYZVNaVjVoRUtHWVNOUXQwaXFJS1NvTXFnT2JUR2hid2JaU25EaXdqWGNYb3pNd1pyOG9ucFIzZjNrMEhCdW1JeWh2YTNUT0d2ckNWRUF1ZDNKYUFSQ1gwQVFhNEFjSktwdTJ2K0JXZTU2a200V09jOHlzVG9iZmFmYmFySmtwMFF6bUhOTHRnRENyRVV0T2ZybmlidDk5WTFQak5yRERnL2w3QlQyaW4za3lBcmlsbjB4dWVZUTNNc2Jraks5NnBzaEh0R2dPa2NJbk5tQVNXektNU3R6NThNTEEwSFhZcVF6NTFZQ2tTTE84WWlWRUxMRlVuM2hRNjhDTWVxenlYMHYreENkL3pLdnpSc1FMRFZkOVEySlcwNldpazhVZXBrOXVmamlKWHd6YzhucHBIN2JRMWh2Zlc5blkvSXo5UjVXaTZZdGpFOTUxYUV0VG5WRys4QjJGemtZSmV5aHkyQ2lGRG1sbXVGYTdxM2FQWnRKMXBITDlIZFhGcmRBdkdWVFFZQ1M5T3dSOVZmWUU3NWc2aUpEYkRJQ0I1RVJFMm1CMU9aWVRpUlRIVHN5WTJJSHk0dUkzcXdXay9XSnc4MGRsejFUQmkwQ3dUb2tOd1VZVXcwcUpoeVlTMWZYdU5HN054SUtUN0JYUWlzd1JadGtvU3c0eWdWWWFWeTlyUVhpY1BQR1U0d2dvY1pWRU9UNjduRUkraVRoUG1YNDA1SUNONmJ3N0FGRmVUNEtKd1VVWWd0ZVcra1JWeHppRVZHdGhiVUlMUk9JeWdLQmY4NVVMeEdrR3EyWktGalM1SUM0akpRNHBwcHVmejgwTHhwUWFPNVU5MlNhZEZVMU9JUFJMTldzODA4bmhYUWlLSTFORFhiSFJzVGY4cVdwNFJEb0FMenM4bkZNclhKWmQxSFZYMEhYR1FTT1BGZ0FOdVpFV3JrWENUT2FueXZMNXFuSDdld3g4ZlEwbkxZR0kzL1RseEViRnBGdGx2bWxSTlpMS29lZTVsQnIwVlI3MHdud1R3RXRuaTZkd3kyK20zRy9xTEdtbnFrN3dxcTJ0TGRBUjVJWlJvbmtlVkxZTnc3Yys3SGNqeDRiekFHZTkxZkltaUNKMmx1cHNwd0JyNXkvUHA5OXc2WlUxL2JZZEtZK1ozMmRxMkVOeTFCVVFacmFTTmQ5L3FFNEIwM004ODRuZ3ZBTlNmY01qVzRMZnRHMDJQZkFQVVNBcXlhR0syR3JHZTlkMXJBMkFDRUVrSlBJZlBkOVN6RmVjUmpxYWRMWmUrVjMwbUwwc1IrakttQkh0a0FVaGtrbWVpTW5WdlU1dWp1R0FwNkxneE1GbnlYMDFMVGVJWjlLZVF3bUpsVTFLTGhiWjJONlcyQkFXUW5rZlFmTkZ2RFdGUktkdlVIaWMxNFhhczFOZlRSZ1pnbjc0aXZqR3NKYk1GZmNOYTdDVUhybjVrbS9icWo5UXR2Z0pabmxTMVQ0a3d6ZWtlNWlzTk1wbmdKZ0Vwd2YvTWY1SVNlaWNMQmdnb3RWOE5sWVVaK29sS2FoSUNvYkxqU2dyNFZTaU9GNk9VV0VzNGI5K25IZ0p1aEk1a0NGcjNTSkNwZWZuR2h4cXowZFpvSmM1Qjl5Mk9JWEVGdityQ3E2Y1hheXlmTGlQeG00U3hCdndBbU1VY2h2cW5peHh5d1d2aFROQWswVENVUlRxbVpraFhCWkpUYTZwaXppb1NzMXdmT0hXdHJ6TjdTUkd3d250UTFSSTY4U0I2S24vQ00xQVJDZkMweGZiUzYxb1VLaHorNElkQ2pIK0srUkMxOTdJcnlzMWhxTlJTNVVacWFnYzRRTkVWM1ZLa0kxckRtbG92OE5lNVdLU2F6eS9CSWVlSTh1eWYvMUFHLy90R1FadFViZ1NDdGloMUpxMVh1YnFKRkxLN3ltWHRaejZ6alhMOVJOQzB6cmVmdlpYWDdNQ09nakdvVmhYQ2c1bEI1cGFXRHFXVTlxRXUxcDkrdy9tS0FXTDFyaWd6YWNxUkxlUkhVdFRZUTBHaXE3OWFDT0svVHRqM3hoTXo4dWk2T2d4SVV5bGcwU3RhbENQNUt4aTJJMzZIeEdpWjJoNWJiaE9ESzZXZnFyaG42S3ErWm9qa1pFNExNY0hLUVQxeFBNZWJPczdJZzRVWEpqSHhRaThJeEhCUEJQYjM4bkVGTDY0R0Jmc0xBcG9Xb002VmczbjVRajNRRWt3NU5vWTlWNFNpU05YNVA1a3l0bDZsNGRXMXRDaFlaSGxPWmd6NW9DQ0ZzV091WVYrRkh6ZnJHMjVTbkJQUEQ4OUxHb0VicHJXTVBXZHZOTWJpVmluUnIyeGVDMXd3dzQ1cGJRa1VSbVdCS2Q1VDRqU012OUhPYmFOVkpudTVNRWpjSkJvZXgvQlVtNlAxRDdSQVA0Z1diOFZ6UktzdFBpRWgwNW1KbDl6SUgvM1FwODZJejhoZk1QNjlMNms5ODRLRk5ZTW9KdGNwMGplZktlOC9IUk1lQVNTNlhwYnUwdCtBZ2xMdkFxdWU5UjRSWnBwOWQ0dktoSnRvakZnR2g2dkRISUtYQ01HWExwRzdsZzV2WGVwblJQWWFZMEU4MXRzdEcvSi9mR2c2S3o3QzhublVRaGxhM0hCakl5Qkx3dlFFZk9ERGVJd01MNHltaEtsdlNiT3lTZ1JwcUMzN3NmTjRUVkpiNVZWNDJPU09qRUkyQVp0YmlFY0RvdTdtWnhpdmN5aVkrZk12U2wrSVVqRkJKanNTQXVGb21RMktzOG5sTDBVMmFUbjN6dmljQUJ2cS9KeGxoanJUcTMyckYxQnoxOVczVTBTVWdqWkhXQjFGckNlaVduSnlvYy9pWjZ6cXpOSFlGd0htNW5rUzQ4Rm5PdFI2UFpJWWFTUjN2clBOT3YybDlodkJkaThFNjlyOHAwZUZPNm9hUUtKWXRKb3JkV1dIRzQ0YXFkZjVFSmkxcnA5WGc4VkN4by9qeXlTWE9tdWhhMFFpTVk3RXdNRUphbWlZSS9NaWpjQ3k3MGNNSzFXOUhXcm1paEc0Q0JzVlJNQ2RRSm5jVTd3ZXV1U3I2d2lwRk5jZUdncSt5MUVuUFVwRm83aVk1cTk3MUhtcmZrdmFPSEhkYzV5OGJhV25lWTRNQm93U3ZHeXFDTEtCeVFzRFlwb25CbnkvWmxENGxnQk1MYnNkWnJJSGdUcjh1UnFReXRNaE84U1BybUJCSGNTZVRNQ2UwRVE4NTRialpYekxJV1BrTVZLQWlXdFM1TnBOOWcxeGlDVlQ2UXBnR2JRWEFXZk9KU1M0NHBtenFPSjdhRXhYdExpQzQ2Tm1KV3BXRXFMR0NhTGh1bHBVT2wrcGhoNm1HSFphYXFtOFpNc1FONkcwSTQ5MitFdE43SVQyaWgreFRzQ2lzM2lNamdnbmdPUWd6T2Q5RGJvbUkrYVU2T1l1SGpnd2VteXB6dzdSQzdnOEtUY0pzRUV6S0dVb29Pdmx3Sy8rbzhyR1JxalBwTzNzOUUvcFpHZFVVSUpnMGExeVlVSG5NTTBLR2kyUWVvTDJJaW9keEFyS1lRUmZFcURXeE5PZ0tQQXVleDI5SjlNSmlPOENCeGhaRGVWeEYwSUlGTVA0RGthem9IeCtaYWthL2tuWUpHOFJOeFR2T3E1S1JvdlZnRU5XenR2V0paOTdOV2JDV3VFN1pzYkNJUUVUdVo5NUppSEIrNGZOcmt6aHdmMHRCand2YUtkWlZnTTU4RWN3NWxRUTJjanNuUUN0V1pRU2dkcmFXUUtyekliRVdMQzRNc25FWGpCMXhHa2o2MkJyQjJYa092aEhhV1BWUWRpbW94QkZ0ciszQU9JT1N5RVRSdC8xUFdzNzgrMU55UG5idS9IVnp4N29XN1RDMi9UU09IWGF2dFJENUcwUXpDMnE2UXpTMzFpQ0I2Y2RYekxjQk44bitBajc2ZkFQTTQyT01NTWRIa3VkV0pMNVFNbHZGUDljbzF5SlM2cUJFNGFwbTlWRU1iSXBNcjBNeHNkQkh1Ni9XV0hTb3lhUFJLdGR4ekNwVEl4YlBpaDJ5TFNwQXE5WVgzWnZNdnZDUUtEK3k0ZXBnVEV4RjRvelNrNHR6UTA2Z0xjMFRqVzZ1dW9zMWlENjZMYzRXWDhvSXdnQTE3T3loN3FIOXR3ak9RVldBNElUSzBrUVlYWUlxZmJDK3ZRNEJrdUptWmtvaE55S050NHR2Wm5XL0dWNkNPU1ZCWmVVcnBWRFhKRVBIZWR1Qi9HTzhoMWFPTWtOeDNFdTNBY3BSeUtLQ0x6STNsT0hJZlM2UVhnKzR2TlFqeFFHRDZUZWdoVm5sa2JhYXRZaG04UkhsSXpUa040dmxBSTI3UXd3UmhrTWFvOTFJd3UrQ0hNRkRHcFpBZlFhR3NtRmh3ZnlGSjA3LzhJYlo5ZFpBclpmOUc0b3hVUVJGRlhHNngyR0txOVAwRE5BWEdiTWliWk0zcTJ4T2JDSnZJVTgzU29QVXQ2alc1VHZYN3pZSkNvY0hvQStpV29QRTlkdkh4MnU3VnNoSy96Z3pIVHhvZWxJcmMxalBTckF5cnduM3dkcUIyYkF4TnFvY213RTNrQS94RmhJK1JOMkJnbWlpSE1raWVCeGJaZXJlanB5dm8xSXk2N21uR3ViM2xyWEExSzB6bUY1MWlVdFJMSms1QkFEa05MUFNsRU40SW9PR2hPNzY3aHFSNkNsbmFBd2diRHNPTm5wV0lHUlU3L2tlWFpNaUl4Y0YwU3FoOHJ3bnVSNGowdCtTcDBtWVVON1h6aXBJMVBTWVJkQWJCVGpDb0ZlWllKVm8yTzJ0emljMDVTMWJEQ1pqUjREWGVtMmJ3TU5xZDl5TENvUFUyNlRTUnZ0eG1POWs2dTdnbnVnSGwxSlVxRVJFVHpKVkV4TlVxZ3NLbkJ4UlpIeTR2V05ha0NtU0ludUJjYlZDS1p0V01ERzFibVkyYjQ3RmFBdTJ6eDhQQ2hCQ0l4dWZGbTRIN2lLS21vd2JRdHZmM2FuQ2NjVmM2Z0pQbUVRcnMrcDk3ZE9hUmFXT21BcTlCV01UM3RZUFAxSzVFRUlwYTg5R0xPVnVrWmlYQXFsZklXUFNBc2F3N1RFS2NsM0ExeWJYQjR1VjBDak13UkNGZE9QVUJoazRVMVZpOEdjeXRHWTlmd2c4MHQ2eXJwQXJoRzBGbExmaXM1emNxcTJudG03SXBkbUdPb2x5aXpDL0YweHdJcXZMdGlvYWlsbEY1S3Vvb0JkT3ZyT2RFSDRxbXdFckxEdUo2a3UzZEVJaFlVeGNZNWE0bkpQU01WQzRsck1tWEhWbGFuQkRsQ1loUElFU3FHVXRXYW95eG1Sa2ZzbnlHU0FYRWZnKzZGUlQ2SkhLY1JnMjJ0Uk5OV1JqL2xuMXN5bmNGa2RGc1RuNXZVbjV6UC9HaEhhSkRTM1ZjL0s2WkpUOENDbjR5YmdKY2dCdThnaU8yYkpaT2xHMG1aMndHaGxOZmhJZXdtZVNLcWduTWFLZmgzMmpIUE9CR3RYREdPbDRDUHBsWmhmZzNNOGhzaTdNa0Nzd3RtdzJUTFlyOEFWY1RCUUloa1F1M0JzUisrM2NYaXVlVmFRd1BnZDRpV21IUkkydWVIUysyMHJxN2hKT2lNdFFLSHBzMFgzYXZjL1A3N1F5dUVlSDJPMFg3Y0xMMGQ4TVJuTzRkcnhjQmNUSWhqQUtTa3NSWmRaYzNlS0hSWUMzOGFiNW5ZTjMxRkk1Q25aWjhlYzJYclJLMVdlY1RFSUJuQU5sTklmNytZREFCY0U1V0ZOaXpNM3ZSeXY3a3dHazVlOG1VKzRaSHF5MkpoWDdJTTIxeGhTNVllTldTa3B3OGNndExUOFVlWSs0Uzc0SHh2QncwOUVsZTVaZ055aUpLb2VscHdKNGt1NGZ6bTJEUUxuV2t0NU9PYlJ4QlRTT280NGJ1TTB3MkxUNkxmalBaNlRTVTRNQ1RQMUhFYVE0Z3duUjl3cUJoa3JSN05HTERscmtrS2JCWExIZmxDcStoSE9OWVdEY0llbm9scTFUd0hXYXBQRmNXNTZmSWxjbEk2Y3B2b0poVkVzamRwemtnWWxGMzUrSUFRbHVoR3daV0xRYmZ0V1VlZ1BuNXdZbURFT25laTE2Qk9tRXFHMVJPOUtzUW5rc0l3b3g5aDE5bEdoeUxHVEQxNDg2ZUhUVEpxRlRkWW5wZlBYaEE4aHJTMXgycUZ4WE1qWGYydkc0aFNrbnNjRVVOSnIvODNiUXVuc0NRQVJSMDBKWHZZd1hzZ0lsWGxlaEJpRlcycFBnOXgxYkxHN3QvWTR1anliSlQxejdIaEdqdnpDUFh5Nml1eFo0Q0ZPQjF2T1NaU3JmaHRISHhEUXk5RGxSeVF6WTB3Nk02cjJHaU82RFZaMTJORFpQeGt3Q2JGYUJVSXJ2cGlZZmhxQkR4VmlQREM3VHFxcTFaU3ExSThEYTVqUEZGZzJUbno4LzYxbDJVR3Rja1dsUjFMcWJxWnhRdFBVNWozMW5rRVRWRXNDZE11WkFpTnJYenFRMk0rek5oRWpoT0pyUG1lNFBwWldoSXgzNkdjajJLNlorcHNMaFBTbW9uK2Y4ZFROR3hkZjVTazJmS0hEVnlIUGdJaUQ1S2hvRUZzcDUzN0NlTXQ3QmpPNFY1L3NrcmR5OGdsWGdsUlppM1dBbHRZWWtveGhIcFhtNVlmL1Q3WkY3UmUxTHhlUWM4U0RHSFlzTlNmejFTV2lNZlFoaUFQQTR1dWpjMnpJa24xYStReFIwQ1N2NUVRdGRobFE4Rm9QSnZtNjllcWFjaWR4Nkh2blhqY0JUSmJTaWRlQWgxWmF6VDBodlZwdnpVaHlVUVp4SUhkOFJvcGdUenhBWkhoVHNjRjRnM2RMVmp1cW14clExbk5BV1czOXZtZ3dHcGF2eUcrMk42bXdvM1ljN1Z3dkpBWDkrdXZ5NU9LSnpEWW41K29UZ2dVRHd4Y2pxWHFGaUxxMm9vZXBJay9kSURYQ013Y0Mwa1ZIa3p2Q2xYOVFXTCtNanRaaWFYUDNaUjhYbVJhOVpuUDNUb3U1SmRFM0dBQkVJRTJOdWVVNUtSZ1lUSjE2bmZFeVQzNGZJVC9kWG44NkFKdmhRY2IrRDFsVFc1bGhkTzRXYmpuSVhjaTFHeVdkRFpUc0NSTEJEREw4TmF2MzFxOUhjWkVtY3lnS2hEb0dJWUVLTS9lQU1aSzZzcHcvVkxCSlRlYWY3d1I0ZllzOUwxcHd5OThaN2hSd04ybVp2RGtuWFV3ak01K3BuSFlXNU9mNW5BUkxGWUxKeVdjZWFuUkw1cHlZS1FJakhZMUpycUxLeGhaVEd0SmhhZEZaQldHdlJUTnBRMzVpeTFWSXY0M0IwajJtMHNERGZHNFNWKzB2WmF4WG11c21RN1F5NklZUFYxSGdvRENOdjJRYldUblJpcmxRQ1dnNy8vLytONi9Wby9acTl2Z1Bmejd1UGV4VDJ2RUZiM0l3QmNRWnZPVXpKT1hyTU50Z1NqYkdMVTFBWEtjc1ZBM09OY1FHK056VWhwdFlrOHlwWEhlQlpHYW1DZCtyejE5UmtoNHI2WWxuU1p0RHdGbU5pNTJEaitGYjd2bGxJZmlVNHhac2JSSld3czJaYXlnNzFDdURuRDd5QUI0VWtvcW05SStaWmNDNFJpQWlIdGJtWTI2QXFGOTdtRy9zR0FielJRSlRPd01NNGFBTXZvQlI4dVY0Q1ZtampMQWgxWGw2Qk1kQ3lNZEEyeGdIL0M0eHZnd2V2cmZJN1N4bG5WTHlsS1FSK3NST1pwek4xQkd4aHkwRnRWSU1EUXMwamN2dThYUDcxTEpXRE9NOXFoYXV1OTIrUlVraG95SWJ2Y0c4Y1BwdGtsZHI4UUdlNUZ6Q0M4L0d5ampuckY1ZXc1b3JmSzRVSGx3U2NMUkh6K0hyTms2UlJTRC9VUmlLdEZCdFUyd0tnQWtISmNwck1ORjFYeXN1NEs4Q3B5R044WkRia3RtVDZPUEdoVnI3VjdZSjdNRzZBTWJ1QlluN1poai9PUUk5V3hNYmhLemVDZjFEQ2hmOWZnd3Fyb0F5dVc3N2p5Qjg0VTRtTkRsT2FGek1QWCtLaENHRERnbjQrQVJtOEd6NXlMWHoxakgxQWZmWXhNc3VpRHZXbVVZRFpEcVoxbVlLNGNVRkZNUzE3RXhCY2dvR2ZYdEl4Z0VoR0NSWmpzTStVV3pUTit2YnVJUHpaTHQreVYwYXdWMHpVVWF1RU1ZQXE2aWM0aURMWFBwQ1JFY2t3alg3bytxNWxBV0tKMCtvdHZOTU9aMkVPa1FKV2NtL1oxckRxTkg5aU1TckFmWkxJMGVwd0F1RXdEeDdIbiswOGxvMzkrNjdwZDBBZ05RYkgxaEFyam9DVkNTbDk5ZUloU3RkV3hIbTM4ek0wVDIxbFJVZjU1Rm52MEFHWWdwS2ZwN1dCNmI4R3o2c0h4d2hyVXlMWHM0MWcwQklVS0VkL0V4eUZYdi9RVmNLV0Z6eHg3N01nbkdPUFQrajkzUHA2bERMWGZQaElGWVM3UkNrMldPYjlNNmJJQkpnYUtpNmI5M1FyY3pVZUNkcnRPNXd1WFUxbkVTZUNtOFhXRSs0RjBMNUJDMTh2Vy9vT2drU0xCYTIwUnlxbmU0RnRIb0FBZUFGWVRCVHVNd1c5WnlhNnlkeExIRG54d0VicDdnSmExcEM1YU1YRVlybE02YUh2QkhFSWZvWmt5SmR1T1oyY21Nb09BNU1oNFZ3ZTh1ZnpKc0JLVS9CVVFFbHlQNGdCTnNpZlhqMFBVeFVZejRDTk4xOWllak9QMWxxNVZCM0cvTXhBWGppZlJoVGcvVk42UkswYU9pY3dHQ3FNYk5aUlpuajNtc1JObXRRb0V5b3lyaGEwU1J4bUFSUDJrZzFHdFpaVWZyb25wUWZtc2lNS08xRldQai9obGlndENtT0NmTlpwSnFIRkpZQUIzaExDQ1MxWTVXYXpUT1c1VUZkd3dYczRxbWdScEdOdjFyemQ3b2tqdlIwTTNVc2cxTmM1VWN6VWhLQW14TzR1QWtNb1hZUHRaU3RITnZnWlVkUWdhcXNNVlh2dEN0aHFFellxYll2Z0w0dHJrYmovaVdNd1lBYWMrRWtkNDc0dnNmSGdRaStuUitUNXpock5rRzBJWWtHbHUrdWdIV0dyZjZmNXZ0TGRmc2tjVWFYTHJGbmpla2xMdXJPWTVkSUNVNlArRUZpWTd5RjJKSUFYMmVNK0llNERyUWgvM1FnVXN3dUh2ZkxhcVRWMm90dlpmY3RiOXgzUWJvbGhqNzZHenpocXJVWFVPOUhpVmtWcmlsWFdQR002RXhNYnNaeExJNlZCdTFYVUxiVERZUk1DSXdlR05SUDRXbWJVSlh1NnByTHlzTFB6dldyU24rdUorcDdwaWRLQ0NmWHVYMjlibGZkNERIZTRaNDJWSW0wWUVjMDRKWERjU01TMzdhSThxRDN0aUJBTktqWFZteGlWVHZQNUxvcTVHTU1hVDZHaUlyU2tsTXRRZnlsUWtxOFNxcld0ZDN2bk9oaE9nc2hVSUI4VU9MSFhuNEkyYlRPeHpacndKQXlzWm1ydFRiWHpPQnhialdab1ZndWpoc29YQ284RHFTamJxUG1FVUpGZ3BUVGZHQkNZdXZTaFRCV3ptanFwWmNPdnZhOUFMbTRyT3BLTGJHWXdFb00xT0FIeHNacHBNcm9QZkw3aUNQcXB2NmhJM3phM05nckpHS1ZOQksvaFJHMkMwZG9JcjJHcWs0eGFsU2xOYmFVL3VtVDVFRmsvWFhSQW03MnZHenhYTTV3V1lDRzVkUmYrSHBxUWpvOWE5SndNWTRqYUZ2YzBqU2ttU3ZpUm84bllDV2kvWU1wb3c2YXNsVUxKMkZ0aUdrMldZT1lDbU5WaXo4WWdMRE9UT1N0MmxYMit0bHdXUFFJWnBzOXhPT0FpV3BsUU1uZkRra2NCWnhjbktBd0R0YjhtVUJIVWJhS2I0UlJScEE4aEpWQzdQeVpUSC9QUm9Sbk53RkNlaVlLWWdZQWxYUGdCNnVFZ0ZPRmxQNmdvZmR3SVpzcjdubDJuSUVFS0JxNEI0UkJnSmxtQVk5ZlZ4WTBlV0J2QzlXODNzeVJLWUlSV3NLbVpKZnl6VXlzSHNXdnd4K2pzaGs5d0NCNi9RZ2ZqMktBYjNQZk54QXVwajI0R0ZxdTBSaENIakdsaUFDWDZtQlBqZ2paRjVCTGlQTHlsOERZTFE2MS9xVks4MnArOXdOSVpaS2JEMFJ2QjY1UlAzSVR1MXppRnR2WVFHK1UvVFlHWXBZMjFsNnZMS3A4RzlFZlI1NkdzVTRDaVFoMHFBSXlZS3cxalVkb282VTBkOTI1K2RtY2tONEs4QU94bEVvQ3Faamw2cFBiRmZXNTBMQkJSR1JXVEJKcFI1bkxEdU5IZFNNdHJkS1lvU3FBZnlwdHRUUDVpVHBMeUZNOWgwMFArUGxNYXhVT0dkZmZzRUZxTm0rQk9Sb3V0Vm1aV1MvSGxyK1hTbVBUbFFxTmp3WFpldThjUkVQSE5HQWhtczJZbktJMGl3RWZrSndKQWRPUW8yYWhyc3dPS2dHM3hCWWw1aTNqNXJkSUVxQk9kWVFuYUViN1RaOCtXcGx4SzB2TDRGaktXeUVNRDcwQi8xeFo5TjlWSmI0QmhMZ1EwS3dxZUU5dW1WVFczN2RwNmU5UERLUXQ0K1Y2U200cy9rWTVrckY2K04vclBDbHlBeUNNN0E2NEVlTklMMWRqQVBlNk5QRUQvZlNQZHdTbVpxSWFZRVV3a1RQQUFaV1lnS0lpMTJyNDBSZnZkdjZsdG02ZTBiSlpqcFdITUFRMG1vOXZNWTRpc1JzcTVIVUFxam9Ya1BicUYzTE1TSUVsczhZSmVlY2I1SGhvN2hVekZlTEQ0RVZHcDVERHR4aUc5UXdDNWF6czlxQ1ZDeVZsY2cwVUVCelZkdVdTNXl4VzNuNjFYL0hNUCtpQnh6K2lMbWwxSTRnVWgxNXJ2c1VXWks3VXp1NW1RQW5hWWhWdUxzTWpvQ0cxZ0ZxMnlBS2tnM0FqbHh6eUpuQjlvV3JUNjJTQXlZclA0bFNMUWc0WVU3MHBZWVQ2Vis4WXpvNi93M3IweFJmS01FWXZ1YUt4VVI2ZXpsWE9zQkU4QjhpSVp1TGEwdHJNQVRjQ3k0RnlqUm9iZU1vM095SThDSkRLNGoyQnUxeUVnbHpSVGV5azJGUnk3R1ZoWUZxS1E2MFVrWTJmYTJ4RE9Rd1R6QWk2ZFNsMVhtTkNVb2dTZmVGY1JMeGp5b2FFUENnWmdhSlZpN3dXaGlwb1FPK2ZBSGhMak5rZ25mZ2kwY3NMSm5zSmg4Yk1UeXZ4VUVMZ0cyZVNzeXRldkhkRVFCdjI4TDdiblRpN05xRFJLQnZoU0F3OVVnb3hoK2Y1UWZsZ0podStyQ21IUEVaOFI2WktlcXQ3UmFVWXk0czJaUm1tcUEvYm1mbXZPNWJxT2pKRGxTdWk5dU9ueEZ0WDVCbDZ4MmN1eUErYUh5Sk1ZMHdRSHVta0tFQWhOMFlnRE1JUG1EeXZmdERUR2J6QzdXOENjL1hWcE90WXhybDNRbWswTDdjYXJlTU9CWG9aNXQxTGlaR0RMdHRKZTFoUlJkNGxuNUxWTnFXaUd5UndoSXhncHJINjlHTDVEZ0NqZW90dytwc3BRSy9sS0xNM2VlNFd3blJZS0xkK01TNUNaRVVmb1FFeHlhQStHZDRLbWI2TWlXbmZ3SEV1RklnVXhpNlpaVUJCVHVkYXVJanMwM2NKYVlWdGtrWmF3TVhCck5pSzVtZnRwdHprVDg0dmFBWkhpT2hBRjB3bE54U0JjVFNNZWN3U0tSTVJJd1hGTWFDRThmOFVXdjBTdWNEQnVBNWEvMHY4dFE4S0VhSUozdGtZeEV6dW93eHVXQzl0cGJqWnRUQ2EzdUZRTW9OVXBjKy9GV1Z1QUFvK0VSOUlGOFphTEhqTFlYMTI3N0w3T2szZ3FEMitRWnhJc1ZkdUlybEtBYk1OT2kwSXZWdDJJT2hnVmhXeGl2REhXWndmZWppWmNNQmR0NVQxcGlZUjJsQ1VOZXV2KzFjWVE4Qkg3aVFHZjlGbWJNR01DQVZsSXdHVVEzR2twemY0TUZQQ01mNUNrSVhISFBaUTJOOEVmb0VMaG1kVHAycG1nYXlRUnJER0FzQkxtZjcrL2MvTkpyeDB5SmVPY290V0NvL0NhK2t6T3llMFlNOFRCV0tGeEtpMkt3cjdVdDVRMDNFY0x2YlNodVJIdWx0WkhNMnV4SGI5bTZLQ0hwMmVWQVBITXdHa0hCVnk4Q2xwa3JYaFBGWlhCUHNieVFERTVSUVlqVjhLekovMVQ4WHFBaVFBdnQ1RFJBL3pvSDRCazRKNUJVRDZycEd5SGtzVENlTEpPT2t4RUhlSUEzb015cCsyTkRrVWcwWEplZTI4VEhaZElQSkJUV3RwVFJWUlBHYUl3S2Nwd21YQmdhT0FBMU5EMUpZeG1idUp4ZmFhL1YvcFBET1N6bXBTK3FURVNIYTFIc21ySnNDeHdIYzh0eW5LanJZaSthcFNKN1VOckZjR1B6UWFKbDJaU1NKa2h1REROcVFWZWd2U1NGRVMybG9tejZtanZEU01MSGh4VTNnbGZ5SEh4Z2p3by8xdFFxY2Z6UUdTb1hQVWhhajJmZEYvc0t5OW1BbUVEOWUwdkFJUk1FSGxTUit0TW5wU0lJRWpDQmFjaEp5T3FYRlF6c0E2ODk4Y1lZakNWT2JRM0RTNWF4R2ZrOU1LRll5ZURXQ3ZrNlJ2TVhNWFh5WWROWkpEcDBxeTV5TkNUY0JLT21ZMFFwSTUxR0wxV3Y5S2hlS0pURmtKZWFsQ0VPZjRsQ0FQSzFMcEhDL3JTR3E4TlFUYm9BL3hTQTlXbXRZUXF4NEFnTC9EdDZzRUxJWGh3TFBNN0YxNjVhQ3k4MWtiM3YvVlkvclczN0ZpTTZielhyaG9lSzJEcTcyVjIyU2NsYzdUQnRmZWVSRHdOTGFEV1Rqb3Z6WE9qd2FieVBYTUJLeGdSejRtZGpOSjczOE9hdDVJV1E0aWc2SkFIMDlXcWNrc3I3czVBVWtSL0JkMnp4RGlvZmRyb2FBalJmbHJLSCtjbjFoZUNXVjNFR1BOQ3JSWWVrZ1UzaHltWUhva3VDNEJWelFLKyt4bW5GWW9uY0I3N1Z6RWVuTkxhS3UxMXNaYnptOG95Y1Q2R0oySEVrek5vR0RSZkxWMXhmTmQ0UzhXeis4OTZJTUJNQlZpcG5VTjdkWTB5VS9haUJveHkzKzRnOGliYUF2SlRLM1ZCN3ZQbFZmNnlHN3lKaTdzaXhGTTFMNm5OSTg5UlhOd2VobUMwWTNnMHNkV0pTaGdTZ3pDckVWNm1VZWNzU3B6eU10ZHE4Nkd6UWhUeXNaMVI4YXJKd2RVYzJqbUM3Qmp4Q2IrcEF3NjNhbDFUNnNYOEJwM2dBS2F0cFh4czZHaFpKakw4ZW8yZ2V3YVR1UGVjY2s0MEFoU3NpTkpxV1ZxVHpSM2FOdDdjeTJkSm56Z2EvWjlwbGltOEF2cmVLSkNZRGJnYXZNSlhldlRua25EZytVTkR1dFpHcWlJRmtSQmxHZFhrbUlpYjA3UStVTmRLMUVKRFNrb1FnYitoYnFFcEkvRkxJeXlCUXdtN2FXcGtmQkpWREdaaXZ0aFVNUmFtQUNOMzhlVnlJWjk4TzdTdmJRaUdLNUFRTUIyai94L3J5bWttN2JqY1pzUWtyNGhoWHVKTVEyMmdDWVpqenpKR1NtSW1JSndhNzlZQVZyeFZuQkpjRTBJdG9ublFnM3UwaEtadUZXSnFsWXZvRWJSRVlSTGE1ZTVtQ2Y3Y21Ub0JtYmlPN2o1MWwyVW1oZ0M5dFYwOEdwTnY0RFZyZTJsOEtseWJkSGZlV1RISDJtS2FXR0dlRzNhcW5DM0tLcklScEVnRXlGdEFNMTYzY2VtUUlDT2pZTUlPT21JckFJV01BNk9TZkFGN3JZWjNwRGJJYW5sYVJ1ZHFkM1MzTTV1Z04yVmFuRERPSVpRY2lwTU05QTNXQktiVlVUQ2hFRkErYzQ2NDBZTFlTZ2gwZklRYUs5WXRlRzkvalhYUU5mZE4vc0g1MlBuSldSMUN1bnhCQlZlUkVZWFdFZlVhRVFVZ1Z5d0ljeXAzbUFLbFJlTU4xVVpLM2NaQXRHcERrZmZkM2l0OUlKS0Q4aVMyTkJjY3BEZTFqSktkU3ZOQ1dFNG9kZ2JSazJTQW9Kb2NrWWZvMEtvdTVpM3ZPQVFDaGFoc1FUcEFuSGhQVFBPYVFHRkM3cGhzVUJiaktURFphYy9NOGROY1E0MjkyR2hnbXVKdXF3Sy82SEpjQ0FRaHdTNy9VakwvZlpQQVhla2ZxazROR294S3hXVjdkQnp5aU5NT0FlMkdlWlBJbzhyeEtOTW5mTUoyYW94Nm1wNklJRlVhTTVnV1JvQjhWYW5GZTdCQVRwaE1kZG5EeXBJQUxQa0R2bEpMR0NMamlySis3RnpzeFlBSktzZkR3NVRGRVdneWs1R212c3J6VnVTY3EzdHpieUJTbW9Bck1BYysxNUlMQ0ZOZVRJMlI3YjFaSTBoc0tteWRTWnNaWFMzbmNZZFY2RXp4SVcyeVZrVXFBQXBFQmxtMWtQamNFZHp5eXREWW5IdFlmSWZIc2JwaG1hR0RhK1NBZUthVnFSSFZFRDRqR095WUlhWkdoTU96OTNBY0hIVDBGKzh0ZXp2ZW5WWWxNaENtMjNhb1ZLWnc0WS9YWUJZT3c0dmpFQUxzL2RrNC9qZlp5VGxuZU9lMWc4S0M5aktvZER4UysvVXZlbUVpV0ZOaWxUaTNVVkdPeklSV20yeEc1b2YzYUhQcEtDV09kMnhhTVlOM2xBR2REV25CTUQ2TU0rTFRLSlVmS1VoYzlGbHdJZXNKQjl3WnlObE9rN3BTRW00cjhOZDEva25uakJvOUpieU84OHIzNnpiSDNFL2hrSmZnb3FIYmhmR3hva2F4MDUzbGhDTVFGS2RtSkd4OEdZbjhqYjVwTk4vQ05JOEZVQW5lOFBYbCtVeHo0MHIra0dBREJURGdNbVZXNU9JV2tZZXBQUDFHUjJQbktQQ0tJWnVlaFdScTBrdFZUSXNDNnlDalJYRjVUN0FYYlRvQzJjc0Q3MjNmcG9nT1NsL0pjSnI1bHBNWVRMb0RaNUJwVWt1cVVwVGVncmdiS2E5Z0o1VEVxeUwrdHBlRTAyOFlHMEtXRXB2ZGd4ckZEcFB3S044eEZ4dHZGZ0Z3RkJLa0ZsaFVxeFdzVWdNRFRXQUwzaCtmeDdCazZCV2hDcmhnK044S3djQ1V0MU9WWFo3Ti9WY0FUZ3lRd3J6cDhCam8yRjZrancxQ0NNL1JWdXBZd2dxMWF4aHgyU0ZVSkc0MjVxcHN6emszVklUaktkZmVjdTBVdmtEWEdhUUV3WWF0QVllMlJzUzkrRXBqS1BsbWUzUDFkS3owaGpEM3JpR1k2R0haY1B3T0liRnJxN1dXdEFoNmlDSW1RVVBwUG11VC8rM0xRU1MxK2NEL2Z3ZVlBYUpmNFVjdzhqcEtLQWpSNkVROTNGc3BYWU55b1FRbDRmc3lCYkl4aHpmaWZxYTRkaE1wWWpBUVpTOUtkdGFzTUhBOUhQN2hIUXhRRFhYZ3BRL1prWlVlZXk2VGlnWG50TTBCNmhGaWhpdTdsWWw0REpWbElYc3Q4YUJpcGU1WUc1dnZVKzlHcXdrTDNvREd5MFovU205RTVLUTFUeUd3R3l4VWFCOURaRzJyY3NxQithbW1zaFgyUEcxbGdrL215elM3NWg3OEpVUEhjMkJmY0Q4RDVOaDZhdWhmWjJrUS9ZL0NyWVRqbmU0MUhCMjJHSDBhSGpnenZoVFF6SnFicm5qUUxBWlpxUWFPYWkrblJvVG1kWHdTWDRjaFA2eWl3SDQrcy9pS2IxeWhNVTVHZUd1NVBUU2hZTjFsZVVoQVFwZ21yYUJnK2RyWFRaQmNBcENnVVNodjFuT1N0MHJFU0NtSHJ3UkpKcU94emVKbHNsZS9aSHk0cFBIZ000RmJmR0p4YTZQUUhFQkg5SFFmekQ0WnRDR21WYUdXVkJQeitKRldEd1R1c1cvMmVoMjlRMmwrMFlubzBabUxjdDJEdnNROXltemJuWHhFYzQ5bUZNeSsyVGoyMjhlVTUzTUJkTUZhdXFENHJqeGRNeTZTUHVtTkNNTUdabWVHL0g2SVplVnJHK0t4dWxPdE51VUpaUUdGT3k5YXRMRHVwVnQvbXQrS1RHZklsdk5ubU9aWjFiUitZU3dDaFVxNE5jQzRxZ2crclVzSUdOdTdMejdNeVY2aU45NDE3d2o2L2NDVXY4cUovU1h4Y3VlYy9MS0Z2S1Z6T2tyajRvMWtqZ2ZNTy9ZbEdIdXhYNllJVmlsTTltblhkS0pjUFQzSDE4enFPN1lBc2ZFdkFXZ004Nm9sNnpUekkrWTJwanVmNkNTMkhTclZHU0RWSTQ1ZFd5cWNxdUhNRG9nVEVmVXVlSCtTWUdYQW03dGpEUnAvcWdJdW5DbGpHRFYvb1AxNW9RK1phR2wxR2VrZTZzM2k2QnJNU05rcm4zY296ZGhINnNGRWFlbTF3YWp4YmxnSnJGQlhBblJXZjlqcGd1ZHdCRC9Ib1R6VG9sQjl5WG1JdnRzWUIwZXc1WXFWTkFUSExWY1podWVyS1Bwam52Q3ZaZHdIK1VFN3ZnVm5Vc24rcXYwU0JPbGNwOHdNbzgzRStQSmlsQnlwbmJVQTNXaENLL2RHUjl0VUhxZkc5VHpISENpNDdWOEVzUFFCZTFjWUJwNW40RWFLV3Nhc0hkMGJ4RmpZUUZmNkhIT0xITFZoU09rd1EzQkdsRzkvWDFIbUJ1TWN4Z0QzaDNZWDJhdWJRelNFRWVvS3libXJmbVdCV0M3RkpDT2tVSmJjU2R4RjZWZDdQQjYvam83RUV6UGk4bzVzM3FKa1RxL3QyY0NTTXJyYVYvYk5IRkRsVXlNTUZOSy93SmgyQjYxZ3lrVHVvRURpVVBWTEdjL0orUmdpMjVrZjdvZkd3U0Fod0xhQ1FRZTE5NllCRDRtS0N5WkpJQlNDeDBMa09WdlZPQ2xKakc0ZmN5SXQ3UlBmTzZpYVIvbHRzWXZaN0FjNlZ5OGxhQ3hzVXFBcmN4REFacGhCZ0lzQ1VkcUlWd2dKYU9mb3YyQnNncThvL2N6R3pESHA3QWpFblBqam5YQ3hnWWxYSVkySWhyN0c0ekVIT0YyakVIRkNZWUhWTFdhajF2VFpsTFNYeUhHSGo3eXpTMndabWY2WFBrbDNCdDRLVjJRbnpzY2N0QUdtYXh6Z1hzQkVtN1dSQVpLNzR3NWdHMHoxcHBZVVh3VkVuYy91UnhCVk5NSnU4RUUvSGlPSmlqRG9yQmQwZ2pIMjZKKzlOOHorVWhyN1JCYkpLcndHdnFjRnJFMUszN01qeGNxeDhub3ZRL21ZZmNTM0E1bFJIYVpjckNYODVhMHo4Sk4rbEhoUEErVTNNcTJPN1ZCRHQrUHNaeTJycXhodGQvWStwOXFjSi9JZlRkcE9KZXg5RGlwZEpTZmpQb1dBODU2L1p2NTlCWmdvNTROeTdPM21RODZVMHpOSFhrUGJtbXE4VHBYWUFpRXl3NzR5eGU1Y0xPUHVPcFAzMXFYcmpYem81M0lPakRLaTJrWVJCb1RybXdSTlNwQldiOENHWk96ZnZ3OFJRQVB1SFdJUGszMXQrdFpsdE5xNzlNWGR6QnprREVUYWhvb2FTT2NtbEtKcUFEcjJJZnRwOHYxREpNYTNuR0hvUUVMK0lSMnFRR1M2cHZFMU1FYlB1MGYwSW1JTkdMRXRvWjJ4c1NCSW1xWERaQWoyT1hMdFd5RTZSTjJmT2RWZ1NyY3Jlc1BuRzdLVFFFRGFWMGpzZTR3V24wQ2txVWdMaXNLRllna3F3bG90MlJmZnZuMFhOUktONS9WazdWUkdnVllxaXMySFRGRngzUkFtZDVtZG1hTEJac1pDTFZOVWx1QzlSSnFHRjc2UjVjTmMzVEFRYWdnZ05nN3Aya1IwWm5iMlVPN0RFQlVCS2xTOEhZSk5LemJoakozZ1dvR01xd2pNVXZTemdEaXlmYzA0MkhxUVk5ZFErSjM5UlVBWEk1UE5ZMEFjM0VPdTY1TEh3eGdvMVZscEU5WUFVZ05DZkNCVHQ3a3YvUHdsQVE0SWIrZTZPYjRyRlFJeG5HLzNzUVV1d0VidUtJLzBINmRwR2RjN1dRSk41UlNVR0ZERytmZlhMWTQ0UkViRjdiVW81THF3N0tWWXdTaVAxN1l4OVVMSzNMTExGSHVKeTJqQnZOcm8rOUZRTFhDblEydVlqQU56dzVTK2Qya3hRMTRZQVh4MmVDTWRjMm8rWk8vZHNRZG9TbVpWeU9obFJQbHUzcXFqNlFseENyKzdPUVRLcWtLbnZUVDkyZWhYeDMrY1YrK2FObU5EbU5aR1ZFTWMzeTJSZjkwb3hGRDRiWUdQZkhodGM0MUNKczVvZ2JHMGtKR0tkaWw2bGcrNllBMUI3QTBZNlVhODU0aW9ZNzFlbU9rOGUyY2dsbTh2Um1kZ3BnTTNSNzlCc3RXQ0ppem41d2hSMzVrNnhQSi9zQUZRR0orYWV6REpxdGlGRFM1Vk15em84UTNyMjBXaDB6a2dSaDNUT0dLVzlQcGpRNS9iMSt2SlY4RnJta2dETmdDT2pxZHA3SkRvK0J6Z0NqM21NLzFoSnRITnZXMkNjdGdjWnZzZEl1Yksyc2VCL1p0OXNJT1NuaXBpVXBOaHcwMEMzeFJRb1o3aDhzQUNqTXlGcGxsVEs0NkNZVGZrZEZrZHpwUk1SRXltd2NVTXl6UkxPaE5tSjg2Z1pCSVR0Z01tczF0Y3RjQnBwb3ZZUkc3dHVtU2h6N2QxY0E4NCtrUkxJbC9JR01pWWRWYjh1OUg4N1hVUGxnTDI4ams3NXZseTU3TGRXYTAvcEFYcTRHL25waFkxZ29RMkhnaUJQOFJRajRyTGFJeTZQdE12Ny82R2V0YzAvZzV3d1dJVzZOaENoYlJoMVBTN2psRGpwY3ExRHpMZXRGc2phYWM2eC9aYUp6UzNzOVczcHBGenZBbUZ5VFJJbXR5TjV3U1pqK3FoamJIdmFJVXh5Nk0zZ0g4Y0xnL094N0xtTlJqVW9EWmE3VUNtdE5ySnZPMytVbGF3c0h6RXBFa1d4bXQyeXRFaTNjdnFlTnA4eVJCd1B5aEtjUVRWblNxYkloaFFITXBRajYrTWtVZUhWVWFiN1AyZTdoaWthWndjMFVBelNnbG9NYStPdlBsV1dDVmVOSTBPdUFCY0xoVTVqRVVoa1daVCt2cnhYcjl1WEJlSEJ0Nll1NkYvMmM3ak9jN05jVTNGb2d1QUFDWWJaN0YwS0I0QmV2NGVXVTlCaFRGTUp2TytpWlBtdFp3THhXQ0ZxV2c0by91QURHVTZFRGdHZXJmVGpHS29ZRmFHUEFNaDhPWlhxKzlxeG9DZldjVk9jbkVSQ1FRU3BYV0djSCt1TkRCS3JCL3p1OHlKWGxvWmxpSnhRZU54dVpDU1l2NkpvdkV6NWQ5d2NaaE4zUkZjVXVodjhPNEVTUW1pTTBIMElKMzI1Y3VtT04rV3FKd29XYWZVZGZ2em5GcnlUWFN4TlFkeFZhc2Eyckt2dCtMTXpLTjIyYjRJaExORHJtSEFUTWJ4Um0zVWZjT2Fjci9ydlh4Y3pBUWFFTENRVGVTUEg1L3kvVEZrekltRjk1QWRsNFNEK1BTeGd6YmJHeGY4a0dIYzZUdWY2ZU5ob2pZZ05ZUVlVdjFpZnNqY1lFTFhzeS9TSm1jNTc0RXhtT1ppWTlKTVBTdVZzM0FGbHE4U1dFTjdORlRVYktCbVI2RnVaSkVlQzVITHFRbFU3cWtSS3ZZSVN2VzFXa3BWcTljZkRVNjBDWlFheXM5cVhkWUhRQklHbkw1NzlFM0RxWTVBN1hzalk5dk11ZDhSTUdZRkJYZFZzaC9RS2Y0MUFHMmlKd1lyWVZWVGJxbW9CNFZaYlc0TG5rUE03ZmNXeklXQlR4SkNzSmY3Z3EyMEtKWVdQVkI5bEV3VS9kTnJlS014dlZMczlXODhCcTFVNkMvS2diaUs1ZndlRG1FZWcySVpWRVllM0Q3NGdleUhtZVBRY0drNTRveFYwbHgvTVg3TWIxZmhGWHMycEVHQ2V6eEVybTFRTzFTb0kzWUJUZCs3bFgwVXduUm8wTHkzMkFiR1dpQUFHNWpxT0xjNEJOVjlDc29IS2lRMjFOd3BySFhtL0V2bVRVdUtjTTNSVnk3a2RmQ29sTU12aUNZdWh2RUsxMElQTktVQ3ZIYTZ4NTdPcUFZeENrUjJJNGRGenFIWmk4VnJkaVo3Z2xXTGpncHNRMVdXak1aWVkrTXFMTHNPMHlzZkZGSTlnNEJNV1piMEtPK255NG1TaHVmeWlzZ202SVBnR0U0QUxzcFAveW15dm9QY0J2V2d0TiswR0VLM0tjTm1xcFZiczRJVnpvQVVTQTBHNXNibmRYZXM5cEtrQVF0QlFLRzFXaExBaE1mQkdtRFNqdjQyU3NiYWhSZXZJbGJlbEI4M2pCVkFkUjZ2dDVycGQ1Q2dvOWp1b0xzRndybkV2VmV2MncxWWMwdjRFQW1ZNDRjMWNKTFNETGVMV0pxZ3A2YkE4T01Ta1d2SkErbGQ0Um5ZeDVLRnRGNFl3RnA4aUJqY0RpajJBa0pLdDlCOEFNWEFHSkhlSTdhMHdqZm1HTEoyUmU1QUt5Y1FrdmtOcldqeUdHbGx5UWh5U29lc2dSdXlVRThldmoydTdOdmlWR0VZeUJXM2c1UXBORUE5QTlVS1VyZzFRbldTa1FjamkzdWF6aG1oMndURGdHWk9zL0labmJlM2d6aFJKK2RhR3JBb2VSYVBEVTg2Z2ZUR0xXd2I1M1cvNmRHaXgrM3l1YnFnOTU3UHcrdFNVS0MxdlFHR0FSM1N2YWV0dmZ2NndabjJIVk9pTEVoRG5EeEE3bnJOWFQ1ZXROZ05tdE5QOVZyN1hFRHFuSTJCc2NVdnVqSEdtN0xVcmhnSm1HTVpPMEM4SFk2NUJwZEV3STBXTWNqdVlBbnNBSGEweW13b1d4cjZaWFpCN3JiT2E3OUVvQ1RHaFVaMGpQSXp5NmZPMllnTEdUeW9hVzJneVVpSERXWW80UHJCVzZ2MkI0cjJMdDNNVFRmVVgyRzZNL09LSlZ4YnErVUZBWjZOZ2xISGZnUlMrOGg1QTliQW5IYkQ5WnFpQUF2UTRGWENYVHlSTXVOWVdGKzBLRFlqMVBCRHBpVEFoNjhRdVVUVzJ2bkFRQ0VEZUpaTUJOd3M5NElranhQNVJ0alVJNC9ibTA4bTFnYUNSSzA5TjQrdy9BTlJ4WEhPWlExbThBM1hIVGFoblJta0RwTlA0TUZIU2lMNUdlOFJkUThyT0VUS0UxcXBVT29pdzBLRzAvenRRMFNjWnZFZCtkMW9YQWRUNS90dER3cEJ1eE1rUlFSK3FFTUlnZnczSUxXTldmNDUxajAwc2ZHUWtBdENCMzE2V0xFd2VlM2FGOXVUNGR1RUR6UllHT0FYR1VwTHBEbVl0OU40MkFzbUIvdE1KczJsQUk4WmFqTG1nTW1lRWl4OGVsOFhVakFUM1g2U2NYNkRSUEF4NUdWTjBJckUzbUo2bC93VkFDU1ZNSWRuSHoxRko2eERra0lyZDRFMmoyUEVGcWgwTS9QVnlHdHF4bVRlSHRCWW9ta3ozY2ZzdkdrMHhrYmhxNDZKYnZwbFk5NS9nMm1GRm9rZ3lTWUFBemluRGZ1N2hhbkRLQmVRRGtlRHlpVy9sM2ZZNnFWSTZMcXY5YnhkSGU4dUJPclptL1VpMEpveTk0QmtyQ29XbTBKWEJCa05QUlU4dDBjbTUrNERqNW5XTjRvSTF4YjV1R0ZNTjVqM1hxSXp6NWxpdUFmd0tIWUFObFJiYlc2OUNTcnBvakJsblUzUEhNNWZ3cGQ2YWZOaS9iMWczK2U4eFhOb21NenB0YmFyOGVWUG9CWDJYeHMzTHd5Q0hmc2NVNkRmN1VRMkRBVjhQYXdDNkJBcWViUitjYnAzbkhkcTFRWTY5NTU5d2RhZm4zWHA2Yy9uRzQvWHZ5MG04elVlQy91cis4cjZHNHlVRTdVaDVvMjRWMndRd0w3VDV4RW12VUVBdy8wNHVpM2VscTNzclVNd29UZ21BN2U2M0VIc2FNcGgzN0U0Q0J1R3J4ZHV4eWVDc0ZBYmN1WXlScU9KTXZrOG1PVklaUk5OZ0J2NUJDeGVuN3M5MmdjZGhsZTloQXZRTjRqNXlraG1wMlVMbWpjQmRxU0lmcWJYTVk5UzVHYTFqMVNwVThJeUE1RmsrVkNQTFE4NGU3ZG96NnNYdkJ0blI0NFlhcUs2VVdyN3VOUGhkQmNJZ2Z0K213K3RUa0I0MmpLOHJBSWNLWVZYQ08ralVhc2t0VFl2YUl1R0w2eFYrNzR2RURDc1psbnA5SVdSUlFZQ3B5a2NFSmtOTTZlNWJBRWp6RWJ6WHZhb2xkbFNDOFRkSVhEUlA1MHpkMkZNYVpvTEhMQ0xXOUpQZjA2ckV5dkdUZWtuRE1TcmFJQjJwdnNrQ0VsTWhLMHZDcGpRcnFrMGRlcFpYSk45N1NqUUVoWU1MTEk3L29NV05SWEg0TklxNWZkbmdKSHNDSzdGcjUzaG9sZ0w5Tk1QMGhwdDBjNzg3bjRFclRObDdyMUZmOGUybjIydlN5Sm9hVU5mSGJXekdYL2pNc1NvYnJIRXFualg3Qm85b1ZYeUFOanJCRGlZWXJRM0lOWjgxWDMweXZlOVpvNFJ3Y05ycEluREg4dzJFcVhEaCtqVUZlQ1d0TVFEd2xDMGQyOVVFTlQ0Y004d1lFMjc2T2JJS1BDaExVWE5ON1I5bkY2bHAyaHhxZWVURW5wQmgzK1YzOTlnWElWV3FuZWxqbjd2b2xGZXdyTWRDRDk4Tjg1WE0vczZLcDVCb1VoajVYbzhsWnRaQjRQSUh2TjIzOUN1YThtY015RjJBekZQOWVldmVhbVY3YkJraHNuYUlsTW1LL1ZCdVpoU0R2OW93QWtqUkR5UmNMRG9NVy8wMW55UkR4Y2kxdzR3ck5UOHh0QktPVE5CczVSY28wTEN5RXpzS0lKdndweEp1bG1pbGxORWh6VjBTREo0dUJaZzFWREdnL2pFMVN5WjErV29ZcVlaTkRmZ1M5VUtEWGQ1VnJXbmFQUlZMWUR3WWJUNmxpOXdzOElWQkpOTFIrVnhnN1gwNTF3dVA4QkFWemcwYzA3T3NWVnNqSHhudzNPZXdVWjdaNzhBeTRRcFc3QUtrT0xRcjIyRGszWVZzeUxrWkhqdTBpMHp4dW1hYnQvTzFLbXpCVFNUTGVrajlFVUJ5a0dGaHVGQTlZeFdYNk5xQ2NTV2NyL29ZblNxZTJJR0VEclZ5V0JRTmcrTGxVRlZOQjlqbitlOElvZ0tOWit2ZkdoRFJYY1ZiYWw3T2hhN1lPbDZpL2JtZUFhMERWTnJmdVgrL3c3alNVVW5yVVBVbHVUWHJVN1Q4Z2VaalU0aEhjRkd0Q2xYVU03YXVkYWRLd01hVUdkcTFVRHdDRS9xakJIZyszU0dBc0VJMzQ4Y2F4WHpUVnhIZDR3bDA1V3NWS2RlVE9nRWZJcWJzSWUzYkFEZlVhN0ZFQzhzZzhoNElqS1BTb25pT09Dc0hrd1hWczQrbXZIUm55NmlzY2tlaGNGYnNnUUNtSkxoOEQ1azJDVC9xS0FZbFhxblc1cXI5Q3dHMExGSFdZYll4SmdPaW1md2UvMDQ2R3J1WVNHYnpnUzdleEt6WlROdHJpRXVoWExkZTA3QjFreVY4NzQ5dlRKdWhIWHRxVWtmRUw0VWJHbm1OQnZOTXZDWGpZUE56NmNnR1FwQlpoY2ZPOHordFBnb0JJTVlXWWx6amtJSWhUQmNhV2xqbVBqZWJWM0ZScFlTMXJLNHlseStpOGxxRE5ZZkZVTkhwczgzUmcxd0MxeDVya2l0Tlg4cDRBTjdZRW1vSHFVeFF4WVdOazE3d0dNUHd2cjF1andqSmN2U2xNaHJZRm9CRVRxcWhBWDhVZWFJZUI4ZHRBVklXNWZnc3pDZzRhR080L0o2enl1RG9YeUQyTjlBS2RhSVIxc2VITXo0eWg4RWd0Ri8yYTZ5V3RJRDZ6T3YyeG94cHFnTndNSXdYNVVOKzBOcTBneG9nNUFZajJoZ083a3RVTEpnTFM4QUlSWUdFTW4rSGNnLzJJSGNSUjNORi9WWHpjYWdGakd6ektoejdKdkpiUU1JVzNGZEtPcjBNYnVXYTRMNW5QbVpHcGlSaDZneGRVN1lkckNtTk90ejlKSzRFU2Y4SlpHL2dLS0kxTkFOVW9FVVFXamFtSjY4RnFGUXhSbEV3OWc5cXF3SGNRRUxNZTRNWUxWcUwzc0pwbDlaQjdtREFYUHdmaURHd25iZGd3UmRaQnMwcitBN2M0MWluMUphb2NhR1cvMTE2eWxTNExoTVRZb2MrOGIrZXI0NmlrYWhqbnVmUUI1Tk84WTJqMU9sUURRZkptdFZaYklTWWpXbTZJekdsSTlYd3JocTdkY29uOS9YQ0hKYTlyWDJRaUYwcjQzSWNZa0FVMjdsWDdrOURWekttMktzallnU3piSmczZklwckU4K3hNV0JNeEdadmtVVGN6QUx4cjlDVW9QbWVaWTBkVEwrY3JuUm1zVEF2TkF6cTROcmhNTHNsNEF5UGFCVENlM3F2aHR0b21ISVdLZWswNjMzZkhRTHdDRWJRSmxVOWs1cnF6YWsrMmcxMi9QTy9OOVF1Z2N3RVVtYm5PdHB4MGI5a2JiT3lMTkZXNGJCWE5WRExjeTBhcU9EY0tlcDAwRFRWeDd5akVpRzd0VENpWXRMRnJkZ3VuWHY0UUhVVHpOU1VsWXdrbDRDaythTWlpNnBwWjdadnFtSVRSREEvR05rTWJRQ3drQktDTTMyRjZKN056WFEvRnViWHFsNmR2b2hyUVhIVlBVd0NpSmN4eklOcG0rbTdwUXR5U3BseWZEYmxsVmxXRjBjeE5qcGt4YmJXOFFHeHVlWERkVGI4WmpkMmpsRXp1Q3U1dTIwZ2FoTWgwUTc3Z3dDT0NjMFVlbUFUVlBWM1FyVEhGR3ZXT0R2Q3dOdFZnbVg5VTRpRFVUSVMxWFBZNnFYa1NicFRnM1A1UTNKanJqSFhLQnpVbFBUN1N4N0d0R3cxODJ0WUNvWktCUmc5aVMweEZuM1lub0I0V0NuNms1TFMwTnJVUkZvUU1PZ2JSTzVEZ0ltdFhrT0pxUG9NeVFqNklCZ0lqUlBzV2dGUmN5c2FiZlJ3TG1waVlRRWhTYzY5ZUFySmtxY2dObmlld1VPVWFIUnY4N2pyVUJWWUsyWmNuOWpQaTREbXN3WW96VHpuaVlLcWxMV0xTcmlUUEhqOTd3TUJkc3htQTdJdmtZYXJUSVBPTTVnc2E4Z1FDRWRHczNicEE4TUZ3YVNwUjlHYzIrd3lrU2ppd01pMXJEMTVwSXB1YTFZS1k2M2VoYkd5T0Q2NGlxS2FwczZVMXkvMHhwVkxIRXlYRHZTR2hXOFpwMmJjOHAxWFljQVF3M2M2Q0tpOGhyOUd1N2U2cFI3ZzNUcmZjMjhjZTZuMzV5Q0lXVUN4QzMwN0hmZWwrOURDd1FQWklvM3Z4TnF0d3Y2eEg5UTlFUEJLeHZkaDdIcEM2NWFKNE5jY2dtcEpJU1dtZTZ6bWxNVDJsL3JCUE5rUUtsUmJPTGxUZ3lHSlZGL0xwSFAzY05lQnFUOUhUUk51UVFJbFhlcEVxYjhoeGlzbkNmd3dDMS9rUG1yYXB1VEh0b2xWR2V1cytZVHdWZTZaVm9ySXBPUHcxUVZwcjZOWkJuVm5HcXREcTJjWlJXVHFTbU1tSzIzSXRValZGWjVlUzNEM1pqWDNIa3Zva3RWWEtabDRSWVNTUFRMamJtdERFWXlzOXFDd0xVSVhPUjVOc3pzWG0zU1dwU3JDd2t3aFNzdXVqaHdsTGQ3ZXFaOUZ3VVpRSzZUTVJvalB6R1NqV1kwR1RFUi9MVUVjajNHaTYzSmRNMTE0aEJ5eStkZlFEbmtuTjZxa2EwRlFRZUxULzFMcUdORU4rc1JPUnNsYUJTakRseDMxM2YwUzVEbVFoc2JxbVh3Y0QzS3hyUm9XZzdXc05GUS96M0loT09ZZWE1MFFVSCs1SHFvUE80aWlxM2docWMvSHlBbXJDM3d1YUhaOGxveUxEVVZjYWY1bVFnR1hhRG83Y3dQUDhwS1p6K1JNUkVuUXptSHZvVEhIY01ZU0YrbStXaHpscFc3c04wdXd5cjFERnBuMGd6Rjh6c3haZXU5dkszZmJuSjV0OUNpSFQ3RGpmeGtiMVhKdkd1aVZMUkVqRXhLN3kzT2RwckppYmVQc1NUUURmUHFvOGRQZGN2VHpEbUNRK2dPTXJnUDBTajhuZmpvRUxSNUdEVm56MEpBK1BWa2tpZDg5cnVsNy94K1FDWUg1eHhCYlN3a2pLTDNHUms0akNpZ3YwTDdWQnRNTi9YT00vWnlFUnN5Ym5wQTF6SG9LZzUwV21xRzNOa25vNjNCWGdDdXUxdUcxdnhuSUxOR0NTVXpIZTJ0UG5TTHpBMm11SkRvZWZMTkp3dWZRSG9rSEJ3MElsd0JMbVkzVVRKbCtaakpFSkVEbVcreXJadCsrd2l3Rk9rWWdLUE1sNnpKNm1VQm9EL2lNVVRDMG1RT0FyV0kvWTFudjFIcWdDcG5ENW14RW54bUJDZXhSSlZySFkrQXFlVkFCU0wzQTFTcHloeUVHNkNKcTRPWVA5Qm5oZ0lnUzlLQ01Dd3owRlMybUR3d0dmNjZSZFBJV3dvUkp4YnlIV3NPYUFvaFl0b0o1VXJWZk0vT09HS1lXR1FVdmJpVWo5U21pUytYZ1RGU0FLVHN2ZHZpc3pITEJMYldraXVjZlR4WVpHY1lveXBJSEZnRzBuSGFXaVJPWW81M01ySEJqTnVkRS9Ib0crMFNmeHhhbkFiVm5ZYlg3akpIZDltQ2tmUHcwSklIUTV5OVo1RnpqVG0weldKeU5sSWlhdmcweXpVTmlaNWNyV25ZdER5Y0JrWkFNNllEMld2WHRYTWJUczVNNjNEd1hqUW5kejgvaFVxKzRwZGFiSnptWnR5N2daR1FkL1JybkkxaUtWTThxL0ZXNVBwSTZTUHUrbWE1VHg3UGN4MnV3MnpzRzJQQkl1eHFsZGhaOEFZN1VpV0F1NE0rTWxiUzIxM1k0dUQzeW10K2hETUgrMVEwdkZ4elNZdENkTkwzejFvQzFCYlY4S2NkU2Uxc0xOZnFwL3ZqREM0aldFOXdMZW5vOFU3QXVhajFQVkloYUJxeWI2Y0Ewa0ZmRHVodHlobWgzQm1xL1h5cUJRQjBhcy9mbEpBK0IzQVdDR21vY1Y0U0lGNzhxQzZwUW9hL0krU2hLZzlPNmdyS25zNW5mSHFWRnE4MWJFanI3ZFh4UXFZMDNHWGhJbmhlYVVvM1I2RU52RG9XOVlVYmV6RFlMSXkrS0tVWkY2WXFGNzN6b0RWelJFZnpKOU94MkhvdVZGYVVINDRMZlNOc1k3dXNxVEsyUzR2b0FycWQ3cENZUzNvNENOUHZOTklrZmdHZTlRTTk4aDhpOGk5V1dDMG9vL0dZTUo4QUxhbExzRXlMdzNQT01zam5OVVppMkZkTXZkNkJLRENWbURGYWU0UzhCdndTbFRsRmRrT1B5clBkaVV2K2ZEN2w4VEdJKzlSU2hBNE5Ddjk3R014OXlOVDNFTm0rUkdXd3JDUzBOYkFqYUN0RUQxdStaRDRlTXVRaGZ1MDN1Rko5V3lEWWVsbzhVa0xPdERFWGx3MkNQTXh3N0lscHBXS1dud01GYkZpTlg1dUpkczQ3MmpmZVN0eHFNOTNKZ2JCa0lERGFBdGpjK1JJZWppNmVCWDdET1lvUE5BNzBvRUZYYXUxQzNIbWFTRzZtd1dmMWppUERxblVlN3orWXZtdm8yaERKdmt3MTIxai9lSGJFVWxBeUlCa0RyNDJtL2JiYXpveVUvNnNvOVZhcWxYdDdxOXpiWWZyTHdFc0tEcGpSekU3QXZDR2hqWEErWDlRVnFaUUV0VDNZeURvdnBmcDYrZ1dPNzBJMXJtdUE2Wi9HdFJGUldmZUlIY3k3aHQ4VzFpQ204UmxvcS9SN2hqTWRrbk5kQ1hpbExic0Y0NXdNYlk3SEVUYTNpaDY1ZHlzS2VwUDk5V3ZtM3l3NERPYmdIZzQrWFRVaDN0eXpvQ2ZrVXdmc2NVdUc3bUVuZld6YWtSaExOSHNQMml4dFdHNkd6MlJRQ2lucVdEL0pIWlRsVmFrNGxodk1DQ0F6RTNGeldBdU5iS1d1UDBUa0o4bU9tSVpZemgwS08zTHptNk5GKzR2U2t2M21EZEZUV1R3SVArL1Z1YWxwVk5CSHFBeWRaZTYxa1Q3YW9jd1pEREx3V3BSTGdvT2c4d0NhTUtSckJTSkNGWDUvZnpIQitkMWVrL1BwS1B5UnBsQVNlakV4WTY3ZnY0dkxUSTBDVENEa1AyVEsvcDRheXMrZnJFNUxxa1hOM3N3Si9FQnpMZnp0V1cxc3FNaUhxYWpENUNYQkJKRUpQKzI2L2RDNHh0Z3lMd1FnNW0yYkh3b3FIclhnRlNLeWM4Q1Y0cWZuSDlEZ3V0ZkgwTyt1dHpReGVrSWhVMzd1TVc3WTdZK1BENWhnalJMd3RQenVOMUYxM0pHRVlJWExBQlBiSHNLWlNlYkR4dWhhMWRFS2o5Z3dtTnh6akJIY0JKTmRSVUtraFNDY0JKYVVMS0ZXQzErZmdaZm83VEkvYi9mbU0zWHZ0R2xBNEgxdTBtODljMzV4akt6S1RhWDJJRXBvMFFhUkcyMkJSaThvZEJJekNnaDgwLzRaYjlHQm1JeFg0Y08rNGJ0R0tESHBWU0I0bGNtWFRJTlI0R3huS2xDODU1SC9JZ3VPbHFNRzhFUy9KOS9PcFRmcjA4amZUZitCTmVwa2dJZUZ2R2wxWFJBUmF5YmVnNUdlSUNFY3ozQlprVmJLN2F4allTWXNaQXYvdW5nUHZRdnNNbVdIUmJFL1A2c0lOSlEwZm9KMXdKRGRNREFYeEVIdkVRUGlVWERkNG5ka3UrTkpNQTRuTWg0RlpycEkyaFRWWDVzVjJXL1VJY3VING04QVBhcHg0cnBUd0NBS2N6dEEyN2EzOHhqN1FnVFZJUktiODd5bFA1SzgwSi9PK1VuckdzN1ZJUjNCbnNjVlhmM1FrTXNHOERkMmxuYytBdTQxb0tIVDVuNmdVVEI3UGgrTVU1UDV5dUpsVmpSR2lvc3hDcGZWellJNWY2eUFReENBdlp1eG1FWGRJM3RwdEFXNWFHSUtTV1k1cVdGUEZJczJEN25FWVA1bVFKUzZ5OFF6VHpNWmt0TFVZNmg4b0pTcGk4am5VcmxFWkdvSUFnanBJN29MbEF5cGtuNGd5R1EyOUNqS0I0QTFQc3JGUVRPUis1YkxNWndjaDR3aWY2UlA3OXRhc3RGRGJtQ3VSaElUc2lwQVVUM1JpajdDV0pDaGFMS3ptNk55YjhsQWZLUG9CakVDR21xMm9TTFk0MEdtS1VxaUJ0UDkrN0lJVVVZSUkzYzltY1B5cTBuM2l0UVNOZVA3eGNEbE42Qmx2UHhmVldlNjVXdWZoTHNIT1BIWkMrV1BnWWhCUUJhR3Q2T2V0dldZQXZjdFN3Ym5iUW9LWkpSTmVUQmVMbW9oOHZwSHdBODV4TUgwdUgxWENEdHZMOXdBcXk5S2hFWGVEL1BSNjk2VS9RRjQwNjBsWU5nMEpRNXkzL0w5c2prUkt0NlRzbzlVUHYwQ255YUYxVFFYMjl1NGNrNVZmbjg3TjhBZEloeEM0UWtzRW9lNUg5Zmw5S01sMFh1UlN6VVMxak56UWkxb05Hd0RwR1RPWVJSRGxrdlVaTFIwZnhieVhLUGVoQk9wY3Fkd1FTbGVvQWRCb3FhL3l0QlIreWx4T1ZBVmdic0F6TEhsak5uWVdPTnRTZ2FaNmRtaVc5anBGb0lTcU1aai9TaGZEUDJNL1ZzbHF2bEhZU1ZTQ05ydnVQcDZRUFNlMWlrRnIzaXJpYzh4ckhNY2RlT2pyY09PZ2UraTFKVEQ2YkpEdkExUGdwQmtCZ3lNakNraWloL3hrdmROOWQxaDRhWm1uay9OTXVUVFJQT0cyWU5nSm1UQTFFZFVQS2hjWEFDaVZSbmlzdDlNZDBFcGkxTHNBS0V6RHJZN2cyK2tvQzMxblJnYjhsQXQ3ZGQybThkYzBtdzhSZVpVK1liT2ZJSWhmZUYwRkgxS01tK0psMzk5cXNudmFRNS8vVzFJcG5MbjNUNnBTMGNWR3lBSk5XZ2thZ2pDYzhubjBKUnN2cG5LZi8rN0FsTmU1TC8rQ1BrUkNmZnFrb0ZsRmlLUFNJRm9NUUlMNHQ2SDJGVHgrWkRoSW9IK05qaUIxODNJQ0hxQTVvbFVCNXY4T0N1ZTRId2V6OVNRcmFNSC9wZ3lXR29ZUjVzVEt6WG5zVVVDaUc4NlplOGJ5ckZiZmdqQXRmQThLVG84SG5HWTVRRW9kRHlqRE9tTHdKUkJpd3dOYjc1bHczNTNaWjFpeG5sQTYyTi9SSkFRUVVCdE1jWEVHTGxOYU5SbWQ4UG9QNkV1V2ZHTDhKRnhqRjlMa2FvKzAraEU2MWNGZDJWN2poTjhpeVowRzRtZUtHMjA4eDhFQnlMNktIQWxiVml1UVV0Wmc0b3R5b2crOGNhUWFsUHYxNGcvdFh2TVQxTWxSVG0wTGpKbVFrSUh4NU1OTVFPT2Z1ZmpsOThiMXpNSlJxZTNQUHJxb2R4UEsxVTlGN1JGdmlDWjBtRGY1cWVnSmQ1Q0JvV0xCS3Z5b09jRUgvcW84WnVuWUpzd3NxdHpHeS8zVkpwSFIxbTNtTC9ObHlTemRWOXdzV1hidFJhb1lUcjZncWxUUE42ZG5JT1dLcXMrYWM0bWxrL0YvTEd5dEprUmp0ZU1lQWlJLzJqMmhqR0MyQTlzbFFuQ1FpMGRNdGtqeERLNGwxbEt6WW9VNkJQU0xhWjNVMHZIOGFpSVNSc25DM3JCTjFweERWenIwQ3RLOGZvU2hFWVRkTXlhUWE0SGtVOE1kaUdKRmQ1NllBaTRXQnRLbHBXN2o2WlhvaWhWbEN0K00rRWxjVFh3SDk5TjhtVDJ0b0gzMzUwMWJudTljaEJ3OHVWYkhtdkt0Nm55OFlHQU94SDU4NWt2T1NKUnZiNUJRdm9tS3ZveHNzaUhtZnoyZmNqSGhQbCtKNm9kaGFMOE1JcXdtRnlnYWZPaFlnK1I3MGpKK1cyRy9QNHRPLzUzRlJrVDd4L3BNbEFzbHYvKzd5S2YrNUkvL3B6SjJOWGwyaWpVRW1tSnlHU1BoQUowK1JTNWhzU1lISWw3OGp5eWpPeDFpWHc4VkZhRTZQTHk4Rnpocno2ZWQ5K2J5a09JSHFVMnhWS3dvbW5SV0xZMGhHMDc0ald2L1RwbXppbG16TzEvUElaY3p5MGV0M2F4Wk4zOVNLeG9tdjlZSVVrR3FuMVYweURZeFBJcTEybG1zSTU0cmcwaTBxVXI1NmJ5T0JjK0F1VEVNckpkU082YUFCbGM1T2dUQXA2cW5rRXZTTTkzRjFlVHdLTFk0UVVUMUdJL3NFWThwSWpLN3BwVW5YT0dub2wzQVlYYTVic2YzR0crVFlqQ0tHR1RUZElOWkFMQ2FUS212ZWE2Ynl2dFBaZ0dSU0pzeXJnSVNiY0tVaXZSN0FBNmlLOGkzZHZMcW5renl6YmdGdnlSQTNkQzNYWXdEZ2pXbGo1ZTc1SWhpU1lKL0NqZmRJM0FqdnBjU1lxcVpOYmRwNEhqTnNhY0NHUW0ycFNXcnlVK2NDeGt2S2dhbWFaR3I5ZllZYlJrcjhXTTN1QndUR0crOTNaUEZ3bE51NzBtdjZLME5Gb0VCZHZUZngxNkZKTGhzT0llQ0RDV0tEb2ZIYjB3MzYwVjhDcUhFSEhMallLOFdtUmMxTmx2eDlLaERrNGV3bU5ZTmRDVUxrRElYRlJVMkxybGdPYUQya1o3L3h1VG5mT09acmtlNzZFbUIycGlNOTN4SFFiNHN3UjRINFFiQ1FvZEl2TC9BYmVaVlJjdkhzVmxBQUFBQUVsRlRrU3VRbUND"},{ name : "__ASSET__:bitmap_PictureMini", data : ""}];
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = Math.ceil(i * 257.00392156862745);
}
var this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_utils_Log.level = 3;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
lime_utils_Log.throwErrors = true;
if(typeof(window) != "undefined") {
	openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas = window.document.createElement("canvas");
	openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas.getContext("2d");
}
haxe_ds_ObjectMap.count = 0;
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__tempStack = new lime_utils_ObjectPool(function() {
	return openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
},function(stack) {
	stack.data.set_length(0);
});
openfl_display_BitmapData.__bufferStride = 26;
openfl_display_BitmapData.__tempVector = new lime_math_Vector2();
Picture.resourceType = "image/png";
Picture.resourceName = "__ASSET__:bitmap_Picture";
PictureMini.resourceType = "image/png";
PictureMini.resourceName = "__ASSET__:bitmap_PictureMini";
com_nodename_delaunay_Edge._pool = [];
com_nodename_delaunay_Edge._nedges = 0;
com_nodename_delaunay_Edge.DELETED = new com_nodename_delaunay_Edge();
com_nodename_delaunay_Halfedge._pool = [];
com_nodename_delaunay_Node.pool = [];
com_nodename_delaunay_LR.LEFT = new com_nodename_delaunay_LR("left");
com_nodename_delaunay_LR.RIGHT = new com_nodename_delaunay_LR("right");
com_nodename_delaunay_Site._pool = [];
com_nodename_delaunay_Site.EPSILON = .005;
com_nodename_delaunay_BoundsCheck.TOP = 1;
com_nodename_delaunay_BoundsCheck.BOTTOM = 2;
com_nodename_delaunay_BoundsCheck.LEFT = 4;
com_nodename_delaunay_BoundsCheck.RIGHT = 8;
com_nodename_delaunay_Vertex.VERTEX_AT_INFINITY = new com_nodename_delaunay_Vertex(NaN,NaN);
com_nodename_delaunay_Vertex._pool = [];
com_nodename_delaunay_Vertex._nvertices = 0;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime__$backend_html5_HTML5HTTPRequest.activeRequests = 0;
lime__$backend_html5_HTML5HTTPRequest.requestLimit = 4;
lime__$backend_html5_HTML5HTTPRequest.requestQueue = new List();
lime__$backend_html5_HTML5Window.dummyCharacter = "";
lime__$backend_html5_HTML5Window.windowID = 0;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_system_Clipboard.onUpdate = new lime_app__$Event_$Void_$Void();
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui_Touch.onCancel = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.libraryPaths = new haxe_ds_StringMap();
lime_utils_Log.throwErrors = true;
openfl__$internal_TouchData.__pool = new lime_utils_ObjectPool(function() {
	return new openfl__$internal_TouchData();
},function(data) {
	data.reset();
});
openfl__$internal_renderer_DrawCommandBuffer.empty = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasRenderer.scale = 1;
openfl__$internal_renderer_dom_DOMTextField.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFont = new EReg("<font ([^>]+)>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont = new EReg("</font>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_renderer_opengl_GLMaskManager.maskShader = new openfl__$internal_renderer_opengl_GLMaskShader();
openfl__$internal_stage3D_GLUtils.debug = false;
openfl__$internal_swf_SWFLite.instances = new haxe_ds_StringMap();
openfl__$internal_text_HTMLParser.__regexAlign = new EReg("align=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexBreakTag = new EReg("<br\\s*/?>","gi");
openfl__$internal_text_HTMLParser.__regexBlockIndent = new EReg("blockindent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexEntities = [new EReg("&quot;","g"),new EReg("&apos;","g"),new EReg("&amp;","g"),new EReg("&lt;","g"),new EReg("&gt;","g"),new EReg("&nbsp;","g")];
openfl__$internal_text_HTMLParser.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexHTMLTag = new EReg("<.*?>","g");
openfl__$internal_text_HTMLParser.__regexHref = new EReg("href=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexIndent = new EReg(" indent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexLeading = new EReg("leading=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexLeftMargin = new EReg("leftmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexRightMargin = new EReg("rightmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_HTMLParser.__regexTabStops = new EReg("tabstops=(\"([^\"]+)\"|'([^']+)')","i");
openfl_display_LoaderInfo.__rootURL = typeof(window) != "undefined" ? window.document.URL : "";
openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 0;
openfl_display3D_Context3D.DEPTH_STENCIL = 0;
openfl_display3D_Context3D.__stateCache = new openfl__$internal_stage3D_Context3DStateCache();
openfl_display3D_textures_Texture.__lowMemoryMode = false;
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RELEASE_OUTSIDE = "releaseOutside";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Matrix();
},function(m) {
	m.identity();
});
openfl_geom_Point.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Point();
},function(p) {
	p.setTo(0,0);
});
openfl_geom_Rectangle.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Rectangle();
},function(r) {
	r.setTo(0,0,0,0);
});
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_net_URLRequestDefaults.followRedirects = true;
openfl_net_URLRequestDefaults.idleTimeout = 0;
openfl_net_URLRequestDefaults.manageCookies = false;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_text_Font.__fontByName = new haxe_ds_StringMap();
openfl_text_Font.__registeredFonts = [];
openfl_text_TextField.__missingFontWarning = new haxe_ds_StringMap();
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_Mouse.__cursor = "auto";
openfl_utils_Assets.cache = new openfl_utils_AssetCache();
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
